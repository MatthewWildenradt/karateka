
usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000230

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x00012c4c memsz 0x00012c4c flags r-x
    LOAD off    0x00013c6c vaddr 0x04012c6c paddr 0x04014798 align 2**12
         filesz 0x00001b2c memsz 0x00001b2c flags rw-
    LOAD off    0x000162c4 vaddr 0x040162c4 paddr 0x040162c4 align 2**12
         filesz 0x00000000 memsz 0x000002e8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000124f0  04000230  04000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000054c  04012720  04012720  00013720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b2c  04012c6c  04014798  00013c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e8  040162c4  040162c4  000162c4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  040165ac  040165ac  00015798  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00015798  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000fc8  00000000  00000000  000157c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002659a  00000000  00000000  00016788  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009b86  00000000  00000000  0003cd22  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c204  00000000  00000000  000468a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002858  00000000  00000000  00052aac  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000427a  00000000  00000000  00055304  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017b11  00000000  00000000  0005957e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00071090  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001930  00000000  00000000  000710d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00076272  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00076275  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00076281  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00076282  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00076283  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00076287  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0007628b  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0007628f  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0007629a  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000762a5  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000009  00000000  00000000  000762b0  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001d  00000000  00000000  000762b9  2**0
                  CONTENTS, READONLY
 29 .jdi          00005017  00000000  00000000  000762d6  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0007c1ec  00000000  00000000  0007b2ed  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000230 l    d  .text	00000000 .text
04012720 l    d  .rodata	00000000 .rodata
04012c6c l    d  .rwdata	00000000 .rwdata
040162c4 l    d  .bss	00000000 .bss
040165ac l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
04000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
04014748 l     O .rwdata	00000001 addr
00000000 l    df *ABS*	00000000 HID.c
00000000 l    df *ABS*	00000000 MAX3421E.c
00000000 l    df *ABS*	00000000 transfer.c
040162d4 l     O .bss	00000004 usb_delay.2608
040162d8 l     O .bss	00000001 tmp_addr.2609
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
040129b2 l     O .rodata	00000010 zeroes.4404
040051f8 l     F .text	000000bc __sbprintf
040129c2 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
04005408 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04006f60 l     F .text	00000008 __fp_unlock
04006f74 l     F .text	0000019c __sinit.part.1
04007110 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
04012c9c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
040130e0 l     O .rwdata	00000020 lc_ctype_charset
040130c0 l     O .rwdata	00000020 lc_message_charset
04013100 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
040129f4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0400a74c l     F .text	000000fc __sprint_r.part.0
04012b18 l     O .rodata	00000010 zeroes.4349
0400bd88 l     F .text	000000bc __sbprintf
04012b28 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0400fbf4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0400fd08 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0400fd34 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0400fe28 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0400ff10 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0400fffc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
040101d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04014788 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
04010620 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0401075c l     F .text	00000034 alt_dev_reg
040136e8 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04010a54 l     F .text	0000020c altera_avalon_jtag_uart_irq
04010c60 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04011494 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0401182c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04011c8c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
04011dec l     F .text	0000003c alt_get_errno
04011e28 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
04016310 g     O .bss	00000004 alt_instruction_exception_handler
04002d7c g     F .text	00000018 putchar
04009c28 g     F .text	00000074 _mprec_log10
04009d14 g     F .text	0000008c __any_on
0400c494 g     F .text	00000054 _isatty_r
04012a00 g     O .rodata	00000028 __mprec_tinytens
04010114 g     F .text	0000007c alt_main
0401474c g     O .rwdata	00000008 ctrl_xfers
04002d94 g     F .text	000000c0 _puts_r
040164ac g     O .bss	00000100 alt_irq
0400c4e8 g     F .text	00000060 _lseek_r
040022e0 g     F .text	00000644 USB_Task
04014798 g       *ABS*	00000000 __flash_rwdata_start
0400e5cc g     F .text	00000088 .hidden __eqdf2
040165ac g       *ABS*	00000000 __alt_heap_start
04002d38 g     F .text	0000003c printf
0400c5a8 g     F .text	0000009c _wcrtomb_r
040013d4 g     F .text	00000088 kbdPoll
0400a60c g     F .text	0000005c __sseek
040072c0 g     F .text	00000010 __sinit
0400be44 g     F .text	00000140 __swbuf_r
04007d94 g     F .text	0000007c _setlocale_r
04007118 g     F .text	00000078 __sfmoreglue
040101b4 g     F .text	00000024 __malloc_unlock
0400026c g     F .text	000001f0 GetDriverandReport
04008a64 g     F .text	0000015c memmove
040072a8 g     F .text	00000018 _cleanup
04008ce8 g     F .text	000000a8 _Balloc
04001528 g     F .text	00000090 MAXreg_wr
04012c6c g     O .rwdata	00000030 ClientDriverTable
0400e654 g     F .text	000000dc .hidden __gtdf2
04012070 g     F .text	00000024 altera_nios2_gen2_irq_init
04002924 g     F .text	0000002c MSDProbe
04000000 g     F .entry	0000000c __reset
04001de0 g     F .text	000000e8 XferCtrlData
04000020 g       *ABS*	00000000 __flash_exceptions_start
04016314 g     O .bss	00000010 hid_ep
0400c438 g     F .text	0000005c _fstat_r
040162f4 g     O .bss	00000004 errno
0400a588 g     F .text	00000008 __seofread
040162fc g     O .bss	00000004 alt_argv
0401c748 g       *ABS*	00000000 _gp
040105f0 g     F .text	00000030 usleep
0400172c g     F .text	00000080 MAXreg_rd
04013568 g     O .rwdata	00000180 alt_fd_list
0400130c g     F .text	00000040 HID_init
04002d74 g     F .text	00000008 _putchar_r
04012094 g     F .text	00000090 alt_find_dev
0400891c g     F .text	00000148 memcpy
04006f68 g     F .text	0000000c _cleanup_r
0400fa0c g     F .text	000000dc .hidden __floatsidf
04011d70 g     F .text	0000007c alt_io_redirect
0400e730 g     F .text	000000f4 .hidden __ltdf2
04012720 g       *ABS*	00000000 __DTOR_END__
04002e54 g     F .text	00000014 puts
040122f0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0400a46c g     F .text	00000074 __fpclassifyd
04009b84 g     F .text	000000a4 __ratio
0400bd6c g     F .text	0000001c __vfiprintf_internal
04010e58 g     F .text	0000021c altera_avalon_jtag_uart_read
04002d08 g     F .text	00000030 _printf_r
04002c24 g     F .text	00000064 .hidden __udivsi3
0400fe64 g     F .text	000000ac isatty
04012a50 g     O .rodata	000000c8 __mprec_tens
04007e10 g     F .text	0000000c __locale_charset
040162f0 g     O .bss	00000004 __malloc_top_pad
04014754 g     O .rwdata	00000001 usb_task_state
04014760 g     O .rwdata	00000004 __mb_cur_max
04007e40 g     F .text	0000000c _localeconv_r
0400911c g     F .text	0000003c __i2b
04007744 g     F .text	000004c8 __sfvwrite_r
0400a4e0 g     F .text	00000054 _sbrk_r
0400c548 g     F .text	00000060 _read_r
04001a94 g     F .text	00000094 MAX3421E_init
04000758 g     F .text	00000038 setKeycode
04014780 g     O .rwdata	00000004 alt_max_fd
0400c12c g     F .text	000000f0 _fclose_r
04006f30 g     F .text	00000030 fflush
040162ec g     O .bss	00000004 __malloc_max_sbrked_mem
0400d350 g     F .text	000008ac .hidden __adddf3
0400992c g     F .text	0000010c __b2d
0400cd8c g     F .text	000005c4 .hidden __umoddi3
04010038 g     F .text	000000dc lseek
04014758 g     O .rwdata	00000004 _global_impure_ptr
04009f08 g     F .text	00000564 _realloc_r
040165ac g       *ABS*	00000000 __bss_end
04011b9c g     F .text	000000f0 alt_iic_isr_register
040104e8 g     F .text	00000108 alt_tick
0400c790 g     F .text	000005fc .hidden __udivdi3
0400c394 g     F .text	00000024 _fputwc_r
04012a28 g     O .rodata	00000028 __mprec_bigtens
04008f00 g     F .text	00000104 __s2b
0400fae8 g     F .text	000000a8 .hidden __floatunsidf
0400966c g     F .text	00000060 __mcmp
040072e0 g     F .text	00000018 __fp_lock_all
04011b50 g     F .text	0000004c alt_ic_irq_enabled
0401044c g     F .text	0000009c alt_alarm_stop
0401630c g     O .bss	00000004 alt_irq_active
040029ec g     F .text	0000002c DummyProbe
040000fc g     F .exceptions	000000d4 alt_irq_handler
04013540 g     O .rwdata	00000028 alt_dev_null
0400134c g     F .text	00000088 mousePoll
040018e8 g     F .text	00000024 Vbus_power
0401180c g     F .text	00000020 alt_dcache_flush_all
04009004 g     F .text	00000068 __hi0bits
0400f98c g     F .text	00000080 .hidden __fixdfsi
04014798 g       *ABS*	00000000 __ram_rwdata_end
04014778 g     O .rwdata	00000008 alt_dev_list
0401065c g     F .text	00000100 write
04009da0 g     F .text	000000a0 _putc_r
04012c6c g       *ABS*	00000000 __ram_rodata_end
040162d9 g     O .bss	00000001 usb_error
0400fd70 g     F .text	000000b8 fstat
0400e730 g     F .text	000000f4 .hidden __ledf2
040093e4 g     F .text	00000140 __pow5mult
0400a860 g     F .text	0000150c ___vfiprintf_internal_r
040162e4 g     O .bss	00000004 __nlocale_changed
04002c88 g     F .text	00000058 .hidden __umodsi3
040165ac g       *ABS*	00000000 end
04010994 g     F .text	000000c0 altera_avalon_jtag_uart_init
040001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
04001f3c g     F .text	0000017c XferDispatchPkt
04012720 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0401150c g     F .text	0000007c alt_avalon_timer_sc_init
0400fb90 g     F .text	00000064 .hidden __clzsi2
04011074 g     F .text	00000224 altera_avalon_jtag_uart_write
040072d0 g     F .text	00000004 __sfp_lock_acquire
04008838 g     F .text	000000e4 memchr
04002f00 g     F .text	000022dc ___vfprintf_internal_r
04001c60 g     F .text	00000034 MaxGpxHandler
04007434 g     F .text	00000310 _free_r
04007e1c g     F .text	00000010 __locale_mb_cur_max
0401256c g     F .text	00000180 __call_exitprocs
040162e0 g     O .bss	00000004 __mlocale_changed
04014764 g     O .rwdata	00000004 __malloc_sbrk_base
04000230 g     F .text	0000003c _start
04016304 g     O .bss	00000004 _alt_tick_rate
040017ac g     F .text	00000094 MAXbytes_rd
04009524 g     F .text	00000148 __lshift
04011298 g     F .text	000001fc alt_avalon_spi_command
04016308 g     O .bss	00000004 _alt_nticks
04010214 g     F .text	00000104 read
040107c8 g     F .text	00000068 alt_sys_init
04016464 g     O .bss	00000048 devtable
04012454 g     F .text	00000118 __register_exitproc
04000f04 g     F .text	00000408 HIDKProbe
04016324 g     O .bss	00000018 msd_ep
04009158 g     F .text	0000028c __multiply
04010d00 g     F .text	00000068 altera_avalon_jtag_uart_close
04002248 g     F .text	00000098 USB_init
04002ce0 g     F .text	00000028 .hidden __mulsi3
04016364 g     O .bss	00000100 bigbuf
04012c6c g       *ABS*	00000000 __ram_rwdata_start
04012720 g       *ABS*	00000000 __ram_rodata_start
0401633c g     O .bss	00000028 __malloc_current_mallinfo
040162d0 g     O .bss	00000001 last_usb_task_state
04009a38 g     F .text	0000014c __d2b
040162c8 g     O .bss	00000008 dev0ep
040004a8 g     F .text	00000050 clearLED
04010830 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0401222c g     F .text	000000c4 alt_get_fd
040116b4 g     F .text	00000158 alt_busy_sleep
04002950 g     F .text	00000038 MSDEventHandler
0400bffc g     F .text	00000054 _close_r
040123d8 g     F .text	0000007c memcmp
040108f0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
040165ac g       *ABS*	00000000 __alt_stack_base
04010940 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
040052b4 g     F .text	00000154 __swsetup_r
0400dbfc g     F .text	000009d0 .hidden __divdf3
04007190 g     F .text	00000118 __sfp
04009c9c g     F .text	00000078 __copybits
04013138 g     O .rwdata	00000408 __malloc_av_
040072dc g     F .text	00000004 __sinit_lock_release
040029b4 g     F .text	00000038 CDCEventHandler
0400e824 g     F .text	0000086c .hidden __muldf3
04002a18 g     F .text	00000038 DummyEventHandler
0400a534 g     F .text	00000054 __sread
04012124 g     F .text	00000108 alt_find_file
04011868 g     F .text	000000a4 alt_dev_llist_insert
04010190 g     F .text	00000024 __malloc_lock
0401039c g     F .text	000000b0 sbrk
04006ed4 g     F .text	0000005c _fflush_r
0400c050 g     F .text	000000dc _calloc_r
040162c4 g       *ABS*	00000000 __bss_start
0400190c g     F .text	00000188 MAX_busprobe
040162c4 g     O .bss	00000002 hid_device
04008bc0 g     F .text	00000128 memset
04000790 g     F .text	0000036c main
04001b28 g     F .text	0000006c MAX3421E_Task
04016300 g     O .bss	00000004 alt_envp
040162e8 g     O .bss	00000004 __malloc_max_total_mem
04010890 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0400bf84 g     F .text	00000018 __swbuf
04002aa8 g     F .text	00000084 ConvUTF8ToStr
0400a668 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
0400c21c g     F .text	00000014 fclose
04005630 g     F .text	00001688 _dtoa_r
0400802c g     F .text	0000080c _malloc_r
0400c704 g     F .text	00000030 __ascii_wctomb
04014784 g     O .rwdata	00000004 alt_errno
04007c0c g     F .text	000000c4 _fwalk
04009e40 g     F .text	000000c8 putc
04002b2c g     F .text	00000084 .hidden __divsi3
040020b8 g     F .text	00000190 XferInTransfer
04000618 g     F .text	00000140 printSignedHex1
04007310 g     F .text	00000124 _malloc_trim_r
04012720 g       *ABS*	00000000 __CTOR_END__
04002a70 g     F .text	00000038 GetDevtable
0400a670 g     F .text	000000dc strcmp
04012720 g       *ABS*	00000000 __flash_rodata_start
04012720 g       *ABS*	00000000 __DTOR_LIST__
04001ec8 g     F .text	00000074 XferCtrlND
0400e5cc g     F .text	00000088 .hidden __nedf2
04001840 g     F .text	000000a8 MAX3421E_reset
04010790 g     F .text	00000038 alt_irq_init
04010318 g     F .text	00000084 alt_release_fd
04012b38 g     O .rodata	00000100 .hidden __clz_tab
040162dc g     O .bss	00000004 _PathLocale
0401238c g     F .text	00000014 atexit
0400bf9c g     F .text	00000060 _write_r
04007e4c g     F .text	00000018 setlocale
0401475c g     O .rwdata	00000004 _impure_ptr
040162f8 g     O .bss	00000004 alt_argc
04006cb8 g     F .text	0000021c __sflush_r
0401196c g     F .text	00000060 _do_dtors
04007e38 g     F .text	00000008 __locale_cjk_lang
040015b8 g     F .text	00000174 MAXbytes_wr
04000020 g       .exceptions	00000000 alt_irq_entry
040098c8 g     F .text	00000064 __ulp
040072f8 g     F .text	00000018 __fp_unlock_all
04014770 g     O .rwdata	00000008 alt_fs_list
04002988 g     F .text	0000002c CDCProbe
04000020 g       *ABS*	00000000 __ram_exceptions_start
04007e64 g     F .text	0000000c localeconv
0400045c g     F .text	0000004c setLED
04002a50 g     F .text	00000020 GetUsbTaskState
040119ec g     F .text	00000050 alt_ic_isr_register
0401275c g     O .rodata	00000010 devclasses
04014798 g       *ABS*	00000000 _edata
04001494 g     F .text	00000038 HIDKEventHandler
040165ac g       *ABS*	00000000 _end
04001b94 g     F .text	000000cc MaxIntHandler
0400c230 g     F .text	00000164 __fputwc
04000230 g       *ABS*	00000000 __ram_exceptions_end
04010d68 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
040014cc g     F .text	00000034 SPI_init
04011ac4 g     F .text	0000008c alt_ic_irq_disable
0400a590 g     F .text	0000007c __swrite
04014768 g     O .rwdata	00000004 __malloc_trim_threshold
04007e2c g     F .text	0000000c __locale_msgcharset
040123a0 g     F .text	00000038 exit
04007cd0 g     F .text	000000c4 _fwalk_reent
040096cc g     F .text	000001fc __mdiff
04002bb0 g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
040072d4 g     F .text	00000004 __sfp_lock_release
04000000 g       *ABS*	00000000 __alt_mem_sdram
0400145c g     F .text	00000038 HIDMEventHandler
040126ec g     F .text	00000034 _exit
04011588 g     F .text	0000012c alt_alarm_start
040004f8 g     F .text	00000120 printSignedHex0
04007e70 g     F .text	000001bc __smakebuf_r
04002e68 g     F .text	00000098 strlen
04011f14 g     F .text	0000015c open
0400e654 g     F .text	000000dc .hidden __gedf2
0401476c g     O .rwdata	00000004 __wctomb
0400a848 g     F .text	00000018 __sprint_r
040119cc g     F .text	00000020 alt_icache_flush_all
04014794 g     O .rwdata	00000004 alt_priority_mask
04011a3c g     F .text	00000088 alt_ic_irq_enable
040051dc g     F .text	0000001c __vfprintf_internal
04000afc g     F .text	00000408 HIDMProbe
0400c734 g     F .text	0000005c _wctomb_r
04001500 g     F .text	00000028 SPI_wr
0400f090 g     F .text	000008fc .hidden __subdf3
0400906c g     F .text	000000b0 __lo0bits
0401478c g     O .rwdata	00000008 alt_alarm_list
0401190c g     F .text	00000060 _do_ctors
0400c644 g     F .text	000000c0 wcrtomb
0400fc30 g     F .text	000000d8 close
0400ff78 g     F .text	00000084 alt_load
0400c3b8 g     F .text	00000080 fputwc
040072d8 g     F .text	00000004 __sinit_lock_acquire
04001c94 g     F .text	0000014c XferCtrlReq
04008db8 g     F .text	00000148 __multadd
04008d90 g     F .text	00000028 _Bfree



Disassembly of section .entry:

04000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000004:	08408c14 	ori	at,at,560
    jmp r1
 4000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	00810074 	movhi	r2,1025
 4000140:	10992b04 	addi	r2,r2,25772
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	00810074 	movhi	r2,1025
 4000158:	10992b04 	addi	r2,r2,25772
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	0001883a 	nop
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 40001e4:	00bfffc4 	movi	r2,-1
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 40001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 40001f0:	d0a6f217 	ldw	r2,-25656(gp)
 40001f4:	10000726 	beq	r2,zero,4000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 40001f8:	d0a6f217 	ldw	r2,-25656(gp)
 40001fc:	e0fffd17 	ldw	r3,-12(fp)
 4000200:	e1bffe17 	ldw	r6,-8(fp)
 4000204:	e17fff17 	ldw	r5,-4(fp)
 4000208:	1809883a 	mov	r4,r3
 400020c:	103ee83a 	callr	r2
 4000210:	00000206 	br	400021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 4000218:	0005883a 	mov	r2,zero
}
 400021c:	e037883a 	mov	sp,fp
 4000220:	dfc00117 	ldw	ra,4(sp)
 4000224:	df000017 	ldw	fp,0(sp)
 4000228:	dec00204 	addi	sp,sp,8
 400022c:	f800283a 	ret

Disassembly of section .text:

04000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000230:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4000238:	06810074 	movhi	gp,1025
    ori gp, gp, %lo(_gp)
 400023c:	d6b1d214 	ori	gp,gp,51016
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000240:	00810074 	movhi	r2,1025
    ori r2, r2, %lo(__bss_start)
 4000244:	1098b114 	ori	r2,r2,25284

    movhi r3, %hi(__bss_end)
 4000248:	00c10074 	movhi	r3,1025
    ori r3, r3, %lo(__bss_end)
 400024c:	18d96b14 	ori	r3,r3,26028

    beq r2, r3, 1f
 4000250:	10c00326 	beq	r2,r3,4000260 <_start+0x30>

0:
    stw zero, (r2)
 4000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 400025c:	10fffd36 	bltu	r2,r3,4000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000260:	400ff780 	call	400ff78 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000264:	40101140 	call	4010114 <alt_main>

04000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000268:	003fff06 	br	4000268 <__alt_data_end+0xfc000268>

0400026c <GetDriverandReport>:
extern HID_DEVICE hid_device;

static BYTE addr = 1; 				//hard-wired USB address
const char* const devclasses[] = { " Uninitialized", " HID Keyboard", " HID Mouse", " Mass storage" };

BYTE GetDriverandReport() {
 400026c:	defff604 	addi	sp,sp,-40
 4000270:	dfc00915 	stw	ra,36(sp)
 4000274:	df000815 	stw	fp,32(sp)
 4000278:	df000804 	addi	fp,sp,32
	BYTE i;
	BYTE rcode;
	BYTE device = 0xFF;
 400027c:	00bfffc4 	movi	r2,-1
 4000280:	e0bffd45 	stb	r2,-11(fp)
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
 4000284:	01010074 	movhi	r4,1025
 4000288:	2109db04 	addi	r4,r4,10092
 400028c:	4002e540 	call	4002e54 <puts>
	for (i = 1; i < USB_NUMDEVICES; i++) {
 4000290:	00800044 	movi	r2,1
 4000294:	e0bffd05 	stb	r2,-12(fp)
 4000298:	00001f06 	br	4000318 <GetDriverandReport+0xac>
		tpl_ptr = GetDevtable(i);
 400029c:	e0bffd03 	ldbu	r2,-12(fp)
 40002a0:	1009883a 	mov	r4,r2
 40002a4:	4002a700 	call	4002a70 <GetDevtable>
 40002a8:	e0bffe15 	stw	r2,-8(fp)
		if (tpl_ptr->epinfo != NULL) {
 40002ac:	e0bffe17 	ldw	r2,-8(fp)
 40002b0:	10800017 	ldw	r2,0(r2)
 40002b4:	10001526 	beq	r2,zero,400030c <GetDriverandReport+0xa0>
			printf("Device: %d", i);
 40002b8:	e0bffd03 	ldbu	r2,-12(fp)
 40002bc:	100b883a 	mov	r5,r2
 40002c0:	01010074 	movhi	r4,1025
 40002c4:	2109e404 	addi	r4,r4,10128
 40002c8:	4002d380 	call	4002d38 <printf>
			printf("%s \n", devclasses[tpl_ptr->devclass]);
 40002cc:	e0bffe17 	ldw	r2,-8(fp)
 40002d0:	10800103 	ldbu	r2,4(r2)
 40002d4:	10c03fcc 	andi	r3,r2,255
 40002d8:	00810074 	movhi	r2,1025
 40002dc:	1089d704 	addi	r2,r2,10076
 40002e0:	18c7883a 	add	r3,r3,r3
 40002e4:	18c7883a 	add	r3,r3,r3
 40002e8:	10c5883a 	add	r2,r2,r3
 40002ec:	10800017 	ldw	r2,0(r2)
 40002f0:	100b883a 	mov	r5,r2
 40002f4:	01010074 	movhi	r4,1025
 40002f8:	2109e704 	addi	r4,r4,10140
 40002fc:	4002d380 	call	4002d38 <printf>
			device = tpl_ptr->devclass;
 4000300:	e0bffe17 	ldw	r2,-8(fp)
 4000304:	10800103 	ldbu	r2,4(r2)
 4000308:	e0bffd45 	stb	r2,-11(fp)
	BYTE device = 0xFF;
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
	for (i = 1; i < USB_NUMDEVICES; i++) {
 400030c:	e0bffd03 	ldbu	r2,-12(fp)
 4000310:	10800044 	addi	r2,r2,1
 4000314:	e0bffd05 	stb	r2,-12(fp)
 4000318:	e0bffd03 	ldbu	r2,-12(fp)
 400031c:	10800230 	cmpltui	r2,r2,8
 4000320:	103fde1e 	bne	r2,zero,400029c <__alt_data_end+0xfc00029c>
			printf("%s \n", devclasses[tpl_ptr->devclass]);
			device = tpl_ptr->devclass;
		}
	}
	//Query rate and protocol
	rcode = XferGetIdle(addr, 0, hid_device.interface, 0, &tmpbyte);
 4000324:	d0a00003 	ldbu	r2,-32768(gp)
 4000328:	11003fcc 	andi	r4,r2,255
 400032c:	d0a6df43 	ldbu	r2,-25731(gp)
 4000330:	10803fcc 	andi	r2,r2,255
 4000334:	e0ffff44 	addi	r3,fp,-3
 4000338:	d8c00415 	stw	r3,16(sp)
 400033c:	00c00044 	movi	r3,1
 4000340:	d8c00315 	stw	r3,12(sp)
 4000344:	d8800215 	stw	r2,8(sp)
 4000348:	d8000115 	stw	zero,4(sp)
 400034c:	d8000015 	stw	zero,0(sp)
 4000350:	01c00084 	movi	r7,2
 4000354:	01802844 	movi	r6,161
 4000358:	000b883a 	mov	r5,zero
 400035c:	4001c940 	call	4001c94 <XferCtrlReq>
 4000360:	e0bfff05 	stb	r2,-4(fp)
	if (rcode) {   //error handling
 4000364:	e0bfff03 	ldbu	r2,-4(fp)
 4000368:	10000926 	beq	r2,zero,4000390 <GetDriverandReport+0x124>
		printf("GetIdle Error. Error code: ");
 400036c:	01010074 	movhi	r4,1025
 4000370:	2109e904 	addi	r4,r4,10148
 4000374:	4002d380 	call	4002d38 <printf>
		printf("%x \n", rcode);
 4000378:	e0bfff03 	ldbu	r2,-4(fp)
 400037c:	100b883a 	mov	r5,r2
 4000380:	01010074 	movhi	r4,1025
 4000384:	2109f004 	addi	r4,r4,10176
 4000388:	4002d380 	call	4002d38 <printf>
 400038c:	00000906 	br	40003b4 <GetDriverandReport+0x148>
	} else {
		printf("Update rate: ");
 4000390:	01010074 	movhi	r4,1025
 4000394:	2109f204 	addi	r4,r4,10184
 4000398:	4002d380 	call	4002d38 <printf>
		printf("%x \n", tmpbyte);
 400039c:	e0bfff43 	ldbu	r2,-3(fp)
 40003a0:	10803fcc 	andi	r2,r2,255
 40003a4:	100b883a 	mov	r5,r2
 40003a8:	01010074 	movhi	r4,1025
 40003ac:	2109f004 	addi	r4,r4,10176
 40003b0:	4002d380 	call	4002d38 <printf>
	}
	printf("Protocol: ");
 40003b4:	01010074 	movhi	r4,1025
 40003b8:	2109f604 	addi	r4,r4,10200
 40003bc:	4002d380 	call	4002d38 <printf>
	rcode = XferGetProto(addr, 0, hid_device.interface, &tmpbyte);
 40003c0:	d0a00003 	ldbu	r2,-32768(gp)
 40003c4:	11003fcc 	andi	r4,r2,255
 40003c8:	d0a6df43 	ldbu	r2,-25731(gp)
 40003cc:	10803fcc 	andi	r2,r2,255
 40003d0:	e0ffff44 	addi	r3,fp,-3
 40003d4:	d8c00415 	stw	r3,16(sp)
 40003d8:	00c00044 	movi	r3,1
 40003dc:	d8c00315 	stw	r3,12(sp)
 40003e0:	d8800215 	stw	r2,8(sp)
 40003e4:	d8000115 	stw	zero,4(sp)
 40003e8:	d8000015 	stw	zero,0(sp)
 40003ec:	01c000c4 	movi	r7,3
 40003f0:	01802844 	movi	r6,161
 40003f4:	000b883a 	mov	r5,zero
 40003f8:	4001c940 	call	4001c94 <XferCtrlReq>
 40003fc:	e0bfff05 	stb	r2,-4(fp)
	if (rcode) {   //error handling
 4000400:	e0bfff03 	ldbu	r2,-4(fp)
 4000404:	10000926 	beq	r2,zero,400042c <GetDriverandReport+0x1c0>
		printf("GetProto Error. Error code ");
 4000408:	01010074 	movhi	r4,1025
 400040c:	2109f904 	addi	r4,r4,10212
 4000410:	4002d380 	call	4002d38 <printf>
		printf("%x \n", rcode);
 4000414:	e0bfff03 	ldbu	r2,-4(fp)
 4000418:	100b883a 	mov	r5,r2
 400041c:	01010074 	movhi	r4,1025
 4000420:	2109f004 	addi	r4,r4,10176
 4000424:	4002d380 	call	4002d38 <printf>
 4000428:	00000606 	br	4000444 <GetDriverandReport+0x1d8>
	} else {
		printf("%d \n", tmpbyte);
 400042c:	e0bfff43 	ldbu	r2,-3(fp)
 4000430:	10803fcc 	andi	r2,r2,255
 4000434:	100b883a 	mov	r5,r2
 4000438:	01010074 	movhi	r4,1025
 400043c:	210a0004 	addi	r4,r4,10240
 4000440:	4002d380 	call	4002d38 <printf>
	}
	return device;
 4000444:	e0bffd43 	ldbu	r2,-11(fp)
}
 4000448:	e037883a 	mov	sp,fp
 400044c:	dfc00117 	ldw	ra,4(sp)
 4000450:	df000017 	ldw	fp,0(sp)
 4000454:	dec00204 	addi	sp,sp,8
 4000458:	f800283a 	ret

0400045c <setLED>:

void setLED(int LED) {
 400045c:	defffe04 	addi	sp,sp,-8
 4000460:	df000115 	stw	fp,4(sp)
 4000464:	df000104 	addi	fp,sp,4
 4000468:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
 400046c:	00820034 	movhi	r2,2048
 4000470:	10845404 	addi	r2,r2,4432
 4000474:	10c00037 	ldwio	r3,0(r2)
 4000478:	01000044 	movi	r4,1
 400047c:	e0bfff17 	ldw	r2,-4(fp)
 4000480:	2084983a 	sll	r2,r4,r2
 4000484:	1886b03a 	or	r3,r3,r2
 4000488:	00820034 	movhi	r2,2048
 400048c:	10845404 	addi	r2,r2,4432
 4000490:	10c00035 	stwio	r3,0(r2)
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) | (0x001 << LED)));
}
 4000494:	0001883a 	nop
 4000498:	e037883a 	mov	sp,fp
 400049c:	df000017 	ldw	fp,0(sp)
 40004a0:	dec00104 	addi	sp,sp,4
 40004a4:	f800283a 	ret

040004a8 <clearLED>:

void clearLED(int LED) {
 40004a8:	defffe04 	addi	sp,sp,-8
 40004ac:	df000115 	stw	fp,4(sp)
 40004b0:	df000104 	addi	fp,sp,4
 40004b4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
 40004b8:	00820034 	movhi	r2,2048
 40004bc:	10845404 	addi	r2,r2,4432
 40004c0:	10c00037 	ldwio	r3,0(r2)
 40004c4:	01000044 	movi	r4,1
 40004c8:	e0bfff17 	ldw	r2,-4(fp)
 40004cc:	2084983a 	sll	r2,r4,r2
 40004d0:	0084303a 	nor	r2,zero,r2
 40004d4:	1886703a 	and	r3,r3,r2
 40004d8:	00820034 	movhi	r2,2048
 40004dc:	10845404 	addi	r2,r2,4432
 40004e0:	10c00035 	stwio	r3,0(r2)
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) & ~(0x001 << LED)));

}
 40004e4:	0001883a 	nop
 40004e8:	e037883a 	mov	sp,fp
 40004ec:	df000017 	ldw	fp,0(sp)
 40004f0:	dec00104 	addi	sp,sp,4
 40004f4:	f800283a 	ret

040004f8 <printSignedHex0>:

void printSignedHex0(signed char value) {
 40004f8:	defffc04 	addi	sp,sp,-16
 40004fc:	dfc00315 	stw	ra,12(sp)
 4000500:	df000215 	stw	fp,8(sp)
 4000504:	df000204 	addi	fp,sp,8
 4000508:	2005883a 	mov	r2,r4
 400050c:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
 4000510:	e03ffe05 	stb	zero,-8(fp)
	BYTE ones = 0;
 4000514:	e03ffe45 	stb	zero,-7(fp)
	WORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 4000518:	00820034 	movhi	r2,2048
 400051c:	10845804 	addi	r2,r2,4448
 4000520:	10800037 	ldwio	r2,0(r2)
 4000524:	e0bffe8d 	sth	r2,-6(fp)
	if (value < 0) {
 4000528:	e0bfff07 	ldb	r2,-4(fp)
 400052c:	1000060e 	bge	r2,zero,4000548 <printSignedHex0+0x50>
		setLED(11);
 4000530:	010002c4 	movi	r4,11
 4000534:	400045c0 	call	400045c <setLED>
		value = -value;
 4000538:	e0bfff03 	ldbu	r2,-4(fp)
 400053c:	0085c83a 	sub	r2,zero,r2
 4000540:	e0bfff05 	stb	r2,-4(fp)
 4000544:	00000206 	br	4000550 <printSignedHex0+0x58>
	} else {
		clearLED(11);
 4000548:	010002c4 	movi	r4,11
 400054c:	40004a80 	call	40004a8 <clearLED>
	}
	//handled hundreds
	if (value / 100)
 4000550:	e0bfff03 	ldbu	r2,-4(fp)
 4000554:	108018c4 	addi	r2,r2,99
 4000558:	10803fcc 	andi	r2,r2,255
 400055c:	108031f0 	cmpltui	r2,r2,199
 4000560:	1000031e 	bne	r2,zero,4000570 <printSignedHex0+0x78>
		setLED(13);
 4000564:	01000344 	movi	r4,13
 4000568:	400045c0 	call	400045c <setLED>
 400056c:	00000206 	br	4000578 <printSignedHex0+0x80>
	else
		clearLED(13);
 4000570:	01000344 	movi	r4,13
 4000574:	40004a80 	call	40004a8 <clearLED>

	value = value % 100;
 4000578:	e0bfff07 	ldb	r2,-4(fp)
 400057c:	01401904 	movi	r5,100
 4000580:	1009883a 	mov	r4,r2
 4000584:	4002bb00 	call	4002bb0 <__modsi3>
 4000588:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 400058c:	e0bfff07 	ldb	r2,-4(fp)
 4000590:	01400284 	movi	r5,10
 4000594:	1009883a 	mov	r4,r2
 4000598:	4002b2c0 	call	4002b2c <__divsi3>
 400059c:	e0bffe05 	stb	r2,-8(fp)
	ones = value % 10;
 40005a0:	e0bfff07 	ldb	r2,-4(fp)
 40005a4:	01400284 	movi	r5,10
 40005a8:	1009883a 	mov	r4,r2
 40005ac:	4002bb00 	call	4002bb0 <__modsi3>
 40005b0:	e0bffe45 	stb	r2,-7(fp)

	pio_val &= 0x00FF;
 40005b4:	e0bffe8b 	ldhu	r2,-6(fp)
 40005b8:	10803fcc 	andi	r2,r2,255
 40005bc:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (tens << 12);
 40005c0:	e0bffe03 	ldbu	r2,-8(fp)
 40005c4:	1004933a 	slli	r2,r2,12
 40005c8:	1007883a 	mov	r3,r2
 40005cc:	e0bffe8b 	ldhu	r2,-6(fp)
 40005d0:	1884b03a 	or	r2,r3,r2
 40005d4:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (ones << 8);
 40005d8:	e0bffe43 	ldbu	r2,-7(fp)
 40005dc:	1004923a 	slli	r2,r2,8
 40005e0:	1007883a 	mov	r3,r2
 40005e4:	e0bffe8b 	ldhu	r2,-6(fp)
 40005e8:	1884b03a 	or	r2,r3,r2
 40005ec:	e0bffe8d 	sth	r2,-6(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 40005f0:	e0fffe8b 	ldhu	r3,-6(fp)
 40005f4:	00820034 	movhi	r2,2048
 40005f8:	10845804 	addi	r2,r2,4448
 40005fc:	10c00035 	stwio	r3,0(r2)
}
 4000600:	0001883a 	nop
 4000604:	e037883a 	mov	sp,fp
 4000608:	dfc00117 	ldw	ra,4(sp)
 400060c:	df000017 	ldw	fp,0(sp)
 4000610:	dec00204 	addi	sp,sp,8
 4000614:	f800283a 	ret

04000618 <printSignedHex1>:

void printSignedHex1(signed char value) {
 4000618:	defffb04 	addi	sp,sp,-20
 400061c:	dfc00415 	stw	ra,16(sp)
 4000620:	df000315 	stw	fp,12(sp)
 4000624:	df000304 	addi	fp,sp,12
 4000628:	2005883a 	mov	r2,r4
 400062c:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
 4000630:	e03ffd05 	stb	zero,-12(fp)
	BYTE ones = 0;
 4000634:	e03ffd45 	stb	zero,-11(fp)
	DWORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 4000638:	00820034 	movhi	r2,2048
 400063c:	10845804 	addi	r2,r2,4448
 4000640:	10800037 	ldwio	r2,0(r2)
 4000644:	e0bffe15 	stw	r2,-8(fp)
	if (value < 0) {
 4000648:	e0bfff07 	ldb	r2,-4(fp)
 400064c:	1000060e 	bge	r2,zero,4000668 <printSignedHex1+0x50>
		setLED(10);
 4000650:	01000284 	movi	r4,10
 4000654:	400045c0 	call	400045c <setLED>
		value = -value;
 4000658:	e0bfff03 	ldbu	r2,-4(fp)
 400065c:	0085c83a 	sub	r2,zero,r2
 4000660:	e0bfff05 	stb	r2,-4(fp)
 4000664:	00000206 	br	4000670 <printSignedHex1+0x58>
	} else {
		clearLED(10);
 4000668:	01000284 	movi	r4,10
 400066c:	40004a80 	call	40004a8 <clearLED>
	}
	//handled hundreds
	if (value / 100)
 4000670:	e0bfff03 	ldbu	r2,-4(fp)
 4000674:	108018c4 	addi	r2,r2,99
 4000678:	10803fcc 	andi	r2,r2,255
 400067c:	108031f0 	cmpltui	r2,r2,199
 4000680:	1000031e 	bne	r2,zero,4000690 <printSignedHex1+0x78>
		setLED(12);
 4000684:	01000304 	movi	r4,12
 4000688:	400045c0 	call	400045c <setLED>
 400068c:	00000206 	br	4000698 <printSignedHex1+0x80>
	else
		clearLED(12);
 4000690:	01000304 	movi	r4,12
 4000694:	40004a80 	call	40004a8 <clearLED>

	value = value % 100;
 4000698:	e0bfff07 	ldb	r2,-4(fp)
 400069c:	01401904 	movi	r5,100
 40006a0:	1009883a 	mov	r4,r2
 40006a4:	4002bb00 	call	4002bb0 <__modsi3>
 40006a8:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 40006ac:	e0bfff07 	ldb	r2,-4(fp)
 40006b0:	01400284 	movi	r5,10
 40006b4:	1009883a 	mov	r4,r2
 40006b8:	4002b2c0 	call	4002b2c <__divsi3>
 40006bc:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
 40006c0:	e0bfff07 	ldb	r2,-4(fp)
 40006c4:	01400284 	movi	r5,10
 40006c8:	1009883a 	mov	r4,r2
 40006cc:	4002bb00 	call	4002bb0 <__modsi3>
 40006d0:	e0bffd45 	stb	r2,-11(fp)
	tens = value / 10;
 40006d4:	e0bfff07 	ldb	r2,-4(fp)
 40006d8:	01400284 	movi	r5,10
 40006dc:	1009883a 	mov	r4,r2
 40006e0:	4002b2c0 	call	4002b2c <__divsi3>
 40006e4:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
 40006e8:	e0bfff07 	ldb	r2,-4(fp)
 40006ec:	01400284 	movi	r5,10
 40006f0:	1009883a 	mov	r4,r2
 40006f4:	4002bb00 	call	4002bb0 <__modsi3>
 40006f8:	e0bffd45 	stb	r2,-11(fp)

	pio_val &= 0xFF00;
 40006fc:	e0bffe17 	ldw	r2,-8(fp)
 4000700:	10bfc00c 	andi	r2,r2,65280
 4000704:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (tens << 4);
 4000708:	e0bffd03 	ldbu	r2,-12(fp)
 400070c:	1004913a 	slli	r2,r2,4
 4000710:	1007883a 	mov	r3,r2
 4000714:	e0bffe17 	ldw	r2,-8(fp)
 4000718:	10c4b03a 	or	r2,r2,r3
 400071c:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (ones << 0);
 4000720:	e0bffd43 	ldbu	r2,-11(fp)
 4000724:	e0fffe17 	ldw	r3,-8(fp)
 4000728:	1884b03a 	or	r2,r3,r2
 400072c:	e0bffe15 	stw	r2,-8(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 4000730:	e0fffe17 	ldw	r3,-8(fp)
 4000734:	00820034 	movhi	r2,2048
 4000738:	10845804 	addi	r2,r2,4448
 400073c:	10c00035 	stwio	r3,0(r2)
}
 4000740:	0001883a 	nop
 4000744:	e037883a 	mov	sp,fp
 4000748:	dfc00117 	ldw	ra,4(sp)
 400074c:	df000017 	ldw	fp,0(sp)
 4000750:	dec00204 	addi	sp,sp,8
 4000754:	f800283a 	ret

04000758 <setKeycode>:

void setKeycode(WORD keycode)
{
 4000758:	defffe04 	addi	sp,sp,-8
 400075c:	df000115 	stw	fp,4(sp)
 4000760:	df000104 	addi	fp,sp,4
 4000764:	2005883a 	mov	r2,r4
 4000768:	e0bfff0d 	sth	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(0x080011a0, keycode);
 400076c:	e0ffff0b 	ldhu	r3,-4(fp)
 4000770:	00820034 	movhi	r2,2048
 4000774:	10846804 	addi	r2,r2,4512
 4000778:	10c00035 	stwio	r3,0(r2)
}
 400077c:	0001883a 	nop
 4000780:	e037883a 	mov	sp,fp
 4000784:	df000017 	ldw	fp,0(sp)
 4000788:	dec00104 	addi	sp,sp,4
 400078c:	f800283a 	ret

04000790 <main>:
int main() {
 4000790:	defff704 	addi	sp,sp,-36
 4000794:	dfc00815 	stw	ra,32(sp)
 4000798:	df000715 	stw	fp,28(sp)
 400079c:	df000704 	addi	fp,sp,28
	BYTE rcode;
	BOOT_MOUSE_REPORT buf;		//USB mouse report
	BOOT_KBD_REPORT kbdbuf;

	BYTE runningdebugflag = 0;//flag to dump out a bunch of information when we first get to USB_STATE_RUNNING
 40007a0:	e03ff905 	stb	zero,-28(fp)
	BYTE errorflag = 0; //flag once we get an error device so we don't keep dumping out state info
 40007a4:	e03ff945 	stb	zero,-27(fp)
	BYTE device;
	WORD keycode;

	printf("initializing MAX3421E...\n");
 40007a8:	01010074 	movhi	r4,1025
 40007ac:	210a0204 	addi	r4,r4,10248
 40007b0:	4002e540 	call	4002e54 <puts>
	MAX3421E_init();
 40007b4:	4001a940 	call	4001a94 <MAX3421E_init>
	printf("initializing USB...\n");
 40007b8:	01010074 	movhi	r4,1025
 40007bc:	210a0904 	addi	r4,r4,10276
 40007c0:	4002e540 	call	4002e54 <puts>
	USB_init();
 40007c4:	40022480 	call	4002248 <USB_init>
	while (1) {
		printf(".");
 40007c8:	01000b84 	movi	r4,46
 40007cc:	4002d7c0 	call	4002d7c <putchar>
		MAX3421E_Task();
 40007d0:	4001b280 	call	4001b28 <MAX3421E_Task>
		USB_Task();
 40007d4:	40022e00 	call	40022e0 <USB_Task>
		//usleep (500000);
		if (GetUsbTaskState() == USB_STATE_RUNNING) {
 40007d8:	4002a500 	call	4002a50 <GetUsbTaskState>
 40007dc:	10803fcc 	andi	r2,r2,255
 40007e0:	10801018 	cmpnei	r2,r2,64
 40007e4:	1000a11e 	bne	r2,zero,4000a6c <main+0x2dc>
			if (!runningdebugflag) {
 40007e8:	e0bff903 	ldbu	r2,-28(fp)
 40007ec:	1000071e 	bne	r2,zero,400080c <main+0x7c>
				runningdebugflag = 1;
 40007f0:	00800044 	movi	r2,1
 40007f4:	e0bff905 	stb	r2,-28(fp)
				setLED(9);
 40007f8:	01000244 	movi	r4,9
 40007fc:	400045c0 	call	400045c <setLED>
				device = GetDriverandReport();
 4000800:	400026c0 	call	400026c <GetDriverandReport>
 4000804:	e0bff985 	stb	r2,-26(fp)
 4000808:	003fef06 	br	40007c8 <__alt_data_end+0xfc0007c8>
			} else if (device == 1) {
 400080c:	e0bff983 	ldbu	r2,-26(fp)
 4000810:	10800058 	cmpnei	r2,r2,1
 4000814:	1000391e 	bne	r2,zero,40008fc <main+0x16c>
				//run keyboard debug polling
				rcode = kbdPoll(&kbdbuf);
 4000818:	e0bffd44 	addi	r2,fp,-11
 400081c:	1009883a 	mov	r4,r2
 4000820:	40013d40 	call	40013d4 <kbdPoll>
 4000824:	e0bffb05 	stb	r2,-20(fp)
				if (rcode == hrNAK) {
 4000828:	e0bffb03 	ldbu	r2,-20(fp)
 400082c:	10800118 	cmpnei	r2,r2,4
 4000830:	1000ae26 	beq	r2,zero,4000aec <main+0x35c>
					continue; //NAK means no new data
				} else if (rcode) {
 4000834:	e0bffb03 	ldbu	r2,-20(fp)
 4000838:	10000926 	beq	r2,zero,4000860 <main+0xd0>
					printf("Rcode: ");
 400083c:	01010074 	movhi	r4,1025
 4000840:	210a0e04 	addi	r4,r4,10296
 4000844:	4002d380 	call	4002d38 <printf>
					printf("%x \n", rcode);
 4000848:	e0bffb03 	ldbu	r2,-20(fp)
 400084c:	100b883a 	mov	r5,r2
 4000850:	01010074 	movhi	r4,1025
 4000854:	2109f004 	addi	r4,r4,10176
 4000858:	4002d380 	call	4002d38 <printf>
					continue;
 400085c:	0000a606 	br	4000af8 <main+0x368>
				}
				printf("keycodes: ");
 4000860:	01010074 	movhi	r4,1025
 4000864:	210a1004 	addi	r4,r4,10304
 4000868:	4002d380 	call	4002d38 <printf>
				for (int i = 0; i < 6; i++) {
 400086c:	e03ffa15 	stw	zero,-24(fp)
 4000870:	00000c06 	br	40008a4 <main+0x114>
					printf("%x ", kbdbuf.keycode[i]);
 4000874:	e0fffdc4 	addi	r3,fp,-9
 4000878:	e0bffa17 	ldw	r2,-24(fp)
 400087c:	1885883a 	add	r2,r3,r2
 4000880:	10800003 	ldbu	r2,0(r2)
 4000884:	10803fcc 	andi	r2,r2,255
 4000888:	100b883a 	mov	r5,r2
 400088c:	01010074 	movhi	r4,1025
 4000890:	210a1304 	addi	r4,r4,10316
 4000894:	4002d380 	call	4002d38 <printf>
					printf("Rcode: ");
					printf("%x \n", rcode);
					continue;
				}
				printf("keycodes: ");
				for (int i = 0; i < 6; i++) {
 4000898:	e0bffa17 	ldw	r2,-24(fp)
 400089c:	10800044 	addi	r2,r2,1
 40008a0:	e0bffa15 	stw	r2,-24(fp)
 40008a4:	e0bffa17 	ldw	r2,-24(fp)
 40008a8:	10800190 	cmplti	r2,r2,6
 40008ac:	103ff11e 	bne	r2,zero,4000874 <__alt_data_end+0xfc000874>
					printf("%x ", kbdbuf.keycode[i]);
				}
				setKeycode(kbdbuf.keycode[0]);
 40008b0:	e0bffdc3 	ldbu	r2,-9(fp)
 40008b4:	10803fcc 	andi	r2,r2,255
 40008b8:	1009883a 	mov	r4,r2
 40008bc:	40007580 	call	4000758 <setKeycode>
				printSignedHex0(kbdbuf.keycode[0]);
 40008c0:	e0bffdc3 	ldbu	r2,-9(fp)
 40008c4:	10803fcc 	andi	r2,r2,255
 40008c8:	1080201c 	xori	r2,r2,128
 40008cc:	10bfe004 	addi	r2,r2,-128
 40008d0:	1009883a 	mov	r4,r2
 40008d4:	40004f80 	call	40004f8 <printSignedHex0>
				printSignedHex1(kbdbuf.keycode[1]);
 40008d8:	e0bffe03 	ldbu	r2,-8(fp)
 40008dc:	10803fcc 	andi	r2,r2,255
 40008e0:	1080201c 	xori	r2,r2,128
 40008e4:	10bfe004 	addi	r2,r2,-128
 40008e8:	1009883a 	mov	r4,r2
 40008ec:	40006180 	call	4000618 <printSignedHex1>
				printf("\n");
 40008f0:	01000284 	movi	r4,10
 40008f4:	4002d7c0 	call	4002d7c <putchar>
 40008f8:	003fb306 	br	40007c8 <__alt_data_end+0xfc0007c8>
			}

			else if (device == 2) {
 40008fc:	e0bff983 	ldbu	r2,-26(fp)
 4000900:	10800098 	cmpnei	r2,r2,2
 4000904:	103fb01e 	bne	r2,zero,40007c8 <__alt_data_end+0xfc0007c8>
				rcode = mousePoll(&buf);
 4000908:	e0bffb44 	addi	r2,fp,-19
 400090c:	1009883a 	mov	r4,r2
 4000910:	400134c0 	call	400134c <mousePoll>
 4000914:	e0bffb05 	stb	r2,-20(fp)
				if (rcode == hrNAK) {
 4000918:	e0bffb03 	ldbu	r2,-20(fp)
 400091c:	10800118 	cmpnei	r2,r2,4
 4000920:	10007426 	beq	r2,zero,4000af4 <main+0x364>
					//NAK means no new data
					continue;
				} else if (rcode) {
 4000924:	e0bffb03 	ldbu	r2,-20(fp)
 4000928:	10000926 	beq	r2,zero,4000950 <main+0x1c0>
					printf("Rcode: ");
 400092c:	01010074 	movhi	r4,1025
 4000930:	210a0e04 	addi	r4,r4,10296
 4000934:	4002d380 	call	4002d38 <printf>
					printf("%x \n", rcode);
 4000938:	e0bffb03 	ldbu	r2,-20(fp)
 400093c:	100b883a 	mov	r5,r2
 4000940:	01010074 	movhi	r4,1025
 4000944:	2109f004 	addi	r4,r4,10176
 4000948:	4002d380 	call	4002d38 <printf>
					continue;
 400094c:	00006a06 	br	4000af8 <main+0x368>
				}
				printf("X displacement: ");
 4000950:	01010074 	movhi	r4,1025
 4000954:	210a1404 	addi	r4,r4,10320
 4000958:	4002d380 	call	4002d38 <printf>
				printf("%d ", (signed char) buf.Xdispl);
 400095c:	e0bffb83 	ldbu	r2,-18(fp)
 4000960:	10803fcc 	andi	r2,r2,255
 4000964:	1080201c 	xori	r2,r2,128
 4000968:	10bfe004 	addi	r2,r2,-128
 400096c:	100b883a 	mov	r5,r2
 4000970:	01010074 	movhi	r4,1025
 4000974:	210a1904 	addi	r4,r4,10340
 4000978:	4002d380 	call	4002d38 <printf>
				printSignedHex0((signed char) buf.Xdispl);
 400097c:	e0bffb83 	ldbu	r2,-18(fp)
 4000980:	10803fcc 	andi	r2,r2,255
 4000984:	1080201c 	xori	r2,r2,128
 4000988:	10bfe004 	addi	r2,r2,-128
 400098c:	1009883a 	mov	r4,r2
 4000990:	40004f80 	call	40004f8 <printSignedHex0>
				printf("Y displacement: ");
 4000994:	01010074 	movhi	r4,1025
 4000998:	210a1a04 	addi	r4,r4,10344
 400099c:	4002d380 	call	4002d38 <printf>
				printf("%d ", (signed char) buf.Ydispl);
 40009a0:	e0bffbc3 	ldbu	r2,-17(fp)
 40009a4:	10803fcc 	andi	r2,r2,255
 40009a8:	1080201c 	xori	r2,r2,128
 40009ac:	10bfe004 	addi	r2,r2,-128
 40009b0:	100b883a 	mov	r5,r2
 40009b4:	01010074 	movhi	r4,1025
 40009b8:	210a1904 	addi	r4,r4,10340
 40009bc:	4002d380 	call	4002d38 <printf>
				printSignedHex1((signed char) buf.Ydispl);
 40009c0:	e0bffbc3 	ldbu	r2,-17(fp)
 40009c4:	10803fcc 	andi	r2,r2,255
 40009c8:	1080201c 	xori	r2,r2,128
 40009cc:	10bfe004 	addi	r2,r2,-128
 40009d0:	1009883a 	mov	r4,r2
 40009d4:	40006180 	call	4000618 <printSignedHex1>
				printf("Buttons: ");
 40009d8:	01010074 	movhi	r4,1025
 40009dc:	210a1f04 	addi	r4,r4,10364
 40009e0:	4002d380 	call	4002d38 <printf>
				printf("%x\n", buf.button);
 40009e4:	e0bffb43 	ldbu	r2,-19(fp)
 40009e8:	10803fcc 	andi	r2,r2,255
 40009ec:	100b883a 	mov	r5,r2
 40009f0:	01010074 	movhi	r4,1025
 40009f4:	210a2204 	addi	r4,r4,10376
 40009f8:	4002d380 	call	4002d38 <printf>
				if (buf.button & 0x04)
 40009fc:	e0bffb43 	ldbu	r2,-19(fp)
 4000a00:	10803fcc 	andi	r2,r2,255
 4000a04:	1080010c 	andi	r2,r2,4
 4000a08:	10000326 	beq	r2,zero,4000a18 <main+0x288>
					setLED(2);
 4000a0c:	01000084 	movi	r4,2
 4000a10:	400045c0 	call	400045c <setLED>
 4000a14:	00000206 	br	4000a20 <main+0x290>
				else
					clearLED(2);
 4000a18:	01000084 	movi	r4,2
 4000a1c:	40004a80 	call	40004a8 <clearLED>
				if (buf.button & 0x02)
 4000a20:	e0bffb43 	ldbu	r2,-19(fp)
 4000a24:	10803fcc 	andi	r2,r2,255
 4000a28:	1080008c 	andi	r2,r2,2
 4000a2c:	10000326 	beq	r2,zero,4000a3c <main+0x2ac>
					setLED(1);
 4000a30:	01000044 	movi	r4,1
 4000a34:	400045c0 	call	400045c <setLED>
 4000a38:	00000206 	br	4000a44 <main+0x2b4>
				else
					clearLED(1);
 4000a3c:	01000044 	movi	r4,1
 4000a40:	40004a80 	call	40004a8 <clearLED>
				if (buf.button & 0x01)
 4000a44:	e0bffb43 	ldbu	r2,-19(fp)
 4000a48:	10803fcc 	andi	r2,r2,255
 4000a4c:	1080004c 	andi	r2,r2,1
 4000a50:	10000326 	beq	r2,zero,4000a60 <main+0x2d0>
					setLED(0);
 4000a54:	0009883a 	mov	r4,zero
 4000a58:	400045c0 	call	400045c <setLED>
 4000a5c:	003f5a06 	br	40007c8 <__alt_data_end+0xfc0007c8>
				else
					clearLED(0);
 4000a60:	0009883a 	mov	r4,zero
 4000a64:	40004a80 	call	40004a8 <clearLED>
 4000a68:	003f5706 	br	40007c8 <__alt_data_end+0xfc0007c8>
			}
		} else if (GetUsbTaskState() == USB_STATE_ERROR) {
 4000a6c:	4002a500 	call	4002a50 <GetUsbTaskState>
 4000a70:	10803fcc 	andi	r2,r2,255
 4000a74:	10803fd8 	cmpnei	r2,r2,255
 4000a78:	10000a1e 	bne	r2,zero,4000aa4 <main+0x314>
			if (!errorflag) {
 4000a7c:	e0bff943 	ldbu	r2,-27(fp)
 4000a80:	103f511e 	bne	r2,zero,40007c8 <__alt_data_end+0xfc0007c8>
				errorflag = 1;
 4000a84:	00800044 	movi	r2,1
 4000a88:	e0bff945 	stb	r2,-27(fp)
				clearLED(9);
 4000a8c:	01000244 	movi	r4,9
 4000a90:	40004a80 	call	40004a8 <clearLED>
				printf("USB Error State\n");
 4000a94:	01010074 	movhi	r4,1025
 4000a98:	210a2304 	addi	r4,r4,10380
 4000a9c:	4002e540 	call	4002e54 <puts>
 4000aa0:	003f4906 	br	40007c8 <__alt_data_end+0xfc0007c8>
				//print out string descriptor here
			}
		} else //not in USB running state
		{

			printf("USB task state: ");
 4000aa4:	01010074 	movhi	r4,1025
 4000aa8:	210a2704 	addi	r4,r4,10396
 4000aac:	4002d380 	call	4002d38 <printf>
			printf("%x\n", GetUsbTaskState());
 4000ab0:	4002a500 	call	4002a50 <GetUsbTaskState>
 4000ab4:	10803fcc 	andi	r2,r2,255
 4000ab8:	100b883a 	mov	r5,r2
 4000abc:	01010074 	movhi	r4,1025
 4000ac0:	210a2204 	addi	r4,r4,10376
 4000ac4:	4002d380 	call	4002d38 <printf>
			if (runningdebugflag) {	//previously running, reset USB hardware just to clear out any funky state, HS/FS etc
 4000ac8:	e0bff903 	ldbu	r2,-28(fp)
 4000acc:	10000326 	beq	r2,zero,4000adc <main+0x34c>
				runningdebugflag = 0;
 4000ad0:	e03ff905 	stb	zero,-28(fp)
				MAX3421E_init();
 4000ad4:	4001a940 	call	4001a94 <MAX3421E_init>
				USB_init();
 4000ad8:	40022480 	call	4002248 <USB_init>
			}
			errorflag = 0;
 4000adc:	e03ff945 	stb	zero,-27(fp)
			clearLED(9);
 4000ae0:	01000244 	movi	r4,9
 4000ae4:	40004a80 	call	40004a8 <clearLED>
 4000ae8:	003f3706 	br	40007c8 <__alt_data_end+0xfc0007c8>
				device = GetDriverandReport();
			} else if (device == 1) {
				//run keyboard debug polling
				rcode = kbdPoll(&kbdbuf);
				if (rcode == hrNAK) {
					continue; //NAK means no new data
 4000aec:	0001883a 	nop
 4000af0:	003f3506 	br	40007c8 <__alt_data_end+0xfc0007c8>

			else if (device == 2) {
				rcode = mousePoll(&buf);
				if (rcode == hrNAK) {
					//NAK means no new data
					continue;
 4000af4:	0001883a 	nop
			}
			errorflag = 0;
			clearLED(9);
		}

	}
 4000af8:	003f3306 	br	40007c8 <__alt_data_end+0xfc0007c8>

04000afc <HIDMProbe>:
/* HID Mouse probe. Called from USB state machine.                          */
/* assumes configuration length is less than 256 bytes                      */
/* looks for Class:03, Subclass: 01, Protocol: 02 in interface descriptor   */
/* sets mouse in boot protocol                                              */
/* assumes single configuration and interface configuration 0               */
BOOL HIDMProbe(BYTE addr, DWORD flags) {
 4000afc:	defff204 	addi	sp,sp,-56
 4000b00:	dfc00d15 	stw	ra,52(sp)
 4000b04:	df000c15 	stw	fp,48(sp)
 4000b08:	df000c04 	addi	fp,sp,48
 4000b0c:	2005883a 	mov	r2,r4
 4000b10:	e17fff15 	stw	r5,-4(fp)
 4000b14:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 4000b18:	00810074 	movhi	r2,1025
 4000b1c:	1098d904 	addi	r2,r2,25444
 4000b20:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
 4000b24:	00810074 	movhi	r2,1025
 4000b28:	1098d904 	addi	r2,r2,25444
 4000b2c:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 4000b30:	e0fffe03 	ldbu	r3,-8(fp)
 4000b34:	00810074 	movhi	r2,1025
 4000b38:	1098d904 	addi	r2,r2,25444
 4000b3c:	d8800415 	stw	r2,16(sp)
 4000b40:	00800244 	movi	r2,9
 4000b44:	d8800315 	stw	r2,12(sp)
 4000b48:	d8000215 	stw	zero,8(sp)
 4000b4c:	00800084 	movi	r2,2
 4000b50:	d8800115 	stw	r2,4(sp)
 4000b54:	d8000015 	stw	zero,0(sp)
 4000b58:	01c00184 	movi	r7,6
 4000b5c:	01802004 	movi	r6,128
 4000b60:	000b883a 	mov	r5,zero
 4000b64:	1809883a 	mov	r4,r3
 4000b68:	4001c940 	call	4001c94 <XferCtrlReq>
 4000b6c:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 4000b70:	e0bffc03 	ldbu	r2,-16(fp)
 4000b74:	10000226 	beq	r2,zero,4000b80 <HIDMProbe+0x84>
		//printf("unable to get configuration descriptor");
		return (FALSE);
 4000b78:	0005883a 	mov	r2,zero
 4000b7c:	0000dc06 	br	4000ef0 <HIDMProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 4000b80:	e0bffa17 	ldw	r2,-24(fp)
 4000b84:	1080008b 	ldhu	r2,2(r2)
 4000b88:	10bfffcc 	andi	r2,r2,65535
 4000b8c:	10804070 	cmpltui	r2,r2,257
 4000b90:	1000031e 	bne	r2,zero,4000ba0 <HIDMProbe+0xa4>
		total_length = 256;
 4000b94:	00804004 	movi	r2,256
 4000b98:	e0bff90d 	sth	r2,-28(fp)
 4000b9c:	00000306 	br	4000bac <HIDMProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 4000ba0:	e0bffa17 	ldw	r2,-24(fp)
 4000ba4:	1080008b 	ldhu	r2,2(r2)
 4000ba8:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 4000bac:	e13ffe03 	ldbu	r4,-8(fp)
 4000bb0:	e0fff90b 	ldhu	r3,-28(fp)
 4000bb4:	00810074 	movhi	r2,1025
 4000bb8:	1098d904 	addi	r2,r2,25444
 4000bbc:	d8800415 	stw	r2,16(sp)
 4000bc0:	d8c00315 	stw	r3,12(sp)
 4000bc4:	d8000215 	stw	zero,8(sp)
 4000bc8:	00800084 	movi	r2,2
 4000bcc:	d8800115 	stw	r2,4(sp)
 4000bd0:	d8000015 	stw	zero,0(sp)
 4000bd4:	01c00184 	movi	r7,6
 4000bd8:	01802004 	movi	r6,128
 4000bdc:	000b883a 	mov	r5,zero
 4000be0:	4001c940 	call	4001c94 <XferCtrlReq>
 4000be4:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 4000be8:	e0bffc03 	ldbu	r2,-16(fp)
 4000bec:	10000226 	beq	r2,zero,4000bf8 <HIDMProbe+0xfc>
		//printf("unable to get configuration");
		return (FALSE);
 4000bf0:	0005883a 	mov	r2,zero
 4000bf4:	0000be06 	br	4000ef0 <HIDMProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue;
 4000bf8:	e0bffa17 	ldw	r2,-24(fp)
 4000bfc:	10800143 	ldbu	r2,5(r2)
 4000c00:	e0bffc45 	stb	r2,-15(fp)
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
 4000c04:	0000b306 	br	4000ed4 <HIDMProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) {
 4000c08:	e0bffa17 	ldw	r2,-24(fp)
 4000c0c:	10800043 	ldbu	r2,1(r2)
 4000c10:	10803fcc 	andi	r2,r2,255
 4000c14:	10800120 	cmpeqi	r2,r2,4
 4000c18:	1000091e 	bne	r2,zero,4000c40 <HIDMProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 4000c1c:	e0bffa17 	ldw	r2,-24(fp)
 4000c20:	10800003 	ldbu	r2,0(r2)
 4000c24:	10803fcc 	andi	r2,r2,255
 4000c28:	e0fffb17 	ldw	r3,-20(fp)
 4000c2c:	1885883a 	add	r2,r3,r2
 4000c30:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 4000c34:	e0bffb17 	ldw	r2,-20(fp)
 4000c38:	e0bffa15 	stw	r2,-24(fp)
 4000c3c:	0000a506 	br	4000ed4 <HIDMProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 4000c40:	e0bffa17 	ldw	r2,-24(fp)
 4000c44:	10800143 	ldbu	r2,5(r2)
 4000c48:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 4000c4c:	e0bffa17 	ldw	r2,-24(fp)
 4000c50:	10800183 	ldbu	r2,6(r2)
 4000c54:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 4000c58:	e0bffa17 	ldw	r2,-24(fp)
 4000c5c:	108001c3 	ldbu	r2,7(r2)
 4000c60:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 4000c64:	e0bffc83 	ldbu	r2,-14(fp)
 4000c68:	108000d8 	cmpnei	r2,r2,3
 4000c6c:	1000971e 	bne	r2,zero,4000ecc <HIDMProbe+0x3d0>
 4000c70:	e0bffcc3 	ldbu	r2,-13(fp)
 4000c74:	10800058 	cmpnei	r2,r2,1
 4000c78:	1000941e 	bne	r2,zero,4000ecc <HIDMProbe+0x3d0>
					&& protocol == HID_PROTOCOL_MOUSE) {
 4000c7c:	e0bffd03 	ldbu	r2,-12(fp)
 4000c80:	10800098 	cmpnei	r2,r2,2
 4000c84:	1000911e 	bne	r2,zero,4000ecc <HIDMProbe+0x3d0>
				//detected a mouse
				devtable[addr].devclass = HID_M;                  //device class
 4000c88:	e0fffe03 	ldbu	r3,-8(fp)
 4000c8c:	00810074 	movhi	r2,1025
 4000c90:	10991904 	addi	r2,r2,25700
 4000c94:	180690fa 	slli	r3,r3,3
 4000c98:	10c5883a 	add	r2,r2,r3
 4000c9c:	10800104 	addi	r2,r2,4
 4000ca0:	00c00084 	movi	r3,2
 4000ca4:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
 4000ca8:	e0fffe03 	ldbu	r3,-8(fp)
 4000cac:	00810074 	movhi	r2,1025
 4000cb0:	10991904 	addi	r2,r2,25700
 4000cb4:	180690fa 	slli	r3,r3,3
 4000cb8:	10c5883a 	add	r2,r2,r3
 4000cbc:	10800017 	ldw	r2,0(r2)
 4000cc0:	1080008b 	ldhu	r2,2(r2)
 4000cc4:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
 4000cc8:	400130c0 	call	400130c <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 4000ccc:	e0fffe03 	ldbu	r3,-8(fp)
 4000cd0:	00810074 	movhi	r2,1025
 4000cd4:	10991904 	addi	r2,r2,25700
 4000cd8:	180690fa 	slli	r3,r3,3
 4000cdc:	10c7883a 	add	r3,r2,r3
 4000ce0:	00810074 	movhi	r2,1025
 4000ce4:	1098c504 	addi	r2,r2,25364
 4000ce8:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
 4000cec:	e0fffe03 	ldbu	r3,-8(fp)
 4000cf0:	00810074 	movhi	r2,1025
 4000cf4:	10991904 	addi	r2,r2,25700
 4000cf8:	180690fa 	slli	r3,r3,3
 4000cfc:	10c5883a 	add	r2,r2,r3
 4000d00:	10800017 	ldw	r2,0(r2)
 4000d04:	e0fffd43 	ldbu	r3,-11(fp)
 4000d08:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
 4000d0c:	e0bffa17 	ldw	r2,-24(fp)
 4000d10:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_M;                  //device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
				hid_device.interface =
 4000d14:	d0a6df45 	stb	r2,-25731(gp)
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
 4000d18:	e0bffe03 	ldbu	r2,-8(fp)
 4000d1c:	d0a6df05 	stb	r2,-25732(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 4000d20:	e0bffa17 	ldw	r2,-24(fp)
 4000d24:	10800003 	ldbu	r2,0(r2)
 4000d28:	10803fcc 	andi	r2,r2,255
 4000d2c:	e0fffb17 	ldw	r3,-20(fp)
 4000d30:	1885883a 	add	r2,r3,r2
 4000d34:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 4000d38:	e0bffb17 	ldw	r2,-20(fp)
 4000d3c:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
 4000d40:	00005b06 	br	4000eb0 <HIDMProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
 4000d44:	e0bffa17 	ldw	r2,-24(fp)
 4000d48:	10800043 	ldbu	r2,1(r2)
 4000d4c:	10803fcc 	andi	r2,r2,255
 4000d50:	10800160 	cmpeqi	r2,r2,5
 4000d54:	1000091e 	bne	r2,zero,4000d7c <HIDMProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 4000d58:	e0bffa17 	ldw	r2,-24(fp)
 4000d5c:	10800003 	ldbu	r2,0(r2)
 4000d60:	10803fcc 	andi	r2,r2,255
 4000d64:	e0fffb17 	ldw	r3,-20(fp)
 4000d68:	1885883a 	add	r2,r3,r2
 4000d6c:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 4000d70:	e0bffb17 	ldw	r2,-20(fp)
 4000d74:	e0bffa15 	stw	r2,-24(fp)
 4000d78:	00004d06 	br	4000eb0 <HIDMProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 4000d7c:	e0fffe03 	ldbu	r3,-8(fp)
 4000d80:	00810074 	movhi	r2,1025
 4000d84:	10991904 	addi	r2,r2,25700
 4000d88:	180690fa 	slli	r3,r3,3
 4000d8c:	10c5883a 	add	r2,r2,r3
 4000d90:	10800017 	ldw	r2,0(r2)
 4000d94:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 4000d98:	e0fffa17 	ldw	r3,-24(fp)
 4000d9c:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 4000da0:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 4000da4:	e0fffe03 	ldbu	r3,-8(fp)
 4000da8:	00810074 	movhi	r2,1025
 4000dac:	10991904 	addi	r2,r2,25700
 4000db0:	180690fa 	slli	r3,r3,3
 4000db4:	10c5883a 	add	r2,r2,r3
 4000db8:	10800017 	ldw	r2,0(r2)
 4000dbc:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 4000dc0:	e0fffa17 	ldw	r3,-24(fp)
 4000dc4:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 4000dc8:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 4000dcc:	e0fffe03 	ldbu	r3,-8(fp)
 4000dd0:	00810074 	movhi	r2,1025
 4000dd4:	10991904 	addi	r2,r2,25700
 4000dd8:	180690fa 	slli	r3,r3,3
 4000ddc:	10c5883a 	add	r2,r2,r3
 4000de0:	10800017 	ldw	r2,0(r2)
 4000de4:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 4000de8:	e0fffa17 	ldw	r3,-24(fp)
 4000dec:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 4000df0:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 4000df4:	e0fffe03 	ldbu	r3,-8(fp)
 4000df8:	00810074 	movhi	r2,1025
 4000dfc:	10991904 	addi	r2,r2,25700
 4000e00:	180690fa 	slli	r3,r3,3
 4000e04:	10c5883a 	add	r2,r2,r3
 4000e08:	10800017 	ldw	r2,0(r2)
 4000e0c:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 4000e10:	e0fffa17 	ldw	r3,-24(fp)
 4000e14:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 4000e18:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						// devtable[ addr ].epinfo[ 1 ].rcvToggle = bmRCVTOG0;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 4000e1c:	e0fffe03 	ldbu	r3,-8(fp)
 4000e20:	e0bffc43 	ldbu	r2,-15(fp)
 4000e24:	d8000415 	stw	zero,16(sp)
 4000e28:	d8000315 	stw	zero,12(sp)
 4000e2c:	d8000215 	stw	zero,8(sp)
 4000e30:	d8000115 	stw	zero,4(sp)
 4000e34:	d8800015 	stw	r2,0(sp)
 4000e38:	01c00244 	movi	r7,9
 4000e3c:	000d883a 	mov	r6,zero
 4000e40:	000b883a 	mov	r5,zero
 4000e44:	1809883a 	mov	r4,r3
 4000e48:	4001c940 	call	4001c94 <XferCtrlReq>
 4000e4c:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
 4000e50:	e0bffc03 	ldbu	r2,-16(fp)
 4000e54:	10000226 	beq	r2,zero,4000e60 <HIDMProbe+0x364>
							return (FALSE);
 4000e58:	0005883a 	mov	r2,zero
 4000e5c:	00002406 	br	4000ef0 <HIDMProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 4000e60:	e0fffe03 	ldbu	r3,-8(fp)
 4000e64:	d0a6df43 	ldbu	r2,-25731(gp)
 4000e68:	10803fcc 	andi	r2,r2,255
 4000e6c:	d8000415 	stw	zero,16(sp)
 4000e70:	d8000315 	stw	zero,12(sp)
 4000e74:	d8800215 	stw	r2,8(sp)
 4000e78:	d8000115 	stw	zero,4(sp)
 4000e7c:	d8000015 	stw	zero,0(sp)
 4000e80:	01c002c4 	movi	r7,11
 4000e84:	01800844 	movi	r6,33
 4000e88:	000b883a 	mov	r5,zero
 4000e8c:	1809883a 	mov	r4,r3
 4000e90:	4001c940 	call	4001c94 <XferCtrlReq>
 4000e94:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 4000e98:	e0bffc03 	ldbu	r2,-16(fp)
 4000e9c:	10000226 	beq	r2,zero,4000ea8 <HIDMProbe+0x3ac>
							return (FALSE);
 4000ea0:	0005883a 	mov	r2,zero
 4000ea4:	00001206 	br	4000ef0 <HIDMProbe+0x3f4>
						} else {
							return (TRUE);
 4000ea8:	00800044 	movi	r2,1
 4000eac:	00001006 	br	4000ef0 <HIDMProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
 4000eb0:	e0fff90b 	ldhu	r3,-28(fp)
 4000eb4:	00810074 	movhi	r2,1025
 4000eb8:	1098d904 	addi	r2,r2,25444
 4000ebc:	1885883a 	add	r2,r3,r2
 4000ec0:	e0fffb17 	ldw	r3,-20(fp)
 4000ec4:	18bf9f36 	bltu	r3,r2,4000d44 <__alt_data_end+0xfc000d44>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 4000ec8:	00000206 	br	4000ed4 <HIDMProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
 4000ecc:	0005883a 	mov	r2,zero
 4000ed0:	00000706 	br	4000ef0 <HIDMProbe+0x3f4>
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
 4000ed4:	e0fff90b 	ldhu	r3,-28(fp)
 4000ed8:	00810074 	movhi	r2,1025
 4000edc:	1098d904 	addi	r2,r2,25444
 4000ee0:	1885883a 	add	r2,r3,r2
 4000ee4:	e0fffb17 	ldw	r3,-20(fp)
 4000ee8:	18bf4736 	bltu	r3,r2,4000c08 <__alt_data_end+0xfc000c08>
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 4000eec:	0005883a 	mov	r2,zero
}
 4000ef0:	e037883a 	mov	sp,fp
 4000ef4:	dfc00117 	ldw	ra,4(sp)
 4000ef8:	df000017 	ldw	fp,0(sp)
 4000efc:	dec00204 	addi	sp,sp,8
 4000f00:	f800283a 	ret

04000f04 <HIDKProbe>:
/* HID Keyboard probe. Called from USB state machine.                           */
/* assumes configuration length is less than 256 bytes                          */
/* looks for Class:03, Subclass: 01, Protocol: 01 in interface descriptor       */
/* sets keyboard in boot protocol                                               */
/* assumes single configuration, single endpoint, and interface configuration 0 */
BOOL HIDKProbe(BYTE addr, DWORD flags) {
 4000f04:	defff204 	addi	sp,sp,-56
 4000f08:	dfc00d15 	stw	ra,52(sp)
 4000f0c:	df000c15 	stw	fp,48(sp)
 4000f10:	df000c04 	addi	fp,sp,48
 4000f14:	2005883a 	mov	r2,r4
 4000f18:	e17fff15 	stw	r5,-4(fp)
 4000f1c:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 4000f20:	00810074 	movhi	r2,1025
 4000f24:	1098d904 	addi	r2,r2,25444
 4000f28:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
 4000f2c:	00810074 	movhi	r2,1025
 4000f30:	1098d904 	addi	r2,r2,25444
 4000f34:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 4000f38:	e0fffe03 	ldbu	r3,-8(fp)
 4000f3c:	00810074 	movhi	r2,1025
 4000f40:	1098d904 	addi	r2,r2,25444
 4000f44:	d8800415 	stw	r2,16(sp)
 4000f48:	00800244 	movi	r2,9
 4000f4c:	d8800315 	stw	r2,12(sp)
 4000f50:	d8000215 	stw	zero,8(sp)
 4000f54:	00800084 	movi	r2,2
 4000f58:	d8800115 	stw	r2,4(sp)
 4000f5c:	d8000015 	stw	zero,0(sp)
 4000f60:	01c00184 	movi	r7,6
 4000f64:	01802004 	movi	r6,128
 4000f68:	000b883a 	mov	r5,zero
 4000f6c:	1809883a 	mov	r4,r3
 4000f70:	4001c940 	call	4001c94 <XferCtrlReq>
 4000f74:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling           
 4000f78:	e0bffc03 	ldbu	r2,-16(fp)
 4000f7c:	10000226 	beq	r2,zero,4000f88 <HIDKProbe+0x84>
		return (FALSE);
 4000f80:	0005883a 	mov	r2,zero
 4000f84:	0000dc06 	br	40012f8 <HIDKProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 4000f88:	e0bffa17 	ldw	r2,-24(fp)
 4000f8c:	1080008b 	ldhu	r2,2(r2)
 4000f90:	10bfffcc 	andi	r2,r2,65535
 4000f94:	10804070 	cmpltui	r2,r2,257
 4000f98:	1000031e 	bne	r2,zero,4000fa8 <HIDKProbe+0xa4>
		total_length = 256;
 4000f9c:	00804004 	movi	r2,256
 4000fa0:	e0bff90d 	sth	r2,-28(fp)
 4000fa4:	00000306 	br	4000fb4 <HIDKProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 4000fa8:	e0bffa17 	ldw	r2,-24(fp)
 4000fac:	1080008b 	ldhu	r2,2(r2)
 4000fb0:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 4000fb4:	e13ffe03 	ldbu	r4,-8(fp)
 4000fb8:	e0fff90b 	ldhu	r3,-28(fp)
 4000fbc:	00810074 	movhi	r2,1025
 4000fc0:	1098d904 	addi	r2,r2,25444
 4000fc4:	d8800415 	stw	r2,16(sp)
 4000fc8:	d8c00315 	stw	r3,12(sp)
 4000fcc:	d8000215 	stw	zero,8(sp)
 4000fd0:	00800084 	movi	r2,2
 4000fd4:	d8800115 	stw	r2,4(sp)
 4000fd8:	d8000015 	stw	zero,0(sp)
 4000fdc:	01c00184 	movi	r7,6
 4000fe0:	01802004 	movi	r6,128
 4000fe4:	000b883a 	mov	r5,zero
 4000fe8:	4001c940 	call	4001c94 <XferCtrlReq>
 4000fec:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 4000ff0:	e0bffc03 	ldbu	r2,-16(fp)
 4000ff4:	10000226 	beq	r2,zero,4001000 <HIDKProbe+0xfc>
		return (FALSE);
 4000ff8:	0005883a 	mov	r2,zero
 4000ffc:	0000be06 	br	40012f8 <HIDKProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
 4001000:	e0bffa17 	ldw	r2,-24(fp)
 4001004:	10800143 	ldbu	r2,5(r2)
 4001008:	e0bffc45 	stb	r2,-15(fp)
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 400100c:	0000b306 	br	40012dc <HIDKProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) { //skip to the next descriptor
 4001010:	e0bffa17 	ldw	r2,-24(fp)
 4001014:	10800043 	ldbu	r2,1(r2)
 4001018:	10803fcc 	andi	r2,r2,255
 400101c:	10800120 	cmpeqi	r2,r2,4
 4001020:	1000091e 	bne	r2,zero,4001048 <HIDKProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 4001024:	e0bffa17 	ldw	r2,-24(fp)
 4001028:	10800003 	ldbu	r2,0(r2)
 400102c:	10803fcc 	andi	r2,r2,255
 4001030:	e0fffb17 	ldw	r3,-20(fp)
 4001034:	1885883a 	add	r2,r3,r2
 4001038:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 400103c:	e0bffb17 	ldw	r2,-20(fp)
 4001040:	e0bffa15 	stw	r2,-24(fp)
 4001044:	0000a506 	br	40012dc <HIDKProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 4001048:	e0bffa17 	ldw	r2,-24(fp)
 400104c:	10800143 	ldbu	r2,5(r2)
 4001050:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 4001054:	e0bffa17 	ldw	r2,-24(fp)
 4001058:	10800183 	ldbu	r2,6(r2)
 400105c:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 4001060:	e0bffa17 	ldw	r2,-24(fp)
 4001064:	108001c3 	ldbu	r2,7(r2)
 4001068:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 400106c:	e0bffc83 	ldbu	r2,-14(fp)
 4001070:	108000d8 	cmpnei	r2,r2,3
 4001074:	1000971e 	bne	r2,zero,40012d4 <HIDKProbe+0x3d0>
 4001078:	e0bffcc3 	ldbu	r2,-13(fp)
 400107c:	10800058 	cmpnei	r2,r2,1
 4001080:	1000941e 	bne	r2,zero,40012d4 <HIDKProbe+0x3d0>
					&& protocol == HID_PROTOCOL_KEYBOARD) {
 4001084:	e0bffd03 	ldbu	r2,-12(fp)
 4001088:	10800058 	cmpnei	r2,r2,1
 400108c:	1000911e 	bne	r2,zero,40012d4 <HIDKProbe+0x3d0>
				//detected a keyboard
				devtable[addr].devclass = HID_K;             //fill device class
 4001090:	e0fffe03 	ldbu	r3,-8(fp)
 4001094:	00810074 	movhi	r2,1025
 4001098:	10991904 	addi	r2,r2,25700
 400109c:	180690fa 	slli	r3,r3,3
 40010a0:	10c5883a 	add	r2,r2,r3
 40010a4:	10800104 	addi	r2,r2,4
 40010a8:	00c00044 	movi	r3,1
 40010ac:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
 40010b0:	e0fffe03 	ldbu	r3,-8(fp)
 40010b4:	00810074 	movhi	r2,1025
 40010b8:	10991904 	addi	r2,r2,25700
 40010bc:	180690fa 	slli	r3,r3,3
 40010c0:	10c5883a 	add	r2,r2,r3
 40010c4:	10800017 	ldw	r2,0(r2)
 40010c8:	1080008b 	ldhu	r2,2(r2)
 40010cc:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
 40010d0:	400130c0 	call	400130c <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 40010d4:	e0fffe03 	ldbu	r3,-8(fp)
 40010d8:	00810074 	movhi	r2,1025
 40010dc:	10991904 	addi	r2,r2,25700
 40010e0:	180690fa 	slli	r3,r3,3
 40010e4:	10c7883a 	add	r3,r2,r3
 40010e8:	00810074 	movhi	r2,1025
 40010ec:	1098c504 	addi	r2,r2,25364
 40010f0:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
 40010f4:	e0fffe03 	ldbu	r3,-8(fp)
 40010f8:	00810074 	movhi	r2,1025
 40010fc:	10991904 	addi	r2,r2,25700
 4001100:	180690fa 	slli	r3,r3,3
 4001104:	10c5883a 	add	r2,r2,r3
 4001108:	10800017 	ldw	r2,0(r2)
 400110c:	e0fffd43 	ldbu	r3,-11(fp)
 4001110:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
 4001114:	e0bffa17 	ldw	r2,-24(fp)
 4001118:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_K;             //fill device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
				hid_device.interface =
 400111c:	d0a6df45 	stb	r2,-25731(gp)
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
 4001120:	e0bffe03 	ldbu	r2,-8(fp)
 4001124:	d0a6df05 	stb	r2,-25732(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
 4001128:	e0bffa17 	ldw	r2,-24(fp)
 400112c:	10800003 	ldbu	r2,0(r2)
 4001130:	10803fcc 	andi	r2,r2,255
 4001134:	e0fffb17 	ldw	r3,-20(fp)
 4001138:	1885883a 	add	r2,r3,r2
 400113c:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 4001140:	e0bffb17 	ldw	r2,-20(fp)
 4001144:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
 4001148:	00005b06 	br	40012b8 <HIDKProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
 400114c:	e0bffa17 	ldw	r2,-24(fp)
 4001150:	10800043 	ldbu	r2,1(r2)
 4001154:	10803fcc 	andi	r2,r2,255
 4001158:	10800160 	cmpeqi	r2,r2,5
 400115c:	1000091e 	bne	r2,zero,4001184 <HIDKProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 4001160:	e0bffa17 	ldw	r2,-24(fp)
 4001164:	10800003 	ldbu	r2,0(r2)
 4001168:	10803fcc 	andi	r2,r2,255
 400116c:	e0fffb17 	ldw	r3,-20(fp)
 4001170:	1885883a 	add	r2,r3,r2
 4001174:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 4001178:	e0bffb17 	ldw	r2,-20(fp)
 400117c:	e0bffa15 	stw	r2,-24(fp)
 4001180:	00004d06 	br	40012b8 <HIDKProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 4001184:	e0fffe03 	ldbu	r3,-8(fp)
 4001188:	00810074 	movhi	r2,1025
 400118c:	10991904 	addi	r2,r2,25700
 4001190:	180690fa 	slli	r3,r3,3
 4001194:	10c5883a 	add	r2,r2,r3
 4001198:	10800017 	ldw	r2,0(r2)
 400119c:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 40011a0:	e0fffa17 	ldw	r3,-24(fp)
 40011a4:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 40011a8:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 40011ac:	e0fffe03 	ldbu	r3,-8(fp)
 40011b0:	00810074 	movhi	r2,1025
 40011b4:	10991904 	addi	r2,r2,25700
 40011b8:	180690fa 	slli	r3,r3,3
 40011bc:	10c5883a 	add	r2,r2,r3
 40011c0:	10800017 	ldw	r2,0(r2)
 40011c4:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 40011c8:	e0fffa17 	ldw	r3,-24(fp)
 40011cc:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 40011d0:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 40011d4:	e0fffe03 	ldbu	r3,-8(fp)
 40011d8:	00810074 	movhi	r2,1025
 40011dc:	10991904 	addi	r2,r2,25700
 40011e0:	180690fa 	slli	r3,r3,3
 40011e4:	10c5883a 	add	r2,r2,r3
 40011e8:	10800017 	ldw	r2,0(r2)
 40011ec:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 40011f0:	e0fffa17 	ldw	r3,-24(fp)
 40011f4:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 40011f8:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 40011fc:	e0fffe03 	ldbu	r3,-8(fp)
 4001200:	00810074 	movhi	r2,1025
 4001204:	10991904 	addi	r2,r2,25700
 4001208:	180690fa 	slli	r3,r3,3
 400120c:	10c5883a 	add	r2,r2,r3
 4001210:	10800017 	ldw	r2,0(r2)
 4001214:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 4001218:	e0fffa17 	ldw	r3,-24(fp)
 400121c:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 4001220:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 4001224:	e0fffe03 	ldbu	r3,-8(fp)
 4001228:	e0bffc43 	ldbu	r2,-15(fp)
 400122c:	d8000415 	stw	zero,16(sp)
 4001230:	d8000315 	stw	zero,12(sp)
 4001234:	d8000215 	stw	zero,8(sp)
 4001238:	d8000115 	stw	zero,4(sp)
 400123c:	d8800015 	stw	r2,0(sp)
 4001240:	01c00244 	movi	r7,9
 4001244:	000d883a 	mov	r6,zero
 4001248:	000b883a 	mov	r5,zero
 400124c:	1809883a 	mov	r4,r3
 4001250:	4001c940 	call	4001c94 <XferCtrlReq>
 4001254:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
 4001258:	e0bffc03 	ldbu	r2,-16(fp)
 400125c:	10000226 	beq	r2,zero,4001268 <HIDKProbe+0x364>
							return (FALSE);
 4001260:	0005883a 	mov	r2,zero
 4001264:	00002406 	br	40012f8 <HIDKProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 4001268:	e0fffe03 	ldbu	r3,-8(fp)
 400126c:	d0a6df43 	ldbu	r2,-25731(gp)
 4001270:	10803fcc 	andi	r2,r2,255
 4001274:	d8000415 	stw	zero,16(sp)
 4001278:	d8000315 	stw	zero,12(sp)
 400127c:	d8800215 	stw	r2,8(sp)
 4001280:	d8000115 	stw	zero,4(sp)
 4001284:	d8000015 	stw	zero,0(sp)
 4001288:	01c002c4 	movi	r7,11
 400128c:	01800844 	movi	r6,33
 4001290:	000b883a 	mov	r5,zero
 4001294:	1809883a 	mov	r4,r3
 4001298:	4001c940 	call	4001c94 <XferCtrlReq>
 400129c:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 40012a0:	e0bffc03 	ldbu	r2,-16(fp)
 40012a4:	10000226 	beq	r2,zero,40012b0 <HIDKProbe+0x3ac>
							return (FALSE);
 40012a8:	0005883a 	mov	r2,zero
 40012ac:	00001206 	br	40012f8 <HIDKProbe+0x3f4>
						} else {
							return (TRUE);
 40012b0:	00800044 	movi	r2,1
 40012b4:	00001006 	br	40012f8 <HIDKProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
 40012b8:	e0fff90b 	ldhu	r3,-28(fp)
 40012bc:	00810074 	movhi	r2,1025
 40012c0:	1098d904 	addi	r2,r2,25444
 40012c4:	1885883a 	add	r2,r3,r2
 40012c8:	e0fffb17 	ldw	r3,-20(fp)
 40012cc:	18bf9f36 	bltu	r3,r2,400114c <__alt_data_end+0xfc00114c>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 40012d0:	00000206 	br	40012dc <HIDKProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
 40012d4:	0005883a 	mov	r2,zero
 40012d8:	00000706 	br	40012f8 <HIDKProbe+0x3f4>
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
	if (rcode) {   //error handling
		return (FALSE);
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 40012dc:	e0fff90b 	ldhu	r3,-28(fp)
 40012e0:	00810074 	movhi	r2,1025
 40012e4:	1098d904 	addi	r2,r2,25444
 40012e8:	1885883a 	add	r2,r3,r2
 40012ec:	e0fffb17 	ldw	r3,-20(fp)
 40012f0:	18bf4736 	bltu	r3,r2,4001010 <__alt_data_end+0xfc001010>
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 40012f4:	0005883a 	mov	r2,zero
}
 40012f8:	e037883a 	mov	sp,fp
 40012fc:	dfc00117 	ldw	ra,4(sp)
 4001300:	df000017 	ldw	fp,0(sp)
 4001304:	dec00204 	addi	sp,sp,8
 4001308:	f800283a 	ret

0400130c <HID_init>:
/* HID data structures initialization */
void HID_init(void) {
 400130c:	deffff04 	addi	sp,sp,-4
 4001310:	df000015 	stw	fp,0(sp)
 4001314:	d839883a 	mov	fp,sp
	hid_ep[1].sndToggle = bmSNDTOG0;
 4001318:	00810074 	movhi	r2,1025
 400131c:	1098c504 	addi	r2,r2,25364
 4001320:	00c01004 	movi	r3,64
 4001324:	10c00345 	stb	r3,13(r2)
	hid_ep[1].rcvToggle = bmRCVTOG0;
 4001328:	00810074 	movhi	r2,1025
 400132c:	1098c504 	addi	r2,r2,25364
 4001330:	00c00404 	movi	r3,16
 4001334:	10c00385 	stb	r3,14(r2)
}
 4001338:	0001883a 	nop
 400133c:	e037883a 	mov	sp,fp
 4001340:	df000017 	ldw	fp,0(sp)
 4001344:	dec00104 	addi	sp,sp,4
 4001348:	f800283a 	ret

0400134c <mousePoll>:
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
 400134c:	defffb04 	addi	sp,sp,-20
 4001350:	dfc00415 	stw	ra,16(sp)
 4001354:	df000315 	stw	fp,12(sp)
 4001358:	df000304 	addi	fp,sp,12
 400135c:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 4001360:	d0a6df03 	ldbu	r2,-25732(gp)
 4001364:	10803fcc 	andi	r2,r2,255
 4001368:	100b883a 	mov	r5,r2
 400136c:	01003804 	movi	r4,224
 4001370:	40015280 	call	4001528 <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 4001374:	d0a6df03 	ldbu	r2,-25732(gp)
 4001378:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 400137c:	d0a6df03 	ldbu	r2,-25732(gp)
 4001380:	10c03fcc 	andi	r3,r2,255
 4001384:	00810074 	movhi	r2,1025
 4001388:	10991904 	addi	r2,r2,25700
 400138c:	180690fa 	slli	r3,r3,3
 4001390:	10c5883a 	add	r2,r2,r3
 4001394:	10800017 	ldw	r2,0(r2)
 4001398:	10800204 	addi	r2,r2,8
 400139c:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 40013a0:	10803fcc 	andi	r2,r2,255
 40013a4:	d8800015 	stw	r2,0(sp)
 40013a8:	e1ffff17 	ldw	r7,-4(fp)
 40013ac:	01800204 	movi	r6,8
 40013b0:	01400044 	movi	r5,1
 40013b4:	40020b80 	call	40020b8 <XferInTransfer>
 40013b8:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	return (rcode);
 40013bc:	e0bffe03 	ldbu	r2,-8(fp)
}
 40013c0:	e037883a 	mov	sp,fp
 40013c4:	dfc00117 	ldw	ra,4(sp)
 40013c8:	df000017 	ldw	fp,0(sp)
 40013cc:	dec00204 	addi	sp,sp,8
 40013d0:	f800283a 	ret

040013d4 <kbdPoll>:
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
 40013d4:	defffb04 	addi	sp,sp,-20
 40013d8:	dfc00415 	stw	ra,16(sp)
 40013dc:	df000315 	stw	fp,12(sp)
 40013e0:	df000304 	addi	fp,sp,12
 40013e4:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 40013e8:	d0a6df03 	ldbu	r2,-25732(gp)
 40013ec:	10803fcc 	andi	r2,r2,255
 40013f0:	100b883a 	mov	r5,r2
 40013f4:	01003804 	movi	r4,224
 40013f8:	40015280 	call	4001528 <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 40013fc:	d0a6df03 	ldbu	r2,-25732(gp)
 4001400:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 4001404:	d0a6df03 	ldbu	r2,-25732(gp)
 4001408:	10c03fcc 	andi	r3,r2,255
 400140c:	00810074 	movhi	r2,1025
 4001410:	10991904 	addi	r2,r2,25700
 4001414:	180690fa 	slli	r3,r3,3
 4001418:	10c5883a 	add	r2,r2,r3
 400141c:	10800017 	ldw	r2,0(r2)
 4001420:	10800204 	addi	r2,r2,8
 4001424:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 4001428:	10803fcc 	andi	r2,r2,255
 400142c:	d8800015 	stw	r2,0(sp)
 4001430:	e1ffff17 	ldw	r7,-4(fp)
 4001434:	01800204 	movi	r6,8
 4001438:	01400044 	movi	r5,1
 400143c:	40020b80 	call	40020b8 <XferInTransfer>
 4001440:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	return (rcode);
 4001444:	e0bffe03 	ldbu	r2,-8(fp)
}
 4001448:	e037883a 	mov	sp,fp
 400144c:	dfc00117 	ldw	ra,4(sp)
 4001450:	df000017 	ldw	fp,0(sp)
 4001454:	dec00204 	addi	sp,sp,8
 4001458:	f800283a 	ret

0400145c <HIDMEventHandler>:
BOOL HIDMEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 400145c:	defffb04 	addi	sp,sp,-20
 4001460:	df000415 	stw	fp,16(sp)
 4001464:	df000404 	addi	fp,sp,16
 4001468:	2007883a 	mov	r3,r4
 400146c:	2805883a 	mov	r2,r5
 4001470:	e1bffe15 	stw	r6,-8(fp)
 4001474:	e1ffff15 	stw	r7,-4(fp)
 4001478:	e0fffc05 	stb	r3,-16(fp)
 400147c:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
 4001480:	0005883a 	mov	r2,zero
}
 4001484:	e037883a 	mov	sp,fp
 4001488:	df000017 	ldw	fp,0(sp)
 400148c:	dec00104 	addi	sp,sp,4
 4001490:	f800283a 	ret

04001494 <HIDKEventHandler>:
BOOL HIDKEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 4001494:	defffb04 	addi	sp,sp,-20
 4001498:	df000415 	stw	fp,16(sp)
 400149c:	df000404 	addi	fp,sp,16
 40014a0:	2007883a 	mov	r3,r4
 40014a4:	2805883a 	mov	r2,r5
 40014a8:	e1bffe15 	stw	r6,-8(fp)
 40014ac:	e1ffff15 	stw	r7,-4(fp)
 40014b0:	e0fffc05 	stb	r3,-16(fp)
 40014b4:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
 40014b8:	0005883a 	mov	r2,zero
}
 40014bc:	e037883a 	mov	sp,fp
 40014c0:	df000017 	ldw	fp,0(sp)
 40014c4:	dec00104 	addi	sp,sp,4
 40014c8:	f800283a 	ret

040014cc <SPI_init>:
//variables and data structures
//External variables
extern BYTE usb_task_state;

/* Functions    */
void SPI_init(BYTE sync_mode, BYTE bus_mode, BYTE smp_phase) {
 40014cc:	defffc04 	addi	sp,sp,-16
 40014d0:	df000315 	stw	fp,12(sp)
 40014d4:	df000304 	addi	fp,sp,12
 40014d8:	2807883a 	mov	r3,r5
 40014dc:	3005883a 	mov	r2,r6
 40014e0:	e13ffd05 	stb	r4,-12(fp)
 40014e4:	e0fffe05 	stb	r3,-8(fp)
 40014e8:	e0bfff05 	stb	r2,-4(fp)
	//Don't need to initialize SPI port, already ready to go with BSP
}
 40014ec:	0001883a 	nop
 40014f0:	e037883a 	mov	sp,fp
 40014f4:	df000017 	ldw	fp,0(sp)
 40014f8:	dec00104 	addi	sp,sp,4
 40014fc:	f800283a 	ret

04001500 <SPI_wr>:

//writes single byte to MAX3421E via SPI, simultanously reads status register and returns it
BYTE SPI_wr(BYTE data) {
 4001500:	defffe04 	addi	sp,sp,-8
 4001504:	df000115 	stw	fp,4(sp)
 4001508:	df000104 	addi	fp,sp,4
 400150c:	2005883a 	mov	r2,r4
 4001510:	e0bfff05 	stb	r2,-4(fp)
	//This function is never used by the code, so you do not need to fill it in
}
 4001514:	0001883a 	nop
 4001518:	e037883a 	mov	sp,fp
 400151c:	df000017 	ldw	fp,0(sp)
 4001520:	dec00104 	addi	sp,sp,4
 4001524:	f800283a 	ret

04001528 <MAXreg_wr>:
//writes register to MAX3421E via SPI
void MAXreg_wr(BYTE reg, BYTE val) {
 4001528:	defff704 	addi	sp,sp,-36
 400152c:	dfc00815 	stw	ra,32(sp)
 4001530:	df000715 	stw	fp,28(sp)
 4001534:	df000704 	addi	fp,sp,28
 4001538:	2007883a 	mov	r3,r4
 400153c:	2805883a 	mov	r2,r5
 4001540:	e0fffe05 	stb	r3,-8(fp)
 4001544:	e0bfff05 	stb	r2,-4(fp)
	//write val via SPI
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	alt_u8 wdata[2];
	wdata[0]=reg+2;
 4001548:	e0bffe03 	ldbu	r2,-8(fp)
 400154c:	10800084 	addi	r2,r2,2
 4001550:	e0bffd05 	stb	r2,-12(fp)
	wdata[1]=val;
 4001554:	e0bfff03 	ldbu	r2,-4(fp)
 4001558:	e0bffd45 	stb	r2,-11(fp)
	alt_u8 rdata[1];
	int rcode=alt_avalon_spi_command(SPI_0_BASE, 0, 2, wdata, 0, rdata, 0);
 400155c:	e0fffd04 	addi	r3,fp,-12
 4001560:	d8000215 	stw	zero,8(sp)
 4001564:	e0bffd84 	addi	r2,fp,-10
 4001568:	d8800115 	stw	r2,4(sp)
 400156c:	d8000015 	stw	zero,0(sp)
 4001570:	180f883a 	mov	r7,r3
 4001574:	01800084 	movi	r6,2
 4001578:	000b883a 	mov	r5,zero
 400157c:	01020034 	movhi	r4,2048
 4001580:	21042804 	addi	r4,r4,4256
 4001584:	40112980 	call	4011298 <alt_avalon_spi_command>
 4001588:	e0bffc15 	stw	r2,-16(fp)
	if(rcode < 0)
 400158c:	e0bffc17 	ldw	r2,-16(fp)
 4001590:	1000030e 	bge	r2,zero,40015a0 <MAXreg_wr+0x78>
		printf("ERROR: RETURN CODE LESS THAN 0");
 4001594:	01010074 	movhi	r4,1025
 4001598:	210a2c04 	addi	r4,r4,10416
 400159c:	4002d380 	call	4002d38 <printf>
}
 40015a0:	0001883a 	nop
 40015a4:	e037883a 	mov	sp,fp
 40015a8:	dfc00117 	ldw	ra,4(sp)
 40015ac:	df000017 	ldw	fp,0(sp)
 40015b0:	dec00204 	addi	sp,sp,8
 40015b4:	f800283a 	ret

040015b8 <MAXbytes_wr>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_wr(BYTE reg, BYTE nbytes, BYTE* data) {
 40015b8:	defff204 	addi	sp,sp,-56
 40015bc:	dfc00d15 	stw	ra,52(sp)
 40015c0:	df000c15 	stw	fp,48(sp)
 40015c4:	dc000b15 	stw	r16,44(sp)
 40015c8:	df000c04 	addi	fp,sp,48
 40015cc:	201b883a 	mov	r13,r4
 40015d0:	2809883a 	mov	r4,r5
 40015d4:	e1bffe15 	stw	r6,-8(fp)
 40015d8:	e37ffc05 	stb	r13,-16(fp)
 40015dc:	e13ffd05 	stb	r4,-12(fp)
 40015e0:	d809883a 	mov	r4,sp
 40015e4:	2021883a 	mov	r16,r4
	//write data[n] via SPI, where n goes from 0 to nbytes-1
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0  print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	alt_u8 wdata[nbytes+1];
 40015e8:	e13ffd03 	ldbu	r4,-12(fp)
 40015ec:	21000044 	addi	r4,r4,1
 40015f0:	217fffc4 	addi	r5,r4,-1
 40015f4:	e17ff815 	stw	r5,-32(fp)
 40015f8:	200b883a 	mov	r5,r4
 40015fc:	2817883a 	mov	r11,r5
 4001600:	0019883a 	mov	r12,zero
 4001604:	580ad77a 	srli	r5,r11,29
 4001608:	601090fa 	slli	r8,r12,3
 400160c:	2a10b03a 	or	r8,r5,r8
 4001610:	580e90fa 	slli	r7,r11,3
 4001614:	200b883a 	mov	r5,r4
 4001618:	2813883a 	mov	r9,r5
 400161c:	0015883a 	mov	r10,zero
 4001620:	480ad77a 	srli	r5,r9,29
 4001624:	500690fa 	slli	r3,r10,3
 4001628:	28c6b03a 	or	r3,r5,r3
 400162c:	480490fa 	slli	r2,r9,3
 4001630:	2005883a 	mov	r2,r4
 4001634:	108000c4 	addi	r2,r2,3
 4001638:	1004d0ba 	srli	r2,r2,2
 400163c:	1085883a 	add	r2,r2,r2
 4001640:	1085883a 	add	r2,r2,r2
 4001644:	d8b7c83a 	sub	sp,sp,r2
 4001648:	d8800304 	addi	r2,sp,12
 400164c:	1005883a 	mov	r2,r2
 4001650:	e0bff915 	stw	r2,-28(fp)
	wdata[0]=reg+2;
 4001654:	e0bffc03 	ldbu	r2,-16(fp)
 4001658:	10800084 	addi	r2,r2,2
 400165c:	1007883a 	mov	r3,r2
 4001660:	e0bff917 	ldw	r2,-28(fp)
 4001664:	10c00005 	stb	r3,0(r2)
	for(int i=1; i<nbytes+1; i++)
 4001668:	00800044 	movi	r2,1
 400166c:	e0bff715 	stw	r2,-36(fp)
 4001670:	00000c06 	br	40016a4 <MAXbytes_wr+0xec>
		wdata[i]=data[i-1];
 4001674:	e0bff717 	ldw	r2,-36(fp)
 4001678:	10bfffc4 	addi	r2,r2,-1
 400167c:	e0fffe17 	ldw	r3,-8(fp)
 4001680:	1885883a 	add	r2,r3,r2
 4001684:	10c00003 	ldbu	r3,0(r2)
 4001688:	e13ff917 	ldw	r4,-28(fp)
 400168c:	e0bff717 	ldw	r2,-36(fp)
 4001690:	2085883a 	add	r2,r4,r2
 4001694:	10c00005 	stb	r3,0(r2)
	//if return code < 0  print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	alt_u8 wdata[nbytes+1];
	wdata[0]=reg+2;
	for(int i=1; i<nbytes+1; i++)
 4001698:	e0bff717 	ldw	r2,-36(fp)
 400169c:	10800044 	addi	r2,r2,1
 40016a0:	e0bff715 	stw	r2,-36(fp)
 40016a4:	e0bffd03 	ldbu	r2,-12(fp)
 40016a8:	10800044 	addi	r2,r2,1
 40016ac:	e0fff717 	ldw	r3,-36(fp)
 40016b0:	18bff016 	blt	r3,r2,4001674 <__alt_data_end+0xfc001674>
		wdata[i]=data[i-1];
	alt_u8 rdata[1];
	int rcode=alt_avalon_spi_command(SPI_0_BASE, 0, nbytes+1, wdata, 0, rdata, 0);
 40016b4:	e0bffd03 	ldbu	r2,-12(fp)
 40016b8:	10800044 	addi	r2,r2,1
 40016bc:	1009883a 	mov	r4,r2
 40016c0:	e0fff917 	ldw	r3,-28(fp)
 40016c4:	d8000215 	stw	zero,8(sp)
 40016c8:	e0bffb04 	addi	r2,fp,-20
 40016cc:	d8800115 	stw	r2,4(sp)
 40016d0:	d8000015 	stw	zero,0(sp)
 40016d4:	180f883a 	mov	r7,r3
 40016d8:	200d883a 	mov	r6,r4
 40016dc:	000b883a 	mov	r5,zero
 40016e0:	01020034 	movhi	r4,2048
 40016e4:	21042804 	addi	r4,r4,4256
 40016e8:	40112980 	call	4011298 <alt_avalon_spi_command>
 40016ec:	e0bffa15 	stw	r2,-24(fp)
	if(rcode < 0)
 40016f0:	e0bffa17 	ldw	r2,-24(fp)
 40016f4:	1000030e 	bge	r2,zero,4001704 <MAXbytes_wr+0x14c>
			printf("ERROR: RETURN CODE LESS THAN 0");
 40016f8:	01010074 	movhi	r4,1025
 40016fc:	210a2c04 	addi	r4,r4,10416
 4001700:	4002d380 	call	4002d38 <printf>
	return (data+nbytes);
 4001704:	e0bffd03 	ldbu	r2,-12(fp)
 4001708:	e0fffe17 	ldw	r3,-8(fp)
 400170c:	1885883a 	add	r2,r3,r2
 4001710:	8037883a 	mov	sp,r16
}
 4001714:	e6ffff04 	addi	sp,fp,-4
 4001718:	dfc00217 	ldw	ra,8(sp)
 400171c:	df000117 	ldw	fp,4(sp)
 4001720:	dc000017 	ldw	r16,0(sp)
 4001724:	dec00304 	addi	sp,sp,12
 4001728:	f800283a 	ret

0400172c <MAXreg_rd>:

//reads register from MAX3421E via SPI
BYTE MAXreg_rd(BYTE reg) {
 400172c:	defff804 	addi	sp,sp,-32
 4001730:	dfc00715 	stw	ra,28(sp)
 4001734:	df000615 	stw	fp,24(sp)
 4001738:	df000604 	addi	fp,sp,24
 400173c:	2005883a 	mov	r2,r4
 4001740:	e0bfff05 	stb	r2,-4(fp)
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return val
	alt_u8 wdata[1];
	wdata[0]=reg;
 4001744:	e0bfff03 	ldbu	r2,-4(fp)
 4001748:	e0bffe05 	stb	r2,-8(fp)
	alt_u8 rdata[1];
	int rcode=alt_avalon_spi_command(SPI_0_BASE, 0, 1, wdata, 1, rdata, 0);
 400174c:	e0fffe04 	addi	r3,fp,-8
 4001750:	d8000215 	stw	zero,8(sp)
 4001754:	e0bffe44 	addi	r2,fp,-7
 4001758:	d8800115 	stw	r2,4(sp)
 400175c:	00800044 	movi	r2,1
 4001760:	d8800015 	stw	r2,0(sp)
 4001764:	180f883a 	mov	r7,r3
 4001768:	01800044 	movi	r6,1
 400176c:	000b883a 	mov	r5,zero
 4001770:	01020034 	movhi	r4,2048
 4001774:	21042804 	addi	r4,r4,4256
 4001778:	40112980 	call	4011298 <alt_avalon_spi_command>
 400177c:	e0bffd15 	stw	r2,-12(fp)
	if(rcode < 0)
 4001780:	e0bffd17 	ldw	r2,-12(fp)
 4001784:	1000030e 	bge	r2,zero,4001794 <MAXreg_rd+0x68>
		printf("ERROR: RETURN CODE LESS THAN 0");
 4001788:	01010074 	movhi	r4,1025
 400178c:	210a2c04 	addi	r4,r4,10416
 4001790:	4002d380 	call	4002d38 <printf>
	return (rdata[0]);
 4001794:	e0bffe43 	ldbu	r2,-7(fp)
}
 4001798:	e037883a 	mov	sp,fp
 400179c:	dfc00117 	ldw	ra,4(sp)
 40017a0:	df000017 	ldw	fp,0(sp)
 40017a4:	dec00204 	addi	sp,sp,8
 40017a8:	f800283a 	ret

040017ac <MAXbytes_rd>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_rd(BYTE reg, BYTE nbytes, BYTE* data) {
 40017ac:	defff604 	addi	sp,sp,-40
 40017b0:	dfc00915 	stw	ra,36(sp)
 40017b4:	df000815 	stw	fp,32(sp)
 40017b8:	df000804 	addi	fp,sp,32
 40017bc:	2007883a 	mov	r3,r4
 40017c0:	2805883a 	mov	r2,r5
 40017c4:	e1bfff15 	stw	r6,-4(fp)
 40017c8:	e0fffd05 	stb	r3,-12(fp)
 40017cc:	e0bffe05 	stb	r2,-8(fp)
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	alt_u8 wdata[1];
	wdata[0]=reg;
 40017d0:	e0bffd03 	ldbu	r2,-12(fp)
 40017d4:	e0bffc05 	stb	r2,-16(fp)
	int rcode=alt_avalon_spi_command(SPI_0_BASE, 0, 1, wdata, nbytes, data, 0);
 40017d8:	e0bffe03 	ldbu	r2,-8(fp)
 40017dc:	e13ffc04 	addi	r4,fp,-16
 40017e0:	d8000215 	stw	zero,8(sp)
 40017e4:	e0ffff17 	ldw	r3,-4(fp)
 40017e8:	d8c00115 	stw	r3,4(sp)
 40017ec:	d8800015 	stw	r2,0(sp)
 40017f0:	200f883a 	mov	r7,r4
 40017f4:	01800044 	movi	r6,1
 40017f8:	000b883a 	mov	r5,zero
 40017fc:	01020034 	movhi	r4,2048
 4001800:	21042804 	addi	r4,r4,4256
 4001804:	40112980 	call	4011298 <alt_avalon_spi_command>
 4001808:	e0bffb15 	stw	r2,-20(fp)
	if(rcode < 0)
 400180c:	e0bffb17 	ldw	r2,-20(fp)
 4001810:	1000030e 	bge	r2,zero,4001820 <MAXbytes_rd+0x74>
		printf("ERROR: RETURN CODE LESS THAN 0");
 4001814:	01010074 	movhi	r4,1025
 4001818:	210a2c04 	addi	r4,r4,10416
 400181c:	4002d380 	call	4002d38 <printf>
	return (data+nbytes);
 4001820:	e0bffe03 	ldbu	r2,-8(fp)
 4001824:	e0ffff17 	ldw	r3,-4(fp)
 4001828:	1885883a 	add	r2,r3,r2
}
 400182c:	e037883a 	mov	sp,fp
 4001830:	dfc00117 	ldw	ra,4(sp)
 4001834:	df000017 	ldw	fp,0(sp)
 4001838:	dec00204 	addi	sp,sp,8
 400183c:	f800283a 	ret

04001840 <MAX3421E_reset>:
/* reset MAX3421E using chip reset bit. SPI configuration is not affected   */
void MAX3421E_reset(void) {
 4001840:	defffd04 	addi	sp,sp,-12
 4001844:	dfc00215 	stw	ra,8(sp)
 4001848:	df000115 	stw	fp,4(sp)
 400184c:	df000104 	addi	fp,sp,4
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
 4001850:	0007883a 	mov	r3,zero
 4001854:	00820034 	movhi	r2,2048
 4001858:	10845c04 	addi	r2,r2,4464
 400185c:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
 4001860:	010003f4 	movhi	r4,15
 4001864:	21109004 	addi	r4,r4,16960
 4001868:	40105f00 	call	40105f0 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
 400186c:	00c00044 	movi	r3,1
 4001870:	00820034 	movhi	r2,2048
 4001874:	10845c04 	addi	r2,r2,4464
 4001878:	10c00035 	stwio	r3,0(r2)
	BYTE tmp = 0;
 400187c:	e03fff05 	stb	zero,-4(fp)
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
 4001880:	01400804 	movi	r5,32
 4001884:	01001e04 	movi	r4,120
 4001888:	40015280 	call	4001528 <MAXreg_wr>
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
 400188c:	000b883a 	mov	r5,zero
 4001890:	01001e04 	movi	r4,120
 4001894:	40015280 	call	4001528 <MAXreg_wr>
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 4001898:	00000806 	br	40018bc <MAX3421E_reset+0x7c>
		tmp++;                                      //timeout after 256 attempts
 400189c:	e0bfff03 	ldbu	r2,-4(fp)
 40018a0:	10800044 	addi	r2,r2,1
 40018a4:	e0bfff05 	stb	r2,-4(fp)
		if (tmp == 0) {
 40018a8:	e0bfff03 	ldbu	r2,-4(fp)
 40018ac:	1000031e 	bne	r2,zero,40018bc <MAX3421E_reset+0x7c>
			printf("reset timeout!");
 40018b0:	01010074 	movhi	r4,1025
 40018b4:	210a3404 	addi	r4,r4,10448
 40018b8:	4002d380 	call	4002d38 <printf>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	BYTE tmp = 0;
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 40018bc:	01001a04 	movi	r4,104
 40018c0:	400172c0 	call	400172c <MAXreg_rd>
 40018c4:	10803fcc 	andi	r2,r2,255
 40018c8:	1080004c 	andi	r2,r2,1
 40018cc:	103ff326 	beq	r2,zero,400189c <__alt_data_end+0xfc00189c>
		tmp++;                                      //timeout after 256 attempts
		if (tmp == 0) {
			printf("reset timeout!");
		}
	}
}
 40018d0:	0001883a 	nop
 40018d4:	e037883a 	mov	sp,fp
 40018d8:	dfc00117 	ldw	ra,4(sp)
 40018dc:	df000017 	ldw	fp,0(sp)
 40018e0:	dec00204 	addi	sp,sp,8
 40018e4:	f800283a 	ret

040018e8 <Vbus_power>:
/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
BOOL Vbus_power(BOOL action) {
 40018e8:	defffe04 	addi	sp,sp,-8
 40018ec:	df000115 	stw	fp,4(sp)
 40018f0:	df000104 	addi	fp,sp,4
 40018f4:	e13fff15 	stw	r4,-4(fp)
	// power on/off successful
	return (1);
 40018f8:	00800044 	movi	r2,1
}
 40018fc:	e037883a 	mov	sp,fp
 4001900:	df000017 	ldw	fp,0(sp)
 4001904:	dec00104 	addi	sp,sp,4
 4001908:	f800283a 	ret

0400190c <MAX_busprobe>:

/* probe bus to determine device presense and speed */
void MAX_busprobe(void) {
 400190c:	defffd04 	addi	sp,sp,-12
 4001910:	dfc00215 	stw	ra,8(sp)
 4001914:	df000115 	stw	fp,4(sp)
 4001918:	df000104 	addi	fp,sp,4
	BYTE bus_sample;

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
 400191c:	01003e04 	movi	r4,248
 4001920:	400172c0 	call	400172c <MAXreg_rd>
 4001924:	e0bfff05 	stb	r2,-4(fp)
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte
 4001928:	e0ffff03 	ldbu	r3,-4(fp)
 400192c:	00bff004 	movi	r2,-64
 4001930:	1884703a 	and	r2,r3,r2
 4001934:	e0bfff05 	stb	r2,-4(fp)

	switch (bus_sample) {                   //start full-speed or low-speed host
 4001938:	e0bfff03 	ldbu	r2,-4(fp)
 400193c:	10c01020 	cmpeqi	r3,r2,64
 4001940:	1800221e 	bne	r3,zero,40019cc <MAX_busprobe+0xc0>
 4001944:	10c01048 	cmpgei	r3,r2,65
 4001948:	1800021e 	bne	r3,zero,4001954 <MAX_busprobe+0x48>
 400194c:	10003b26 	beq	r2,zero,4001a3c <MAX_busprobe+0x130>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 4001950:	00004a06 	br	4001a7c <MAX_busprobe+0x170>

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
 4001954:	10c02020 	cmpeqi	r3,r2,128
 4001958:	1800031e 	bne	r3,zero,4001968 <MAX_busprobe+0x5c>
 400195c:	10803020 	cmpeqi	r2,r2,192
 4001960:	1000331e 	bne	r2,zero,4001a30 <MAX_busprobe+0x124>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 4001964:	00004506 	br	4001a7c <MAX_busprobe+0x170>
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
	case ( bmJSTATUS):
		/*kludgy*/
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 4001968:	d0a00303 	ldbu	r2,-32756(gp)
 400196c:	10803fcc 	andi	r2,r2,255
 4001970:	108004e0 	cmpeqi	r2,r2,19
 4001974:	10003e1e 	bne	r2,zero,4001a70 <MAX_busprobe+0x164>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 4001978:	01003604 	movi	r4,216
 400197c:	400172c0 	call	400172c <MAXreg_rd>
 4001980:	10803fcc 	andi	r2,r2,255
 4001984:	1080008c 	andi	r2,r2,2
 4001988:	1000071e 	bne	r2,zero,40019a8 <MAX_busprobe+0x9c>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 400198c:	01403244 	movi	r5,201
 4001990:	01003604 	movi	r4,216
 4001994:	40015280 	call	4001528 <MAXreg_wr>
				printf("Starting in full speed\n");
 4001998:	01010074 	movhi	r4,1025
 400199c:	210a3804 	addi	r4,r4,10464
 40019a0:	4002e540 	call	4002e54 <puts>
 40019a4:	00000606 	br	40019c0 <MAX_busprobe+0xb4>
			} else {
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
 40019a8:	014032c4 	movi	r5,203
 40019ac:	01003604 	movi	r4,216
 40019b0:	40015280 	call	4001528 <MAXreg_wr>
				printf("Starting in low speed\n");
 40019b4:	01010074 	movhi	r4,1025
 40019b8:	210a3e04 	addi	r4,r4,10488
 40019bc:	4002e540 	call	4002e54 <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 40019c0:	00800404 	movi	r2,16
 40019c4:	d0a00305 	stb	r2,-32756(gp)
		}
		break;
 40019c8:	00002906 	br	4001a70 <MAX_busprobe+0x164>
	case ( bmKSTATUS):
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 40019cc:	d0a00303 	ldbu	r2,-32756(gp)
 40019d0:	10803fcc 	andi	r2,r2,255
 40019d4:	108004e0 	cmpeqi	r2,r2,19
 40019d8:	1000271e 	bne	r2,zero,4001a78 <MAX_busprobe+0x16c>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 40019dc:	01003604 	movi	r4,216
 40019e0:	400172c0 	call	400172c <MAXreg_rd>
 40019e4:	10803fcc 	andi	r2,r2,255
 40019e8:	1080008c 	andi	r2,r2,2
 40019ec:	1000071e 	bne	r2,zero,4001a0c <MAX_busprobe+0x100>
				MAXreg_wr( rMODE, MODE_LS_HOST);   //start low-speed host
 40019f0:	014032c4 	movi	r5,203
 40019f4:	01003604 	movi	r4,216
 40019f8:	40015280 	call	4001528 <MAXreg_wr>
				printf("Starting in low speed\n");
 40019fc:	01010074 	movhi	r4,1025
 4001a00:	210a3e04 	addi	r4,r4,10488
 4001a04:	4002e540 	call	4002e54 <puts>
 4001a08:	00000606 	br	4001a24 <MAX_busprobe+0x118>
			} else {
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 4001a0c:	01403244 	movi	r5,201
 4001a10:	01003604 	movi	r4,216
 4001a14:	40015280 	call	4001528 <MAXreg_wr>
				printf("Starting in full speed\n");
 4001a18:	01010074 	movhi	r4,1025
 4001a1c:	210a3804 	addi	r4,r4,10464
 4001a20:	4002e540 	call	4002e54 <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 4001a24:	00800404 	movi	r2,16
 4001a28:	d0a00305 	stb	r2,-32756(gp)
		}
		break;
 4001a2c:	00001206 	br	4001a78 <MAX_busprobe+0x16c>
	case ( bmSE1):              //illegal state
		usb_task_state = ( USB_DETACHED_SUBSTATE_ILLEGAL);
 4001a30:	00800104 	movi	r2,4
 4001a34:	d0a00305 	stb	r2,-32756(gp)
		break;
 4001a38:	00001006 	br	4001a7c <MAX_busprobe+0x170>
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
 4001a3c:	d0a00303 	ldbu	r2,-32756(gp)
 4001a40:	10803fcc 	andi	r2,r2,255
 4001a44:	10803c0c 	andi	r2,r2,240
 4001a48:	10000326 	beq	r2,zero,4001a58 <MAX_busprobe+0x14c>
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
 4001a4c:	00800044 	movi	r2,1
 4001a50:	d0a00305 	stb	r2,-32756(gp)
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
 4001a54:	00000906 	br	4001a7c <MAX_busprobe+0x170>
		break;
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
 4001a58:	01403244 	movi	r5,201
 4001a5c:	01003604 	movi	r4,216
 4001a60:	40015280 	call	4001528 <MAXreg_wr>
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
 4001a64:	008000c4 	movi	r2,3
 4001a68:	d0a00305 	stb	r2,-32756(gp)
		}
		break;
 4001a6c:	00000306 	br	4001a7c <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
				printf("Starting in low speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
 4001a70:	0001883a 	nop
 4001a74:	00000106 	br	4001a7c <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
				printf("Starting in full speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
 4001a78:	0001883a 	nop
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 4001a7c:	0001883a 	nop
 4001a80:	e037883a 	mov	sp,fp
 4001a84:	dfc00117 	ldw	ra,4(sp)
 4001a88:	df000017 	ldw	fp,0(sp)
 4001a8c:	dec00204 	addi	sp,sp,8
 4001a90:	f800283a 	ret

04001a94 <MAX3421E_init>:
/* MAX3421E initialization after power-on   */
void MAX3421E_init(void) {
 4001a94:	defffe04 	addi	sp,sp,-8
 4001a98:	dfc00115 	stw	ra,4(sp)
 4001a9c:	df000015 	stw	fp,0(sp)
 4001aa0:	d839883a 	mov	fp,sp
	/* Configure full-duplex SPI, interrupt pulse   */
	MAXreg_wr( rPINCTL, (bmFDUPSPI + bmINTLEVEL + bmGPXB)); //Full-duplex SPI, level interrupt, GPX
 4001aa4:	01400684 	movi	r5,26
 4001aa8:	01002204 	movi	r4,136
 4001aac:	40015280 	call	4001528 <MAXreg_wr>
	MAX3421E_reset();                                //stop/start the oscillator
 4001ab0:	40018400 	call	4001840 <MAX3421E_reset>
	/* configure power switch   */
	Vbus_power( OFF);                                      //turn Vbus power off
 4001ab4:	0009883a 	mov	r4,zero
 4001ab8:	40018e80 	call	40018e8 <Vbus_power>
	MAXreg_wr( rGPINIEN, bmGPINIEN7); //enable interrupt on GPIN7 (power switch overload flag)
 4001abc:	01402004 	movi	r5,128
 4001ac0:	01002e04 	movi	r4,184
 4001ac4:	40015280 	call	4001528 <MAXreg_wr>
	Vbus_power( ON);
 4001ac8:	01000044 	movi	r4,1
 4001acc:	40018e80 	call	40018e8 <Vbus_power>
	/* configure host operation */
	MAXreg_wr( rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ); // set pull-downs, SOF, Host, Separate GPIN IRQ on GPX
 4001ad0:	01403444 	movi	r5,209
 4001ad4:	01003604 	movi	r4,216
 4001ad8:	40015280 	call	4001528 <MAXreg_wr>
	//MAXreg_wr( rHIEN, bmFRAMEIE|bmCONDETIE|bmBUSEVENTIE );                      // enable SOF, connection detection, bus event IRQs
	MAXreg_wr( rHIEN, bmCONDETIE);                        //connection detection
 4001adc:	01400804 	movi	r5,32
 4001ae0:	01003404 	movi	r4,208
 4001ae4:	40015280 	call	4001528 <MAXreg_wr>
	/* HXFRDNIRQ is checked in Dispatch packet function */
	MAXreg_wr(rHCTL, bmSAMPLEBUS);        // update the JSTATUS and KSTATUS bits
 4001ae8:	01400104 	movi	r5,4
 4001aec:	01003a04 	movi	r4,232
 4001af0:	40015280 	call	4001528 <MAXreg_wr>
	MAX_busprobe();                             //check if anything is connected
 4001af4:	400190c0 	call	400190c <MAX_busprobe>
	MAXreg_wr( rHIRQ, bmCONDETIRQ); //clear connection detect interrupt                 
 4001af8:	01400804 	movi	r5,32
 4001afc:	01003204 	movi	r4,200
 4001b00:	40015280 	call	4001528 <MAXreg_wr>
	MAXreg_wr( rCPUCTL, 0x01);                            //enable interrupt pin
 4001b04:	01400044 	movi	r5,1
 4001b08:	01002004 	movi	r4,128
 4001b0c:	40015280 	call	4001528 <MAXreg_wr>
}
 4001b10:	0001883a 	nop
 4001b14:	e037883a 	mov	sp,fp
 4001b18:	dfc00117 	ldw	ra,4(sp)
 4001b1c:	df000017 	ldw	fp,0(sp)
 4001b20:	dec00204 	addi	sp,sp,8
 4001b24:	f800283a 	ret

04001b28 <MAX3421E_Task>:

/* MAX3421 state change task and interrupt handler */
void MAX3421E_Task(void) {
 4001b28:	defffe04 	addi	sp,sp,-8
 4001b2c:	dfc00115 	stw	ra,4(sp)
 4001b30:	df000015 	stw	fp,0(sp)
 4001b34:	d839883a 	mov	fp,sp
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
 4001b38:	00820034 	movhi	r2,2048
 4001b3c:	10846404 	addi	r2,r2,4496
 4001b40:	10800037 	ldwio	r2,0(r2)
 4001b44:	1000041e 	bne	r2,zero,4001b58 <MAX3421E_Task+0x30>
		printf("MAX interrupt\n\r");
 4001b48:	01010074 	movhi	r4,1025
 4001b4c:	210a4404 	addi	r4,r4,10512
 4001b50:	4002d380 	call	4002d38 <printf>
		MaxIntHandler();
 4001b54:	4001b940 	call	4001b94 <MaxIntHandler>
	}
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_GPX_BASE) == 1) {
 4001b58:	00820034 	movhi	r2,2048
 4001b5c:	10846004 	addi	r2,r2,4480
 4001b60:	10800037 	ldwio	r2,0(r2)
 4001b64:	10800058 	cmpnei	r2,r2,1
 4001b68:	1000041e 	bne	r2,zero,4001b7c <MAX3421E_Task+0x54>
		printf("GPX interrupt\n\r");
 4001b6c:	01010074 	movhi	r4,1025
 4001b70:	210a4804 	addi	r4,r4,10528
 4001b74:	4002d380 	call	4002d38 <printf>
		MaxGpxHandler();
 4001b78:	4001c600 	call	4001c60 <MaxGpxHandler>
	}
}
 4001b7c:	0001883a 	nop
 4001b80:	e037883a 	mov	sp,fp
 4001b84:	dfc00117 	ldw	ra,4(sp)
 4001b88:	df000017 	ldw	fp,0(sp)
 4001b8c:	dec00204 	addi	sp,sp,8
 4001b90:	f800283a 	ret

04001b94 <MaxIntHandler>:

void MaxIntHandler(void) {
 4001b94:	defffd04 	addi	sp,sp,-12
 4001b98:	dfc00215 	stw	ra,8(sp)
 4001b9c:	df000115 	stw	fp,4(sp)
 4001ba0:	df000104 	addi	fp,sp,4
	BYTE HIRQ;
	BYTE HIRQ_sendback = 0x00;
 4001ba4:	e03fff05 	stb	zero,-4(fp)
	HIRQ = MAXreg_rd( rHIRQ);                  //determine interrupt source
 4001ba8:	01003204 	movi	r4,200
 4001bac:	400172c0 	call	400172c <MAXreg_rd>
 4001bb0:	e0bfff45 	stb	r2,-3(fp)
	printf("IRQ: %x\n", HIRQ);
 4001bb4:	e0bfff43 	ldbu	r2,-3(fp)
 4001bb8:	100b883a 	mov	r5,r2
 4001bbc:	01010074 	movhi	r4,1025
 4001bc0:	210a4c04 	addi	r4,r4,10544
 4001bc4:	4002d380 	call	4002d38 <printf>
	if (HIRQ & bmFRAMEIRQ) {                   //->1ms SOF interrupt handler
 4001bc8:	e0bfff43 	ldbu	r2,-3(fp)
 4001bcc:	1080100c 	andi	r2,r2,64
 4001bd0:	10000326 	beq	r2,zero,4001be0 <MaxIntHandler+0x4c>
		HIRQ_sendback |= bmFRAMEIRQ;
 4001bd4:	e0bfff03 	ldbu	r2,-4(fp)
 4001bd8:	10801014 	ori	r2,r2,64
 4001bdc:	e0bfff05 	stb	r2,-4(fp)
	}                   //end FRAMEIRQ handling

	if (HIRQ & bmCONDETIRQ) {
 4001be0:	e0bfff43 	ldbu	r2,-3(fp)
 4001be4:	1080080c 	andi	r2,r2,32
 4001be8:	10000426 	beq	r2,zero,4001bfc <MaxIntHandler+0x68>
		MAX_busprobe();
 4001bec:	400190c0 	call	400190c <MAX_busprobe>
		HIRQ_sendback |= bmCONDETIRQ;      //set sendback to 1 to clear register
 4001bf0:	e0bfff03 	ldbu	r2,-4(fp)
 4001bf4:	10800814 	ori	r2,r2,32
 4001bf8:	e0bfff05 	stb	r2,-4(fp)
	}
	if (HIRQ & bmSNDBAVIRQ) //if the send buffer is clear (previous transfer completed without issue)
 4001bfc:	e0bfff43 	ldbu	r2,-3(fp)
 4001c00:	1080020c 	andi	r2,r2,8
 4001c04:	10000326 	beq	r2,zero,4001c14 <MaxIntHandler+0x80>
	{
		MAXreg_wr(rSNDBC, 0x00);//clear the send buffer (not really necessary, but clears interrupt)
 4001c08:	000b883a 	mov	r5,zero
 4001c0c:	01000e04 	movi	r4,56
 4001c10:	40015280 	call	4001528 <MAXreg_wr>
	}
	if (HIRQ & bmBUSEVENTIRQ) {           //bus event is either reset or suspend
 4001c14:	e0bfff43 	ldbu	r2,-3(fp)
 4001c18:	1080004c 	andi	r2,r2,1
 4001c1c:	10000626 	beq	r2,zero,4001c38 <MaxIntHandler+0xa4>
		usb_task_state++;                       //advance USB task state machine
 4001c20:	d0a00303 	ldbu	r2,-32756(gp)
 4001c24:	10800044 	addi	r2,r2,1
 4001c28:	d0a00305 	stb	r2,-32756(gp)
		HIRQ_sendback |= bmBUSEVENTIRQ;
 4001c2c:	e0bfff03 	ldbu	r2,-4(fp)
 4001c30:	10800054 	ori	r2,r2,1
 4001c34:	e0bfff05 	stb	r2,-4(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	MAXreg_wr( rHIRQ, HIRQ_sendback); //write '1' to CONDETIRQ to ack bus state change
 4001c38:	e0bfff03 	ldbu	r2,-4(fp)
 4001c3c:	100b883a 	mov	r5,r2
 4001c40:	01003204 	movi	r4,200
 4001c44:	40015280 	call	4001528 <MAXreg_wr>
}
 4001c48:	0001883a 	nop
 4001c4c:	e037883a 	mov	sp,fp
 4001c50:	dfc00117 	ldw	ra,4(sp)
 4001c54:	df000017 	ldw	fp,0(sp)
 4001c58:	dec00204 	addi	sp,sp,8
 4001c5c:	f800283a 	ret

04001c60 <MaxGpxHandler>:

void MaxGpxHandler(void) {
 4001c60:	defffd04 	addi	sp,sp,-12
 4001c64:	dfc00215 	stw	ra,8(sp)
 4001c68:	df000115 	stw	fp,4(sp)
 4001c6c:	df000104 	addi	fp,sp,4
	BYTE GPINIRQ;
	GPINIRQ = MAXreg_rd( rGPINIRQ);            //read both IRQ registers
 4001c70:	01002c04 	movi	r4,176
 4001c74:	400172c0 	call	400172c <MAXreg_rd>
 4001c78:	e0bfff05 	stb	r2,-4(fp)
}
 4001c7c:	0001883a 	nop
 4001c80:	e037883a 	mov	sp,fp
 4001c84:	dfc00117 	ldw	ra,4(sp)
 4001c88:	df000017 	ldw	fp,0(sp)
 4001c8c:	dec00204 	addi	sp,sp,8
 4001c90:	f800283a 	ret

04001c94 <XferCtrlReq>:
/* depending on request. Actual requests are defined as macros                                                                                      */
/* return codes:                */
/* 00       =   success         */
/* 01-0f    =   non-zero HRSLT  */
BYTE XferCtrlReq( BYTE addr, BYTE ep, BYTE bmReqType, BYTE bRequest, BYTE wValLo, BYTE wValHi, WORD wInd, WORD nbytes, BYTE* dataptr )
{
 4001c94:	defff104 	addi	sp,sp,-60
 4001c98:	dfc00e15 	stw	ra,56(sp)
 4001c9c:	df000d15 	stw	fp,52(sp)
 4001ca0:	df000d04 	addi	fp,sp,52
 4001ca4:	2015883a 	mov	r10,r4
 4001ca8:	2813883a 	mov	r9,r5
 4001cac:	3011883a 	mov	r8,r6
 4001cb0:	380d883a 	mov	r6,r7
 4001cb4:	e1400217 	ldw	r5,8(fp)
 4001cb8:	e1000317 	ldw	r4,12(fp)
 4001cbc:	e0c00417 	ldw	r3,16(fp)
 4001cc0:	e0800517 	ldw	r2,20(fp)
 4001cc4:	e2bff805 	stb	r10,-32(fp)
 4001cc8:	e27ff905 	stb	r9,-28(fp)
 4001ccc:	e23ffa05 	stb	r8,-24(fp)
 4001cd0:	e1bffb05 	stb	r6,-20(fp)
 4001cd4:	e17ffc05 	stb	r5,-16(fp)
 4001cd8:	e13ffd05 	stb	r4,-12(fp)
 4001cdc:	e0fffe0d 	sth	r3,-8(fp)
 4001ce0:	e0bfff0d 	sth	r2,-4(fp)
 BOOL direction = FALSE;        //request direction, IN or OUT
 4001ce4:	e03ff415 	stw	zero,-48(fp)
 BYTE datastage = 1; //request data stage present or absent
 4001ce8:	00800044 	movi	r2,1
 4001cec:	e0bff505 	stb	r2,-44(fp)
 BYTE rcode;
 SETUP_PKT setup_pkt;
    if( dataptr == NULL ) {
 4001cf0:	e0800617 	ldw	r2,24(fp)
 4001cf4:	1000011e 	bne	r2,zero,4001cfc <XferCtrlReq+0x68>
        datastage = 0;
 4001cf8:	e03ff505 	stb	zero,-44(fp)
    }
    MAXreg_wr( rPERADDR, addr );                    //set peripheral address
 4001cfc:	e0bff803 	ldbu	r2,-32(fp)
 4001d00:	100b883a 	mov	r5,r2
 4001d04:	01003804 	movi	r4,224
 4001d08:	40015280 	call	4001528 <MAXreg_wr>
    /* fill in setup packet */
    if( bmReqType & 0x80 ) {
 4001d0c:	e0bffa03 	ldbu	r2,-24(fp)
 4001d10:	10803fcc 	andi	r2,r2,255
 4001d14:	1080201c 	xori	r2,r2,128
 4001d18:	10bfe004 	addi	r2,r2,-128
 4001d1c:	1000020e 	bge	r2,zero,4001d28 <XferCtrlReq+0x94>
        direction = TRUE;                   		//determine request direction
 4001d20:	00800044 	movi	r2,1
 4001d24:	e0bff415 	stw	r2,-48(fp)
    }
    /* fill in setup packet */
    setup_pkt.ReqType_u.bmRequestType = bmReqType;
 4001d28:	e0bffa03 	ldbu	r2,-24(fp)
 4001d2c:	e0bff585 	stb	r2,-42(fp)
    setup_pkt.bRequest = bRequest;
 4001d30:	e0bffb03 	ldbu	r2,-20(fp)
 4001d34:	e0bff5c5 	stb	r2,-41(fp)
    setup_pkt.wVal_u.wValueLo = wValLo;
 4001d38:	e0bffc03 	ldbu	r2,-16(fp)
 4001d3c:	e0bff605 	stb	r2,-40(fp)
    setup_pkt.wVal_u.wValueHi = wValHi;
 4001d40:	e0bffd03 	ldbu	r2,-12(fp)
 4001d44:	e0bff645 	stb	r2,-39(fp)
    setup_pkt.wIndex = wInd;
 4001d48:	e0bffe0b 	ldhu	r2,-8(fp)
 4001d4c:	e0bff68d 	sth	r2,-38(fp)
    setup_pkt.wLength = nbytes;
 4001d50:	e0bfff0b 	ldhu	r2,-4(fp)
 4001d54:	e0bff70d 	sth	r2,-36(fp)
    MAXbytes_wr( rSUDFIFO, 8, (BYTE *)&setup_pkt );     //transfer to setup packet FIFO
 4001d58:	e0bff584 	addi	r2,fp,-42
 4001d5c:	100d883a 	mov	r6,r2
 4001d60:	01400204 	movi	r5,8
 4001d64:	01000804 	movi	r4,32
 4001d68:	40015b80 	call	40015b8 <MAXbytes_wr>
    rcode = XferDispatchPkt( tokSETUP, ep );            //dispatch packet
 4001d6c:	e0bff903 	ldbu	r2,-28(fp)
 4001d70:	100b883a 	mov	r5,r2
 4001d74:	01000404 	movi	r4,16
 4001d78:	4001f3c0 	call	4001f3c <XferDispatchPkt>
 4001d7c:	e0bff545 	stb	r2,-43(fp)
    if( rcode ) {                                       //return HRSLT if not zero
 4001d80:	e0bff543 	ldbu	r2,-43(fp)
 4001d84:	10000226 	beq	r2,zero,4001d90 <XferCtrlReq+0xfc>
        return( rcode );
 4001d88:	e0bff543 	ldbu	r2,-43(fp)
 4001d8c:	00000f06 	br	4001dcc <XferCtrlReq+0x138>
    }
    rcode = ctrl_xfers[ datastage ]( addr, ep, nbytes, dataptr, direction );    //call data stage or no data stage transfer
 4001d90:	e0bff503 	ldbu	r2,-44(fp)
 4001d94:	1085883a 	add	r2,r2,r2
 4001d98:	1087883a 	add	r3,r2,r2
 4001d9c:	d0a00104 	addi	r2,gp,-32764
 4001da0:	1885883a 	add	r2,r3,r2
 4001da4:	10800017 	ldw	r2,0(r2)
 4001da8:	e13ff803 	ldbu	r4,-32(fp)
 4001dac:	e17ff903 	ldbu	r5,-28(fp)
 4001db0:	e1bfff0b 	ldhu	r6,-4(fp)
 4001db4:	e0fff417 	ldw	r3,-48(fp)
 4001db8:	d8c00015 	stw	r3,0(sp)
 4001dbc:	e1c00617 	ldw	r7,24(fp)
 4001dc0:	103ee83a 	callr	r2
 4001dc4:	e0bff545 	stb	r2,-43(fp)
    return( rcode );
 4001dc8:	e0bff543 	ldbu	r2,-43(fp)
}
 4001dcc:	e037883a 	mov	sp,fp
 4001dd0:	dfc00117 	ldw	ra,4(sp)
 4001dd4:	df000017 	ldw	fp,0(sp)
 4001dd8:	dec00204 	addi	sp,sp,8
 4001ddc:	f800283a 	ret

04001de0 <XferCtrlData>:
/* Control transfer with data stage */
BYTE XferCtrlData( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 4001de0:	defff804 	addi	sp,sp,-32
 4001de4:	dfc00715 	stw	ra,28(sp)
 4001de8:	df000615 	stw	fp,24(sp)
 4001dec:	df000604 	addi	fp,sp,24
 4001df0:	2807883a 	mov	r3,r5
 4001df4:	3005883a 	mov	r2,r6
 4001df8:	e1ffff15 	stw	r7,-4(fp)
 4001dfc:	e13ffc05 	stb	r4,-16(fp)
 4001e00:	e0fffd05 	stb	r3,-12(fp)
 4001e04:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;

    //MAXreg_wr( rHCTL, bmRCVTOG1 );       //set toggle to DATA1
    if( direction ) {   //IN transfer
 4001e08:	e0800217 	ldw	r2,8(fp)
 4001e0c:	10002826 	beq	r2,zero,4001eb0 <XferCtrlData+0xd0>
        devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 4001e10:	e0fffc03 	ldbu	r3,-16(fp)
 4001e14:	00810074 	movhi	r2,1025
 4001e18:	10991904 	addi	r2,r2,25700
 4001e1c:	180690fa 	slli	r3,r3,3
 4001e20:	10c5883a 	add	r2,r2,r3
 4001e24:	10c00017 	ldw	r3,0(r2)
 4001e28:	e0bffd03 	ldbu	r2,-12(fp)
 4001e2c:	100490fa 	slli	r2,r2,3
 4001e30:	1885883a 	add	r2,r3,r2
 4001e34:	00c00804 	movi	r3,32
 4001e38:	10c00185 	stb	r3,6(r2)
        rcode = XferInTransfer( addr, ep, nbytes, dataptr, devtable[ addr ].epinfo[ ep ].MaxPktSize );
 4001e3c:	e13ffc03 	ldbu	r4,-16(fp)
 4001e40:	e17ffd03 	ldbu	r5,-12(fp)
 4001e44:	e1bffe0b 	ldhu	r6,-8(fp)
 4001e48:	e0fffc03 	ldbu	r3,-16(fp)
 4001e4c:	00810074 	movhi	r2,1025
 4001e50:	10991904 	addi	r2,r2,25700
 4001e54:	180690fa 	slli	r3,r3,3
 4001e58:	10c5883a 	add	r2,r2,r3
 4001e5c:	10c00017 	ldw	r3,0(r2)
 4001e60:	e0bffd03 	ldbu	r2,-12(fp)
 4001e64:	100490fa 	slli	r2,r2,3
 4001e68:	1885883a 	add	r2,r3,r2
 4001e6c:	1080008b 	ldhu	r2,2(r2)
 4001e70:	10803fcc 	andi	r2,r2,255
 4001e74:	d8800015 	stw	r2,0(sp)
 4001e78:	e1ffff17 	ldw	r7,-4(fp)
 4001e7c:	40020b80 	call	40020b8 <XferInTransfer>
 4001e80:	e0bffb05 	stb	r2,-20(fp)
        if( rcode ) {
 4001e84:	e0bffb03 	ldbu	r2,-20(fp)
 4001e88:	10000226 	beq	r2,zero,4001e94 <XferCtrlData+0xb4>
        return( rcode );
 4001e8c:	e0bffb03 	ldbu	r2,-20(fp)
 4001e90:	00000806 	br	4001eb4 <XferCtrlData+0xd4>
        }
        rcode = XferDispatchPkt( tokOUTHS, ep );
 4001e94:	e0bffd03 	ldbu	r2,-12(fp)
 4001e98:	100b883a 	mov	r5,r2
 4001e9c:	01002804 	movi	r4,160
 4001ea0:	4001f3c0 	call	4001f3c <XferDispatchPkt>
 4001ea4:	e0bffb05 	stb	r2,-20(fp)
        return( rcode );
 4001ea8:	e0bffb03 	ldbu	r2,-20(fp)
 4001eac:	00000106 	br	4001eb4 <XferCtrlData+0xd4>
    }
    else {              //OUT not implemented
        return( 0xff );
 4001eb0:	00bfffc4 	movi	r2,-1
    }
}
 4001eb4:	e037883a 	mov	sp,fp
 4001eb8:	dfc00117 	ldw	ra,4(sp)
 4001ebc:	df000017 	ldw	fp,0(sp)
 4001ec0:	dec00204 	addi	sp,sp,8
 4001ec4:	f800283a 	ret

04001ec8 <XferCtrlND>:
/* Control transfer with status stage and no data stage */
BYTE XferCtrlND( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 4001ec8:	defff904 	addi	sp,sp,-28
 4001ecc:	dfc00615 	stw	ra,24(sp)
 4001ed0:	df000515 	stw	fp,20(sp)
 4001ed4:	df000504 	addi	fp,sp,20
 4001ed8:	2807883a 	mov	r3,r5
 4001edc:	3005883a 	mov	r2,r6
 4001ee0:	e1ffff15 	stw	r7,-4(fp)
 4001ee4:	e13ffc05 	stb	r4,-16(fp)
 4001ee8:	e0fffd05 	stb	r3,-12(fp)
 4001eec:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;
    if( direction ) { //GET
 4001ef0:	e0800217 	ldw	r2,8(fp)
 4001ef4:	10000626 	beq	r2,zero,4001f10 <XferCtrlND+0x48>
        rcode = XferDispatchPkt( tokOUTHS, ep );
 4001ef8:	e0bffd03 	ldbu	r2,-12(fp)
 4001efc:	100b883a 	mov	r5,r2
 4001f00:	01002804 	movi	r4,160
 4001f04:	4001f3c0 	call	4001f3c <XferDispatchPkt>
 4001f08:	e0bffb05 	stb	r2,-20(fp)
 4001f0c:	00000506 	br	4001f24 <XferCtrlND+0x5c>
    }
    else {
        rcode = XferDispatchPkt( tokINHS, ep );
 4001f10:	e0bffd03 	ldbu	r2,-12(fp)
 4001f14:	100b883a 	mov	r5,r2
 4001f18:	01002004 	movi	r4,128
 4001f1c:	4001f3c0 	call	4001f3c <XferDispatchPkt>
 4001f20:	e0bffb05 	stb	r2,-20(fp)
    }
    return( rcode );
 4001f24:	e0bffb03 	ldbu	r2,-20(fp)
}
 4001f28:	e037883a 	mov	sp,fp
 4001f2c:	dfc00117 	ldw	ra,4(sp)
 4001f30:	df000017 	ldw	fp,0(sp)
 4001f34:	dec00204 	addi	sp,sp,8
 4001f38:	f800283a 	ret

04001f3c <XferDispatchPkt>:
/* Result code: 0 success, nonzero = error condition                                                */
/* If NAK, tries to re-send up to USB_NAK_LIMIT times                                               */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */
/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
BYTE XferDispatchPkt( BYTE token, BYTE ep )
{
 4001f3c:	defff904 	addi	sp,sp,-28
 4001f40:	dfc00615 	stw	ra,24(sp)
 4001f44:	df000515 	stw	fp,20(sp)
 4001f48:	df000504 	addi	fp,sp,20
 4001f4c:	2007883a 	mov	r3,r4
 4001f50:	2805883a 	mov	r2,r5
 4001f54:	e0fffe05 	stb	r3,-8(fp)
 4001f58:	e0bfff05 	stb	r2,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4001f5c:	d0a6f017 	ldw	r2,-25664(gp)
 DWORD timeout = (alt_nticks()*1000)/alt_ticks_per_second() + USB_XFER_TIMEOUT;
 4001f60:	0140fa04 	movi	r5,1000
 4001f64:	1009883a 	mov	r4,r2
 4001f68:	4002ce00 	call	4002ce0 <__mulsi3>
 4001f6c:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4001f70:	d0a6ef17 	ldw	r2,-25668(gp)
 4001f74:	100b883a 	mov	r5,r2
 4001f78:	1809883a 	mov	r4,r3
 4001f7c:	4002c240 	call	4002c24 <__udivsi3>
 4001f80:	1084e204 	addi	r2,r2,5000
 4001f84:	e0bffc15 	stw	r2,-16(fp)
 BYTE tmpdata;
 BYTE rcode;
 char retry_count = 0;
 4001f88:	e03ffb45 	stb	zero,-19(fp)
 BYTE nak_count = 0;
 4001f8c:	e03ffb85 	stb	zero,-18(fp)

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
 4001f90:	e0fffe03 	ldbu	r3,-8(fp)
 4001f94:	e0bfff03 	ldbu	r2,-4(fp)
 4001f98:	1884b03a 	or	r2,r3,r2
 4001f9c:	10803fcc 	andi	r2,r2,255
 4001fa0:	100b883a 	mov	r5,r2
 4001fa4:	01003c04 	movi	r4,240
 4001fa8:	40015280 	call	4001528 <MAXreg_wr>
        rcode = 0xff;
 4001fac:	00bfffc4 	movi	r2,-1
 4001fb0:	e0bffb05 	stb	r2,-20(fp)
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 4001fb4:	00000d06 	br	4001fec <XferDispatchPkt+0xb0>
            tmpdata = MAXreg_rd( rHIRQ );
 4001fb8:	01003204 	movi	r4,200
 4001fbc:	400172c0 	call	400172c <MAXreg_rd>
 4001fc0:	e0bffd05 	stb	r2,-12(fp)
            if( tmpdata & bmHXFRDNIRQ ) {
 4001fc4:	e0bffd03 	ldbu	r2,-12(fp)
 4001fc8:	10803fcc 	andi	r2,r2,255
 4001fcc:	1080201c 	xori	r2,r2,128
 4001fd0:	10bfe004 	addi	r2,r2,-128
 4001fd4:	1000050e 	bge	r2,zero,4001fec <XferDispatchPkt+0xb0>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
 4001fd8:	01402004 	movi	r5,128
 4001fdc:	01003204 	movi	r4,200
 4001fe0:	40015280 	call	4001528 <MAXreg_wr>
                rcode = 0x00;
 4001fe4:	e03ffb05 	stb	zero,-20(fp)
                break;
 4001fe8:	00000c06 	br	400201c <XferDispatchPkt+0xe0>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4001fec:	d0a6f017 	ldw	r2,-25664(gp)
 BYTE nak_count = 0;

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
        rcode = 0xff;
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 4001ff0:	0140fa04 	movi	r5,1000
 4001ff4:	1009883a 	mov	r4,r2
 4001ff8:	4002ce00 	call	4002ce0 <__mulsi3>
 4001ffc:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4002000:	d0a6ef17 	ldw	r2,-25668(gp)
 4002004:	100b883a 	mov	r5,r2
 4002008:	1809883a 	mov	r4,r3
 400200c:	4002c240 	call	4002c24 <__udivsi3>
 4002010:	1007883a 	mov	r3,r2
 4002014:	e0bffc17 	ldw	r2,-16(fp)
 4002018:	18bfe736 	bltu	r3,r2,4001fb8 <__alt_data_end+0xfc001fb8>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
                rcode = 0x00;
                break;
            }
        }
        if( rcode != 0x00 ) {               //exit if timeout
 400201c:	e0bffb03 	ldbu	r2,-20(fp)
 4002020:	10000226 	beq	r2,zero,400202c <XferDispatchPkt+0xf0>
            return( rcode );
 4002024:	e0bffb03 	ldbu	r2,-20(fp)
 4002028:	00001e06 	br	40020a4 <XferDispatchPkt+0x168>
        }
        rcode = ( MAXreg_rd( rHRSL ) & 0x0f );
 400202c:	01003e04 	movi	r4,248
 4002030:	400172c0 	call	400172c <MAXreg_rd>
 4002034:	108003cc 	andi	r2,r2,15
 4002038:	e0bffb05 	stb	r2,-20(fp)
        if( rcode == hrNAK ) {
 400203c:	e0bffb03 	ldbu	r2,-20(fp)
 4002040:	10800118 	cmpnei	r2,r2,4
 4002044:	1000071e 	bne	r2,zero,4002064 <XferDispatchPkt+0x128>
            nak_count++;
 4002048:	e0bffb83 	ldbu	r2,-18(fp)
 400204c:	10800044 	addi	r2,r2,1
 4002050:	e0bffb85 	stb	r2,-18(fp)
            if( nak_count == USB_NAK_LIMIT ) {
 4002054:	e0bffb83 	ldbu	r2,-18(fp)
 4002058:	10803218 	cmpnei	r2,r2,200
 400205c:	10000b1e 	bne	r2,zero,400208c <XferDispatchPkt+0x150>
                break;
 4002060:	00000f06 	br	40020a0 <XferDispatchPkt+0x164>
            }
            else {
                continue;
            }
        }
        if( rcode == hrTIMEOUT ) {
 4002064:	e0bffb03 	ldbu	r2,-20(fp)
 4002068:	10800398 	cmpnei	r2,r2,14
 400206c:	1000091e 	bne	r2,zero,4002094 <XferDispatchPkt+0x158>
            retry_count++;
 4002070:	e0bffb43 	ldbu	r2,-19(fp)
 4002074:	10800044 	addi	r2,r2,1
 4002078:	e0bffb45 	stb	r2,-19(fp)
            if( retry_count == USB_RETRY_LIMIT ) {
 400207c:	e0bffb47 	ldb	r2,-19(fp)
 4002080:	108000d8 	cmpnei	r2,r2,3
 4002084:	10000526 	beq	r2,zero,400209c <XferDispatchPkt+0x160>
                break;
            }
            else {
                continue;
 4002088:	00000106 	br	4002090 <XferDispatchPkt+0x154>
            nak_count++;
            if( nak_count == USB_NAK_LIMIT ) {
                break;
            }
            else {
                continue;
 400208c:	0001883a 	nop
            else {
                continue;
            }
        }
        else break;
    }//while( 1 )
 4002090:	003fbf06 	br	4001f90 <__alt_data_end+0xfc001f90>
            }
            else {
                continue;
            }
        }
        else break;
 4002094:	0001883a 	nop
 4002098:	00000106 	br	40020a0 <XferDispatchPkt+0x164>
            }
        }
        if( rcode == hrTIMEOUT ) {
            retry_count++;
            if( retry_count == USB_RETRY_LIMIT ) {
                break;
 400209c:	0001883a 	nop
                continue;
            }
        }
        else break;
    }//while( 1 )
    return( rcode );
 40020a0:	e0bffb03 	ldbu	r2,-20(fp)
}
 40020a4:	e037883a 	mov	sp,fp
 40020a8:	dfc00117 	ldw	ra,4(sp)
 40020ac:	df000017 	ldw	fp,0(sp)
 40020b0:	dec00204 	addi	sp,sp,8
 40020b4:	f800283a 	ret

040020b8 <XferInTransfer>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes.
    Keep sending INs and writes data to memory area pointed by 'data' */
/* rcode 0 if no errors. rcode 01-0f is relayed from prvXferDispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
BYTE XferInTransfer( BYTE addr/* not sure if it's necessary */, BYTE ep, WORD nbytes, BYTE* data, BYTE maxpktsize )
{
 40020b8:	defff804 	addi	sp,sp,-32
 40020bc:	dfc00715 	stw	ra,28(sp)
 40020c0:	df000615 	stw	fp,24(sp)
 40020c4:	df000604 	addi	fp,sp,24
 40020c8:	2011883a 	mov	r8,r4
 40020cc:	2809883a 	mov	r4,r5
 40020d0:	3007883a 	mov	r3,r6
 40020d4:	e1fffe15 	stw	r7,-8(fp)
 40020d8:	e0800217 	ldw	r2,8(fp)
 40020dc:	e23ffb05 	stb	r8,-20(fp)
 40020e0:	e13ffc05 	stb	r4,-16(fp)
 40020e4:	e0fffd0d 	sth	r3,-12(fp)
 40020e8:	e0bfff05 	stb	r2,-4(fp)
 BYTE rcode;
 BYTE i;
 BYTE tmpbyte;
 BYTE pktsize;
 WORD xfrlen = 0;
 40020ec:	e03ffa0d 	sth	zero,-24(fp)
    MAXreg_wr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
 40020f0:	e0fffb03 	ldbu	r3,-20(fp)
 40020f4:	00810074 	movhi	r2,1025
 40020f8:	10991904 	addi	r2,r2,25700
 40020fc:	180690fa 	slli	r3,r3,3
 4002100:	10c5883a 	add	r2,r2,r3
 4002104:	10c00017 	ldw	r3,0(r2)
 4002108:	e0bffc03 	ldbu	r2,-16(fp)
 400210c:	100490fa 	slli	r2,r2,3
 4002110:	1885883a 	add	r2,r3,r2
 4002114:	10800183 	ldbu	r2,6(r2)
 4002118:	10803fcc 	andi	r2,r2,255
 400211c:	100b883a 	mov	r5,r2
 4002120:	01003a04 	movi	r4,232
 4002124:	40015280 	call	4001528 <MAXreg_wr>
    while( 1 ) { // use a 'return' to exit this loop
        rcode = XferDispatchPkt( tokIN, ep );           //IN packet to EP-'endpoint'. Function takes care of NAKS.
 4002128:	e0bffc03 	ldbu	r2,-16(fp)
 400212c:	100b883a 	mov	r5,r2
 4002130:	0009883a 	mov	r4,zero
 4002134:	4001f3c0 	call	4001f3c <XferDispatchPkt>
 4002138:	e0bffa85 	stb	r2,-22(fp)
        if( rcode ) {
 400213c:	e0bffa83 	ldbu	r2,-22(fp)
 4002140:	10000226 	beq	r2,zero,400214c <XferInTransfer+0x94>
            return( rcode );                            //should be 0, indicating ACK. Else return error code.
 4002144:	e0bffa83 	ldbu	r2,-22(fp)
 4002148:	00003a06 	br	4002234 <XferInTransfer+0x17c>
        }
        /* check for RCVDAVIRQ and generate error if not present */
        /* the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred. Need to add handling for that */
        if(( MAXreg_rd( rHIRQ ) & bmRCVDAVIRQ ) == 0 ) {
 400214c:	01003204 	movi	r4,200
 4002150:	400172c0 	call	400172c <MAXreg_rd>
 4002154:	10803fcc 	andi	r2,r2,255
 4002158:	1080010c 	andi	r2,r2,4
 400215c:	1000021e 	bne	r2,zero,4002168 <XferInTransfer+0xb0>
            return ( 0xf0 );                            //receive error
 4002160:	00bffc04 	movi	r2,-16
 4002164:	00003306 	br	4002234 <XferInTransfer+0x17c>
        }
        pktsize = MAXreg_rd( rRCVBC );                  //number of received bytes
 4002168:	01000c04 	movi	r4,48
 400216c:	400172c0 	call	400172c <MAXreg_rd>
 4002170:	e0bffac5 	stb	r2,-21(fp)
        //printf ("pktsize: %d\n", pktsize);
        data = MAXbytes_rd( rRCVFIFO, pktsize, data );
 4002174:	e0bffac3 	ldbu	r2,-21(fp)
 4002178:	e1bffe17 	ldw	r6,-8(fp)
 400217c:	100b883a 	mov	r5,r2
 4002180:	01000204 	movi	r4,8
 4002184:	40017ac0 	call	40017ac <MAXbytes_rd>
 4002188:	e0bffe15 	stw	r2,-8(fp)
        MAXreg_wr( rHIRQ, bmRCVDAVIRQ );                // Clear the IRQ & free the buffer
 400218c:	01400104 	movi	r5,4
 4002190:	01003204 	movi	r4,200
 4002194:	40015280 	call	4001528 <MAXreg_wr>
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
 4002198:	e0fffac3 	ldbu	r3,-21(fp)
 400219c:	e0bffa0b 	ldhu	r2,-24(fp)
 40021a0:	1885883a 	add	r2,r3,r2
 40021a4:	e0bffa0d 	sth	r2,-24(fp)
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {    // have we transferred 'nbytes' bytes?
 40021a8:	e0fffac3 	ldbu	r3,-21(fp)
 40021ac:	e0bfff03 	ldbu	r2,-4(fp)
 40021b0:	18800336 	bltu	r3,r2,40021c0 <XferInTransfer+0x108>
 40021b4:	e0fffa0b 	ldhu	r3,-24(fp)
 40021b8:	e0bffd0b 	ldhu	r2,-12(fp)
 40021bc:	18bfda36 	bltu	r3,r2,4002128 <__alt_data_end+0xfc002128>
            if( MAXreg_rd( rHRSL ) & bmRCVTOGRD ) {                 //save toggle value
 40021c0:	01003e04 	movi	r4,248
 40021c4:	400172c0 	call	400172c <MAXreg_rd>
 40021c8:	10803fcc 	andi	r2,r2,255
 40021cc:	1080040c 	andi	r2,r2,16
 40021d0:	10000c26 	beq	r2,zero,4002204 <XferInTransfer+0x14c>
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 40021d4:	e0fffb03 	ldbu	r3,-20(fp)
 40021d8:	00810074 	movhi	r2,1025
 40021dc:	10991904 	addi	r2,r2,25700
 40021e0:	180690fa 	slli	r3,r3,3
 40021e4:	10c5883a 	add	r2,r2,r3
 40021e8:	10c00017 	ldw	r3,0(r2)
 40021ec:	e0bffc03 	ldbu	r2,-16(fp)
 40021f0:	100490fa 	slli	r2,r2,3
 40021f4:	1885883a 	add	r2,r3,r2
 40021f8:	00c00804 	movi	r3,32
 40021fc:	10c00185 	stb	r3,6(r2)
 4002200:	00000b06 	br	4002230 <XferInTransfer+0x178>
            }
            else {
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
 4002204:	e0fffb03 	ldbu	r3,-20(fp)
 4002208:	00810074 	movhi	r2,1025
 400220c:	10991904 	addi	r2,r2,25700
 4002210:	180690fa 	slli	r3,r3,3
 4002214:	10c5883a 	add	r2,r2,r3
 4002218:	10c00017 	ldw	r3,0(r2)
 400221c:	e0bffc03 	ldbu	r2,-16(fp)
 4002220:	100490fa 	slli	r2,r2,3
 4002224:	1885883a 	add	r2,r3,r2
 4002228:	00c00404 	movi	r3,16
 400222c:	10c00185 	stb	r3,6(r2)
            }
            return( 0 );
 4002230:	0005883a 	mov	r2,zero
        }
  }//while( 1 )
}
 4002234:	e037883a 	mov	sp,fp
 4002238:	dfc00117 	ldw	ra,4(sp)
 400223c:	df000017 	ldw	fp,0(sp)
 4002240:	dec00204 	addi	sp,sp,8
 4002244:	f800283a 	ret

04002248 <USB_init>:
/* initialization of USB data structures */
void USB_init( void )
{
 4002248:	defffe04 	addi	sp,sp,-8
 400224c:	df000115 	stw	fp,4(sp)
 4002250:	df000104 	addi	fp,sp,4
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 4002254:	e03fff05 	stb	zero,-4(fp)
 4002258:	00001006 	br	400229c <USB_init+0x54>
        devtable[ i ].epinfo = NULL;       //clear device table
 400225c:	e0ffff03 	ldbu	r3,-4(fp)
 4002260:	00810074 	movhi	r2,1025
 4002264:	10991904 	addi	r2,r2,25700
 4002268:	180690fa 	slli	r3,r3,3
 400226c:	10c5883a 	add	r2,r2,r3
 4002270:	10000015 	stw	zero,0(r2)
        devtable[ i ].devclass = 0;
 4002274:	e0ffff03 	ldbu	r3,-4(fp)
 4002278:	00810074 	movhi	r2,1025
 400227c:	10991904 	addi	r2,r2,25700
 4002280:	180690fa 	slli	r3,r3,3
 4002284:	10c5883a 	add	r2,r2,r3
 4002288:	10800104 	addi	r2,r2,4
 400228c:	10000005 	stb	zero,0(r2)
}
/* initialization of USB data structures */
void USB_init( void )
{
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 4002290:	e0bfff03 	ldbu	r2,-4(fp)
 4002294:	10800044 	addi	r2,r2,1
 4002298:	e0bfff05 	stb	r2,-4(fp)
 400229c:	e0bfff03 	ldbu	r2,-4(fp)
 40022a0:	10800270 	cmpltui	r2,r2,9
 40022a4:	103fed1e 	bne	r2,zero,400225c <__alt_data_end+0xfc00225c>
        devtable[ i ].epinfo = NULL;       //clear device table
        devtable[ i ].devclass = 0;
    }
    devtable[ 0 ].epinfo = &dev0ep;  //set single ep for uninitialized device
 40022a8:	00810074 	movhi	r2,1025
 40022ac:	10991904 	addi	r2,r2,25700
 40022b0:	d0e6e004 	addi	r3,gp,-25728
 40022b4:	10c00015 	stw	r3,0(r2)
    dev0ep.MaxPktSize = 0;
 40022b8:	d026e08d 	sth	zero,-25726(gp)
    dev0ep.sndToggle = bmSNDTOG0;   //set DATA0/1 toggles to 0
 40022bc:	00801004 	movi	r2,64
 40022c0:	d0a6e145 	stb	r2,-25723(gp)
    dev0ep.rcvToggle = bmRCVTOG0;
 40022c4:	00800404 	movi	r2,16
 40022c8:	d0a6e185 	stb	r2,-25722(gp)
}
 40022cc:	0001883a 	nop
 40022d0:	e037883a 	mov	sp,fp
 40022d4:	df000017 	ldw	fp,0(sp)
 40022d8:	dec00104 	addi	sp,sp,4
 40022dc:	f800283a 	ret

040022e0 <USB_Task>:
/* error codes: 01-0f HRSLT        */
/* ff - unsupported device         */
/* fe - no address available       */
/* fd - no client driver available */
void USB_Task( void )
{
 40022e0:	deffb204 	addi	sp,sp,-312
 40022e4:	dfc04d15 	stw	ra,308(sp)
 40022e8:	df004c15 	stw	fp,304(sp)
 40022ec:	dc004b15 	stw	r16,300(sp)
 40022f0:	df004c04 	addi	fp,sp,304
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 40022f4:	d0a00303 	ldbu	r2,-32756(gp)
 40022f8:	10803fcc 	andi	r2,r2,255
 40022fc:	10803c0c 	andi	r2,r2,240
 4002300:	10c00820 	cmpeqi	r3,r2,32
 4002304:	1801121e 	bne	r3,zero,4002750 <USB_Task+0x470>
 4002308:	10c00848 	cmpgei	r3,r2,33
 400230c:	1800041e 	bne	r3,zero,4002320 <USB_Task+0x40>
 4002310:	10000a26 	beq	r2,zero,400233c <USB_Task+0x5c>
 4002314:	10800420 	cmpeqi	r2,r2,16
 4002318:	10001b1e 	bne	r2,zero,4002388 <USB_Task+0xa8>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
 400231c:	00017a06 	br	4002908 <USB_Task+0x628>
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 4002320:	10c01020 	cmpeqi	r3,r2,64
 4002324:	18016f1e 	bne	r3,zero,40028e4 <USB_Task+0x604>
 4002328:	10c03fe0 	cmpeqi	r3,r2,255
 400232c:	18016f1e 	bne	r3,zero,40028ec <USB_Task+0x60c>
 4002330:	10800c20 	cmpeqi	r2,r2,48
 4002334:	1001441e 	bne	r2,zero,4002848 <USB_Task+0x568>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
 4002338:	00017306 	br	4002908 <USB_Task+0x628>
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
 400233c:	d0a00303 	ldbu	r2,-32756(gp)
 4002340:	10803fcc 	andi	r2,r2,255
 4002344:	10c000e0 	cmpeqi	r3,r2,3
 4002348:	1800091e 	bne	r3,zero,4002370 <USB_Task+0x90>
 400234c:	10c00120 	cmpeqi	r3,r2,4
 4002350:	18000b1e 	bne	r3,zero,4002380 <USB_Task+0xa0>
 4002354:	10800060 	cmpeqi	r2,r2,1
 4002358:	1000011e 	bne	r2,zero,4002360 <USB_Task+0x80>
                    break;
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
 400235c:	00016a06 	br	4002908 <USB_Task+0x628>
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
                case( USB_DETACHED_SUBSTATE_INITIALIZE ):
                    /* cleanup device data structures */
                    USB_init();
 4002360:	40022480 	call	4002248 <USB_init>
                    usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 4002364:	008000c4 	movi	r2,3
 4002368:	d0a00305 	stb	r2,-32756(gp)
                    break;
 400236c:	00000506 	br	4002384 <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE ):
                    /* Do nothing */
                    MAXreg_wr(rHCTL,bmSAMPLEBUS);
 4002370:	01400104 	movi	r5,4
 4002374:	01003a04 	movi	r4,232
 4002378:	40015280 	call	4001528 <MAXreg_wr>
                    break;
 400237c:	00000106 	br	4002384 <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
 4002380:	0001883a 	nop
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
 4002384:	00016006 	br	4002908 <USB_Task+0x628>
            /**/
        case( USB_STATE_ATTACHED ):                     //prepare for enumeration
            switch( usb_task_state ) {
 4002388:	d0a00303 	ldbu	r2,-32756(gp)
 400238c:	10803fcc 	andi	r2,r2,255
 4002390:	10bffc04 	addi	r2,r2,-16
 4002394:	10c001a8 	cmpgeui	r3,r2,6
 4002398:	1801561e 	bne	r3,zero,40028f4 <USB_Task+0x614>
 400239c:	100690ba 	slli	r3,r2,2
 40023a0:	00810034 	movhi	r2,1024
 40023a4:	1088ed04 	addi	r2,r2,9140
 40023a8:	1885883a 	add	r2,r3,r2
 40023ac:	10800017 	ldw	r2,0(r2)
 40023b0:	1000683a 	jmp	r2
 40023b4:	040023cc 	andi	r16,zero,143
 40023b8:	04002404 	movi	r16,144
 40023bc:	04002440 	call	400244 <__alt_mem_sdram-0x3bffdbc>
 40023c0:	04002464 	muli	r16,zero,145
 40023c4:	040024a4 	muli	r16,zero,146
 40023c8:	040024b8 	rdprs	r16,zero,146
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 40023cc:	d0a6f017 	ldw	r2,-25664(gp)
                case( USB_STATE_ATTACHED ):
                    usb_delay = (alt_nticks()*1000)/alt_ticks_per_second() + 200;           //initial settle 200ms
 40023d0:	0140fa04 	movi	r5,1000
 40023d4:	1009883a 	mov	r4,r2
 40023d8:	4002ce00 	call	4002ce0 <__mulsi3>
 40023dc:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 40023e0:	d0a6ef17 	ldw	r2,-25668(gp)
 40023e4:	100b883a 	mov	r5,r2
 40023e8:	1809883a 	mov	r4,r3
 40023ec:	4002c240 	call	4002c24 <__udivsi3>
 40023f0:	10803204 	addi	r2,r2,200
 40023f4:	d0a6e315 	stw	r2,-25716(gp)
                    usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 40023f8:	00800444 	movi	r2,17
 40023fc:	d0a00305 	stb	r2,-32756(gp)
                    break;//case( USB_STATE_ATTACHED )
 4002400:	0000d206 	br	400274c <USB_Task+0x46c>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4002404:	d0a6f017 	ldw	r2,-25664(gp)
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
 4002408:	0140fa04 	movi	r5,1000
 400240c:	1009883a 	mov	r4,r2
 4002410:	4002ce00 	call	4002ce0 <__mulsi3>
 4002414:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4002418:	d0a6ef17 	ldw	r2,-25668(gp)
 400241c:	100b883a 	mov	r5,r2
 4002420:	1809883a 	mov	r4,r3
 4002424:	4002c240 	call	4002c24 <__udivsi3>
 4002428:	1007883a 	mov	r3,r2
 400242c:	d0a6e317 	ldw	r2,-25716(gp)
 4002430:	10c0c32e 	bgeu	r2,r3,4002740 <USB_Task+0x460>
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 4002434:	00800484 	movi	r2,18
 4002438:	d0a00305 	stb	r2,-32756(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 400243c:	0000c006 	br	4002740 <USB_Task+0x460>
                case( USB_ATTACHED_SUBSTATE_RESET_DEVICE ):
                    MAXreg_wr( rHIRQ, bmBUSEVENTIRQ );                               //clear bus event IRQ
 4002440:	01400044 	movi	r5,1
 4002444:	01003204 	movi	r4,200
 4002448:	40015280 	call	4001528 <MAXreg_wr>
                    MAXreg_wr( rHCTL, bmBUSRST );                                    //issue bus reset
 400244c:	01400044 	movi	r5,1
 4002450:	01003a04 	movi	r4,232
 4002454:	40015280 	call	4001528 <MAXreg_wr>
                    usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 4002458:	008004c4 	movi	r2,19
 400245c:	d0a00305 	stb	r2,-32756(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_RESET_DEVICE )
 4002460:	0000ba06 	br	400274c <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE ):                  //wait for bus reset and first SOF
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
 4002464:	01003a04 	movi	r4,232
 4002468:	400172c0 	call	400172c <MAXreg_rd>
 400246c:	10803fcc 	andi	r2,r2,255
 4002470:	1080004c 	andi	r2,r2,1
 4002474:	1000b41e 	bne	r2,zero,4002748 <USB_Task+0x468>
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
 4002478:	01003604 	movi	r4,216
 400247c:	400172c0 	call	400172c <MAXreg_rd>
 4002480:	10800214 	ori	r2,r2,8
 4002484:	e0bfb945 	stb	r2,-283(fp)
                        MAXreg_wr( rMODE, tmpdata );
 4002488:	e0bfb943 	ldbu	r2,-283(fp)
 400248c:	100b883a 	mov	r5,r2
 4002490:	01003604 	movi	r4,216
 4002494:	40015280 	call	4001528 <MAXreg_wr>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 4002498:	00800504 	movi	r2,20
 400249c:	d0a00305 	stb	r2,-32756(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 40024a0:	0000a906 	br	4002748 <USB_Task+0x468>
                case( USB_ATTACHED_SUBSTATE_WAIT_SOF ):
                    if( MAXreg_rd( rHIRQ ) | bmFRAMEIRQ ) {                     //when first SOF received we can continue
 40024a4:	01003204 	movi	r4,200
 40024a8:	400172c0 	call	400172c <MAXreg_rd>
                        usb_task_state = USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE;
 40024ac:	00800544 	movi	r2,21
 40024b0:	d0a00305 	stb	r2,-32756(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_SOF )
 40024b4:	0000a506 	br	400274c <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):   //send request for first 8 bytes of device descriptor
                    devtable[ 0 ].epinfo->MaxPktSize = 0x0008;             //fill max packet size with minimum allowed
 40024b8:	00810074 	movhi	r2,1025
 40024bc:	10991904 	addi	r2,r2,25700
 40024c0:	10800017 	ldw	r2,0(r2)
 40024c4:	00c00204 	movi	r3,8
 40024c8:	10c0008d 	sth	r3,2(r2)
                	rcode = XferGetDevDescr( 0, 0, 8, (BYTE *)&buf );       //get device descriptor size
 40024cc:	e0bfba04 	addi	r2,fp,-280
 40024d0:	d8800415 	stw	r2,16(sp)
 40024d4:	00800204 	movi	r2,8
 40024d8:	d8800315 	stw	r2,12(sp)
 40024dc:	d8000215 	stw	zero,8(sp)
 40024e0:	00800044 	movi	r2,1
 40024e4:	d8800115 	stw	r2,4(sp)
 40024e8:	d8000015 	stw	zero,0(sp)
 40024ec:	01c00184 	movi	r7,6
 40024f0:	01802004 	movi	r6,128
 40024f4:	000b883a 	mov	r5,zero
 40024f8:	0009883a 	mov	r4,zero
 40024fc:	4001c940 	call	4001c94 <XferCtrlReq>
 4002500:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
 4002504:	e0bfb983 	ldbu	r2,-282(fp)
 4002508:	1000861e 	bne	r2,zero,4002724 <USB_Task+0x444>
                        devtable[ 0 ].epinfo->MaxPktSize = buf.bMaxPacketSize0;
 400250c:	00810074 	movhi	r2,1025
 4002510:	10991904 	addi	r2,r2,25700
 4002514:	10800017 	ldw	r2,0(r2)
 4002518:	e0ffbbc3 	ldbu	r3,-273(fp)
 400251c:	18c03fcc 	andi	r3,r3,255
 4002520:	10c0008d 	sth	r3,2(r2)

                        rcode = XferGetDevDescr( 0, 0, buf.bLength, (BYTE *)&buf );     //get full descriptor
 4002524:	e0bfba03 	ldbu	r2,-280(fp)
 4002528:	10803fcc 	andi	r2,r2,255
 400252c:	e0ffba04 	addi	r3,fp,-280
 4002530:	d8c00415 	stw	r3,16(sp)
 4002534:	d8800315 	stw	r2,12(sp)
 4002538:	d8000215 	stw	zero,8(sp)
 400253c:	00800044 	movi	r2,1
 4002540:	d8800115 	stw	r2,4(sp)
 4002544:	d8000015 	stw	zero,0(sp)
 4002548:	01c00184 	movi	r7,6
 400254c:	01802004 	movi	r6,128
 4002550:	000b883a 	mov	r5,zero
 4002554:	0009883a 	mov	r4,zero
 4002558:	4001c940 	call	4001c94 <XferCtrlReq>
 400255c:	e0bfb985 	stb	r2,-282(fp)
                        //pull the string descriptor for the product if it exists
            			//hackish, store this somewhere
                        if (buf.iManufacturer != 0)
 4002560:	e0bfbd83 	ldbu	r2,-266(fp)
 4002564:	10803fcc 	andi	r2,r2,255
 4002568:	10003426 	beq	r2,zero,400263c <USB_Task+0x35c>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                			rcode = XferGetStrDescr( 0, 0, 2, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 400256c:	e0bfbd83 	ldbu	r2,-266(fp)
 4002570:	10803fcc 	andi	r2,r2,255
 4002574:	e0ffbe84 	addi	r3,fp,-262
 4002578:	d8c00415 	stw	r3,16(sp)
 400257c:	00c00084 	movi	r3,2
 4002580:	d8c00315 	stw	r3,12(sp)
 4002584:	00c10244 	movi	r3,1033
 4002588:	d8c00215 	stw	r3,8(sp)
 400258c:	00c000c4 	movi	r3,3
 4002590:	d8c00115 	stw	r3,4(sp)
 4002594:	d8800015 	stw	r2,0(sp)
 4002598:	01c00184 	movi	r7,6
 400259c:	01802004 	movi	r6,128
 40025a0:	000b883a 	mov	r5,zero
 40025a4:	0009883a 	mov	r4,zero
 40025a8:	4001c940 	call	4001c94 <XferCtrlReq>
 40025ac:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 40025b0:	e0bfbd83 	ldbu	r2,-266(fp)
 40025b4:	10803fcc 	andi	r2,r2,255
 40025b8:	e0ffbe83 	ldbu	r3,-262(fp)
 40025bc:	18c03fcc 	andi	r3,r3,255
 40025c0:	e13fbe84 	addi	r4,fp,-262
 40025c4:	d9000415 	stw	r4,16(sp)
 40025c8:	d8c00315 	stw	r3,12(sp)
 40025cc:	00c10244 	movi	r3,1033
 40025d0:	d8c00215 	stw	r3,8(sp)
 40025d4:	00c000c4 	movi	r3,3
 40025d8:	d8c00115 	stw	r3,4(sp)
 40025dc:	d8800015 	stw	r2,0(sp)
 40025e0:	01c00184 	movi	r7,6
 40025e4:	01802004 	movi	r6,128
 40025e8:	000b883a 	mov	r5,zero
 40025ec:	0009883a 	mov	r4,zero
 40025f0:	4001c940 	call	4001c94 <XferCtrlReq>
 40025f4:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Mfgr string(%i): %s\n", buf.iManufacturer, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 40025f8:	e0bfbd83 	ldbu	r2,-266(fp)
 40025fc:	14003fcc 	andi	r16,r2,255
 4002600:	e0bfbe83 	ldbu	r2,-262(fp)
 4002604:	10803fcc 	andi	r2,r2,255
 4002608:	1004d07a 	srli	r2,r2,1
 400260c:	10bfffc4 	addi	r2,r2,-1
 4002610:	10c03fcc 	andi	r3,r2,255
 4002614:	e0bfbe84 	addi	r2,fp,-262
 4002618:	10800084 	addi	r2,r2,2
 400261c:	180b883a 	mov	r5,r3
 4002620:	1009883a 	mov	r4,r2
 4002624:	4002aa80 	call	4002aa8 <ConvUTF8ToStr>
 4002628:	100d883a 	mov	r6,r2
 400262c:	800b883a 	mov	r5,r16
 4002630:	01010074 	movhi	r4,1025
 4002634:	210a4f04 	addi	r4,r4,10556
 4002638:	4002d380 	call	4002d38 <printf>
                		}
                		if (buf.iProduct != 0)
 400263c:	e0bfbdc3 	ldbu	r2,-265(fp)
 4002640:	10803fcc 	andi	r2,r2,255
 4002644:	10003426 	beq	r2,zero,4002718 <USB_Task+0x438>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                        	rcode = XferGetStrDescr( 0, 0, 2, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 4002648:	e0bfbdc3 	ldbu	r2,-265(fp)
 400264c:	10803fcc 	andi	r2,r2,255
 4002650:	e0ffbe84 	addi	r3,fp,-262
 4002654:	d8c00415 	stw	r3,16(sp)
 4002658:	00c00084 	movi	r3,2
 400265c:	d8c00315 	stw	r3,12(sp)
 4002660:	00c10244 	movi	r3,1033
 4002664:	d8c00215 	stw	r3,8(sp)
 4002668:	00c000c4 	movi	r3,3
 400266c:	d8c00115 	stw	r3,4(sp)
 4002670:	d8800015 	stw	r2,0(sp)
 4002674:	01c00184 	movi	r7,6
 4002678:	01802004 	movi	r6,128
 400267c:	000b883a 	mov	r5,zero
 4002680:	0009883a 	mov	r4,zero
 4002684:	4001c940 	call	4001c94 <XferCtrlReq>
 4002688:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 400268c:	e0bfbdc3 	ldbu	r2,-265(fp)
 4002690:	10803fcc 	andi	r2,r2,255
 4002694:	e0ffbe83 	ldbu	r3,-262(fp)
 4002698:	18c03fcc 	andi	r3,r3,255
 400269c:	e13fbe84 	addi	r4,fp,-262
 40026a0:	d9000415 	stw	r4,16(sp)
 40026a4:	d8c00315 	stw	r3,12(sp)
 40026a8:	00c10244 	movi	r3,1033
 40026ac:	d8c00215 	stw	r3,8(sp)
 40026b0:	00c000c4 	movi	r3,3
 40026b4:	d8c00115 	stw	r3,4(sp)
 40026b8:	d8800015 	stw	r2,0(sp)
 40026bc:	01c00184 	movi	r7,6
 40026c0:	01802004 	movi	r6,128
 40026c4:	000b883a 	mov	r5,zero
 40026c8:	0009883a 	mov	r4,zero
 40026cc:	4001c940 	call	4001c94 <XferCtrlReq>
 40026d0:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Product string(%i): %s\n", buf.iProduct, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 40026d4:	e0bfbdc3 	ldbu	r2,-265(fp)
 40026d8:	14003fcc 	andi	r16,r2,255
 40026dc:	e0bfbe83 	ldbu	r2,-262(fp)
 40026e0:	10803fcc 	andi	r2,r2,255
 40026e4:	1004d07a 	srli	r2,r2,1
 40026e8:	10bfffc4 	addi	r2,r2,-1
 40026ec:	10c03fcc 	andi	r3,r2,255
 40026f0:	e0bfbe84 	addi	r2,fp,-262
 40026f4:	10800084 	addi	r2,r2,2
 40026f8:	180b883a 	mov	r5,r3
 40026fc:	1009883a 	mov	r4,r2
 4002700:	4002aa80 	call	4002aa8 <ConvUTF8ToStr>
 4002704:	100d883a 	mov	r6,r2
 4002708:	800b883a 	mov	r5,r16
 400270c:	01010074 	movhi	r4,1025
 4002710:	210a5504 	addi	r4,r4,10580
 4002714:	4002d380 	call	4002d38 <printf>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;
 4002718:	00800804 	movi	r2,32
 400271c:	d0a00305 	stb	r2,-32756(gp)
                    else {
                        usb_error = rcode;
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 4002720:	00000a06 	br	400274c <USB_Task+0x46c>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;

                    }
                    else {
                        usb_error = rcode;
 4002724:	e0bfb983 	ldbu	r2,-282(fp)
 4002728:	d0a6e445 	stb	r2,-25711(gp)
                        last_usb_task_state = usb_task_state;
 400272c:	d0a00303 	ldbu	r2,-32756(gp)
 4002730:	d0a6e205 	stb	r2,-25720(gp)
                        usb_task_state = USB_STATE_ERROR;
 4002734:	00bfffc4 	movi	r2,-1
 4002738:	d0a00305 	stb	r2,-32756(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 400273c:	00000306 	br	400274c <USB_Task+0x46c>
                    break;//case( USB_STATE_ATTACHED )
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 4002740:	0001883a 	nop
 4002744:	00006b06 	br	40028f4 <USB_Task+0x614>
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
                        MAXreg_wr( rMODE, tmpdata );
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 4002748:	0001883a 	nop
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
 400274c:	00006906 	br	40028f4 <USB_Task+0x614>
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 4002750:	00800044 	movi	r2,1
 4002754:	e0bfb905 	stb	r2,-284(fp)
 4002758:	00002d06 	br	4002810 <USB_Task+0x530>
                if( devtable[ i ].epinfo == NULL ) {
 400275c:	e0ffb903 	ldbu	r3,-284(fp)
 4002760:	00810074 	movhi	r2,1025
 4002764:	10991904 	addi	r2,r2,25700
 4002768:	180690fa 	slli	r3,r3,3
 400276c:	10c5883a 	add	r2,r2,r3
 4002770:	10800017 	ldw	r2,0(r2)
 4002774:	1000231e 	bne	r2,zero,4002804 <USB_Task+0x524>
                    devtable[ i ].epinfo = devtable[ 0 ].epinfo;        //set correct MaxPktSize
 4002778:	e13fb903 	ldbu	r4,-284(fp)
 400277c:	00810074 	movhi	r2,1025
 4002780:	10991904 	addi	r2,r2,25700
 4002784:	10c00017 	ldw	r3,0(r2)
 4002788:	00810074 	movhi	r2,1025
 400278c:	10991904 	addi	r2,r2,25700
 4002790:	200890fa 	slli	r4,r4,3
 4002794:	1105883a 	add	r2,r2,r4
 4002798:	10c00015 	stw	r3,0(r2)
                    //devtable[ i ].epinfo->MaxPktSize = devtable[ 0 ].epinfo->MaxPktSize;  //copy uninitialized device record to have correct MaxPktSize
                    rcode = XferSetAddr( 0, 0, i );
 400279c:	e0bfb903 	ldbu	r2,-284(fp)
 40027a0:	d8000415 	stw	zero,16(sp)
 40027a4:	d8000315 	stw	zero,12(sp)
 40027a8:	d8000215 	stw	zero,8(sp)
 40027ac:	d8000115 	stw	zero,4(sp)
 40027b0:	d8800015 	stw	r2,0(sp)
 40027b4:	01c00144 	movi	r7,5
 40027b8:	000d883a 	mov	r6,zero
 40027bc:	000b883a 	mov	r5,zero
 40027c0:	0009883a 	mov	r4,zero
 40027c4:	4001c940 	call	4001c94 <XferCtrlReq>
 40027c8:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
 40027cc:	e0bfb983 	ldbu	r2,-282(fp)
 40027d0:	1000051e 	bne	r2,zero,40027e8 <USB_Task+0x508>
                        tmp_addr = i;
 40027d4:	e0bfb903 	ldbu	r2,-284(fp)
 40027d8:	d0a6e405 	stb	r2,-25712(gp)
                        usb_task_state = USB_STATE_CONFIGURING;
 40027dc:	00800c04 	movi	r2,48
 40027e0:	d0a00305 	stb	r2,-32756(gp)
                    else {
                        usb_error = rcode;          //set address error
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
 40027e4:	00000d06 	br	400281c <USB_Task+0x53c>
                    if( rcode == 0 ) {
                        tmp_addr = i;
                        usb_task_state = USB_STATE_CONFIGURING;
                    }
                    else {
                        usb_error = rcode;          //set address error
 40027e8:	e0bfb983 	ldbu	r2,-282(fp)
 40027ec:	d0a6e445 	stb	r2,-25711(gp)
                        last_usb_task_state = usb_task_state;
 40027f0:	d0a00303 	ldbu	r2,-32756(gp)
 40027f4:	d0a6e205 	stb	r2,-25720(gp)
                        usb_task_state = USB_STATE_ERROR;
 40027f8:	00bfffc4 	movi	r2,-1
 40027fc:	d0a00305 	stb	r2,-32756(gp)
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
 4002800:	00000606 	br	400281c <USB_Task+0x53c>
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 4002804:	e0bfb903 	ldbu	r2,-284(fp)
 4002808:	10800044 	addi	r2,r2,1
 400280c:	e0bfb905 	stb	r2,-284(fp)
 4002810:	e0bfb903 	ldbu	r2,-284(fp)
 4002814:	10800230 	cmpltui	r2,r2,8
 4002818:	103fd01e 	bne	r2,zero,400275c <__alt_data_end+0xfc00275c>
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
                }
            }
            if( usb_task_state == USB_STATE_ADDRESSING ) {
 400281c:	d0a00303 	ldbu	r2,-32756(gp)
 4002820:	10803fcc 	andi	r2,r2,255
 4002824:	10800818 	cmpnei	r2,r2,32
 4002828:	1000341e 	bne	r2,zero,40028fc <USB_Task+0x61c>
                usb_error = 0xfe;
 400282c:	00bfff84 	movi	r2,-2
 4002830:	d0a6e445 	stb	r2,-25711(gp)
                last_usb_task_state = usb_task_state;
 4002834:	d0a00303 	ldbu	r2,-32756(gp)
 4002838:	d0a6e205 	stb	r2,-25720(gp)
                usb_task_state = USB_STATE_ERROR;
 400283c:	00bfffc4 	movi	r2,-1
 4002840:	d0a00305 	stb	r2,-32756(gp)
            }
            break;//case ( USB_STATE_ADDRESSING )
 4002844:	00002d06 	br	40028fc <USB_Task+0x61c>
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 4002848:	e03fb905 	stb	zero,-284(fp)
 400284c:	00001706 	br	40028ac <USB_Task+0x5cc>
                rcode = ClientDriverTable[ i ].Initialize( tmp_addr, 0 );
 4002850:	e0bfb903 	ldbu	r2,-284(fp)
 4002854:	04010074 	movhi	r16,1025
 4002858:	840b1b04 	addi	r16,r16,11372
 400285c:	01400304 	movi	r5,12
 4002860:	1009883a 	mov	r4,r2
 4002864:	4002ce00 	call	4002ce0 <__mulsi3>
 4002868:	8085883a 	add	r2,r16,r2
 400286c:	10800017 	ldw	r2,0(r2)
 4002870:	d0e6e403 	ldbu	r3,-25712(gp)
 4002874:	18c03fcc 	andi	r3,r3,255
 4002878:	000b883a 	mov	r5,zero
 400287c:	1809883a 	mov	r4,r3
 4002880:	103ee83a 	callr	r2
 4002884:	e0bfb985 	stb	r2,-282(fp)
                if( rcode == TRUE ) {
 4002888:	e0bfb983 	ldbu	r2,-282(fp)
 400288c:	10800058 	cmpnei	r2,r2,1
 4002890:	1000031e 	bne	r2,zero,40028a0 <USB_Task+0x5c0>
			        usb_task_state = USB_STATE_RUNNING;
 4002894:	00801004 	movi	r2,64
 4002898:	d0a00305 	stb	r2,-32756(gp)
                    break;
 400289c:	00000606 	br	40028b8 <USB_Task+0x5d8>
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 40028a0:	e0bfb903 	ldbu	r2,-284(fp)
 40028a4:	10800044 	addi	r2,r2,1
 40028a8:	e0bfb905 	stb	r2,-284(fp)
 40028ac:	e0bfb903 	ldbu	r2,-284(fp)
 40028b0:	10800130 	cmpltui	r2,r2,4
 40028b4:	103fe61e 	bne	r2,zero,4002850 <__alt_data_end+0xfc002850>
                if( rcode == TRUE ) {
			        usb_task_state = USB_STATE_RUNNING;
                    break;
                }
            }
            if( usb_task_state == USB_STATE_CONFIGURING ) {
 40028b8:	d0a00303 	ldbu	r2,-32756(gp)
 40028bc:	10803fcc 	andi	r2,r2,255
 40028c0:	10800c18 	cmpnei	r2,r2,48
 40028c4:	10000f1e 	bne	r2,zero,4002904 <USB_Task+0x624>
                usb_error = 0xfd;
 40028c8:	00bfff44 	movi	r2,-3
 40028cc:	d0a6e445 	stb	r2,-25711(gp)
                last_usb_task_state = usb_task_state;
 40028d0:	d0a00303 	ldbu	r2,-32756(gp)
 40028d4:	d0a6e205 	stb	r2,-25720(gp)
                usb_task_state = USB_STATE_ERROR;
 40028d8:	00bfffc4 	movi	r2,-1
 40028dc:	d0a00305 	stb	r2,-32756(gp)
            }
            break;//( USB_STATE_CONFIGURING )
 40028e0:	00000806 	br	4002904 <USB_Task+0x624>
        case( USB_STATE_RUNNING ):
          //vTaskDelay( LED_RATE );
            break;//( USB_STATE_RUNNING )
 40028e4:	0001883a 	nop
 40028e8:	00000706 	br	4002908 <USB_Task+0x628>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
 40028ec:	0001883a 	nop
 40028f0:	00000506 	br	4002908 <USB_Task+0x628>
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
 40028f4:	0001883a 	nop
 40028f8:	00000306 	br	4002908 <USB_Task+0x628>
            if( usb_task_state == USB_STATE_ADDRESSING ) {
                usb_error = 0xfe;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
 40028fc:	0001883a 	nop
 4002900:	00000106 	br	4002908 <USB_Task+0x628>
            if( usb_task_state == USB_STATE_CONFIGURING ) {
                usb_error = 0xfd;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//( USB_STATE_CONFIGURING )
 4002904:	0001883a 	nop
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
    }//switch( usb_task_state & STATE_MASK )
}
 4002908:	0001883a 	nop
 400290c:	e6ffff04 	addi	sp,fp,-4
 4002910:	dfc00217 	ldw	ra,8(sp)
 4002914:	df000117 	ldw	fp,4(sp)
 4002918:	dc000017 	ldw	r16,0(sp)
 400291c:	dec00304 	addi	sp,sp,12
 4002920:	f800283a 	ret

04002924 <MSDProbe>:

//place-holders for MSD (mass-storage device) drivers, we don't have them ported.
//returns TRUE if device is successfully identified and configured, otherwise returns FALSE
BOOL MSDProbe( BYTE addr, DWORD flags )
{
 4002924:	defffd04 	addi	sp,sp,-12
 4002928:	df000215 	stw	fp,8(sp)
 400292c:	df000204 	addi	fp,sp,8
 4002930:	2005883a 	mov	r2,r4
 4002934:	e17fff15 	stw	r5,-4(fp)
 4002938:	e0bffe05 	stb	r2,-8(fp)
    return( FALSE );
 400293c:	0005883a 	mov	r2,zero
}
 4002940:	e037883a 	mov	sp,fp
 4002944:	df000017 	ldw	fp,0(sp)
 4002948:	dec00104 	addi	sp,sp,4
 400294c:	f800283a 	ret

04002950 <MSDEventHandler>:

BOOL MSDEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 4002950:	defffb04 	addi	sp,sp,-20
 4002954:	df000415 	stw	fp,16(sp)
 4002958:	df000404 	addi	fp,sp,16
 400295c:	2007883a 	mov	r3,r4
 4002960:	2805883a 	mov	r2,r5
 4002964:	e1bffe15 	stw	r6,-8(fp)
 4002968:	e1ffff15 	stw	r7,-4(fp)
 400296c:	e0fffc05 	stb	r3,-16(fp)
 4002970:	e0bffd05 	stb	r2,-12(fp)

	return( FALSE );
 4002974:	0005883a 	mov	r2,zero

}
 4002978:	e037883a 	mov	sp,fp
 400297c:	df000017 	ldw	fp,0(sp)
 4002980:	dec00104 	addi	sp,sp,4
 4002984:	f800283a 	ret

04002988 <CDCProbe>:
//CDC (communication device class also not supported)
BOOL CDCProbe( BYTE address, DWORD flags )
{
 4002988:	defffd04 	addi	sp,sp,-12
 400298c:	df000215 	stw	fp,8(sp)
 4002990:	df000204 	addi	fp,sp,8
 4002994:	2005883a 	mov	r2,r4
 4002998:	e17fff15 	stw	r5,-4(fp)
 400299c:	e0bffe05 	stb	r2,-8(fp)

	return( FALSE );
 40029a0:	0005883a 	mov	r2,zero

}
 40029a4:	e037883a 	mov	sp,fp
 40029a8:	df000017 	ldw	fp,0(sp)
 40029ac:	dec00104 	addi	sp,sp,4
 40029b0:	f800283a 	ret

040029b4 <CDCEventHandler>:

BOOL CDCEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 40029b4:	defffb04 	addi	sp,sp,-20
 40029b8:	df000415 	stw	fp,16(sp)
 40029bc:	df000404 	addi	fp,sp,16
 40029c0:	2007883a 	mov	r3,r4
 40029c4:	2805883a 	mov	r2,r5
 40029c8:	e1bffe15 	stw	r6,-8(fp)
 40029cc:	e1ffff15 	stw	r7,-4(fp)
 40029d0:	e0fffc05 	stb	r3,-16(fp)
 40029d4:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
 40029d8:	0005883a 	mov	r2,zero
}
 40029dc:	e037883a 	mov	sp,fp
 40029e0:	df000017 	ldw	fp,0(sp)
 40029e4:	dec00104 	addi	sp,sp,4
 40029e8:	f800283a 	ret

040029ec <DummyProbe>:

BOOL DummyProbe( BYTE address , DWORD flags )
{
 40029ec:	defffd04 	addi	sp,sp,-12
 40029f0:	df000215 	stw	fp,8(sp)
 40029f4:	df000204 	addi	fp,sp,8
 40029f8:	2005883a 	mov	r2,r4
 40029fc:	e17fff15 	stw	r5,-4(fp)
 4002a00:	e0bffe05 	stb	r2,-8(fp)
	return( FALSE );
 4002a04:	0005883a 	mov	r2,zero
}
 4002a08:	e037883a 	mov	sp,fp
 4002a0c:	df000017 	ldw	fp,0(sp)
 4002a10:	dec00104 	addi	sp,sp,4
 4002a14:	f800283a 	ret

04002a18 <DummyEventHandler>:

BOOL DummyEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 4002a18:	defffb04 	addi	sp,sp,-20
 4002a1c:	df000415 	stw	fp,16(sp)
 4002a20:	df000404 	addi	fp,sp,16
 4002a24:	2007883a 	mov	r3,r4
 4002a28:	2805883a 	mov	r2,r5
 4002a2c:	e1bffe15 	stw	r6,-8(fp)
 4002a30:	e1ffff15 	stw	r7,-4(fp)
 4002a34:	e0fffc05 	stb	r3,-16(fp)
 4002a38:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
 4002a3c:	0005883a 	mov	r2,zero
}
 4002a40:	e037883a 	mov	sp,fp
 4002a44:	df000017 	ldw	fp,0(sp)
 4002a48:	dec00104 	addi	sp,sp,4
 4002a4c:	f800283a 	ret

04002a50 <GetUsbTaskState>:
/* Function to access usb_task_state variable from outside */
BYTE GetUsbTaskState( void )
{
 4002a50:	deffff04 	addi	sp,sp,-4
 4002a54:	df000015 	stw	fp,0(sp)
 4002a58:	d839883a 	mov	fp,sp
    return( usb_task_state );
 4002a5c:	d0a00303 	ldbu	r2,-32756(gp)
}
 4002a60:	e037883a 	mov	sp,fp
 4002a64:	df000017 	ldw	fp,0(sp)
 4002a68:	dec00104 	addi	sp,sp,4
 4002a6c:	f800283a 	ret

04002a70 <GetDevtable>:
/* Function to access devtable[] from outside */
DEV_RECORD* GetDevtable( BYTE index )
{
 4002a70:	defffe04 	addi	sp,sp,-8
 4002a74:	df000115 	stw	fp,4(sp)
 4002a78:	df000104 	addi	fp,sp,4
 4002a7c:	2005883a 	mov	r2,r4
 4002a80:	e0bfff05 	stb	r2,-4(fp)
    return( &devtable[ index ] );
 4002a84:	e0bfff03 	ldbu	r2,-4(fp)
 4002a88:	100690fa 	slli	r3,r2,3
 4002a8c:	00810074 	movhi	r2,1025
 4002a90:	10991904 	addi	r2,r2,25700
 4002a94:	1885883a 	add	r2,r3,r2
}
 4002a98:	e037883a 	mov	sp,fp
 4002a9c:	df000017 	ldw	fp,0(sp)
 4002aa0:	dec00104 	addi	sp,sp,4
 4002aa4:	f800283a 	ret

04002aa8 <ConvUTF8ToStr>:

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
 4002aa8:	defffc04 	addi	sp,sp,-16
 4002aac:	df000315 	stw	fp,12(sp)
 4002ab0:	df000304 	addi	fp,sp,12
 4002ab4:	e13ffe15 	stw	r4,-8(fp)
 4002ab8:	2805883a 	mov	r2,r5
 4002abc:	e0bfff05 	stb	r2,-4(fp)
	BYTE i;
	for (i = 0; i < length; i++)
 4002ac0:	e03ffd05 	stb	zero,-12(fp)
 4002ac4:	00000d06 	br	4002afc <ConvUTF8ToStr+0x54>
	{
		utf8[i] = utf8[2*i];
 4002ac8:	e0bffd03 	ldbu	r2,-12(fp)
 4002acc:	e0fffe17 	ldw	r3,-8(fp)
 4002ad0:	1887883a 	add	r3,r3,r2
 4002ad4:	e0bffd03 	ldbu	r2,-12(fp)
 4002ad8:	1085883a 	add	r2,r2,r2
 4002adc:	1009883a 	mov	r4,r2
 4002ae0:	e0bffe17 	ldw	r2,-8(fp)
 4002ae4:	1105883a 	add	r2,r2,r4
 4002ae8:	10800003 	ldbu	r2,0(r2)
 4002aec:	18800005 	stb	r2,0(r3)
}

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
	BYTE i;
	for (i = 0; i < length; i++)
 4002af0:	e0bffd03 	ldbu	r2,-12(fp)
 4002af4:	10800044 	addi	r2,r2,1
 4002af8:	e0bffd05 	stb	r2,-12(fp)
 4002afc:	e0fffd03 	ldbu	r3,-12(fp)
 4002b00:	e0bfff03 	ldbu	r2,-4(fp)
 4002b04:	18bff036 	bltu	r3,r2,4002ac8 <__alt_data_end+0xfc002ac8>
	{
		utf8[i] = utf8[2*i];
	}
	utf8[length] = 0x00;
 4002b08:	e0bfff03 	ldbu	r2,-4(fp)
 4002b0c:	e0fffe17 	ldw	r3,-8(fp)
 4002b10:	1885883a 	add	r2,r3,r2
 4002b14:	10000005 	stb	zero,0(r2)
	return (char*)utf8;
 4002b18:	e0bffe17 	ldw	r2,-8(fp)
}
 4002b1c:	e037883a 	mov	sp,fp
 4002b20:	df000017 	ldw	fp,0(sp)
 4002b24:	dec00104 	addi	sp,sp,4
 4002b28:	f800283a 	ret

04002b2c <__divsi3>:
 4002b2c:	20001b16 	blt	r4,zero,4002b9c <__divsi3+0x70>
 4002b30:	000f883a 	mov	r7,zero
 4002b34:	28001616 	blt	r5,zero,4002b90 <__divsi3+0x64>
 4002b38:	200d883a 	mov	r6,r4
 4002b3c:	29001a2e 	bgeu	r5,r4,4002ba8 <__divsi3+0x7c>
 4002b40:	00800804 	movi	r2,32
 4002b44:	00c00044 	movi	r3,1
 4002b48:	00000106 	br	4002b50 <__divsi3+0x24>
 4002b4c:	10000d26 	beq	r2,zero,4002b84 <__divsi3+0x58>
 4002b50:	294b883a 	add	r5,r5,r5
 4002b54:	10bfffc4 	addi	r2,r2,-1
 4002b58:	18c7883a 	add	r3,r3,r3
 4002b5c:	293ffb36 	bltu	r5,r4,4002b4c <__alt_data_end+0xfc002b4c>
 4002b60:	0005883a 	mov	r2,zero
 4002b64:	18000726 	beq	r3,zero,4002b84 <__divsi3+0x58>
 4002b68:	0005883a 	mov	r2,zero
 4002b6c:	31400236 	bltu	r6,r5,4002b78 <__divsi3+0x4c>
 4002b70:	314dc83a 	sub	r6,r6,r5
 4002b74:	10c4b03a 	or	r2,r2,r3
 4002b78:	1806d07a 	srli	r3,r3,1
 4002b7c:	280ad07a 	srli	r5,r5,1
 4002b80:	183ffa1e 	bne	r3,zero,4002b6c <__alt_data_end+0xfc002b6c>
 4002b84:	38000126 	beq	r7,zero,4002b8c <__divsi3+0x60>
 4002b88:	0085c83a 	sub	r2,zero,r2
 4002b8c:	f800283a 	ret
 4002b90:	014bc83a 	sub	r5,zero,r5
 4002b94:	39c0005c 	xori	r7,r7,1
 4002b98:	003fe706 	br	4002b38 <__alt_data_end+0xfc002b38>
 4002b9c:	0109c83a 	sub	r4,zero,r4
 4002ba0:	01c00044 	movi	r7,1
 4002ba4:	003fe306 	br	4002b34 <__alt_data_end+0xfc002b34>
 4002ba8:	00c00044 	movi	r3,1
 4002bac:	003fee06 	br	4002b68 <__alt_data_end+0xfc002b68>

04002bb0 <__modsi3>:
 4002bb0:	20001716 	blt	r4,zero,4002c10 <__modsi3+0x60>
 4002bb4:	000f883a 	mov	r7,zero
 4002bb8:	2005883a 	mov	r2,r4
 4002bbc:	28001216 	blt	r5,zero,4002c08 <__modsi3+0x58>
 4002bc0:	2900162e 	bgeu	r5,r4,4002c1c <__modsi3+0x6c>
 4002bc4:	01800804 	movi	r6,32
 4002bc8:	00c00044 	movi	r3,1
 4002bcc:	00000106 	br	4002bd4 <__modsi3+0x24>
 4002bd0:	30000a26 	beq	r6,zero,4002bfc <__modsi3+0x4c>
 4002bd4:	294b883a 	add	r5,r5,r5
 4002bd8:	31bfffc4 	addi	r6,r6,-1
 4002bdc:	18c7883a 	add	r3,r3,r3
 4002be0:	293ffb36 	bltu	r5,r4,4002bd0 <__alt_data_end+0xfc002bd0>
 4002be4:	18000526 	beq	r3,zero,4002bfc <__modsi3+0x4c>
 4002be8:	1806d07a 	srli	r3,r3,1
 4002bec:	11400136 	bltu	r2,r5,4002bf4 <__modsi3+0x44>
 4002bf0:	1145c83a 	sub	r2,r2,r5
 4002bf4:	280ad07a 	srli	r5,r5,1
 4002bf8:	183ffb1e 	bne	r3,zero,4002be8 <__alt_data_end+0xfc002be8>
 4002bfc:	38000126 	beq	r7,zero,4002c04 <__modsi3+0x54>
 4002c00:	0085c83a 	sub	r2,zero,r2
 4002c04:	f800283a 	ret
 4002c08:	014bc83a 	sub	r5,zero,r5
 4002c0c:	003fec06 	br	4002bc0 <__alt_data_end+0xfc002bc0>
 4002c10:	0109c83a 	sub	r4,zero,r4
 4002c14:	01c00044 	movi	r7,1
 4002c18:	003fe706 	br	4002bb8 <__alt_data_end+0xfc002bb8>
 4002c1c:	00c00044 	movi	r3,1
 4002c20:	003ff106 	br	4002be8 <__alt_data_end+0xfc002be8>

04002c24 <__udivsi3>:
 4002c24:	200d883a 	mov	r6,r4
 4002c28:	2900152e 	bgeu	r5,r4,4002c80 <__udivsi3+0x5c>
 4002c2c:	28001416 	blt	r5,zero,4002c80 <__udivsi3+0x5c>
 4002c30:	00800804 	movi	r2,32
 4002c34:	00c00044 	movi	r3,1
 4002c38:	00000206 	br	4002c44 <__udivsi3+0x20>
 4002c3c:	10000e26 	beq	r2,zero,4002c78 <__udivsi3+0x54>
 4002c40:	28000516 	blt	r5,zero,4002c58 <__udivsi3+0x34>
 4002c44:	294b883a 	add	r5,r5,r5
 4002c48:	10bfffc4 	addi	r2,r2,-1
 4002c4c:	18c7883a 	add	r3,r3,r3
 4002c50:	293ffa36 	bltu	r5,r4,4002c3c <__alt_data_end+0xfc002c3c>
 4002c54:	18000826 	beq	r3,zero,4002c78 <__udivsi3+0x54>
 4002c58:	0005883a 	mov	r2,zero
 4002c5c:	31400236 	bltu	r6,r5,4002c68 <__udivsi3+0x44>
 4002c60:	314dc83a 	sub	r6,r6,r5
 4002c64:	10c4b03a 	or	r2,r2,r3
 4002c68:	1806d07a 	srli	r3,r3,1
 4002c6c:	280ad07a 	srli	r5,r5,1
 4002c70:	183ffa1e 	bne	r3,zero,4002c5c <__alt_data_end+0xfc002c5c>
 4002c74:	f800283a 	ret
 4002c78:	0005883a 	mov	r2,zero
 4002c7c:	f800283a 	ret
 4002c80:	00c00044 	movi	r3,1
 4002c84:	003ff406 	br	4002c58 <__alt_data_end+0xfc002c58>

04002c88 <__umodsi3>:
 4002c88:	2005883a 	mov	r2,r4
 4002c8c:	2900122e 	bgeu	r5,r4,4002cd8 <__umodsi3+0x50>
 4002c90:	28001116 	blt	r5,zero,4002cd8 <__umodsi3+0x50>
 4002c94:	01800804 	movi	r6,32
 4002c98:	00c00044 	movi	r3,1
 4002c9c:	00000206 	br	4002ca8 <__umodsi3+0x20>
 4002ca0:	30000c26 	beq	r6,zero,4002cd4 <__umodsi3+0x4c>
 4002ca4:	28000516 	blt	r5,zero,4002cbc <__umodsi3+0x34>
 4002ca8:	294b883a 	add	r5,r5,r5
 4002cac:	31bfffc4 	addi	r6,r6,-1
 4002cb0:	18c7883a 	add	r3,r3,r3
 4002cb4:	293ffa36 	bltu	r5,r4,4002ca0 <__alt_data_end+0xfc002ca0>
 4002cb8:	18000626 	beq	r3,zero,4002cd4 <__umodsi3+0x4c>
 4002cbc:	1806d07a 	srli	r3,r3,1
 4002cc0:	11400136 	bltu	r2,r5,4002cc8 <__umodsi3+0x40>
 4002cc4:	1145c83a 	sub	r2,r2,r5
 4002cc8:	280ad07a 	srli	r5,r5,1
 4002ccc:	183ffb1e 	bne	r3,zero,4002cbc <__alt_data_end+0xfc002cbc>
 4002cd0:	f800283a 	ret
 4002cd4:	f800283a 	ret
 4002cd8:	00c00044 	movi	r3,1
 4002cdc:	003ff706 	br	4002cbc <__alt_data_end+0xfc002cbc>

04002ce0 <__mulsi3>:
 4002ce0:	0005883a 	mov	r2,zero
 4002ce4:	20000726 	beq	r4,zero,4002d04 <__mulsi3+0x24>
 4002ce8:	20c0004c 	andi	r3,r4,1
 4002cec:	2008d07a 	srli	r4,r4,1
 4002cf0:	18000126 	beq	r3,zero,4002cf8 <__mulsi3+0x18>
 4002cf4:	1145883a 	add	r2,r2,r5
 4002cf8:	294b883a 	add	r5,r5,r5
 4002cfc:	203ffa1e 	bne	r4,zero,4002ce8 <__alt_data_end+0xfc002ce8>
 4002d00:	f800283a 	ret
 4002d04:	f800283a 	ret

04002d08 <_printf_r>:
 4002d08:	defffd04 	addi	sp,sp,-12
 4002d0c:	2805883a 	mov	r2,r5
 4002d10:	dfc00015 	stw	ra,0(sp)
 4002d14:	d9800115 	stw	r6,4(sp)
 4002d18:	d9c00215 	stw	r7,8(sp)
 4002d1c:	21400217 	ldw	r5,8(r4)
 4002d20:	d9c00104 	addi	r7,sp,4
 4002d24:	100d883a 	mov	r6,r2
 4002d28:	4002f000 	call	4002f00 <___vfprintf_internal_r>
 4002d2c:	dfc00017 	ldw	ra,0(sp)
 4002d30:	dec00304 	addi	sp,sp,12
 4002d34:	f800283a 	ret

04002d38 <printf>:
 4002d38:	defffc04 	addi	sp,sp,-16
 4002d3c:	dfc00015 	stw	ra,0(sp)
 4002d40:	d9400115 	stw	r5,4(sp)
 4002d44:	d9800215 	stw	r6,8(sp)
 4002d48:	d9c00315 	stw	r7,12(sp)
 4002d4c:	00810074 	movhi	r2,1025
 4002d50:	1091d704 	addi	r2,r2,18268
 4002d54:	10800017 	ldw	r2,0(r2)
 4002d58:	200b883a 	mov	r5,r4
 4002d5c:	d9800104 	addi	r6,sp,4
 4002d60:	11000217 	ldw	r4,8(r2)
 4002d64:	40051dc0 	call	40051dc <__vfprintf_internal>
 4002d68:	dfc00017 	ldw	ra,0(sp)
 4002d6c:	dec00404 	addi	sp,sp,16
 4002d70:	f800283a 	ret

04002d74 <_putchar_r>:
 4002d74:	21800217 	ldw	r6,8(r4)
 4002d78:	4009da01 	jmpi	4009da0 <_putc_r>

04002d7c <putchar>:
 4002d7c:	00810074 	movhi	r2,1025
 4002d80:	1091d704 	addi	r2,r2,18268
 4002d84:	200b883a 	mov	r5,r4
 4002d88:	11000017 	ldw	r4,0(r2)
 4002d8c:	21800217 	ldw	r6,8(r4)
 4002d90:	4009da01 	jmpi	4009da0 <_putc_r>

04002d94 <_puts_r>:
 4002d94:	defff604 	addi	sp,sp,-40
 4002d98:	dc000715 	stw	r16,28(sp)
 4002d9c:	2021883a 	mov	r16,r4
 4002da0:	2809883a 	mov	r4,r5
 4002da4:	dc400815 	stw	r17,32(sp)
 4002da8:	dfc00915 	stw	ra,36(sp)
 4002dac:	2823883a 	mov	r17,r5
 4002db0:	4002e680 	call	4002e68 <strlen>
 4002db4:	10c00044 	addi	r3,r2,1
 4002db8:	d8800115 	stw	r2,4(sp)
 4002dbc:	00810074 	movhi	r2,1025
 4002dc0:	108a5b04 	addi	r2,r2,10604
 4002dc4:	d8800215 	stw	r2,8(sp)
 4002dc8:	00800044 	movi	r2,1
 4002dcc:	d8800315 	stw	r2,12(sp)
 4002dd0:	00800084 	movi	r2,2
 4002dd4:	dc400015 	stw	r17,0(sp)
 4002dd8:	d8c00615 	stw	r3,24(sp)
 4002ddc:	dec00415 	stw	sp,16(sp)
 4002de0:	d8800515 	stw	r2,20(sp)
 4002de4:	80000226 	beq	r16,zero,4002df0 <_puts_r+0x5c>
 4002de8:	80800e17 	ldw	r2,56(r16)
 4002dec:	10001426 	beq	r2,zero,4002e40 <_puts_r+0xac>
 4002df0:	81400217 	ldw	r5,8(r16)
 4002df4:	2880030b 	ldhu	r2,12(r5)
 4002df8:	10c8000c 	andi	r3,r2,8192
 4002dfc:	1800061e 	bne	r3,zero,4002e18 <_puts_r+0x84>
 4002e00:	29001917 	ldw	r4,100(r5)
 4002e04:	00f7ffc4 	movi	r3,-8193
 4002e08:	10880014 	ori	r2,r2,8192
 4002e0c:	20c6703a 	and	r3,r4,r3
 4002e10:	2880030d 	sth	r2,12(r5)
 4002e14:	28c01915 	stw	r3,100(r5)
 4002e18:	d9800404 	addi	r6,sp,16
 4002e1c:	8009883a 	mov	r4,r16
 4002e20:	40077440 	call	4007744 <__sfvwrite_r>
 4002e24:	1000091e 	bne	r2,zero,4002e4c <_puts_r+0xb8>
 4002e28:	00800284 	movi	r2,10
 4002e2c:	dfc00917 	ldw	ra,36(sp)
 4002e30:	dc400817 	ldw	r17,32(sp)
 4002e34:	dc000717 	ldw	r16,28(sp)
 4002e38:	dec00a04 	addi	sp,sp,40
 4002e3c:	f800283a 	ret
 4002e40:	8009883a 	mov	r4,r16
 4002e44:	40072c00 	call	40072c0 <__sinit>
 4002e48:	003fe906 	br	4002df0 <__alt_data_end+0xfc002df0>
 4002e4c:	00bfffc4 	movi	r2,-1
 4002e50:	003ff606 	br	4002e2c <__alt_data_end+0xfc002e2c>

04002e54 <puts>:
 4002e54:	00810074 	movhi	r2,1025
 4002e58:	1091d704 	addi	r2,r2,18268
 4002e5c:	200b883a 	mov	r5,r4
 4002e60:	11000017 	ldw	r4,0(r2)
 4002e64:	4002d941 	jmpi	4002d94 <_puts_r>

04002e68 <strlen>:
 4002e68:	208000cc 	andi	r2,r4,3
 4002e6c:	10002026 	beq	r2,zero,4002ef0 <strlen+0x88>
 4002e70:	20800007 	ldb	r2,0(r4)
 4002e74:	10002026 	beq	r2,zero,4002ef8 <strlen+0x90>
 4002e78:	2005883a 	mov	r2,r4
 4002e7c:	00000206 	br	4002e88 <strlen+0x20>
 4002e80:	10c00007 	ldb	r3,0(r2)
 4002e84:	18001826 	beq	r3,zero,4002ee8 <strlen+0x80>
 4002e88:	10800044 	addi	r2,r2,1
 4002e8c:	10c000cc 	andi	r3,r2,3
 4002e90:	183ffb1e 	bne	r3,zero,4002e80 <__alt_data_end+0xfc002e80>
 4002e94:	10c00017 	ldw	r3,0(r2)
 4002e98:	01ffbff4 	movhi	r7,65279
 4002e9c:	39ffbfc4 	addi	r7,r7,-257
 4002ea0:	00ca303a 	nor	r5,zero,r3
 4002ea4:	01a02074 	movhi	r6,32897
 4002ea8:	19c7883a 	add	r3,r3,r7
 4002eac:	31a02004 	addi	r6,r6,-32640
 4002eb0:	1946703a 	and	r3,r3,r5
 4002eb4:	1986703a 	and	r3,r3,r6
 4002eb8:	1800091e 	bne	r3,zero,4002ee0 <strlen+0x78>
 4002ebc:	10800104 	addi	r2,r2,4
 4002ec0:	10c00017 	ldw	r3,0(r2)
 4002ec4:	19cb883a 	add	r5,r3,r7
 4002ec8:	00c6303a 	nor	r3,zero,r3
 4002ecc:	28c6703a 	and	r3,r5,r3
 4002ed0:	1986703a 	and	r3,r3,r6
 4002ed4:	183ff926 	beq	r3,zero,4002ebc <__alt_data_end+0xfc002ebc>
 4002ed8:	00000106 	br	4002ee0 <strlen+0x78>
 4002edc:	10800044 	addi	r2,r2,1
 4002ee0:	10c00007 	ldb	r3,0(r2)
 4002ee4:	183ffd1e 	bne	r3,zero,4002edc <__alt_data_end+0xfc002edc>
 4002ee8:	1105c83a 	sub	r2,r2,r4
 4002eec:	f800283a 	ret
 4002ef0:	2005883a 	mov	r2,r4
 4002ef4:	003fe706 	br	4002e94 <__alt_data_end+0xfc002e94>
 4002ef8:	0005883a 	mov	r2,zero
 4002efc:	f800283a 	ret

04002f00 <___vfprintf_internal_r>:
 4002f00:	deffb804 	addi	sp,sp,-288
 4002f04:	dfc04715 	stw	ra,284(sp)
 4002f08:	ddc04515 	stw	r23,276(sp)
 4002f0c:	dd404315 	stw	r21,268(sp)
 4002f10:	d9002d15 	stw	r4,180(sp)
 4002f14:	282f883a 	mov	r23,r5
 4002f18:	302b883a 	mov	r21,r6
 4002f1c:	d9c02e15 	stw	r7,184(sp)
 4002f20:	df004615 	stw	fp,280(sp)
 4002f24:	dd804415 	stw	r22,272(sp)
 4002f28:	dd004215 	stw	r20,264(sp)
 4002f2c:	dcc04115 	stw	r19,260(sp)
 4002f30:	dc804015 	stw	r18,256(sp)
 4002f34:	dc403f15 	stw	r17,252(sp)
 4002f38:	dc003e15 	stw	r16,248(sp)
 4002f3c:	4007e400 	call	4007e40 <_localeconv_r>
 4002f40:	10800017 	ldw	r2,0(r2)
 4002f44:	1009883a 	mov	r4,r2
 4002f48:	d8803415 	stw	r2,208(sp)
 4002f4c:	4002e680 	call	4002e68 <strlen>
 4002f50:	d8803715 	stw	r2,220(sp)
 4002f54:	d8802d17 	ldw	r2,180(sp)
 4002f58:	10000226 	beq	r2,zero,4002f64 <___vfprintf_internal_r+0x64>
 4002f5c:	10800e17 	ldw	r2,56(r2)
 4002f60:	1000fb26 	beq	r2,zero,4003350 <___vfprintf_internal_r+0x450>
 4002f64:	b880030b 	ldhu	r2,12(r23)
 4002f68:	10c8000c 	andi	r3,r2,8192
 4002f6c:	1800061e 	bne	r3,zero,4002f88 <___vfprintf_internal_r+0x88>
 4002f70:	b9001917 	ldw	r4,100(r23)
 4002f74:	00f7ffc4 	movi	r3,-8193
 4002f78:	10880014 	ori	r2,r2,8192
 4002f7c:	20c6703a 	and	r3,r4,r3
 4002f80:	b880030d 	sth	r2,12(r23)
 4002f84:	b8c01915 	stw	r3,100(r23)
 4002f88:	10c0020c 	andi	r3,r2,8
 4002f8c:	1800c326 	beq	r3,zero,400329c <___vfprintf_internal_r+0x39c>
 4002f90:	b8c00417 	ldw	r3,16(r23)
 4002f94:	1800c126 	beq	r3,zero,400329c <___vfprintf_internal_r+0x39c>
 4002f98:	1080068c 	andi	r2,r2,26
 4002f9c:	00c00284 	movi	r3,10
 4002fa0:	10c0c626 	beq	r2,r3,40032bc <___vfprintf_internal_r+0x3bc>
 4002fa4:	d8c00404 	addi	r3,sp,16
 4002fa8:	05010074 	movhi	r20,1025
 4002fac:	d9001e04 	addi	r4,sp,120
 4002fb0:	a50a6c84 	addi	r20,r20,10674
 4002fb4:	d8c01e15 	stw	r3,120(sp)
 4002fb8:	d8002015 	stw	zero,128(sp)
 4002fbc:	d8001f15 	stw	zero,124(sp)
 4002fc0:	d8003315 	stw	zero,204(sp)
 4002fc4:	d8003615 	stw	zero,216(sp)
 4002fc8:	d8003815 	stw	zero,224(sp)
 4002fcc:	1811883a 	mov	r8,r3
 4002fd0:	d8003915 	stw	zero,228(sp)
 4002fd4:	d8003a15 	stw	zero,232(sp)
 4002fd8:	d8002f15 	stw	zero,188(sp)
 4002fdc:	d9002815 	stw	r4,160(sp)
 4002fe0:	a8800007 	ldb	r2,0(r21)
 4002fe4:	10028b26 	beq	r2,zero,4003a14 <___vfprintf_internal_r+0xb14>
 4002fe8:	00c00944 	movi	r3,37
 4002fec:	a823883a 	mov	r17,r21
 4002ff0:	10c0021e 	bne	r2,r3,4002ffc <___vfprintf_internal_r+0xfc>
 4002ff4:	00001406 	br	4003048 <___vfprintf_internal_r+0x148>
 4002ff8:	10c00326 	beq	r2,r3,4003008 <___vfprintf_internal_r+0x108>
 4002ffc:	8c400044 	addi	r17,r17,1
 4003000:	88800007 	ldb	r2,0(r17)
 4003004:	103ffc1e 	bne	r2,zero,4002ff8 <__alt_data_end+0xfc002ff8>
 4003008:	8d61c83a 	sub	r16,r17,r21
 400300c:	80000e26 	beq	r16,zero,4003048 <___vfprintf_internal_r+0x148>
 4003010:	d8c02017 	ldw	r3,128(sp)
 4003014:	d8801f17 	ldw	r2,124(sp)
 4003018:	45400015 	stw	r21,0(r8)
 400301c:	1c07883a 	add	r3,r3,r16
 4003020:	10800044 	addi	r2,r2,1
 4003024:	d8c02015 	stw	r3,128(sp)
 4003028:	44000115 	stw	r16,4(r8)
 400302c:	d8801f15 	stw	r2,124(sp)
 4003030:	00c001c4 	movi	r3,7
 4003034:	1880a916 	blt	r3,r2,40032dc <___vfprintf_internal_r+0x3dc>
 4003038:	42000204 	addi	r8,r8,8
 400303c:	d9402f17 	ldw	r5,188(sp)
 4003040:	2c0b883a 	add	r5,r5,r16
 4003044:	d9402f15 	stw	r5,188(sp)
 4003048:	88800007 	ldb	r2,0(r17)
 400304c:	1000aa26 	beq	r2,zero,40032f8 <___vfprintf_internal_r+0x3f8>
 4003050:	8d400044 	addi	r21,r17,1
 4003054:	8c400047 	ldb	r17,1(r17)
 4003058:	0021883a 	mov	r16,zero
 400305c:	00bfffc4 	movi	r2,-1
 4003060:	0025883a 	mov	r18,zero
 4003064:	dc002905 	stb	r16,164(sp)
 4003068:	d8002785 	stb	zero,158(sp)
 400306c:	d8002b05 	stb	zero,172(sp)
 4003070:	d8802a15 	stw	r2,168(sp)
 4003074:	d8003115 	stw	zero,196(sp)
 4003078:	04c01604 	movi	r19,88
 400307c:	05800244 	movi	r22,9
 4003080:	9021883a 	mov	r16,r18
 4003084:	4039883a 	mov	fp,r8
 4003088:	ad400044 	addi	r21,r21,1
 400308c:	88bff804 	addi	r2,r17,-32
 4003090:	98833236 	bltu	r19,r2,4003d5c <___vfprintf_internal_r+0xe5c>
 4003094:	100490ba 	slli	r2,r2,2
 4003098:	00c10034 	movhi	r3,1024
 400309c:	18cc2b04 	addi	r3,r3,12460
 40030a0:	10c5883a 	add	r2,r2,r3
 40030a4:	10800017 	ldw	r2,0(r2)
 40030a8:	1000683a 	jmp	r2
 40030ac:	04003c54 	movui	r16,241
 40030b0:	04003d5c 	xori	r16,zero,245
 40030b4:	04003d5c 	xori	r16,zero,245
 40030b8:	04003c74 	movhi	r16,241
 40030bc:	04003d5c 	xori	r16,zero,245
 40030c0:	04003d5c 	xori	r16,zero,245
 40030c4:	04003d5c 	xori	r16,zero,245
 40030c8:	04003d5c 	xori	r16,zero,245
 40030cc:	04003d5c 	xori	r16,zero,245
 40030d0:	04003d5c 	xori	r16,zero,245
 40030d4:	0400335c 	xori	r16,zero,205
 40030d8:	04003b64 	muli	r16,zero,237
 40030dc:	04003d5c 	xori	r16,zero,245
 40030e0:	04003220 	cmpeqi	r16,zero,200
 40030e4:	04003380 	call	400338 <__alt_mem_sdram-0x3bffcc8>
 40030e8:	04003d5c 	xori	r16,zero,245
 40030ec:	040033d0 	cmplti	r16,zero,207
 40030f0:	040033dc 	xori	r16,zero,207
 40030f4:	040033dc 	xori	r16,zero,207
 40030f8:	040033dc 	xori	r16,zero,207
 40030fc:	040033dc 	xori	r16,zero,207
 4003100:	040033dc 	xori	r16,zero,207
 4003104:	040033dc 	xori	r16,zero,207
 4003108:	040033dc 	xori	r16,zero,207
 400310c:	040033dc 	xori	r16,zero,207
 4003110:	040033dc 	xori	r16,zero,207
 4003114:	04003d5c 	xori	r16,zero,245
 4003118:	04003d5c 	xori	r16,zero,245
 400311c:	04003d5c 	xori	r16,zero,245
 4003120:	04003d5c 	xori	r16,zero,245
 4003124:	04003d5c 	xori	r16,zero,245
 4003128:	04003d5c 	xori	r16,zero,245
 400312c:	04003d5c 	xori	r16,zero,245
 4003130:	04003d5c 	xori	r16,zero,245
 4003134:	04003d5c 	xori	r16,zero,245
 4003138:	04003d5c 	xori	r16,zero,245
 400313c:	04003418 	cmpnei	r16,zero,208
 4003140:	040034e0 	cmpeqi	r16,zero,211
 4003144:	04003d5c 	xori	r16,zero,245
 4003148:	040034e0 	cmpeqi	r16,zero,211
 400314c:	04003d5c 	xori	r16,zero,245
 4003150:	04003d5c 	xori	r16,zero,245
 4003154:	04003d5c 	xori	r16,zero,245
 4003158:	04003d5c 	xori	r16,zero,245
 400315c:	0400358c 	andi	r16,zero,214
 4003160:	04003d5c 	xori	r16,zero,245
 4003164:	04003d5c 	xori	r16,zero,245
 4003168:	04003598 	cmpnei	r16,zero,214
 400316c:	04003d5c 	xori	r16,zero,245
 4003170:	04003d5c 	xori	r16,zero,245
 4003174:	04003d5c 	xori	r16,zero,245
 4003178:	04003d5c 	xori	r16,zero,245
 400317c:	04003d5c 	xori	r16,zero,245
 4003180:	04003a1c 	xori	r16,zero,232
 4003184:	04003d5c 	xori	r16,zero,245
 4003188:	04003d5c 	xori	r16,zero,245
 400318c:	04003a88 	cmpgei	r16,zero,234
 4003190:	04003d5c 	xori	r16,zero,245
 4003194:	04003d5c 	xori	r16,zero,245
 4003198:	04003d5c 	xori	r16,zero,245
 400319c:	04003d5c 	xori	r16,zero,245
 40031a0:	04003d5c 	xori	r16,zero,245
 40031a4:	04003d5c 	xori	r16,zero,245
 40031a8:	04003d5c 	xori	r16,zero,245
 40031ac:	04003d5c 	xori	r16,zero,245
 40031b0:	04003d5c 	xori	r16,zero,245
 40031b4:	04003d5c 	xori	r16,zero,245
 40031b8:	04003d00 	call	4003d0 <__alt_mem_sdram-0x3bffc30>
 40031bc:	04003c80 	call	4003c8 <__alt_mem_sdram-0x3bffc38>
 40031c0:	040034e0 	cmpeqi	r16,zero,211
 40031c4:	040034e0 	cmpeqi	r16,zero,211
 40031c8:	040034e0 	cmpeqi	r16,zero,211
 40031cc:	04003ca0 	cmpeqi	r16,zero,242
 40031d0:	04003c80 	call	4003c8 <__alt_mem_sdram-0x3bffc38>
 40031d4:	04003d5c 	xori	r16,zero,245
 40031d8:	04003d5c 	xori	r16,zero,245
 40031dc:	04003cac 	andhi	r16,zero,242
 40031e0:	04003d5c 	xori	r16,zero,245
 40031e4:	04003cc0 	call	4003cc <__alt_mem_sdram-0x3bffc34>
 40031e8:	04003b44 	movi	r16,237
 40031ec:	0400322c 	andhi	r16,zero,200
 40031f0:	04003b7c 	xorhi	r16,zero,237
 40031f4:	04003d5c 	xori	r16,zero,245
 40031f8:	04003b88 	cmpgei	r16,zero,238
 40031fc:	04003d5c 	xori	r16,zero,245
 4003200:	04003bec 	andhi	r16,zero,239
 4003204:	04003d5c 	xori	r16,zero,245
 4003208:	04003d5c 	xori	r16,zero,245
 400320c:	04003c0c 	andi	r16,zero,240
 4003210:	d8c03117 	ldw	r3,196(sp)
 4003214:	d8802e15 	stw	r2,184(sp)
 4003218:	00c7c83a 	sub	r3,zero,r3
 400321c:	d8c03115 	stw	r3,196(sp)
 4003220:	84000114 	ori	r16,r16,4
 4003224:	ac400007 	ldb	r17,0(r21)
 4003228:	003f9706 	br	4003088 <__alt_data_end+0xfc003088>
 400322c:	00800c04 	movi	r2,48
 4003230:	d8802705 	stb	r2,156(sp)
 4003234:	00801e04 	movi	r2,120
 4003238:	d8802745 	stb	r2,157(sp)
 400323c:	d9002a17 	ldw	r4,168(sp)
 4003240:	d8802e17 	ldw	r2,184(sp)
 4003244:	d8002785 	stb	zero,158(sp)
 4003248:	e011883a 	mov	r8,fp
 400324c:	10c00104 	addi	r3,r2,4
 4003250:	14c00017 	ldw	r19,0(r2)
 4003254:	002d883a 	mov	r22,zero
 4003258:	80800094 	ori	r2,r16,2
 400325c:	2002ca16 	blt	r4,zero,4003d88 <___vfprintf_internal_r+0xe88>
 4003260:	00bfdfc4 	movi	r2,-129
 4003264:	80a4703a 	and	r18,r16,r2
 4003268:	d8c02e15 	stw	r3,184(sp)
 400326c:	94800094 	ori	r18,r18,2
 4003270:	9802b41e 	bne	r19,zero,4003d44 <___vfprintf_internal_r+0xe44>
 4003274:	01410074 	movhi	r5,1025
 4003278:	294a6504 	addi	r5,r5,10644
 400327c:	d9403915 	stw	r5,228(sp)
 4003280:	04401e04 	movi	r17,120
 4003284:	d8802a17 	ldw	r2,168(sp)
 4003288:	0039883a 	mov	fp,zero
 400328c:	1001fa26 	beq	r2,zero,4003a78 <___vfprintf_internal_r+0xb78>
 4003290:	0027883a 	mov	r19,zero
 4003294:	002d883a 	mov	r22,zero
 4003298:	00021906 	br	4003b00 <___vfprintf_internal_r+0xc00>
 400329c:	d9002d17 	ldw	r4,180(sp)
 40032a0:	b80b883a 	mov	r5,r23
 40032a4:	40052b40 	call	40052b4 <__swsetup_r>
 40032a8:	1005dc1e 	bne	r2,zero,4004a1c <___vfprintf_internal_r+0x1b1c>
 40032ac:	b880030b 	ldhu	r2,12(r23)
 40032b0:	00c00284 	movi	r3,10
 40032b4:	1080068c 	andi	r2,r2,26
 40032b8:	10ff3a1e 	bne	r2,r3,4002fa4 <__alt_data_end+0xfc002fa4>
 40032bc:	b880038f 	ldh	r2,14(r23)
 40032c0:	103f3816 	blt	r2,zero,4002fa4 <__alt_data_end+0xfc002fa4>
 40032c4:	d9c02e17 	ldw	r7,184(sp)
 40032c8:	d9002d17 	ldw	r4,180(sp)
 40032cc:	a80d883a 	mov	r6,r21
 40032d0:	b80b883a 	mov	r5,r23
 40032d4:	40051f80 	call	40051f8 <__sbprintf>
 40032d8:	00001106 	br	4003320 <___vfprintf_internal_r+0x420>
 40032dc:	d9002d17 	ldw	r4,180(sp)
 40032e0:	d9801e04 	addi	r6,sp,120
 40032e4:	b80b883a 	mov	r5,r23
 40032e8:	400a8480 	call	400a848 <__sprint_r>
 40032ec:	1000081e 	bne	r2,zero,4003310 <___vfprintf_internal_r+0x410>
 40032f0:	da000404 	addi	r8,sp,16
 40032f4:	003f5106 	br	400303c <__alt_data_end+0xfc00303c>
 40032f8:	d8802017 	ldw	r2,128(sp)
 40032fc:	10000426 	beq	r2,zero,4003310 <___vfprintf_internal_r+0x410>
 4003300:	d9002d17 	ldw	r4,180(sp)
 4003304:	d9801e04 	addi	r6,sp,120
 4003308:	b80b883a 	mov	r5,r23
 400330c:	400a8480 	call	400a848 <__sprint_r>
 4003310:	b880030b 	ldhu	r2,12(r23)
 4003314:	1080100c 	andi	r2,r2,64
 4003318:	1005c01e 	bne	r2,zero,4004a1c <___vfprintf_internal_r+0x1b1c>
 400331c:	d8802f17 	ldw	r2,188(sp)
 4003320:	dfc04717 	ldw	ra,284(sp)
 4003324:	df004617 	ldw	fp,280(sp)
 4003328:	ddc04517 	ldw	r23,276(sp)
 400332c:	dd804417 	ldw	r22,272(sp)
 4003330:	dd404317 	ldw	r21,268(sp)
 4003334:	dd004217 	ldw	r20,264(sp)
 4003338:	dcc04117 	ldw	r19,260(sp)
 400333c:	dc804017 	ldw	r18,256(sp)
 4003340:	dc403f17 	ldw	r17,252(sp)
 4003344:	dc003e17 	ldw	r16,248(sp)
 4003348:	dec04804 	addi	sp,sp,288
 400334c:	f800283a 	ret
 4003350:	d9002d17 	ldw	r4,180(sp)
 4003354:	40072c00 	call	40072c0 <__sinit>
 4003358:	003f0206 	br	4002f64 <__alt_data_end+0xfc002f64>
 400335c:	d9002e17 	ldw	r4,184(sp)
 4003360:	d9402e17 	ldw	r5,184(sp)
 4003364:	21000017 	ldw	r4,0(r4)
 4003368:	28800104 	addi	r2,r5,4
 400336c:	d9003115 	stw	r4,196(sp)
 4003370:	203fa716 	blt	r4,zero,4003210 <__alt_data_end+0xfc003210>
 4003374:	d8802e15 	stw	r2,184(sp)
 4003378:	ac400007 	ldb	r17,0(r21)
 400337c:	003f4206 	br	4003088 <__alt_data_end+0xfc003088>
 4003380:	ac400007 	ldb	r17,0(r21)
 4003384:	01000a84 	movi	r4,42
 4003388:	a8c00044 	addi	r3,r21,1
 400338c:	89075826 	beq	r17,r4,40050f0 <___vfprintf_internal_r+0x21f0>
 4003390:	8cbff404 	addi	r18,r17,-48
 4003394:	b486ae36 	bltu	r22,r18,4004e50 <___vfprintf_internal_r+0x1f50>
 4003398:	0009883a 	mov	r4,zero
 400339c:	1823883a 	mov	r17,r3
 40033a0:	01400284 	movi	r5,10
 40033a4:	4002ce00 	call	4002ce0 <__mulsi3>
 40033a8:	88c00007 	ldb	r3,0(r17)
 40033ac:	1489883a 	add	r4,r2,r18
 40033b0:	8d400044 	addi	r21,r17,1
 40033b4:	1cbff404 	addi	r18,r3,-48
 40033b8:	a823883a 	mov	r17,r21
 40033bc:	b4bff82e 	bgeu	r22,r18,40033a0 <__alt_data_end+0xfc0033a0>
 40033c0:	1823883a 	mov	r17,r3
 40033c4:	2005f616 	blt	r4,zero,4004ba0 <___vfprintf_internal_r+0x1ca0>
 40033c8:	d9002a15 	stw	r4,168(sp)
 40033cc:	003f2f06 	br	400308c <__alt_data_end+0xfc00308c>
 40033d0:	84002014 	ori	r16,r16,128
 40033d4:	ac400007 	ldb	r17,0(r21)
 40033d8:	003f2b06 	br	4003088 <__alt_data_end+0xfc003088>
 40033dc:	8cbff404 	addi	r18,r17,-48
 40033e0:	d8003115 	stw	zero,196(sp)
 40033e4:	0009883a 	mov	r4,zero
 40033e8:	a823883a 	mov	r17,r21
 40033ec:	01400284 	movi	r5,10
 40033f0:	4002ce00 	call	4002ce0 <__mulsi3>
 40033f4:	88c00007 	ldb	r3,0(r17)
 40033f8:	9089883a 	add	r4,r18,r2
 40033fc:	ad400044 	addi	r21,r21,1
 4003400:	1cbff404 	addi	r18,r3,-48
 4003404:	a823883a 	mov	r17,r21
 4003408:	b4bff82e 	bgeu	r22,r18,40033ec <__alt_data_end+0xfc0033ec>
 400340c:	1823883a 	mov	r17,r3
 4003410:	d9003115 	stw	r4,196(sp)
 4003414:	003f1d06 	br	400308c <__alt_data_end+0xfc00308c>
 4003418:	8025883a 	mov	r18,r16
 400341c:	dc002903 	ldbu	r16,164(sp)
 4003420:	e011883a 	mov	r8,fp
 4003424:	84003fcc 	andi	r16,r16,255
 4003428:	8007531e 	bne	r16,zero,4005178 <___vfprintf_internal_r+0x2278>
 400342c:	94800414 	ori	r18,r18,16
 4003430:	9080080c 	andi	r2,r18,32
 4003434:	1003a326 	beq	r2,zero,40042c4 <___vfprintf_internal_r+0x13c4>
 4003438:	d9002e17 	ldw	r4,184(sp)
 400343c:	20800117 	ldw	r2,4(r4)
 4003440:	24c00017 	ldw	r19,0(r4)
 4003444:	21000204 	addi	r4,r4,8
 4003448:	d9002e15 	stw	r4,184(sp)
 400344c:	102d883a 	mov	r22,r2
 4003450:	10047316 	blt	r2,zero,4004620 <___vfprintf_internal_r+0x1720>
 4003454:	d9002a17 	ldw	r4,168(sp)
 4003458:	df002783 	ldbu	fp,158(sp)
 400345c:	2003e416 	blt	r4,zero,40043f0 <___vfprintf_internal_r+0x14f0>
 4003460:	00ffdfc4 	movi	r3,-129
 4003464:	9d84b03a 	or	r2,r19,r22
 4003468:	90e4703a 	and	r18,r18,r3
 400346c:	10018026 	beq	r2,zero,4003a70 <___vfprintf_internal_r+0xb70>
 4003470:	b003ab26 	beq	r22,zero,4004320 <___vfprintf_internal_r+0x1420>
 4003474:	dc402915 	stw	r17,164(sp)
 4003478:	dc001e04 	addi	r16,sp,120
 400347c:	b023883a 	mov	r17,r22
 4003480:	402d883a 	mov	r22,r8
 4003484:	9809883a 	mov	r4,r19
 4003488:	880b883a 	mov	r5,r17
 400348c:	01800284 	movi	r6,10
 4003490:	000f883a 	mov	r7,zero
 4003494:	400cd8c0 	call	400cd8c <__umoddi3>
 4003498:	10800c04 	addi	r2,r2,48
 400349c:	843fffc4 	addi	r16,r16,-1
 40034a0:	9809883a 	mov	r4,r19
 40034a4:	880b883a 	mov	r5,r17
 40034a8:	80800005 	stb	r2,0(r16)
 40034ac:	01800284 	movi	r6,10
 40034b0:	000f883a 	mov	r7,zero
 40034b4:	400c7900 	call	400c790 <__udivdi3>
 40034b8:	1027883a 	mov	r19,r2
 40034bc:	10c4b03a 	or	r2,r2,r3
 40034c0:	1823883a 	mov	r17,r3
 40034c4:	103fef1e 	bne	r2,zero,4003484 <__alt_data_end+0xfc003484>
 40034c8:	d8c02817 	ldw	r3,160(sp)
 40034cc:	dc402917 	ldw	r17,164(sp)
 40034d0:	b011883a 	mov	r8,r22
 40034d4:	1c07c83a 	sub	r3,r3,r16
 40034d8:	d8c02b15 	stw	r3,172(sp)
 40034dc:	00005f06 	br	400365c <___vfprintf_internal_r+0x75c>
 40034e0:	8025883a 	mov	r18,r16
 40034e4:	dc002903 	ldbu	r16,164(sp)
 40034e8:	e011883a 	mov	r8,fp
 40034ec:	84003fcc 	andi	r16,r16,255
 40034f0:	80071e1e 	bne	r16,zero,400516c <___vfprintf_internal_r+0x226c>
 40034f4:	9080020c 	andi	r2,r18,8
 40034f8:	1004af26 	beq	r2,zero,40047b8 <___vfprintf_internal_r+0x18b8>
 40034fc:	d9002e17 	ldw	r4,184(sp)
 4003500:	d9402e17 	ldw	r5,184(sp)
 4003504:	d8802e17 	ldw	r2,184(sp)
 4003508:	21000017 	ldw	r4,0(r4)
 400350c:	29400117 	ldw	r5,4(r5)
 4003510:	10800204 	addi	r2,r2,8
 4003514:	d9003615 	stw	r4,216(sp)
 4003518:	d9403815 	stw	r5,224(sp)
 400351c:	d8802e15 	stw	r2,184(sp)
 4003520:	d9003617 	ldw	r4,216(sp)
 4003524:	d9403817 	ldw	r5,224(sp)
 4003528:	da003d15 	stw	r8,244(sp)
 400352c:	04000044 	movi	r16,1
 4003530:	400a46c0 	call	400a46c <__fpclassifyd>
 4003534:	da003d17 	ldw	r8,244(sp)
 4003538:	1404441e 	bne	r2,r16,400464c <___vfprintf_internal_r+0x174c>
 400353c:	d9003617 	ldw	r4,216(sp)
 4003540:	d9403817 	ldw	r5,224(sp)
 4003544:	000d883a 	mov	r6,zero
 4003548:	000f883a 	mov	r7,zero
 400354c:	400e7300 	call	400e730 <__ledf2>
 4003550:	da003d17 	ldw	r8,244(sp)
 4003554:	1005e316 	blt	r2,zero,4004ce4 <___vfprintf_internal_r+0x1de4>
 4003558:	df002783 	ldbu	fp,158(sp)
 400355c:	008011c4 	movi	r2,71
 4003560:	1445580e 	bge	r2,r17,4004ac4 <___vfprintf_internal_r+0x1bc4>
 4003564:	04010074 	movhi	r16,1025
 4003568:	840a5d04 	addi	r16,r16,10612
 400356c:	00c000c4 	movi	r3,3
 4003570:	00bfdfc4 	movi	r2,-129
 4003574:	d8c02915 	stw	r3,164(sp)
 4003578:	90a4703a 	and	r18,r18,r2
 400357c:	d8c02b15 	stw	r3,172(sp)
 4003580:	d8002a15 	stw	zero,168(sp)
 4003584:	d8003215 	stw	zero,200(sp)
 4003588:	00003a06 	br	4003674 <___vfprintf_internal_r+0x774>
 400358c:	84000214 	ori	r16,r16,8
 4003590:	ac400007 	ldb	r17,0(r21)
 4003594:	003ebc06 	br	4003088 <__alt_data_end+0xfc003088>
 4003598:	8025883a 	mov	r18,r16
 400359c:	dc002903 	ldbu	r16,164(sp)
 40035a0:	e011883a 	mov	r8,fp
 40035a4:	84003fcc 	andi	r16,r16,255
 40035a8:	8007001e 	bne	r16,zero,40051ac <___vfprintf_internal_r+0x22ac>
 40035ac:	94800414 	ori	r18,r18,16
 40035b0:	9080080c 	andi	r2,r18,32
 40035b4:	1002fa26 	beq	r2,zero,40041a0 <___vfprintf_internal_r+0x12a0>
 40035b8:	d9002e17 	ldw	r4,184(sp)
 40035bc:	d9402a17 	ldw	r5,168(sp)
 40035c0:	d8002785 	stb	zero,158(sp)
 40035c4:	20800204 	addi	r2,r4,8
 40035c8:	24c00017 	ldw	r19,0(r4)
 40035cc:	25800117 	ldw	r22,4(r4)
 40035d0:	2804b116 	blt	r5,zero,4004898 <___vfprintf_internal_r+0x1998>
 40035d4:	013fdfc4 	movi	r4,-129
 40035d8:	9d86b03a 	or	r3,r19,r22
 40035dc:	d8802e15 	stw	r2,184(sp)
 40035e0:	9124703a 	and	r18,r18,r4
 40035e4:	1802fb1e 	bne	r3,zero,40041d4 <___vfprintf_internal_r+0x12d4>
 40035e8:	d8c02a17 	ldw	r3,168(sp)
 40035ec:	0039883a 	mov	fp,zero
 40035f0:	1805e526 	beq	r3,zero,4004d88 <___vfprintf_internal_r+0x1e88>
 40035f4:	0027883a 	mov	r19,zero
 40035f8:	002d883a 	mov	r22,zero
 40035fc:	dc001e04 	addi	r16,sp,120
 4003600:	9806d0fa 	srli	r3,r19,3
 4003604:	b008977a 	slli	r4,r22,29
 4003608:	b02cd0fa 	srli	r22,r22,3
 400360c:	9cc001cc 	andi	r19,r19,7
 4003610:	98800c04 	addi	r2,r19,48
 4003614:	843fffc4 	addi	r16,r16,-1
 4003618:	20e6b03a 	or	r19,r4,r3
 400361c:	80800005 	stb	r2,0(r16)
 4003620:	9d86b03a 	or	r3,r19,r22
 4003624:	183ff61e 	bne	r3,zero,4003600 <__alt_data_end+0xfc003600>
 4003628:	90c0004c 	andi	r3,r18,1
 400362c:	18014126 	beq	r3,zero,4003b34 <___vfprintf_internal_r+0xc34>
 4003630:	10803fcc 	andi	r2,r2,255
 4003634:	1080201c 	xori	r2,r2,128
 4003638:	10bfe004 	addi	r2,r2,-128
 400363c:	00c00c04 	movi	r3,48
 4003640:	10c13c26 	beq	r2,r3,4003b34 <___vfprintf_internal_r+0xc34>
 4003644:	80ffffc5 	stb	r3,-1(r16)
 4003648:	d8c02817 	ldw	r3,160(sp)
 400364c:	80bfffc4 	addi	r2,r16,-1
 4003650:	1021883a 	mov	r16,r2
 4003654:	1887c83a 	sub	r3,r3,r2
 4003658:	d8c02b15 	stw	r3,172(sp)
 400365c:	d8802b17 	ldw	r2,172(sp)
 4003660:	d9002a17 	ldw	r4,168(sp)
 4003664:	1100010e 	bge	r2,r4,400366c <___vfprintf_internal_r+0x76c>
 4003668:	2005883a 	mov	r2,r4
 400366c:	d8802915 	stw	r2,164(sp)
 4003670:	d8003215 	stw	zero,200(sp)
 4003674:	e7003fcc 	andi	fp,fp,255
 4003678:	e700201c 	xori	fp,fp,128
 400367c:	e73fe004 	addi	fp,fp,-128
 4003680:	e0000326 	beq	fp,zero,4003690 <___vfprintf_internal_r+0x790>
 4003684:	d8c02917 	ldw	r3,164(sp)
 4003688:	18c00044 	addi	r3,r3,1
 400368c:	d8c02915 	stw	r3,164(sp)
 4003690:	90c0008c 	andi	r3,r18,2
 4003694:	d8c02c15 	stw	r3,176(sp)
 4003698:	18000326 	beq	r3,zero,40036a8 <___vfprintf_internal_r+0x7a8>
 400369c:	d8c02917 	ldw	r3,164(sp)
 40036a0:	18c00084 	addi	r3,r3,2
 40036a4:	d8c02915 	stw	r3,164(sp)
 40036a8:	90c0210c 	andi	r3,r18,132
 40036ac:	d8c03015 	stw	r3,192(sp)
 40036b0:	1801c51e 	bne	r3,zero,4003dc8 <___vfprintf_internal_r+0xec8>
 40036b4:	d9003117 	ldw	r4,196(sp)
 40036b8:	d8c02917 	ldw	r3,164(sp)
 40036bc:	20e7c83a 	sub	r19,r4,r3
 40036c0:	04c1c10e 	bge	zero,r19,4003dc8 <___vfprintf_internal_r+0xec8>
 40036c4:	02400404 	movi	r9,16
 40036c8:	d8c02017 	ldw	r3,128(sp)
 40036cc:	d8801f17 	ldw	r2,124(sp)
 40036d0:	4cc52f0e 	bge	r9,r19,4004b90 <___vfprintf_internal_r+0x1c90>
 40036d4:	01410074 	movhi	r5,1025
 40036d8:	294a7084 	addi	r5,r5,10690
 40036dc:	dc403b15 	stw	r17,236(sp)
 40036e0:	d9403515 	stw	r5,212(sp)
 40036e4:	9823883a 	mov	r17,r19
 40036e8:	482d883a 	mov	r22,r9
 40036ec:	9027883a 	mov	r19,r18
 40036f0:	070001c4 	movi	fp,7
 40036f4:	8025883a 	mov	r18,r16
 40036f8:	dc002d17 	ldw	r16,180(sp)
 40036fc:	00000306 	br	400370c <___vfprintf_internal_r+0x80c>
 4003700:	8c7ffc04 	addi	r17,r17,-16
 4003704:	42000204 	addi	r8,r8,8
 4003708:	b440130e 	bge	r22,r17,4003758 <___vfprintf_internal_r+0x858>
 400370c:	01010074 	movhi	r4,1025
 4003710:	18c00404 	addi	r3,r3,16
 4003714:	10800044 	addi	r2,r2,1
 4003718:	210a7084 	addi	r4,r4,10690
 400371c:	41000015 	stw	r4,0(r8)
 4003720:	45800115 	stw	r22,4(r8)
 4003724:	d8c02015 	stw	r3,128(sp)
 4003728:	d8801f15 	stw	r2,124(sp)
 400372c:	e0bff40e 	bge	fp,r2,4003700 <__alt_data_end+0xfc003700>
 4003730:	d9801e04 	addi	r6,sp,120
 4003734:	b80b883a 	mov	r5,r23
 4003738:	8009883a 	mov	r4,r16
 400373c:	400a8480 	call	400a848 <__sprint_r>
 4003740:	103ef31e 	bne	r2,zero,4003310 <__alt_data_end+0xfc003310>
 4003744:	8c7ffc04 	addi	r17,r17,-16
 4003748:	d8c02017 	ldw	r3,128(sp)
 400374c:	d8801f17 	ldw	r2,124(sp)
 4003750:	da000404 	addi	r8,sp,16
 4003754:	b47fed16 	blt	r22,r17,400370c <__alt_data_end+0xfc00370c>
 4003758:	9021883a 	mov	r16,r18
 400375c:	9825883a 	mov	r18,r19
 4003760:	8827883a 	mov	r19,r17
 4003764:	dc403b17 	ldw	r17,236(sp)
 4003768:	d9403517 	ldw	r5,212(sp)
 400376c:	98c7883a 	add	r3,r19,r3
 4003770:	10800044 	addi	r2,r2,1
 4003774:	41400015 	stw	r5,0(r8)
 4003778:	44c00115 	stw	r19,4(r8)
 400377c:	d8c02015 	stw	r3,128(sp)
 4003780:	d8801f15 	stw	r2,124(sp)
 4003784:	010001c4 	movi	r4,7
 4003788:	2082c516 	blt	r4,r2,40042a0 <___vfprintf_internal_r+0x13a0>
 400378c:	df002787 	ldb	fp,158(sp)
 4003790:	42000204 	addi	r8,r8,8
 4003794:	e0000c26 	beq	fp,zero,40037c8 <___vfprintf_internal_r+0x8c8>
 4003798:	d8801f17 	ldw	r2,124(sp)
 400379c:	d9002784 	addi	r4,sp,158
 40037a0:	18c00044 	addi	r3,r3,1
 40037a4:	10800044 	addi	r2,r2,1
 40037a8:	41000015 	stw	r4,0(r8)
 40037ac:	01000044 	movi	r4,1
 40037b0:	41000115 	stw	r4,4(r8)
 40037b4:	d8c02015 	stw	r3,128(sp)
 40037b8:	d8801f15 	stw	r2,124(sp)
 40037bc:	010001c4 	movi	r4,7
 40037c0:	20825e16 	blt	r4,r2,400413c <___vfprintf_internal_r+0x123c>
 40037c4:	42000204 	addi	r8,r8,8
 40037c8:	d8802c17 	ldw	r2,176(sp)
 40037cc:	10000c26 	beq	r2,zero,4003800 <___vfprintf_internal_r+0x900>
 40037d0:	d8801f17 	ldw	r2,124(sp)
 40037d4:	d9002704 	addi	r4,sp,156
 40037d8:	18c00084 	addi	r3,r3,2
 40037dc:	10800044 	addi	r2,r2,1
 40037e0:	41000015 	stw	r4,0(r8)
 40037e4:	01000084 	movi	r4,2
 40037e8:	41000115 	stw	r4,4(r8)
 40037ec:	d8c02015 	stw	r3,128(sp)
 40037f0:	d8801f15 	stw	r2,124(sp)
 40037f4:	010001c4 	movi	r4,7
 40037f8:	20825816 	blt	r4,r2,400415c <___vfprintf_internal_r+0x125c>
 40037fc:	42000204 	addi	r8,r8,8
 4003800:	d9003017 	ldw	r4,192(sp)
 4003804:	00802004 	movi	r2,128
 4003808:	2081bb26 	beq	r4,r2,4003ef8 <___vfprintf_internal_r+0xff8>
 400380c:	d9402a17 	ldw	r5,168(sp)
 4003810:	d8802b17 	ldw	r2,172(sp)
 4003814:	28adc83a 	sub	r22,r5,r2
 4003818:	0580310e 	bge	zero,r22,40038e0 <___vfprintf_internal_r+0x9e0>
 400381c:	07000404 	movi	fp,16
 4003820:	d8801f17 	ldw	r2,124(sp)
 4003824:	e584360e 	bge	fp,r22,4004900 <___vfprintf_internal_r+0x1a00>
 4003828:	01410074 	movhi	r5,1025
 400382c:	294a6c84 	addi	r5,r5,10674
 4003830:	dc402a15 	stw	r17,168(sp)
 4003834:	d9402c15 	stw	r5,176(sp)
 4003838:	b023883a 	mov	r17,r22
 400383c:	04c001c4 	movi	r19,7
 4003840:	a82d883a 	mov	r22,r21
 4003844:	902b883a 	mov	r21,r18
 4003848:	8025883a 	mov	r18,r16
 400384c:	dc002d17 	ldw	r16,180(sp)
 4003850:	00000306 	br	4003860 <___vfprintf_internal_r+0x960>
 4003854:	8c7ffc04 	addi	r17,r17,-16
 4003858:	42000204 	addi	r8,r8,8
 400385c:	e440110e 	bge	fp,r17,40038a4 <___vfprintf_internal_r+0x9a4>
 4003860:	18c00404 	addi	r3,r3,16
 4003864:	10800044 	addi	r2,r2,1
 4003868:	45000015 	stw	r20,0(r8)
 400386c:	47000115 	stw	fp,4(r8)
 4003870:	d8c02015 	stw	r3,128(sp)
 4003874:	d8801f15 	stw	r2,124(sp)
 4003878:	98bff60e 	bge	r19,r2,4003854 <__alt_data_end+0xfc003854>
 400387c:	d9801e04 	addi	r6,sp,120
 4003880:	b80b883a 	mov	r5,r23
 4003884:	8009883a 	mov	r4,r16
 4003888:	400a8480 	call	400a848 <__sprint_r>
 400388c:	103ea01e 	bne	r2,zero,4003310 <__alt_data_end+0xfc003310>
 4003890:	8c7ffc04 	addi	r17,r17,-16
 4003894:	d8c02017 	ldw	r3,128(sp)
 4003898:	d8801f17 	ldw	r2,124(sp)
 400389c:	da000404 	addi	r8,sp,16
 40038a0:	e47fef16 	blt	fp,r17,4003860 <__alt_data_end+0xfc003860>
 40038a4:	9021883a 	mov	r16,r18
 40038a8:	a825883a 	mov	r18,r21
 40038ac:	b02b883a 	mov	r21,r22
 40038b0:	882d883a 	mov	r22,r17
 40038b4:	dc402a17 	ldw	r17,168(sp)
 40038b8:	d9002c17 	ldw	r4,176(sp)
 40038bc:	1d87883a 	add	r3,r3,r22
 40038c0:	10800044 	addi	r2,r2,1
 40038c4:	41000015 	stw	r4,0(r8)
 40038c8:	45800115 	stw	r22,4(r8)
 40038cc:	d8c02015 	stw	r3,128(sp)
 40038d0:	d8801f15 	stw	r2,124(sp)
 40038d4:	010001c4 	movi	r4,7
 40038d8:	20821016 	blt	r4,r2,400411c <___vfprintf_internal_r+0x121c>
 40038dc:	42000204 	addi	r8,r8,8
 40038e0:	9080400c 	andi	r2,r18,256
 40038e4:	10013a1e 	bne	r2,zero,4003dd0 <___vfprintf_internal_r+0xed0>
 40038e8:	d9402b17 	ldw	r5,172(sp)
 40038ec:	d8801f17 	ldw	r2,124(sp)
 40038f0:	44000015 	stw	r16,0(r8)
 40038f4:	1947883a 	add	r3,r3,r5
 40038f8:	10800044 	addi	r2,r2,1
 40038fc:	41400115 	stw	r5,4(r8)
 4003900:	d8c02015 	stw	r3,128(sp)
 4003904:	d8801f15 	stw	r2,124(sp)
 4003908:	010001c4 	movi	r4,7
 400390c:	2081f516 	blt	r4,r2,40040e4 <___vfprintf_internal_r+0x11e4>
 4003910:	42000204 	addi	r8,r8,8
 4003914:	9480010c 	andi	r18,r18,4
 4003918:	90003226 	beq	r18,zero,40039e4 <___vfprintf_internal_r+0xae4>
 400391c:	d9403117 	ldw	r5,196(sp)
 4003920:	d8802917 	ldw	r2,164(sp)
 4003924:	28a1c83a 	sub	r16,r5,r2
 4003928:	04002e0e 	bge	zero,r16,40039e4 <___vfprintf_internal_r+0xae4>
 400392c:	04400404 	movi	r17,16
 4003930:	d8801f17 	ldw	r2,124(sp)
 4003934:	8c04c40e 	bge	r17,r16,4004c48 <___vfprintf_internal_r+0x1d48>
 4003938:	01410074 	movhi	r5,1025
 400393c:	294a7084 	addi	r5,r5,10690
 4003940:	d9403515 	stw	r5,212(sp)
 4003944:	048001c4 	movi	r18,7
 4003948:	dcc02d17 	ldw	r19,180(sp)
 400394c:	00000306 	br	400395c <___vfprintf_internal_r+0xa5c>
 4003950:	843ffc04 	addi	r16,r16,-16
 4003954:	42000204 	addi	r8,r8,8
 4003958:	8c00130e 	bge	r17,r16,40039a8 <___vfprintf_internal_r+0xaa8>
 400395c:	01010074 	movhi	r4,1025
 4003960:	18c00404 	addi	r3,r3,16
 4003964:	10800044 	addi	r2,r2,1
 4003968:	210a7084 	addi	r4,r4,10690
 400396c:	41000015 	stw	r4,0(r8)
 4003970:	44400115 	stw	r17,4(r8)
 4003974:	d8c02015 	stw	r3,128(sp)
 4003978:	d8801f15 	stw	r2,124(sp)
 400397c:	90bff40e 	bge	r18,r2,4003950 <__alt_data_end+0xfc003950>
 4003980:	d9801e04 	addi	r6,sp,120
 4003984:	b80b883a 	mov	r5,r23
 4003988:	9809883a 	mov	r4,r19
 400398c:	400a8480 	call	400a848 <__sprint_r>
 4003990:	103e5f1e 	bne	r2,zero,4003310 <__alt_data_end+0xfc003310>
 4003994:	843ffc04 	addi	r16,r16,-16
 4003998:	d8c02017 	ldw	r3,128(sp)
 400399c:	d8801f17 	ldw	r2,124(sp)
 40039a0:	da000404 	addi	r8,sp,16
 40039a4:	8c3fed16 	blt	r17,r16,400395c <__alt_data_end+0xfc00395c>
 40039a8:	d9403517 	ldw	r5,212(sp)
 40039ac:	1c07883a 	add	r3,r3,r16
 40039b0:	10800044 	addi	r2,r2,1
 40039b4:	41400015 	stw	r5,0(r8)
 40039b8:	44000115 	stw	r16,4(r8)
 40039bc:	d8c02015 	stw	r3,128(sp)
 40039c0:	d8801f15 	stw	r2,124(sp)
 40039c4:	010001c4 	movi	r4,7
 40039c8:	2080060e 	bge	r4,r2,40039e4 <___vfprintf_internal_r+0xae4>
 40039cc:	d9002d17 	ldw	r4,180(sp)
 40039d0:	d9801e04 	addi	r6,sp,120
 40039d4:	b80b883a 	mov	r5,r23
 40039d8:	400a8480 	call	400a848 <__sprint_r>
 40039dc:	103e4c1e 	bne	r2,zero,4003310 <__alt_data_end+0xfc003310>
 40039e0:	d8c02017 	ldw	r3,128(sp)
 40039e4:	d8803117 	ldw	r2,196(sp)
 40039e8:	d9002917 	ldw	r4,164(sp)
 40039ec:	1100010e 	bge	r2,r4,40039f4 <___vfprintf_internal_r+0xaf4>
 40039f0:	2005883a 	mov	r2,r4
 40039f4:	d9402f17 	ldw	r5,188(sp)
 40039f8:	288b883a 	add	r5,r5,r2
 40039fc:	d9402f15 	stw	r5,188(sp)
 4003a00:	1801c01e 	bne	r3,zero,4004104 <___vfprintf_internal_r+0x1204>
 4003a04:	a8800007 	ldb	r2,0(r21)
 4003a08:	d8001f15 	stw	zero,124(sp)
 4003a0c:	da000404 	addi	r8,sp,16
 4003a10:	103d751e 	bne	r2,zero,4002fe8 <__alt_data_end+0xfc002fe8>
 4003a14:	a823883a 	mov	r17,r21
 4003a18:	003d8b06 	br	4003048 <__alt_data_end+0xfc003048>
 4003a1c:	8025883a 	mov	r18,r16
 4003a20:	dc002903 	ldbu	r16,164(sp)
 4003a24:	e011883a 	mov	r8,fp
 4003a28:	84003fcc 	andi	r16,r16,255
 4003a2c:	8005e51e 	bne	r16,zero,40051c4 <___vfprintf_internal_r+0x22c4>
 4003a30:	94800414 	ori	r18,r18,16
 4003a34:	9080080c 	andi	r2,r18,32
 4003a38:	10022b26 	beq	r2,zero,40042e8 <___vfprintf_internal_r+0x13e8>
 4003a3c:	d9002e17 	ldw	r4,184(sp)
 4003a40:	d9402a17 	ldw	r5,168(sp)
 4003a44:	d8002785 	stb	zero,158(sp)
 4003a48:	20c00204 	addi	r3,r4,8
 4003a4c:	24c00017 	ldw	r19,0(r4)
 4003a50:	25800117 	ldw	r22,4(r4)
 4003a54:	28042e16 	blt	r5,zero,4004b10 <___vfprintf_internal_r+0x1c10>
 4003a58:	013fdfc4 	movi	r4,-129
 4003a5c:	9d84b03a 	or	r2,r19,r22
 4003a60:	d8c02e15 	stw	r3,184(sp)
 4003a64:	9124703a 	and	r18,r18,r4
 4003a68:	0039883a 	mov	fp,zero
 4003a6c:	103e801e 	bne	r2,zero,4003470 <__alt_data_end+0xfc003470>
 4003a70:	d9002a17 	ldw	r4,168(sp)
 4003a74:	2002e01e 	bne	r4,zero,40045f8 <___vfprintf_internal_r+0x16f8>
 4003a78:	d8002a15 	stw	zero,168(sp)
 4003a7c:	d8002b15 	stw	zero,172(sp)
 4003a80:	dc001e04 	addi	r16,sp,120
 4003a84:	003ef506 	br	400365c <__alt_data_end+0xfc00365c>
 4003a88:	8025883a 	mov	r18,r16
 4003a8c:	dc002903 	ldbu	r16,164(sp)
 4003a90:	e011883a 	mov	r8,fp
 4003a94:	84003fcc 	andi	r16,r16,255
 4003a98:	8005ba1e 	bne	r16,zero,4005184 <___vfprintf_internal_r+0x2284>
 4003a9c:	01010074 	movhi	r4,1025
 4003aa0:	210a6004 	addi	r4,r4,10624
 4003aa4:	d9003915 	stw	r4,228(sp)
 4003aa8:	9080080c 	andi	r2,r18,32
 4003aac:	10006126 	beq	r2,zero,4003c34 <___vfprintf_internal_r+0xd34>
 4003ab0:	d9402e17 	ldw	r5,184(sp)
 4003ab4:	2cc00017 	ldw	r19,0(r5)
 4003ab8:	2d800117 	ldw	r22,4(r5)
 4003abc:	29400204 	addi	r5,r5,8
 4003ac0:	d9402e15 	stw	r5,184(sp)
 4003ac4:	9080004c 	andi	r2,r18,1
 4003ac8:	1001ac26 	beq	r2,zero,400417c <___vfprintf_internal_r+0x127c>
 4003acc:	9d84b03a 	or	r2,r19,r22
 4003ad0:	10038526 	beq	r2,zero,40048e8 <___vfprintf_internal_r+0x19e8>
 4003ad4:	d8c02a17 	ldw	r3,168(sp)
 4003ad8:	00800c04 	movi	r2,48
 4003adc:	d8802705 	stb	r2,156(sp)
 4003ae0:	dc402745 	stb	r17,157(sp)
 4003ae4:	d8002785 	stb	zero,158(sp)
 4003ae8:	90800094 	ori	r2,r18,2
 4003aec:	18047916 	blt	r3,zero,4004cd4 <___vfprintf_internal_r+0x1dd4>
 4003af0:	00bfdfc4 	movi	r2,-129
 4003af4:	90a4703a 	and	r18,r18,r2
 4003af8:	94800094 	ori	r18,r18,2
 4003afc:	0039883a 	mov	fp,zero
 4003b00:	d9003917 	ldw	r4,228(sp)
 4003b04:	dc001e04 	addi	r16,sp,120
 4003b08:	988003cc 	andi	r2,r19,15
 4003b0c:	b006973a 	slli	r3,r22,28
 4003b10:	2085883a 	add	r2,r4,r2
 4003b14:	9826d13a 	srli	r19,r19,4
 4003b18:	10800003 	ldbu	r2,0(r2)
 4003b1c:	b02cd13a 	srli	r22,r22,4
 4003b20:	843fffc4 	addi	r16,r16,-1
 4003b24:	1ce6b03a 	or	r19,r3,r19
 4003b28:	80800005 	stb	r2,0(r16)
 4003b2c:	9d84b03a 	or	r2,r19,r22
 4003b30:	103ff51e 	bne	r2,zero,4003b08 <__alt_data_end+0xfc003b08>
 4003b34:	d8c02817 	ldw	r3,160(sp)
 4003b38:	1c07c83a 	sub	r3,r3,r16
 4003b3c:	d8c02b15 	stw	r3,172(sp)
 4003b40:	003ec606 	br	400365c <__alt_data_end+0xfc00365c>
 4003b44:	8025883a 	mov	r18,r16
 4003b48:	dc002903 	ldbu	r16,164(sp)
 4003b4c:	e011883a 	mov	r8,fp
 4003b50:	84003fcc 	andi	r16,r16,255
 4003b54:	803e9626 	beq	r16,zero,40035b0 <__alt_data_end+0xfc0035b0>
 4003b58:	d8c02b03 	ldbu	r3,172(sp)
 4003b5c:	d8c02785 	stb	r3,158(sp)
 4003b60:	003e9306 	br	40035b0 <__alt_data_end+0xfc0035b0>
 4003b64:	00c00044 	movi	r3,1
 4003b68:	d8c02905 	stb	r3,164(sp)
 4003b6c:	00c00ac4 	movi	r3,43
 4003b70:	d8c02b05 	stb	r3,172(sp)
 4003b74:	ac400007 	ldb	r17,0(r21)
 4003b78:	003d4306 	br	4003088 <__alt_data_end+0xfc003088>
 4003b7c:	84000814 	ori	r16,r16,32
 4003b80:	ac400007 	ldb	r17,0(r21)
 4003b84:	003d4006 	br	4003088 <__alt_data_end+0xfc003088>
 4003b88:	d8802e17 	ldw	r2,184(sp)
 4003b8c:	8025883a 	mov	r18,r16
 4003b90:	d8002785 	stb	zero,158(sp)
 4003b94:	14000017 	ldw	r16,0(r2)
 4003b98:	e011883a 	mov	r8,fp
 4003b9c:	14c00104 	addi	r19,r2,4
 4003ba0:	80042d26 	beq	r16,zero,4004c58 <___vfprintf_internal_r+0x1d58>
 4003ba4:	d8c02a17 	ldw	r3,168(sp)
 4003ba8:	1803e416 	blt	r3,zero,4004b3c <___vfprintf_internal_r+0x1c3c>
 4003bac:	180d883a 	mov	r6,r3
 4003bb0:	000b883a 	mov	r5,zero
 4003bb4:	8009883a 	mov	r4,r16
 4003bb8:	df003d15 	stw	fp,244(sp)
 4003bbc:	40088380 	call	4008838 <memchr>
 4003bc0:	da003d17 	ldw	r8,244(sp)
 4003bc4:	10046826 	beq	r2,zero,4004d68 <___vfprintf_internal_r+0x1e68>
 4003bc8:	1405c83a 	sub	r2,r2,r16
 4003bcc:	d8802b15 	stw	r2,172(sp)
 4003bd0:	1003e016 	blt	r2,zero,4004b54 <___vfprintf_internal_r+0x1c54>
 4003bd4:	df002783 	ldbu	fp,158(sp)
 4003bd8:	d8802915 	stw	r2,164(sp)
 4003bdc:	dcc02e15 	stw	r19,184(sp)
 4003be0:	d8002a15 	stw	zero,168(sp)
 4003be4:	d8003215 	stw	zero,200(sp)
 4003be8:	003ea206 	br	4003674 <__alt_data_end+0xfc003674>
 4003bec:	8025883a 	mov	r18,r16
 4003bf0:	dc002903 	ldbu	r16,164(sp)
 4003bf4:	e011883a 	mov	r8,fp
 4003bf8:	84003fcc 	andi	r16,r16,255
 4003bfc:	803f8d26 	beq	r16,zero,4003a34 <__alt_data_end+0xfc003a34>
 4003c00:	d8c02b03 	ldbu	r3,172(sp)
 4003c04:	d8c02785 	stb	r3,158(sp)
 4003c08:	003f8a06 	br	4003a34 <__alt_data_end+0xfc003a34>
 4003c0c:	8025883a 	mov	r18,r16
 4003c10:	dc002903 	ldbu	r16,164(sp)
 4003c14:	e011883a 	mov	r8,fp
 4003c18:	84003fcc 	andi	r16,r16,255
 4003c1c:	8005661e 	bne	r16,zero,40051b8 <___vfprintf_internal_r+0x22b8>
 4003c20:	01010074 	movhi	r4,1025
 4003c24:	210a6504 	addi	r4,r4,10644
 4003c28:	d9003915 	stw	r4,228(sp)
 4003c2c:	9080080c 	andi	r2,r18,32
 4003c30:	103f9f1e 	bne	r2,zero,4003ab0 <__alt_data_end+0xfc003ab0>
 4003c34:	9080040c 	andi	r2,r18,16
 4003c38:	1002eb26 	beq	r2,zero,40047e8 <___vfprintf_internal_r+0x18e8>
 4003c3c:	d8802e17 	ldw	r2,184(sp)
 4003c40:	002d883a 	mov	r22,zero
 4003c44:	14c00017 	ldw	r19,0(r2)
 4003c48:	10800104 	addi	r2,r2,4
 4003c4c:	d8802e15 	stw	r2,184(sp)
 4003c50:	003f9c06 	br	4003ac4 <__alt_data_end+0xfc003ac4>
 4003c54:	d8802b07 	ldb	r2,172(sp)
 4003c58:	1002e11e 	bne	r2,zero,40047e0 <___vfprintf_internal_r+0x18e0>
 4003c5c:	00c00044 	movi	r3,1
 4003c60:	d8c02905 	stb	r3,164(sp)
 4003c64:	00c00804 	movi	r3,32
 4003c68:	d8c02b05 	stb	r3,172(sp)
 4003c6c:	ac400007 	ldb	r17,0(r21)
 4003c70:	003d0506 	br	4003088 <__alt_data_end+0xfc003088>
 4003c74:	84000054 	ori	r16,r16,1
 4003c78:	ac400007 	ldb	r17,0(r21)
 4003c7c:	003d0206 	br	4003088 <__alt_data_end+0xfc003088>
 4003c80:	8025883a 	mov	r18,r16
 4003c84:	dc002903 	ldbu	r16,164(sp)
 4003c88:	e011883a 	mov	r8,fp
 4003c8c:	84003fcc 	andi	r16,r16,255
 4003c90:	803de726 	beq	r16,zero,4003430 <__alt_data_end+0xfc003430>
 4003c94:	d8c02b03 	ldbu	r3,172(sp)
 4003c98:	d8c02785 	stb	r3,158(sp)
 4003c9c:	003de406 	br	4003430 <__alt_data_end+0xfc003430>
 4003ca0:	84001014 	ori	r16,r16,64
 4003ca4:	ac400007 	ldb	r17,0(r21)
 4003ca8:	003cf706 	br	4003088 <__alt_data_end+0xfc003088>
 4003cac:	ac400007 	ldb	r17,0(r21)
 4003cb0:	00801b04 	movi	r2,108
 4003cb4:	88838f26 	beq	r17,r2,4004af4 <___vfprintf_internal_r+0x1bf4>
 4003cb8:	84000414 	ori	r16,r16,16
 4003cbc:	003cf206 	br	4003088 <__alt_data_end+0xfc003088>
 4003cc0:	8025883a 	mov	r18,r16
 4003cc4:	dc002903 	ldbu	r16,164(sp)
 4003cc8:	e011883a 	mov	r8,fp
 4003ccc:	84003fcc 	andi	r16,r16,255
 4003cd0:	80053f1e 	bne	r16,zero,40051d0 <___vfprintf_internal_r+0x22d0>
 4003cd4:	9080080c 	andi	r2,r18,32
 4003cd8:	1002d226 	beq	r2,zero,4004824 <___vfprintf_internal_r+0x1924>
 4003cdc:	d9002e17 	ldw	r4,184(sp)
 4003ce0:	d9402f17 	ldw	r5,188(sp)
 4003ce4:	20800017 	ldw	r2,0(r4)
 4003ce8:	2807d7fa 	srai	r3,r5,31
 4003cec:	21000104 	addi	r4,r4,4
 4003cf0:	d9002e15 	stw	r4,184(sp)
 4003cf4:	11400015 	stw	r5,0(r2)
 4003cf8:	10c00115 	stw	r3,4(r2)
 4003cfc:	003cb806 	br	4002fe0 <__alt_data_end+0xfc002fe0>
 4003d00:	d8c02e17 	ldw	r3,184(sp)
 4003d04:	d9002e17 	ldw	r4,184(sp)
 4003d08:	8025883a 	mov	r18,r16
 4003d0c:	18800017 	ldw	r2,0(r3)
 4003d10:	21000104 	addi	r4,r4,4
 4003d14:	00c00044 	movi	r3,1
 4003d18:	e011883a 	mov	r8,fp
 4003d1c:	d8c02915 	stw	r3,164(sp)
 4003d20:	d8002785 	stb	zero,158(sp)
 4003d24:	d8801405 	stb	r2,80(sp)
 4003d28:	d9002e15 	stw	r4,184(sp)
 4003d2c:	d8c02b15 	stw	r3,172(sp)
 4003d30:	d8002a15 	stw	zero,168(sp)
 4003d34:	d8003215 	stw	zero,200(sp)
 4003d38:	dc001404 	addi	r16,sp,80
 4003d3c:	0039883a 	mov	fp,zero
 4003d40:	003e5306 	br	4003690 <__alt_data_end+0xfc003690>
 4003d44:	01010074 	movhi	r4,1025
 4003d48:	210a6504 	addi	r4,r4,10644
 4003d4c:	0039883a 	mov	fp,zero
 4003d50:	d9003915 	stw	r4,228(sp)
 4003d54:	04401e04 	movi	r17,120
 4003d58:	003f6906 	br	4003b00 <__alt_data_end+0xfc003b00>
 4003d5c:	8025883a 	mov	r18,r16
 4003d60:	dc002903 	ldbu	r16,164(sp)
 4003d64:	e011883a 	mov	r8,fp
 4003d68:	84003fcc 	andi	r16,r16,255
 4003d6c:	8005081e 	bne	r16,zero,4005190 <___vfprintf_internal_r+0x2290>
 4003d70:	883d6126 	beq	r17,zero,40032f8 <__alt_data_end+0xfc0032f8>
 4003d74:	00c00044 	movi	r3,1
 4003d78:	d8c02915 	stw	r3,164(sp)
 4003d7c:	dc401405 	stb	r17,80(sp)
 4003d80:	d8002785 	stb	zero,158(sp)
 4003d84:	003fe906 	br	4003d2c <__alt_data_end+0xfc003d2c>
 4003d88:	01410074 	movhi	r5,1025
 4003d8c:	294a6504 	addi	r5,r5,10644
 4003d90:	d9403915 	stw	r5,228(sp)
 4003d94:	d8c02e15 	stw	r3,184(sp)
 4003d98:	1025883a 	mov	r18,r2
 4003d9c:	04401e04 	movi	r17,120
 4003da0:	9d84b03a 	or	r2,r19,r22
 4003da4:	1000fc1e 	bne	r2,zero,4004198 <___vfprintf_internal_r+0x1298>
 4003da8:	0039883a 	mov	fp,zero
 4003dac:	00800084 	movi	r2,2
 4003db0:	10803fcc 	andi	r2,r2,255
 4003db4:	00c00044 	movi	r3,1
 4003db8:	10c20f26 	beq	r2,r3,40045f8 <___vfprintf_internal_r+0x16f8>
 4003dbc:	00c00084 	movi	r3,2
 4003dc0:	10fd3326 	beq	r2,r3,4003290 <__alt_data_end+0xfc003290>
 4003dc4:	003e0b06 	br	40035f4 <__alt_data_end+0xfc0035f4>
 4003dc8:	d8c02017 	ldw	r3,128(sp)
 4003dcc:	003e7106 	br	4003794 <__alt_data_end+0xfc003794>
 4003dd0:	00801944 	movi	r2,101
 4003dd4:	14407e0e 	bge	r2,r17,4003fd0 <___vfprintf_internal_r+0x10d0>
 4003dd8:	d9003617 	ldw	r4,216(sp)
 4003ddc:	d9403817 	ldw	r5,224(sp)
 4003de0:	000d883a 	mov	r6,zero
 4003de4:	000f883a 	mov	r7,zero
 4003de8:	d8c03c15 	stw	r3,240(sp)
 4003dec:	da003d15 	stw	r8,244(sp)
 4003df0:	400e5cc0 	call	400e5cc <__eqdf2>
 4003df4:	d8c03c17 	ldw	r3,240(sp)
 4003df8:	da003d17 	ldw	r8,244(sp)
 4003dfc:	1000f71e 	bne	r2,zero,40041dc <___vfprintf_internal_r+0x12dc>
 4003e00:	d8801f17 	ldw	r2,124(sp)
 4003e04:	01010074 	movhi	r4,1025
 4003e08:	210a6c04 	addi	r4,r4,10672
 4003e0c:	18c00044 	addi	r3,r3,1
 4003e10:	10800044 	addi	r2,r2,1
 4003e14:	41000015 	stw	r4,0(r8)
 4003e18:	01000044 	movi	r4,1
 4003e1c:	41000115 	stw	r4,4(r8)
 4003e20:	d8c02015 	stw	r3,128(sp)
 4003e24:	d8801f15 	stw	r2,124(sp)
 4003e28:	010001c4 	movi	r4,7
 4003e2c:	2082b816 	blt	r4,r2,4004910 <___vfprintf_internal_r+0x1a10>
 4003e30:	42000204 	addi	r8,r8,8
 4003e34:	d8802617 	ldw	r2,152(sp)
 4003e38:	d9403317 	ldw	r5,204(sp)
 4003e3c:	11400216 	blt	r2,r5,4003e48 <___vfprintf_internal_r+0xf48>
 4003e40:	9080004c 	andi	r2,r18,1
 4003e44:	103eb326 	beq	r2,zero,4003914 <__alt_data_end+0xfc003914>
 4003e48:	d8803717 	ldw	r2,220(sp)
 4003e4c:	d9003417 	ldw	r4,208(sp)
 4003e50:	d9403717 	ldw	r5,220(sp)
 4003e54:	1887883a 	add	r3,r3,r2
 4003e58:	d8801f17 	ldw	r2,124(sp)
 4003e5c:	41000015 	stw	r4,0(r8)
 4003e60:	41400115 	stw	r5,4(r8)
 4003e64:	10800044 	addi	r2,r2,1
 4003e68:	d8c02015 	stw	r3,128(sp)
 4003e6c:	d8801f15 	stw	r2,124(sp)
 4003e70:	010001c4 	movi	r4,7
 4003e74:	20832916 	blt	r4,r2,4004b1c <___vfprintf_internal_r+0x1c1c>
 4003e78:	42000204 	addi	r8,r8,8
 4003e7c:	d8803317 	ldw	r2,204(sp)
 4003e80:	143fffc4 	addi	r16,r2,-1
 4003e84:	043ea30e 	bge	zero,r16,4003914 <__alt_data_end+0xfc003914>
 4003e88:	04400404 	movi	r17,16
 4003e8c:	d8801f17 	ldw	r2,124(sp)
 4003e90:	8c00880e 	bge	r17,r16,40040b4 <___vfprintf_internal_r+0x11b4>
 4003e94:	01410074 	movhi	r5,1025
 4003e98:	294a6c84 	addi	r5,r5,10674
 4003e9c:	d9402c15 	stw	r5,176(sp)
 4003ea0:	058001c4 	movi	r22,7
 4003ea4:	dcc02d17 	ldw	r19,180(sp)
 4003ea8:	00000306 	br	4003eb8 <___vfprintf_internal_r+0xfb8>
 4003eac:	42000204 	addi	r8,r8,8
 4003eb0:	843ffc04 	addi	r16,r16,-16
 4003eb4:	8c00820e 	bge	r17,r16,40040c0 <___vfprintf_internal_r+0x11c0>
 4003eb8:	18c00404 	addi	r3,r3,16
 4003ebc:	10800044 	addi	r2,r2,1
 4003ec0:	45000015 	stw	r20,0(r8)
 4003ec4:	44400115 	stw	r17,4(r8)
 4003ec8:	d8c02015 	stw	r3,128(sp)
 4003ecc:	d8801f15 	stw	r2,124(sp)
 4003ed0:	b0bff60e 	bge	r22,r2,4003eac <__alt_data_end+0xfc003eac>
 4003ed4:	d9801e04 	addi	r6,sp,120
 4003ed8:	b80b883a 	mov	r5,r23
 4003edc:	9809883a 	mov	r4,r19
 4003ee0:	400a8480 	call	400a848 <__sprint_r>
 4003ee4:	103d0a1e 	bne	r2,zero,4003310 <__alt_data_end+0xfc003310>
 4003ee8:	d8c02017 	ldw	r3,128(sp)
 4003eec:	d8801f17 	ldw	r2,124(sp)
 4003ef0:	da000404 	addi	r8,sp,16
 4003ef4:	003fee06 	br	4003eb0 <__alt_data_end+0xfc003eb0>
 4003ef8:	d9403117 	ldw	r5,196(sp)
 4003efc:	d8802917 	ldw	r2,164(sp)
 4003f00:	28adc83a 	sub	r22,r5,r2
 4003f04:	05be410e 	bge	zero,r22,400380c <__alt_data_end+0xfc00380c>
 4003f08:	07000404 	movi	fp,16
 4003f0c:	d8801f17 	ldw	r2,124(sp)
 4003f10:	e5838f0e 	bge	fp,r22,4004d50 <___vfprintf_internal_r+0x1e50>
 4003f14:	01410074 	movhi	r5,1025
 4003f18:	294a6c84 	addi	r5,r5,10674
 4003f1c:	dc403015 	stw	r17,192(sp)
 4003f20:	d9402c15 	stw	r5,176(sp)
 4003f24:	b023883a 	mov	r17,r22
 4003f28:	04c001c4 	movi	r19,7
 4003f2c:	a82d883a 	mov	r22,r21
 4003f30:	902b883a 	mov	r21,r18
 4003f34:	8025883a 	mov	r18,r16
 4003f38:	dc002d17 	ldw	r16,180(sp)
 4003f3c:	00000306 	br	4003f4c <___vfprintf_internal_r+0x104c>
 4003f40:	8c7ffc04 	addi	r17,r17,-16
 4003f44:	42000204 	addi	r8,r8,8
 4003f48:	e440110e 	bge	fp,r17,4003f90 <___vfprintf_internal_r+0x1090>
 4003f4c:	18c00404 	addi	r3,r3,16
 4003f50:	10800044 	addi	r2,r2,1
 4003f54:	45000015 	stw	r20,0(r8)
 4003f58:	47000115 	stw	fp,4(r8)
 4003f5c:	d8c02015 	stw	r3,128(sp)
 4003f60:	d8801f15 	stw	r2,124(sp)
 4003f64:	98bff60e 	bge	r19,r2,4003f40 <__alt_data_end+0xfc003f40>
 4003f68:	d9801e04 	addi	r6,sp,120
 4003f6c:	b80b883a 	mov	r5,r23
 4003f70:	8009883a 	mov	r4,r16
 4003f74:	400a8480 	call	400a848 <__sprint_r>
 4003f78:	103ce51e 	bne	r2,zero,4003310 <__alt_data_end+0xfc003310>
 4003f7c:	8c7ffc04 	addi	r17,r17,-16
 4003f80:	d8c02017 	ldw	r3,128(sp)
 4003f84:	d8801f17 	ldw	r2,124(sp)
 4003f88:	da000404 	addi	r8,sp,16
 4003f8c:	e47fef16 	blt	fp,r17,4003f4c <__alt_data_end+0xfc003f4c>
 4003f90:	9021883a 	mov	r16,r18
 4003f94:	a825883a 	mov	r18,r21
 4003f98:	b02b883a 	mov	r21,r22
 4003f9c:	882d883a 	mov	r22,r17
 4003fa0:	dc403017 	ldw	r17,192(sp)
 4003fa4:	d9002c17 	ldw	r4,176(sp)
 4003fa8:	1d87883a 	add	r3,r3,r22
 4003fac:	10800044 	addi	r2,r2,1
 4003fb0:	41000015 	stw	r4,0(r8)
 4003fb4:	45800115 	stw	r22,4(r8)
 4003fb8:	d8c02015 	stw	r3,128(sp)
 4003fbc:	d8801f15 	stw	r2,124(sp)
 4003fc0:	010001c4 	movi	r4,7
 4003fc4:	20818e16 	blt	r4,r2,4004600 <___vfprintf_internal_r+0x1700>
 4003fc8:	42000204 	addi	r8,r8,8
 4003fcc:	003e0f06 	br	400380c <__alt_data_end+0xfc00380c>
 4003fd0:	d9403317 	ldw	r5,204(sp)
 4003fd4:	00800044 	movi	r2,1
 4003fd8:	18c00044 	addi	r3,r3,1
 4003fdc:	1141530e 	bge	r2,r5,400452c <___vfprintf_internal_r+0x162c>
 4003fe0:	dc401f17 	ldw	r17,124(sp)
 4003fe4:	00800044 	movi	r2,1
 4003fe8:	40800115 	stw	r2,4(r8)
 4003fec:	8c400044 	addi	r17,r17,1
 4003ff0:	44000015 	stw	r16,0(r8)
 4003ff4:	d8c02015 	stw	r3,128(sp)
 4003ff8:	dc401f15 	stw	r17,124(sp)
 4003ffc:	008001c4 	movi	r2,7
 4004000:	14416b16 	blt	r2,r17,40045b0 <___vfprintf_internal_r+0x16b0>
 4004004:	42000204 	addi	r8,r8,8
 4004008:	d8803717 	ldw	r2,220(sp)
 400400c:	d9003417 	ldw	r4,208(sp)
 4004010:	8c400044 	addi	r17,r17,1
 4004014:	10c7883a 	add	r3,r2,r3
 4004018:	40800115 	stw	r2,4(r8)
 400401c:	41000015 	stw	r4,0(r8)
 4004020:	d8c02015 	stw	r3,128(sp)
 4004024:	dc401f15 	stw	r17,124(sp)
 4004028:	008001c4 	movi	r2,7
 400402c:	14416916 	blt	r2,r17,40045d4 <___vfprintf_internal_r+0x16d4>
 4004030:	45800204 	addi	r22,r8,8
 4004034:	d9003617 	ldw	r4,216(sp)
 4004038:	d9403817 	ldw	r5,224(sp)
 400403c:	000d883a 	mov	r6,zero
 4004040:	000f883a 	mov	r7,zero
 4004044:	d8c03c15 	stw	r3,240(sp)
 4004048:	400e5cc0 	call	400e5cc <__eqdf2>
 400404c:	d8c03c17 	ldw	r3,240(sp)
 4004050:	1000bc26 	beq	r2,zero,4004344 <___vfprintf_internal_r+0x1444>
 4004054:	d9403317 	ldw	r5,204(sp)
 4004058:	84000044 	addi	r16,r16,1
 400405c:	8c400044 	addi	r17,r17,1
 4004060:	28bfffc4 	addi	r2,r5,-1
 4004064:	1887883a 	add	r3,r3,r2
 4004068:	b0800115 	stw	r2,4(r22)
 400406c:	b4000015 	stw	r16,0(r22)
 4004070:	d8c02015 	stw	r3,128(sp)
 4004074:	dc401f15 	stw	r17,124(sp)
 4004078:	008001c4 	movi	r2,7
 400407c:	14414316 	blt	r2,r17,400458c <___vfprintf_internal_r+0x168c>
 4004080:	b5800204 	addi	r22,r22,8
 4004084:	d9003a17 	ldw	r4,232(sp)
 4004088:	df0022c4 	addi	fp,sp,139
 400408c:	8c400044 	addi	r17,r17,1
 4004090:	20c7883a 	add	r3,r4,r3
 4004094:	b7000015 	stw	fp,0(r22)
 4004098:	b1000115 	stw	r4,4(r22)
 400409c:	d8c02015 	stw	r3,128(sp)
 40040a0:	dc401f15 	stw	r17,124(sp)
 40040a4:	008001c4 	movi	r2,7
 40040a8:	14400e16 	blt	r2,r17,40040e4 <___vfprintf_internal_r+0x11e4>
 40040ac:	b2000204 	addi	r8,r22,8
 40040b0:	003e1806 	br	4003914 <__alt_data_end+0xfc003914>
 40040b4:	01010074 	movhi	r4,1025
 40040b8:	210a6c84 	addi	r4,r4,10674
 40040bc:	d9002c15 	stw	r4,176(sp)
 40040c0:	d9002c17 	ldw	r4,176(sp)
 40040c4:	1c07883a 	add	r3,r3,r16
 40040c8:	44000115 	stw	r16,4(r8)
 40040cc:	41000015 	stw	r4,0(r8)
 40040d0:	10800044 	addi	r2,r2,1
 40040d4:	d8c02015 	stw	r3,128(sp)
 40040d8:	d8801f15 	stw	r2,124(sp)
 40040dc:	010001c4 	movi	r4,7
 40040e0:	20be0b0e 	bge	r4,r2,4003910 <__alt_data_end+0xfc003910>
 40040e4:	d9002d17 	ldw	r4,180(sp)
 40040e8:	d9801e04 	addi	r6,sp,120
 40040ec:	b80b883a 	mov	r5,r23
 40040f0:	400a8480 	call	400a848 <__sprint_r>
 40040f4:	103c861e 	bne	r2,zero,4003310 <__alt_data_end+0xfc003310>
 40040f8:	d8c02017 	ldw	r3,128(sp)
 40040fc:	da000404 	addi	r8,sp,16
 4004100:	003e0406 	br	4003914 <__alt_data_end+0xfc003914>
 4004104:	d9002d17 	ldw	r4,180(sp)
 4004108:	d9801e04 	addi	r6,sp,120
 400410c:	b80b883a 	mov	r5,r23
 4004110:	400a8480 	call	400a848 <__sprint_r>
 4004114:	103e3b26 	beq	r2,zero,4003a04 <__alt_data_end+0xfc003a04>
 4004118:	003c7d06 	br	4003310 <__alt_data_end+0xfc003310>
 400411c:	d9002d17 	ldw	r4,180(sp)
 4004120:	d9801e04 	addi	r6,sp,120
 4004124:	b80b883a 	mov	r5,r23
 4004128:	400a8480 	call	400a848 <__sprint_r>
 400412c:	103c781e 	bne	r2,zero,4003310 <__alt_data_end+0xfc003310>
 4004130:	d8c02017 	ldw	r3,128(sp)
 4004134:	da000404 	addi	r8,sp,16
 4004138:	003de906 	br	40038e0 <__alt_data_end+0xfc0038e0>
 400413c:	d9002d17 	ldw	r4,180(sp)
 4004140:	d9801e04 	addi	r6,sp,120
 4004144:	b80b883a 	mov	r5,r23
 4004148:	400a8480 	call	400a848 <__sprint_r>
 400414c:	103c701e 	bne	r2,zero,4003310 <__alt_data_end+0xfc003310>
 4004150:	d8c02017 	ldw	r3,128(sp)
 4004154:	da000404 	addi	r8,sp,16
 4004158:	003d9b06 	br	40037c8 <__alt_data_end+0xfc0037c8>
 400415c:	d9002d17 	ldw	r4,180(sp)
 4004160:	d9801e04 	addi	r6,sp,120
 4004164:	b80b883a 	mov	r5,r23
 4004168:	400a8480 	call	400a848 <__sprint_r>
 400416c:	103c681e 	bne	r2,zero,4003310 <__alt_data_end+0xfc003310>
 4004170:	d8c02017 	ldw	r3,128(sp)
 4004174:	da000404 	addi	r8,sp,16
 4004178:	003da106 	br	4003800 <__alt_data_end+0xfc003800>
 400417c:	d9402a17 	ldw	r5,168(sp)
 4004180:	d8002785 	stb	zero,158(sp)
 4004184:	283f0616 	blt	r5,zero,4003da0 <__alt_data_end+0xfc003da0>
 4004188:	00ffdfc4 	movi	r3,-129
 400418c:	9d84b03a 	or	r2,r19,r22
 4004190:	90e4703a 	and	r18,r18,r3
 4004194:	103c3b26 	beq	r2,zero,4003284 <__alt_data_end+0xfc003284>
 4004198:	0039883a 	mov	fp,zero
 400419c:	003e5806 	br	4003b00 <__alt_data_end+0xfc003b00>
 40041a0:	9080040c 	andi	r2,r18,16
 40041a4:	1001b326 	beq	r2,zero,4004874 <___vfprintf_internal_r+0x1974>
 40041a8:	d8c02e17 	ldw	r3,184(sp)
 40041ac:	d9002a17 	ldw	r4,168(sp)
 40041b0:	d8002785 	stb	zero,158(sp)
 40041b4:	18800104 	addi	r2,r3,4
 40041b8:	1cc00017 	ldw	r19,0(r3)
 40041bc:	002d883a 	mov	r22,zero
 40041c0:	2001b516 	blt	r4,zero,4004898 <___vfprintf_internal_r+0x1998>
 40041c4:	00ffdfc4 	movi	r3,-129
 40041c8:	d8802e15 	stw	r2,184(sp)
 40041cc:	90e4703a 	and	r18,r18,r3
 40041d0:	983d0526 	beq	r19,zero,40035e8 <__alt_data_end+0xfc0035e8>
 40041d4:	0039883a 	mov	fp,zero
 40041d8:	003d0806 	br	40035fc <__alt_data_end+0xfc0035fc>
 40041dc:	dc402617 	ldw	r17,152(sp)
 40041e0:	0441d30e 	bge	zero,r17,4004930 <___vfprintf_internal_r+0x1a30>
 40041e4:	dc403217 	ldw	r17,200(sp)
 40041e8:	d8803317 	ldw	r2,204(sp)
 40041ec:	1440010e 	bge	r2,r17,40041f4 <___vfprintf_internal_r+0x12f4>
 40041f0:	1023883a 	mov	r17,r2
 40041f4:	04400a0e 	bge	zero,r17,4004220 <___vfprintf_internal_r+0x1320>
 40041f8:	d8801f17 	ldw	r2,124(sp)
 40041fc:	1c47883a 	add	r3,r3,r17
 4004200:	44000015 	stw	r16,0(r8)
 4004204:	10800044 	addi	r2,r2,1
 4004208:	44400115 	stw	r17,4(r8)
 400420c:	d8c02015 	stw	r3,128(sp)
 4004210:	d8801f15 	stw	r2,124(sp)
 4004214:	010001c4 	movi	r4,7
 4004218:	20826516 	blt	r4,r2,4004bb0 <___vfprintf_internal_r+0x1cb0>
 400421c:	42000204 	addi	r8,r8,8
 4004220:	88026116 	blt	r17,zero,4004ba8 <___vfprintf_internal_r+0x1ca8>
 4004224:	d9003217 	ldw	r4,200(sp)
 4004228:	2463c83a 	sub	r17,r4,r17
 400422c:	04407b0e 	bge	zero,r17,400441c <___vfprintf_internal_r+0x151c>
 4004230:	05800404 	movi	r22,16
 4004234:	d8801f17 	ldw	r2,124(sp)
 4004238:	b4419d0e 	bge	r22,r17,40048b0 <___vfprintf_internal_r+0x19b0>
 400423c:	01010074 	movhi	r4,1025
 4004240:	210a6c84 	addi	r4,r4,10674
 4004244:	d9002c15 	stw	r4,176(sp)
 4004248:	070001c4 	movi	fp,7
 400424c:	dcc02d17 	ldw	r19,180(sp)
 4004250:	00000306 	br	4004260 <___vfprintf_internal_r+0x1360>
 4004254:	42000204 	addi	r8,r8,8
 4004258:	8c7ffc04 	addi	r17,r17,-16
 400425c:	b441970e 	bge	r22,r17,40048bc <___vfprintf_internal_r+0x19bc>
 4004260:	18c00404 	addi	r3,r3,16
 4004264:	10800044 	addi	r2,r2,1
 4004268:	45000015 	stw	r20,0(r8)
 400426c:	45800115 	stw	r22,4(r8)
 4004270:	d8c02015 	stw	r3,128(sp)
 4004274:	d8801f15 	stw	r2,124(sp)
 4004278:	e0bff60e 	bge	fp,r2,4004254 <__alt_data_end+0xfc004254>
 400427c:	d9801e04 	addi	r6,sp,120
 4004280:	b80b883a 	mov	r5,r23
 4004284:	9809883a 	mov	r4,r19
 4004288:	400a8480 	call	400a848 <__sprint_r>
 400428c:	103c201e 	bne	r2,zero,4003310 <__alt_data_end+0xfc003310>
 4004290:	d8c02017 	ldw	r3,128(sp)
 4004294:	d8801f17 	ldw	r2,124(sp)
 4004298:	da000404 	addi	r8,sp,16
 400429c:	003fee06 	br	4004258 <__alt_data_end+0xfc004258>
 40042a0:	d9002d17 	ldw	r4,180(sp)
 40042a4:	d9801e04 	addi	r6,sp,120
 40042a8:	b80b883a 	mov	r5,r23
 40042ac:	400a8480 	call	400a848 <__sprint_r>
 40042b0:	103c171e 	bne	r2,zero,4003310 <__alt_data_end+0xfc003310>
 40042b4:	d8c02017 	ldw	r3,128(sp)
 40042b8:	df002787 	ldb	fp,158(sp)
 40042bc:	da000404 	addi	r8,sp,16
 40042c0:	003d3406 	br	4003794 <__alt_data_end+0xfc003794>
 40042c4:	9080040c 	andi	r2,r18,16
 40042c8:	10016126 	beq	r2,zero,4004850 <___vfprintf_internal_r+0x1950>
 40042cc:	d9402e17 	ldw	r5,184(sp)
 40042d0:	2cc00017 	ldw	r19,0(r5)
 40042d4:	29400104 	addi	r5,r5,4
 40042d8:	d9402e15 	stw	r5,184(sp)
 40042dc:	982dd7fa 	srai	r22,r19,31
 40042e0:	b005883a 	mov	r2,r22
 40042e4:	003c5a06 	br	4003450 <__alt_data_end+0xfc003450>
 40042e8:	9080040c 	andi	r2,r18,16
 40042ec:	10003526 	beq	r2,zero,40043c4 <___vfprintf_internal_r+0x14c4>
 40042f0:	d8c02e17 	ldw	r3,184(sp)
 40042f4:	d9002a17 	ldw	r4,168(sp)
 40042f8:	d8002785 	stb	zero,158(sp)
 40042fc:	18800104 	addi	r2,r3,4
 4004300:	1cc00017 	ldw	r19,0(r3)
 4004304:	002d883a 	mov	r22,zero
 4004308:	20003716 	blt	r4,zero,40043e8 <___vfprintf_internal_r+0x14e8>
 400430c:	00ffdfc4 	movi	r3,-129
 4004310:	d8802e15 	stw	r2,184(sp)
 4004314:	90e4703a 	and	r18,r18,r3
 4004318:	0039883a 	mov	fp,zero
 400431c:	983dd426 	beq	r19,zero,4003a70 <__alt_data_end+0xfc003a70>
 4004320:	00800244 	movi	r2,9
 4004324:	14fc5336 	bltu	r2,r19,4003474 <__alt_data_end+0xfc003474>
 4004328:	d8c02817 	ldw	r3,160(sp)
 400432c:	dc001dc4 	addi	r16,sp,119
 4004330:	9cc00c04 	addi	r19,r19,48
 4004334:	1c07c83a 	sub	r3,r3,r16
 4004338:	dcc01dc5 	stb	r19,119(sp)
 400433c:	d8c02b15 	stw	r3,172(sp)
 4004340:	003cc606 	br	400365c <__alt_data_end+0xfc00365c>
 4004344:	d8803317 	ldw	r2,204(sp)
 4004348:	143fffc4 	addi	r16,r2,-1
 400434c:	043f4d0e 	bge	zero,r16,4004084 <__alt_data_end+0xfc004084>
 4004350:	07000404 	movi	fp,16
 4004354:	e400810e 	bge	fp,r16,400455c <___vfprintf_internal_r+0x165c>
 4004358:	01410074 	movhi	r5,1025
 400435c:	294a6c84 	addi	r5,r5,10674
 4004360:	d9402c15 	stw	r5,176(sp)
 4004364:	01c001c4 	movi	r7,7
 4004368:	dcc02d17 	ldw	r19,180(sp)
 400436c:	00000306 	br	400437c <___vfprintf_internal_r+0x147c>
 4004370:	b5800204 	addi	r22,r22,8
 4004374:	843ffc04 	addi	r16,r16,-16
 4004378:	e4007b0e 	bge	fp,r16,4004568 <___vfprintf_internal_r+0x1668>
 400437c:	18c00404 	addi	r3,r3,16
 4004380:	8c400044 	addi	r17,r17,1
 4004384:	b5000015 	stw	r20,0(r22)
 4004388:	b7000115 	stw	fp,4(r22)
 400438c:	d8c02015 	stw	r3,128(sp)
 4004390:	dc401f15 	stw	r17,124(sp)
 4004394:	3c7ff60e 	bge	r7,r17,4004370 <__alt_data_end+0xfc004370>
 4004398:	d9801e04 	addi	r6,sp,120
 400439c:	b80b883a 	mov	r5,r23
 40043a0:	9809883a 	mov	r4,r19
 40043a4:	d9c03c15 	stw	r7,240(sp)
 40043a8:	400a8480 	call	400a848 <__sprint_r>
 40043ac:	d9c03c17 	ldw	r7,240(sp)
 40043b0:	103bd71e 	bne	r2,zero,4003310 <__alt_data_end+0xfc003310>
 40043b4:	d8c02017 	ldw	r3,128(sp)
 40043b8:	dc401f17 	ldw	r17,124(sp)
 40043bc:	dd800404 	addi	r22,sp,16
 40043c0:	003fec06 	br	4004374 <__alt_data_end+0xfc004374>
 40043c4:	9080100c 	andi	r2,r18,64
 40043c8:	d8002785 	stb	zero,158(sp)
 40043cc:	10010e26 	beq	r2,zero,4004808 <___vfprintf_internal_r+0x1908>
 40043d0:	d9402e17 	ldw	r5,184(sp)
 40043d4:	d8c02a17 	ldw	r3,168(sp)
 40043d8:	002d883a 	mov	r22,zero
 40043dc:	28800104 	addi	r2,r5,4
 40043e0:	2cc0000b 	ldhu	r19,0(r5)
 40043e4:	183fc90e 	bge	r3,zero,400430c <__alt_data_end+0xfc00430c>
 40043e8:	d8802e15 	stw	r2,184(sp)
 40043ec:	0039883a 	mov	fp,zero
 40043f0:	9d84b03a 	or	r2,r19,r22
 40043f4:	103c1e1e 	bne	r2,zero,4003470 <__alt_data_end+0xfc003470>
 40043f8:	00800044 	movi	r2,1
 40043fc:	003e6c06 	br	4003db0 <__alt_data_end+0xfc003db0>
 4004400:	d9002d17 	ldw	r4,180(sp)
 4004404:	d9801e04 	addi	r6,sp,120
 4004408:	b80b883a 	mov	r5,r23
 400440c:	400a8480 	call	400a848 <__sprint_r>
 4004410:	103bbf1e 	bne	r2,zero,4003310 <__alt_data_end+0xfc003310>
 4004414:	d8c02017 	ldw	r3,128(sp)
 4004418:	da000404 	addi	r8,sp,16
 400441c:	d9003217 	ldw	r4,200(sp)
 4004420:	d8802617 	ldw	r2,152(sp)
 4004424:	d9403317 	ldw	r5,204(sp)
 4004428:	8123883a 	add	r17,r16,r4
 400442c:	11400216 	blt	r2,r5,4004438 <___vfprintf_internal_r+0x1538>
 4004430:	9100004c 	andi	r4,r18,1
 4004434:	20000d26 	beq	r4,zero,400446c <___vfprintf_internal_r+0x156c>
 4004438:	d9003717 	ldw	r4,220(sp)
 400443c:	d9403417 	ldw	r5,208(sp)
 4004440:	1907883a 	add	r3,r3,r4
 4004444:	d9001f17 	ldw	r4,124(sp)
 4004448:	41400015 	stw	r5,0(r8)
 400444c:	d9403717 	ldw	r5,220(sp)
 4004450:	21000044 	addi	r4,r4,1
 4004454:	d8c02015 	stw	r3,128(sp)
 4004458:	41400115 	stw	r5,4(r8)
 400445c:	d9001f15 	stw	r4,124(sp)
 4004460:	014001c4 	movi	r5,7
 4004464:	2901e816 	blt	r5,r4,4004c08 <___vfprintf_internal_r+0x1d08>
 4004468:	42000204 	addi	r8,r8,8
 400446c:	d9003317 	ldw	r4,204(sp)
 4004470:	8121883a 	add	r16,r16,r4
 4004474:	2085c83a 	sub	r2,r4,r2
 4004478:	8461c83a 	sub	r16,r16,r17
 400447c:	1400010e 	bge	r2,r16,4004484 <___vfprintf_internal_r+0x1584>
 4004480:	1021883a 	mov	r16,r2
 4004484:	04000a0e 	bge	zero,r16,40044b0 <___vfprintf_internal_r+0x15b0>
 4004488:	d9001f17 	ldw	r4,124(sp)
 400448c:	1c07883a 	add	r3,r3,r16
 4004490:	44400015 	stw	r17,0(r8)
 4004494:	21000044 	addi	r4,r4,1
 4004498:	44000115 	stw	r16,4(r8)
 400449c:	d8c02015 	stw	r3,128(sp)
 40044a0:	d9001f15 	stw	r4,124(sp)
 40044a4:	014001c4 	movi	r5,7
 40044a8:	2901fb16 	blt	r5,r4,4004c98 <___vfprintf_internal_r+0x1d98>
 40044ac:	42000204 	addi	r8,r8,8
 40044b0:	8001f716 	blt	r16,zero,4004c90 <___vfprintf_internal_r+0x1d90>
 40044b4:	1421c83a 	sub	r16,r2,r16
 40044b8:	043d160e 	bge	zero,r16,4003914 <__alt_data_end+0xfc003914>
 40044bc:	04400404 	movi	r17,16
 40044c0:	d8801f17 	ldw	r2,124(sp)
 40044c4:	8c3efb0e 	bge	r17,r16,40040b4 <__alt_data_end+0xfc0040b4>
 40044c8:	01410074 	movhi	r5,1025
 40044cc:	294a6c84 	addi	r5,r5,10674
 40044d0:	d9402c15 	stw	r5,176(sp)
 40044d4:	058001c4 	movi	r22,7
 40044d8:	dcc02d17 	ldw	r19,180(sp)
 40044dc:	00000306 	br	40044ec <___vfprintf_internal_r+0x15ec>
 40044e0:	42000204 	addi	r8,r8,8
 40044e4:	843ffc04 	addi	r16,r16,-16
 40044e8:	8c3ef50e 	bge	r17,r16,40040c0 <__alt_data_end+0xfc0040c0>
 40044ec:	18c00404 	addi	r3,r3,16
 40044f0:	10800044 	addi	r2,r2,1
 40044f4:	45000015 	stw	r20,0(r8)
 40044f8:	44400115 	stw	r17,4(r8)
 40044fc:	d8c02015 	stw	r3,128(sp)
 4004500:	d8801f15 	stw	r2,124(sp)
 4004504:	b0bff60e 	bge	r22,r2,40044e0 <__alt_data_end+0xfc0044e0>
 4004508:	d9801e04 	addi	r6,sp,120
 400450c:	b80b883a 	mov	r5,r23
 4004510:	9809883a 	mov	r4,r19
 4004514:	400a8480 	call	400a848 <__sprint_r>
 4004518:	103b7d1e 	bne	r2,zero,4003310 <__alt_data_end+0xfc003310>
 400451c:	d8c02017 	ldw	r3,128(sp)
 4004520:	d8801f17 	ldw	r2,124(sp)
 4004524:	da000404 	addi	r8,sp,16
 4004528:	003fee06 	br	40044e4 <__alt_data_end+0xfc0044e4>
 400452c:	9088703a 	and	r4,r18,r2
 4004530:	203eab1e 	bne	r4,zero,4003fe0 <__alt_data_end+0xfc003fe0>
 4004534:	dc401f17 	ldw	r17,124(sp)
 4004538:	40800115 	stw	r2,4(r8)
 400453c:	44000015 	stw	r16,0(r8)
 4004540:	8c400044 	addi	r17,r17,1
 4004544:	d8c02015 	stw	r3,128(sp)
 4004548:	dc401f15 	stw	r17,124(sp)
 400454c:	008001c4 	movi	r2,7
 4004550:	14400e16 	blt	r2,r17,400458c <___vfprintf_internal_r+0x168c>
 4004554:	45800204 	addi	r22,r8,8
 4004558:	003eca06 	br	4004084 <__alt_data_end+0xfc004084>
 400455c:	01010074 	movhi	r4,1025
 4004560:	210a6c84 	addi	r4,r4,10674
 4004564:	d9002c15 	stw	r4,176(sp)
 4004568:	d8802c17 	ldw	r2,176(sp)
 400456c:	1c07883a 	add	r3,r3,r16
 4004570:	8c400044 	addi	r17,r17,1
 4004574:	b0800015 	stw	r2,0(r22)
 4004578:	b4000115 	stw	r16,4(r22)
 400457c:	d8c02015 	stw	r3,128(sp)
 4004580:	dc401f15 	stw	r17,124(sp)
 4004584:	008001c4 	movi	r2,7
 4004588:	147ebd0e 	bge	r2,r17,4004080 <__alt_data_end+0xfc004080>
 400458c:	d9002d17 	ldw	r4,180(sp)
 4004590:	d9801e04 	addi	r6,sp,120
 4004594:	b80b883a 	mov	r5,r23
 4004598:	400a8480 	call	400a848 <__sprint_r>
 400459c:	103b5c1e 	bne	r2,zero,4003310 <__alt_data_end+0xfc003310>
 40045a0:	d8c02017 	ldw	r3,128(sp)
 40045a4:	dc401f17 	ldw	r17,124(sp)
 40045a8:	dd800404 	addi	r22,sp,16
 40045ac:	003eb506 	br	4004084 <__alt_data_end+0xfc004084>
 40045b0:	d9002d17 	ldw	r4,180(sp)
 40045b4:	d9801e04 	addi	r6,sp,120
 40045b8:	b80b883a 	mov	r5,r23
 40045bc:	400a8480 	call	400a848 <__sprint_r>
 40045c0:	103b531e 	bne	r2,zero,4003310 <__alt_data_end+0xfc003310>
 40045c4:	d8c02017 	ldw	r3,128(sp)
 40045c8:	dc401f17 	ldw	r17,124(sp)
 40045cc:	da000404 	addi	r8,sp,16
 40045d0:	003e8d06 	br	4004008 <__alt_data_end+0xfc004008>
 40045d4:	d9002d17 	ldw	r4,180(sp)
 40045d8:	d9801e04 	addi	r6,sp,120
 40045dc:	b80b883a 	mov	r5,r23
 40045e0:	400a8480 	call	400a848 <__sprint_r>
 40045e4:	103b4a1e 	bne	r2,zero,4003310 <__alt_data_end+0xfc003310>
 40045e8:	d8c02017 	ldw	r3,128(sp)
 40045ec:	dc401f17 	ldw	r17,124(sp)
 40045f0:	dd800404 	addi	r22,sp,16
 40045f4:	003e8f06 	br	4004034 <__alt_data_end+0xfc004034>
 40045f8:	0027883a 	mov	r19,zero
 40045fc:	003f4a06 	br	4004328 <__alt_data_end+0xfc004328>
 4004600:	d9002d17 	ldw	r4,180(sp)
 4004604:	d9801e04 	addi	r6,sp,120
 4004608:	b80b883a 	mov	r5,r23
 400460c:	400a8480 	call	400a848 <__sprint_r>
 4004610:	103b3f1e 	bne	r2,zero,4003310 <__alt_data_end+0xfc003310>
 4004614:	d8c02017 	ldw	r3,128(sp)
 4004618:	da000404 	addi	r8,sp,16
 400461c:	003c7b06 	br	400380c <__alt_data_end+0xfc00380c>
 4004620:	d9402a17 	ldw	r5,168(sp)
 4004624:	04e7c83a 	sub	r19,zero,r19
 4004628:	07000b44 	movi	fp,45
 400462c:	9804c03a 	cmpne	r2,r19,zero
 4004630:	05adc83a 	sub	r22,zero,r22
 4004634:	df002785 	stb	fp,158(sp)
 4004638:	b0adc83a 	sub	r22,r22,r2
 400463c:	28017b16 	blt	r5,zero,4004c2c <___vfprintf_internal_r+0x1d2c>
 4004640:	00bfdfc4 	movi	r2,-129
 4004644:	90a4703a 	and	r18,r18,r2
 4004648:	003b8906 	br	4003470 <__alt_data_end+0xfc003470>
 400464c:	d9003617 	ldw	r4,216(sp)
 4004650:	d9403817 	ldw	r5,224(sp)
 4004654:	da003d15 	stw	r8,244(sp)
 4004658:	400a46c0 	call	400a46c <__fpclassifyd>
 400465c:	da003d17 	ldw	r8,244(sp)
 4004660:	1000f026 	beq	r2,zero,4004a24 <___vfprintf_internal_r+0x1b24>
 4004664:	d9002a17 	ldw	r4,168(sp)
 4004668:	05bff7c4 	movi	r22,-33
 400466c:	00bfffc4 	movi	r2,-1
 4004670:	8dac703a 	and	r22,r17,r22
 4004674:	20820026 	beq	r4,r2,4004e78 <___vfprintf_internal_r+0x1f78>
 4004678:	008011c4 	movi	r2,71
 400467c:	b081f726 	beq	r22,r2,4004e5c <___vfprintf_internal_r+0x1f5c>
 4004680:	d9003817 	ldw	r4,224(sp)
 4004684:	90c04014 	ori	r3,r18,256
 4004688:	d8c02c15 	stw	r3,176(sp)
 400468c:	20021516 	blt	r4,zero,4004ee4 <___vfprintf_internal_r+0x1fe4>
 4004690:	dcc03817 	ldw	r19,224(sp)
 4004694:	d8002905 	stb	zero,164(sp)
 4004698:	00801984 	movi	r2,102
 400469c:	8881f926 	beq	r17,r2,4004e84 <___vfprintf_internal_r+0x1f84>
 40046a0:	00801184 	movi	r2,70
 40046a4:	88821c26 	beq	r17,r2,4004f18 <___vfprintf_internal_r+0x2018>
 40046a8:	00801144 	movi	r2,69
 40046ac:	b081ef26 	beq	r22,r2,4004e6c <___vfprintf_internal_r+0x1f6c>
 40046b0:	d8c02a17 	ldw	r3,168(sp)
 40046b4:	d8802104 	addi	r2,sp,132
 40046b8:	d8800315 	stw	r2,12(sp)
 40046bc:	d9403617 	ldw	r5,216(sp)
 40046c0:	d8802504 	addi	r2,sp,148
 40046c4:	d9002d17 	ldw	r4,180(sp)
 40046c8:	d8800215 	stw	r2,8(sp)
 40046cc:	d8802604 	addi	r2,sp,152
 40046d0:	d8c00015 	stw	r3,0(sp)
 40046d4:	d8800115 	stw	r2,4(sp)
 40046d8:	01c00084 	movi	r7,2
 40046dc:	980d883a 	mov	r6,r19
 40046e0:	d8c03c15 	stw	r3,240(sp)
 40046e4:	da003d15 	stw	r8,244(sp)
 40046e8:	40056300 	call	4005630 <_dtoa_r>
 40046ec:	1021883a 	mov	r16,r2
 40046f0:	008019c4 	movi	r2,103
 40046f4:	d8c03c17 	ldw	r3,240(sp)
 40046f8:	da003d17 	ldw	r8,244(sp)
 40046fc:	88817126 	beq	r17,r2,4004cc4 <___vfprintf_internal_r+0x1dc4>
 4004700:	008011c4 	movi	r2,71
 4004704:	88829126 	beq	r17,r2,400514c <___vfprintf_internal_r+0x224c>
 4004708:	80f9883a 	add	fp,r16,r3
 400470c:	d9003617 	ldw	r4,216(sp)
 4004710:	000d883a 	mov	r6,zero
 4004714:	000f883a 	mov	r7,zero
 4004718:	980b883a 	mov	r5,r19
 400471c:	da003d15 	stw	r8,244(sp)
 4004720:	400e5cc0 	call	400e5cc <__eqdf2>
 4004724:	da003d17 	ldw	r8,244(sp)
 4004728:	10018d26 	beq	r2,zero,4004d60 <___vfprintf_internal_r+0x1e60>
 400472c:	d8802117 	ldw	r2,132(sp)
 4004730:	1700062e 	bgeu	r2,fp,400474c <___vfprintf_internal_r+0x184c>
 4004734:	01000c04 	movi	r4,48
 4004738:	10c00044 	addi	r3,r2,1
 400473c:	d8c02115 	stw	r3,132(sp)
 4004740:	11000005 	stb	r4,0(r2)
 4004744:	d8802117 	ldw	r2,132(sp)
 4004748:	173ffb36 	bltu	r2,fp,4004738 <__alt_data_end+0xfc004738>
 400474c:	1405c83a 	sub	r2,r2,r16
 4004750:	d8803315 	stw	r2,204(sp)
 4004754:	008011c4 	movi	r2,71
 4004758:	b0817626 	beq	r22,r2,4004d34 <___vfprintf_internal_r+0x1e34>
 400475c:	00801944 	movi	r2,101
 4004760:	1442800e 	bge	r2,r17,4005164 <___vfprintf_internal_r+0x2264>
 4004764:	d8c02617 	ldw	r3,152(sp)
 4004768:	00801984 	movi	r2,102
 400476c:	d8c03215 	stw	r3,200(sp)
 4004770:	8881fe26 	beq	r17,r2,4004f6c <___vfprintf_internal_r+0x206c>
 4004774:	d8c03217 	ldw	r3,200(sp)
 4004778:	d9003317 	ldw	r4,204(sp)
 400477c:	1901dd16 	blt	r3,r4,4004ef4 <___vfprintf_internal_r+0x1ff4>
 4004780:	9480004c 	andi	r18,r18,1
 4004784:	90022b1e 	bne	r18,zero,4005034 <___vfprintf_internal_r+0x2134>
 4004788:	1805883a 	mov	r2,r3
 400478c:	18028316 	blt	r3,zero,400519c <___vfprintf_internal_r+0x229c>
 4004790:	d8c03217 	ldw	r3,200(sp)
 4004794:	044019c4 	movi	r17,103
 4004798:	d8c02b15 	stw	r3,172(sp)
 400479c:	df002907 	ldb	fp,164(sp)
 40047a0:	e001531e 	bne	fp,zero,4004cf0 <___vfprintf_internal_r+0x1df0>
 40047a4:	df002783 	ldbu	fp,158(sp)
 40047a8:	d8802915 	stw	r2,164(sp)
 40047ac:	dc802c17 	ldw	r18,176(sp)
 40047b0:	d8002a15 	stw	zero,168(sp)
 40047b4:	003baf06 	br	4003674 <__alt_data_end+0xfc003674>
 40047b8:	d8c02e17 	ldw	r3,184(sp)
 40047bc:	d9002e17 	ldw	r4,184(sp)
 40047c0:	d9402e17 	ldw	r5,184(sp)
 40047c4:	18c00017 	ldw	r3,0(r3)
 40047c8:	21000117 	ldw	r4,4(r4)
 40047cc:	29400204 	addi	r5,r5,8
 40047d0:	d8c03615 	stw	r3,216(sp)
 40047d4:	d9003815 	stw	r4,224(sp)
 40047d8:	d9402e15 	stw	r5,184(sp)
 40047dc:	003b5006 	br	4003520 <__alt_data_end+0xfc003520>
 40047e0:	ac400007 	ldb	r17,0(r21)
 40047e4:	003a2806 	br	4003088 <__alt_data_end+0xfc003088>
 40047e8:	9080100c 	andi	r2,r18,64
 40047ec:	1000a826 	beq	r2,zero,4004a90 <___vfprintf_internal_r+0x1b90>
 40047f0:	d8c02e17 	ldw	r3,184(sp)
 40047f4:	002d883a 	mov	r22,zero
 40047f8:	1cc0000b 	ldhu	r19,0(r3)
 40047fc:	18c00104 	addi	r3,r3,4
 4004800:	d8c02e15 	stw	r3,184(sp)
 4004804:	003caf06 	br	4003ac4 <__alt_data_end+0xfc003ac4>
 4004808:	d9002e17 	ldw	r4,184(sp)
 400480c:	d9402a17 	ldw	r5,168(sp)
 4004810:	002d883a 	mov	r22,zero
 4004814:	20800104 	addi	r2,r4,4
 4004818:	24c00017 	ldw	r19,0(r4)
 400481c:	283ebb0e 	bge	r5,zero,400430c <__alt_data_end+0xfc00430c>
 4004820:	003ef106 	br	40043e8 <__alt_data_end+0xfc0043e8>
 4004824:	9080040c 	andi	r2,r18,16
 4004828:	1000921e 	bne	r2,zero,4004a74 <___vfprintf_internal_r+0x1b74>
 400482c:	9480100c 	andi	r18,r18,64
 4004830:	90013926 	beq	r18,zero,4004d18 <___vfprintf_internal_r+0x1e18>
 4004834:	d9402e17 	ldw	r5,184(sp)
 4004838:	d8c02f17 	ldw	r3,188(sp)
 400483c:	28800017 	ldw	r2,0(r5)
 4004840:	29400104 	addi	r5,r5,4
 4004844:	d9402e15 	stw	r5,184(sp)
 4004848:	10c0000d 	sth	r3,0(r2)
 400484c:	0039e406 	br	4002fe0 <__alt_data_end+0xfc002fe0>
 4004850:	9080100c 	andi	r2,r18,64
 4004854:	10008026 	beq	r2,zero,4004a58 <___vfprintf_internal_r+0x1b58>
 4004858:	d8802e17 	ldw	r2,184(sp)
 400485c:	14c0000f 	ldh	r19,0(r2)
 4004860:	10800104 	addi	r2,r2,4
 4004864:	d8802e15 	stw	r2,184(sp)
 4004868:	982dd7fa 	srai	r22,r19,31
 400486c:	b005883a 	mov	r2,r22
 4004870:	003af706 	br	4003450 <__alt_data_end+0xfc003450>
 4004874:	9080100c 	andi	r2,r18,64
 4004878:	d8002785 	stb	zero,158(sp)
 400487c:	10008a1e 	bne	r2,zero,4004aa8 <___vfprintf_internal_r+0x1ba8>
 4004880:	d9002e17 	ldw	r4,184(sp)
 4004884:	d9402a17 	ldw	r5,168(sp)
 4004888:	002d883a 	mov	r22,zero
 400488c:	20800104 	addi	r2,r4,4
 4004890:	24c00017 	ldw	r19,0(r4)
 4004894:	283e4b0e 	bge	r5,zero,40041c4 <__alt_data_end+0xfc0041c4>
 4004898:	9d86b03a 	or	r3,r19,r22
 400489c:	d8802e15 	stw	r2,184(sp)
 40048a0:	183e4c1e 	bne	r3,zero,40041d4 <__alt_data_end+0xfc0041d4>
 40048a4:	0039883a 	mov	fp,zero
 40048a8:	0005883a 	mov	r2,zero
 40048ac:	003d4006 	br	4003db0 <__alt_data_end+0xfc003db0>
 40048b0:	01410074 	movhi	r5,1025
 40048b4:	294a6c84 	addi	r5,r5,10674
 40048b8:	d9402c15 	stw	r5,176(sp)
 40048bc:	d9402c17 	ldw	r5,176(sp)
 40048c0:	1c47883a 	add	r3,r3,r17
 40048c4:	10800044 	addi	r2,r2,1
 40048c8:	41400015 	stw	r5,0(r8)
 40048cc:	44400115 	stw	r17,4(r8)
 40048d0:	d8c02015 	stw	r3,128(sp)
 40048d4:	d8801f15 	stw	r2,124(sp)
 40048d8:	010001c4 	movi	r4,7
 40048dc:	20bec816 	blt	r4,r2,4004400 <__alt_data_end+0xfc004400>
 40048e0:	42000204 	addi	r8,r8,8
 40048e4:	003ecd06 	br	400441c <__alt_data_end+0xfc00441c>
 40048e8:	d9002a17 	ldw	r4,168(sp)
 40048ec:	d8002785 	stb	zero,158(sp)
 40048f0:	203d2d16 	blt	r4,zero,4003da8 <__alt_data_end+0xfc003da8>
 40048f4:	00bfdfc4 	movi	r2,-129
 40048f8:	90a4703a 	and	r18,r18,r2
 40048fc:	003a6106 	br	4003284 <__alt_data_end+0xfc003284>
 4004900:	01010074 	movhi	r4,1025
 4004904:	210a6c84 	addi	r4,r4,10674
 4004908:	d9002c15 	stw	r4,176(sp)
 400490c:	003bea06 	br	40038b8 <__alt_data_end+0xfc0038b8>
 4004910:	d9002d17 	ldw	r4,180(sp)
 4004914:	d9801e04 	addi	r6,sp,120
 4004918:	b80b883a 	mov	r5,r23
 400491c:	400a8480 	call	400a848 <__sprint_r>
 4004920:	103a7b1e 	bne	r2,zero,4003310 <__alt_data_end+0xfc003310>
 4004924:	d8c02017 	ldw	r3,128(sp)
 4004928:	da000404 	addi	r8,sp,16
 400492c:	003d4106 	br	4003e34 <__alt_data_end+0xfc003e34>
 4004930:	d8801f17 	ldw	r2,124(sp)
 4004934:	01410074 	movhi	r5,1025
 4004938:	01000044 	movi	r4,1
 400493c:	18c00044 	addi	r3,r3,1
 4004940:	10800044 	addi	r2,r2,1
 4004944:	294a6c04 	addi	r5,r5,10672
 4004948:	41000115 	stw	r4,4(r8)
 400494c:	41400015 	stw	r5,0(r8)
 4004950:	d8c02015 	stw	r3,128(sp)
 4004954:	d8801f15 	stw	r2,124(sp)
 4004958:	010001c4 	movi	r4,7
 400495c:	20805c16 	blt	r4,r2,4004ad0 <___vfprintf_internal_r+0x1bd0>
 4004960:	42000204 	addi	r8,r8,8
 4004964:	8800041e 	bne	r17,zero,4004978 <___vfprintf_internal_r+0x1a78>
 4004968:	d8803317 	ldw	r2,204(sp)
 400496c:	1000021e 	bne	r2,zero,4004978 <___vfprintf_internal_r+0x1a78>
 4004970:	9080004c 	andi	r2,r18,1
 4004974:	103be726 	beq	r2,zero,4003914 <__alt_data_end+0xfc003914>
 4004978:	d9003717 	ldw	r4,220(sp)
 400497c:	d8801f17 	ldw	r2,124(sp)
 4004980:	d9403417 	ldw	r5,208(sp)
 4004984:	20c7883a 	add	r3,r4,r3
 4004988:	10800044 	addi	r2,r2,1
 400498c:	41000115 	stw	r4,4(r8)
 4004990:	41400015 	stw	r5,0(r8)
 4004994:	d8c02015 	stw	r3,128(sp)
 4004998:	d8801f15 	stw	r2,124(sp)
 400499c:	010001c4 	movi	r4,7
 40049a0:	20812116 	blt	r4,r2,4004e28 <___vfprintf_internal_r+0x1f28>
 40049a4:	42000204 	addi	r8,r8,8
 40049a8:	0463c83a 	sub	r17,zero,r17
 40049ac:	0440730e 	bge	zero,r17,4004b7c <___vfprintf_internal_r+0x1c7c>
 40049b0:	05800404 	movi	r22,16
 40049b4:	b440860e 	bge	r22,r17,4004bd0 <___vfprintf_internal_r+0x1cd0>
 40049b8:	01410074 	movhi	r5,1025
 40049bc:	294a6c84 	addi	r5,r5,10674
 40049c0:	d9402c15 	stw	r5,176(sp)
 40049c4:	070001c4 	movi	fp,7
 40049c8:	dcc02d17 	ldw	r19,180(sp)
 40049cc:	00000306 	br	40049dc <___vfprintf_internal_r+0x1adc>
 40049d0:	42000204 	addi	r8,r8,8
 40049d4:	8c7ffc04 	addi	r17,r17,-16
 40049d8:	b440800e 	bge	r22,r17,4004bdc <___vfprintf_internal_r+0x1cdc>
 40049dc:	18c00404 	addi	r3,r3,16
 40049e0:	10800044 	addi	r2,r2,1
 40049e4:	45000015 	stw	r20,0(r8)
 40049e8:	45800115 	stw	r22,4(r8)
 40049ec:	d8c02015 	stw	r3,128(sp)
 40049f0:	d8801f15 	stw	r2,124(sp)
 40049f4:	e0bff60e 	bge	fp,r2,40049d0 <__alt_data_end+0xfc0049d0>
 40049f8:	d9801e04 	addi	r6,sp,120
 40049fc:	b80b883a 	mov	r5,r23
 4004a00:	9809883a 	mov	r4,r19
 4004a04:	400a8480 	call	400a848 <__sprint_r>
 4004a08:	103a411e 	bne	r2,zero,4003310 <__alt_data_end+0xfc003310>
 4004a0c:	d8c02017 	ldw	r3,128(sp)
 4004a10:	d8801f17 	ldw	r2,124(sp)
 4004a14:	da000404 	addi	r8,sp,16
 4004a18:	003fee06 	br	40049d4 <__alt_data_end+0xfc0049d4>
 4004a1c:	00bfffc4 	movi	r2,-1
 4004a20:	003a3f06 	br	4003320 <__alt_data_end+0xfc003320>
 4004a24:	008011c4 	movi	r2,71
 4004a28:	1440b816 	blt	r2,r17,4004d0c <___vfprintf_internal_r+0x1e0c>
 4004a2c:	04010074 	movhi	r16,1025
 4004a30:	840a5e04 	addi	r16,r16,10616
 4004a34:	00c000c4 	movi	r3,3
 4004a38:	00bfdfc4 	movi	r2,-129
 4004a3c:	d8c02915 	stw	r3,164(sp)
 4004a40:	90a4703a 	and	r18,r18,r2
 4004a44:	df002783 	ldbu	fp,158(sp)
 4004a48:	d8c02b15 	stw	r3,172(sp)
 4004a4c:	d8002a15 	stw	zero,168(sp)
 4004a50:	d8003215 	stw	zero,200(sp)
 4004a54:	003b0706 	br	4003674 <__alt_data_end+0xfc003674>
 4004a58:	d8c02e17 	ldw	r3,184(sp)
 4004a5c:	1cc00017 	ldw	r19,0(r3)
 4004a60:	18c00104 	addi	r3,r3,4
 4004a64:	d8c02e15 	stw	r3,184(sp)
 4004a68:	982dd7fa 	srai	r22,r19,31
 4004a6c:	b005883a 	mov	r2,r22
 4004a70:	003a7706 	br	4003450 <__alt_data_end+0xfc003450>
 4004a74:	d8c02e17 	ldw	r3,184(sp)
 4004a78:	d9002f17 	ldw	r4,188(sp)
 4004a7c:	18800017 	ldw	r2,0(r3)
 4004a80:	18c00104 	addi	r3,r3,4
 4004a84:	d8c02e15 	stw	r3,184(sp)
 4004a88:	11000015 	stw	r4,0(r2)
 4004a8c:	00395406 	br	4002fe0 <__alt_data_end+0xfc002fe0>
 4004a90:	d9002e17 	ldw	r4,184(sp)
 4004a94:	002d883a 	mov	r22,zero
 4004a98:	24c00017 	ldw	r19,0(r4)
 4004a9c:	21000104 	addi	r4,r4,4
 4004aa0:	d9002e15 	stw	r4,184(sp)
 4004aa4:	003c0706 	br	4003ac4 <__alt_data_end+0xfc003ac4>
 4004aa8:	d9402e17 	ldw	r5,184(sp)
 4004aac:	d8c02a17 	ldw	r3,168(sp)
 4004ab0:	002d883a 	mov	r22,zero
 4004ab4:	28800104 	addi	r2,r5,4
 4004ab8:	2cc0000b 	ldhu	r19,0(r5)
 4004abc:	183dc10e 	bge	r3,zero,40041c4 <__alt_data_end+0xfc0041c4>
 4004ac0:	003f7506 	br	4004898 <__alt_data_end+0xfc004898>
 4004ac4:	04010074 	movhi	r16,1025
 4004ac8:	840a5c04 	addi	r16,r16,10608
 4004acc:	003aa706 	br	400356c <__alt_data_end+0xfc00356c>
 4004ad0:	d9002d17 	ldw	r4,180(sp)
 4004ad4:	d9801e04 	addi	r6,sp,120
 4004ad8:	b80b883a 	mov	r5,r23
 4004adc:	400a8480 	call	400a848 <__sprint_r>
 4004ae0:	103a0b1e 	bne	r2,zero,4003310 <__alt_data_end+0xfc003310>
 4004ae4:	dc402617 	ldw	r17,152(sp)
 4004ae8:	d8c02017 	ldw	r3,128(sp)
 4004aec:	da000404 	addi	r8,sp,16
 4004af0:	003f9c06 	br	4004964 <__alt_data_end+0xfc004964>
 4004af4:	ac400043 	ldbu	r17,1(r21)
 4004af8:	84000814 	ori	r16,r16,32
 4004afc:	ad400044 	addi	r21,r21,1
 4004b00:	8c403fcc 	andi	r17,r17,255
 4004b04:	8c40201c 	xori	r17,r17,128
 4004b08:	8c7fe004 	addi	r17,r17,-128
 4004b0c:	00395e06 	br	4003088 <__alt_data_end+0xfc003088>
 4004b10:	d8c02e15 	stw	r3,184(sp)
 4004b14:	0039883a 	mov	fp,zero
 4004b18:	003e3506 	br	40043f0 <__alt_data_end+0xfc0043f0>
 4004b1c:	d9002d17 	ldw	r4,180(sp)
 4004b20:	d9801e04 	addi	r6,sp,120
 4004b24:	b80b883a 	mov	r5,r23
 4004b28:	400a8480 	call	400a848 <__sprint_r>
 4004b2c:	1039f81e 	bne	r2,zero,4003310 <__alt_data_end+0xfc003310>
 4004b30:	d8c02017 	ldw	r3,128(sp)
 4004b34:	da000404 	addi	r8,sp,16
 4004b38:	003cd006 	br	4003e7c <__alt_data_end+0xfc003e7c>
 4004b3c:	8009883a 	mov	r4,r16
 4004b40:	df003d15 	stw	fp,244(sp)
 4004b44:	4002e680 	call	4002e68 <strlen>
 4004b48:	d8802b15 	stw	r2,172(sp)
 4004b4c:	da003d17 	ldw	r8,244(sp)
 4004b50:	103c200e 	bge	r2,zero,4003bd4 <__alt_data_end+0xfc003bd4>
 4004b54:	0005883a 	mov	r2,zero
 4004b58:	003c1e06 	br	4003bd4 <__alt_data_end+0xfc003bd4>
 4004b5c:	d9002d17 	ldw	r4,180(sp)
 4004b60:	d9801e04 	addi	r6,sp,120
 4004b64:	b80b883a 	mov	r5,r23
 4004b68:	400a8480 	call	400a848 <__sprint_r>
 4004b6c:	1039e81e 	bne	r2,zero,4003310 <__alt_data_end+0xfc003310>
 4004b70:	d8c02017 	ldw	r3,128(sp)
 4004b74:	d8801f17 	ldw	r2,124(sp)
 4004b78:	da000404 	addi	r8,sp,16
 4004b7c:	d9403317 	ldw	r5,204(sp)
 4004b80:	10800044 	addi	r2,r2,1
 4004b84:	44000015 	stw	r16,0(r8)
 4004b88:	28c7883a 	add	r3,r5,r3
 4004b8c:	003b5b06 	br	40038fc <__alt_data_end+0xfc0038fc>
 4004b90:	01010074 	movhi	r4,1025
 4004b94:	210a7084 	addi	r4,r4,10690
 4004b98:	d9003515 	stw	r4,212(sp)
 4004b9c:	003af206 	br	4003768 <__alt_data_end+0xfc003768>
 4004ba0:	013fffc4 	movi	r4,-1
 4004ba4:	003a0806 	br	40033c8 <__alt_data_end+0xfc0033c8>
 4004ba8:	0023883a 	mov	r17,zero
 4004bac:	003d9d06 	br	4004224 <__alt_data_end+0xfc004224>
 4004bb0:	d9002d17 	ldw	r4,180(sp)
 4004bb4:	d9801e04 	addi	r6,sp,120
 4004bb8:	b80b883a 	mov	r5,r23
 4004bbc:	400a8480 	call	400a848 <__sprint_r>
 4004bc0:	1039d31e 	bne	r2,zero,4003310 <__alt_data_end+0xfc003310>
 4004bc4:	d8c02017 	ldw	r3,128(sp)
 4004bc8:	da000404 	addi	r8,sp,16
 4004bcc:	003d9406 	br	4004220 <__alt_data_end+0xfc004220>
 4004bd0:	01010074 	movhi	r4,1025
 4004bd4:	210a6c84 	addi	r4,r4,10674
 4004bd8:	d9002c15 	stw	r4,176(sp)
 4004bdc:	d9002c17 	ldw	r4,176(sp)
 4004be0:	1c47883a 	add	r3,r3,r17
 4004be4:	10800044 	addi	r2,r2,1
 4004be8:	41000015 	stw	r4,0(r8)
 4004bec:	44400115 	stw	r17,4(r8)
 4004bf0:	d8c02015 	stw	r3,128(sp)
 4004bf4:	d8801f15 	stw	r2,124(sp)
 4004bf8:	010001c4 	movi	r4,7
 4004bfc:	20bfd716 	blt	r4,r2,4004b5c <__alt_data_end+0xfc004b5c>
 4004c00:	42000204 	addi	r8,r8,8
 4004c04:	003fdd06 	br	4004b7c <__alt_data_end+0xfc004b7c>
 4004c08:	d9002d17 	ldw	r4,180(sp)
 4004c0c:	d9801e04 	addi	r6,sp,120
 4004c10:	b80b883a 	mov	r5,r23
 4004c14:	400a8480 	call	400a848 <__sprint_r>
 4004c18:	1039bd1e 	bne	r2,zero,4003310 <__alt_data_end+0xfc003310>
 4004c1c:	d8802617 	ldw	r2,152(sp)
 4004c20:	d8c02017 	ldw	r3,128(sp)
 4004c24:	da000404 	addi	r8,sp,16
 4004c28:	003e1006 	br	400446c <__alt_data_end+0xfc00446c>
 4004c2c:	00800044 	movi	r2,1
 4004c30:	10803fcc 	andi	r2,r2,255
 4004c34:	00c00044 	movi	r3,1
 4004c38:	10fa0d26 	beq	r2,r3,4003470 <__alt_data_end+0xfc003470>
 4004c3c:	00c00084 	movi	r3,2
 4004c40:	10fbaf26 	beq	r2,r3,4003b00 <__alt_data_end+0xfc003b00>
 4004c44:	003a6d06 	br	40035fc <__alt_data_end+0xfc0035fc>
 4004c48:	01010074 	movhi	r4,1025
 4004c4c:	210a7084 	addi	r4,r4,10690
 4004c50:	d9003515 	stw	r4,212(sp)
 4004c54:	003b5406 	br	40039a8 <__alt_data_end+0xfc0039a8>
 4004c58:	d8802a17 	ldw	r2,168(sp)
 4004c5c:	00c00184 	movi	r3,6
 4004c60:	1880012e 	bgeu	r3,r2,4004c68 <___vfprintf_internal_r+0x1d68>
 4004c64:	1805883a 	mov	r2,r3
 4004c68:	d8802b15 	stw	r2,172(sp)
 4004c6c:	1000ef16 	blt	r2,zero,400502c <___vfprintf_internal_r+0x212c>
 4004c70:	04010074 	movhi	r16,1025
 4004c74:	d8802915 	stw	r2,164(sp)
 4004c78:	dcc02e15 	stw	r19,184(sp)
 4004c7c:	d8002a15 	stw	zero,168(sp)
 4004c80:	d8003215 	stw	zero,200(sp)
 4004c84:	840a6a04 	addi	r16,r16,10664
 4004c88:	0039883a 	mov	fp,zero
 4004c8c:	003a8006 	br	4003690 <__alt_data_end+0xfc003690>
 4004c90:	0021883a 	mov	r16,zero
 4004c94:	003e0706 	br	40044b4 <__alt_data_end+0xfc0044b4>
 4004c98:	d9002d17 	ldw	r4,180(sp)
 4004c9c:	d9801e04 	addi	r6,sp,120
 4004ca0:	b80b883a 	mov	r5,r23
 4004ca4:	400a8480 	call	400a848 <__sprint_r>
 4004ca8:	1039991e 	bne	r2,zero,4003310 <__alt_data_end+0xfc003310>
 4004cac:	d8802617 	ldw	r2,152(sp)
 4004cb0:	d9403317 	ldw	r5,204(sp)
 4004cb4:	d8c02017 	ldw	r3,128(sp)
 4004cb8:	da000404 	addi	r8,sp,16
 4004cbc:	2885c83a 	sub	r2,r5,r2
 4004cc0:	003dfb06 	br	40044b0 <__alt_data_end+0xfc0044b0>
 4004cc4:	9080004c 	andi	r2,r18,1
 4004cc8:	103e8f1e 	bne	r2,zero,4004708 <__alt_data_end+0xfc004708>
 4004ccc:	d8802117 	ldw	r2,132(sp)
 4004cd0:	003e9e06 	br	400474c <__alt_data_end+0xfc00474c>
 4004cd4:	1025883a 	mov	r18,r2
 4004cd8:	0039883a 	mov	fp,zero
 4004cdc:	00800084 	movi	r2,2
 4004ce0:	003fd306 	br	4004c30 <__alt_data_end+0xfc004c30>
 4004ce4:	07000b44 	movi	fp,45
 4004ce8:	df002785 	stb	fp,158(sp)
 4004cec:	003a1b06 	br	400355c <__alt_data_end+0xfc00355c>
 4004cf0:	00c00b44 	movi	r3,45
 4004cf4:	d8c02785 	stb	r3,158(sp)
 4004cf8:	d8802915 	stw	r2,164(sp)
 4004cfc:	dc802c17 	ldw	r18,176(sp)
 4004d00:	d8002a15 	stw	zero,168(sp)
 4004d04:	07000b44 	movi	fp,45
 4004d08:	003a5e06 	br	4003684 <__alt_data_end+0xfc003684>
 4004d0c:	04010074 	movhi	r16,1025
 4004d10:	840a5f04 	addi	r16,r16,10620
 4004d14:	003f4706 	br	4004a34 <__alt_data_end+0xfc004a34>
 4004d18:	d9002e17 	ldw	r4,184(sp)
 4004d1c:	d9402f17 	ldw	r5,188(sp)
 4004d20:	20800017 	ldw	r2,0(r4)
 4004d24:	21000104 	addi	r4,r4,4
 4004d28:	d9002e15 	stw	r4,184(sp)
 4004d2c:	11400015 	stw	r5,0(r2)
 4004d30:	0038ab06 	br	4002fe0 <__alt_data_end+0xfc002fe0>
 4004d34:	dd802617 	ldw	r22,152(sp)
 4004d38:	00bfff44 	movi	r2,-3
 4004d3c:	b0801c16 	blt	r22,r2,4004db0 <___vfprintf_internal_r+0x1eb0>
 4004d40:	d9402a17 	ldw	r5,168(sp)
 4004d44:	2d801a16 	blt	r5,r22,4004db0 <___vfprintf_internal_r+0x1eb0>
 4004d48:	dd803215 	stw	r22,200(sp)
 4004d4c:	003e8906 	br	4004774 <__alt_data_end+0xfc004774>
 4004d50:	01010074 	movhi	r4,1025
 4004d54:	210a6c84 	addi	r4,r4,10674
 4004d58:	d9002c15 	stw	r4,176(sp)
 4004d5c:	003c9106 	br	4003fa4 <__alt_data_end+0xfc003fa4>
 4004d60:	e005883a 	mov	r2,fp
 4004d64:	003e7906 	br	400474c <__alt_data_end+0xfc00474c>
 4004d68:	d9002a17 	ldw	r4,168(sp)
 4004d6c:	df002783 	ldbu	fp,158(sp)
 4004d70:	dcc02e15 	stw	r19,184(sp)
 4004d74:	d9002915 	stw	r4,164(sp)
 4004d78:	d9002b15 	stw	r4,172(sp)
 4004d7c:	d8002a15 	stw	zero,168(sp)
 4004d80:	d8003215 	stw	zero,200(sp)
 4004d84:	003a3b06 	br	4003674 <__alt_data_end+0xfc003674>
 4004d88:	9080004c 	andi	r2,r18,1
 4004d8c:	0039883a 	mov	fp,zero
 4004d90:	10000426 	beq	r2,zero,4004da4 <___vfprintf_internal_r+0x1ea4>
 4004d94:	00800c04 	movi	r2,48
 4004d98:	dc001dc4 	addi	r16,sp,119
 4004d9c:	d8801dc5 	stb	r2,119(sp)
 4004da0:	003b6406 	br	4003b34 <__alt_data_end+0xfc003b34>
 4004da4:	d8002b15 	stw	zero,172(sp)
 4004da8:	dc001e04 	addi	r16,sp,120
 4004dac:	003a2b06 	br	400365c <__alt_data_end+0xfc00365c>
 4004db0:	8c7fff84 	addi	r17,r17,-2
 4004db4:	b5bfffc4 	addi	r22,r22,-1
 4004db8:	dd802615 	stw	r22,152(sp)
 4004dbc:	dc4022c5 	stb	r17,139(sp)
 4004dc0:	b000bf16 	blt	r22,zero,40050c0 <___vfprintf_internal_r+0x21c0>
 4004dc4:	00800ac4 	movi	r2,43
 4004dc8:	d8802305 	stb	r2,140(sp)
 4004dcc:	00800244 	movi	r2,9
 4004dd0:	15807016 	blt	r2,r22,4004f94 <___vfprintf_internal_r+0x2094>
 4004dd4:	00800c04 	movi	r2,48
 4004dd8:	b5800c04 	addi	r22,r22,48
 4004ddc:	d8802345 	stb	r2,141(sp)
 4004de0:	dd802385 	stb	r22,142(sp)
 4004de4:	d88023c4 	addi	r2,sp,143
 4004de8:	df0022c4 	addi	fp,sp,139
 4004dec:	d8c03317 	ldw	r3,204(sp)
 4004df0:	1739c83a 	sub	fp,r2,fp
 4004df4:	d9003317 	ldw	r4,204(sp)
 4004df8:	e0c7883a 	add	r3,fp,r3
 4004dfc:	df003a15 	stw	fp,232(sp)
 4004e00:	d8c02b15 	stw	r3,172(sp)
 4004e04:	00800044 	movi	r2,1
 4004e08:	1100b30e 	bge	r2,r4,40050d8 <___vfprintf_internal_r+0x21d8>
 4004e0c:	d8c02b17 	ldw	r3,172(sp)
 4004e10:	18c00044 	addi	r3,r3,1
 4004e14:	d8c02b15 	stw	r3,172(sp)
 4004e18:	1805883a 	mov	r2,r3
 4004e1c:	1800ac16 	blt	r3,zero,40050d0 <___vfprintf_internal_r+0x21d0>
 4004e20:	d8003215 	stw	zero,200(sp)
 4004e24:	003e5d06 	br	400479c <__alt_data_end+0xfc00479c>
 4004e28:	d9002d17 	ldw	r4,180(sp)
 4004e2c:	d9801e04 	addi	r6,sp,120
 4004e30:	b80b883a 	mov	r5,r23
 4004e34:	400a8480 	call	400a848 <__sprint_r>
 4004e38:	1039351e 	bne	r2,zero,4003310 <__alt_data_end+0xfc003310>
 4004e3c:	dc402617 	ldw	r17,152(sp)
 4004e40:	d8c02017 	ldw	r3,128(sp)
 4004e44:	d8801f17 	ldw	r2,124(sp)
 4004e48:	da000404 	addi	r8,sp,16
 4004e4c:	003ed606 	br	40049a8 <__alt_data_end+0xfc0049a8>
 4004e50:	182b883a 	mov	r21,r3
 4004e54:	d8002a15 	stw	zero,168(sp)
 4004e58:	00388c06 	br	400308c <__alt_data_end+0xfc00308c>
 4004e5c:	d8802a17 	ldw	r2,168(sp)
 4004e60:	103e071e 	bne	r2,zero,4004680 <__alt_data_end+0xfc004680>
 4004e64:	dc002a15 	stw	r16,168(sp)
 4004e68:	003e0506 	br	4004680 <__alt_data_end+0xfc004680>
 4004e6c:	d9002a17 	ldw	r4,168(sp)
 4004e70:	20c00044 	addi	r3,r4,1
 4004e74:	003e0f06 	br	40046b4 <__alt_data_end+0xfc0046b4>
 4004e78:	01400184 	movi	r5,6
 4004e7c:	d9402a15 	stw	r5,168(sp)
 4004e80:	003dff06 	br	4004680 <__alt_data_end+0xfc004680>
 4004e84:	d8802104 	addi	r2,sp,132
 4004e88:	d8800315 	stw	r2,12(sp)
 4004e8c:	d8802504 	addi	r2,sp,148
 4004e90:	d8800215 	stw	r2,8(sp)
 4004e94:	d8802604 	addi	r2,sp,152
 4004e98:	d8800115 	stw	r2,4(sp)
 4004e9c:	d8802a17 	ldw	r2,168(sp)
 4004ea0:	d9403617 	ldw	r5,216(sp)
 4004ea4:	d9002d17 	ldw	r4,180(sp)
 4004ea8:	d8800015 	stw	r2,0(sp)
 4004eac:	01c000c4 	movi	r7,3
 4004eb0:	980d883a 	mov	r6,r19
 4004eb4:	da003d15 	stw	r8,244(sp)
 4004eb8:	40056300 	call	4005630 <_dtoa_r>
 4004ebc:	d8c02a17 	ldw	r3,168(sp)
 4004ec0:	da003d17 	ldw	r8,244(sp)
 4004ec4:	1021883a 	mov	r16,r2
 4004ec8:	10f9883a 	add	fp,r2,r3
 4004ecc:	81000007 	ldb	r4,0(r16)
 4004ed0:	00800c04 	movi	r2,48
 4004ed4:	20805e26 	beq	r4,r2,4005050 <___vfprintf_internal_r+0x2150>
 4004ed8:	d8c02617 	ldw	r3,152(sp)
 4004edc:	e0f9883a 	add	fp,fp,r3
 4004ee0:	003e0a06 	br	400470c <__alt_data_end+0xfc00470c>
 4004ee4:	00c00b44 	movi	r3,45
 4004ee8:	24e0003c 	xorhi	r19,r4,32768
 4004eec:	d8c02905 	stb	r3,164(sp)
 4004ef0:	003de906 	br	4004698 <__alt_data_end+0xfc004698>
 4004ef4:	d8c03217 	ldw	r3,200(sp)
 4004ef8:	00c07a0e 	bge	zero,r3,40050e4 <___vfprintf_internal_r+0x21e4>
 4004efc:	00800044 	movi	r2,1
 4004f00:	d9003317 	ldw	r4,204(sp)
 4004f04:	1105883a 	add	r2,r2,r4
 4004f08:	d8802b15 	stw	r2,172(sp)
 4004f0c:	10004e16 	blt	r2,zero,4005048 <___vfprintf_internal_r+0x2148>
 4004f10:	044019c4 	movi	r17,103
 4004f14:	003e2106 	br	400479c <__alt_data_end+0xfc00479c>
 4004f18:	d9002a17 	ldw	r4,168(sp)
 4004f1c:	d8802104 	addi	r2,sp,132
 4004f20:	d8800315 	stw	r2,12(sp)
 4004f24:	d9000015 	stw	r4,0(sp)
 4004f28:	d8802504 	addi	r2,sp,148
 4004f2c:	d9403617 	ldw	r5,216(sp)
 4004f30:	d9002d17 	ldw	r4,180(sp)
 4004f34:	d8800215 	stw	r2,8(sp)
 4004f38:	d8802604 	addi	r2,sp,152
 4004f3c:	d8800115 	stw	r2,4(sp)
 4004f40:	01c000c4 	movi	r7,3
 4004f44:	980d883a 	mov	r6,r19
 4004f48:	da003d15 	stw	r8,244(sp)
 4004f4c:	40056300 	call	4005630 <_dtoa_r>
 4004f50:	d8c02a17 	ldw	r3,168(sp)
 4004f54:	da003d17 	ldw	r8,244(sp)
 4004f58:	1021883a 	mov	r16,r2
 4004f5c:	00801184 	movi	r2,70
 4004f60:	80f9883a 	add	fp,r16,r3
 4004f64:	88bfd926 	beq	r17,r2,4004ecc <__alt_data_end+0xfc004ecc>
 4004f68:	003de806 	br	400470c <__alt_data_end+0xfc00470c>
 4004f6c:	d9002a17 	ldw	r4,168(sp)
 4004f70:	00c04d0e 	bge	zero,r3,40050a8 <___vfprintf_internal_r+0x21a8>
 4004f74:	2000441e 	bne	r4,zero,4005088 <___vfprintf_internal_r+0x2188>
 4004f78:	9480004c 	andi	r18,r18,1
 4004f7c:	9000421e 	bne	r18,zero,4005088 <___vfprintf_internal_r+0x2188>
 4004f80:	1805883a 	mov	r2,r3
 4004f84:	18006f16 	blt	r3,zero,4005144 <___vfprintf_internal_r+0x2244>
 4004f88:	d8c03217 	ldw	r3,200(sp)
 4004f8c:	d8c02b15 	stw	r3,172(sp)
 4004f90:	003e0206 	br	400479c <__alt_data_end+0xfc00479c>
 4004f94:	df0022c4 	addi	fp,sp,139
 4004f98:	dc002a15 	stw	r16,168(sp)
 4004f9c:	4027883a 	mov	r19,r8
 4004fa0:	e021883a 	mov	r16,fp
 4004fa4:	b009883a 	mov	r4,r22
 4004fa8:	01400284 	movi	r5,10
 4004fac:	4002bb00 	call	4002bb0 <__modsi3>
 4004fb0:	10800c04 	addi	r2,r2,48
 4004fb4:	843fffc4 	addi	r16,r16,-1
 4004fb8:	b009883a 	mov	r4,r22
 4004fbc:	01400284 	movi	r5,10
 4004fc0:	80800005 	stb	r2,0(r16)
 4004fc4:	4002b2c0 	call	4002b2c <__divsi3>
 4004fc8:	102d883a 	mov	r22,r2
 4004fcc:	00800244 	movi	r2,9
 4004fd0:	15bff416 	blt	r2,r22,4004fa4 <__alt_data_end+0xfc004fa4>
 4004fd4:	9811883a 	mov	r8,r19
 4004fd8:	b0800c04 	addi	r2,r22,48
 4004fdc:	8027883a 	mov	r19,r16
 4004fe0:	997fffc4 	addi	r5,r19,-1
 4004fe4:	98bfffc5 	stb	r2,-1(r19)
 4004fe8:	dc002a17 	ldw	r16,168(sp)
 4004fec:	2f006d2e 	bgeu	r5,fp,40051a4 <___vfprintf_internal_r+0x22a4>
 4004ff0:	d9c02384 	addi	r7,sp,142
 4004ff4:	3ccfc83a 	sub	r7,r7,r19
 4004ff8:	d9002344 	addi	r4,sp,141
 4004ffc:	e1cf883a 	add	r7,fp,r7
 4005000:	00000106 	br	4005008 <___vfprintf_internal_r+0x2108>
 4005004:	28800003 	ldbu	r2,0(r5)
 4005008:	20800005 	stb	r2,0(r4)
 400500c:	21000044 	addi	r4,r4,1
 4005010:	29400044 	addi	r5,r5,1
 4005014:	393ffb1e 	bne	r7,r4,4005004 <__alt_data_end+0xfc005004>
 4005018:	d8802304 	addi	r2,sp,140
 400501c:	14c5c83a 	sub	r2,r2,r19
 4005020:	d8c02344 	addi	r3,sp,141
 4005024:	1885883a 	add	r2,r3,r2
 4005028:	003f7006 	br	4004dec <__alt_data_end+0xfc004dec>
 400502c:	0005883a 	mov	r2,zero
 4005030:	003f0f06 	br	4004c70 <__alt_data_end+0xfc004c70>
 4005034:	d8c03217 	ldw	r3,200(sp)
 4005038:	18c00044 	addi	r3,r3,1
 400503c:	d8c02b15 	stw	r3,172(sp)
 4005040:	1805883a 	mov	r2,r3
 4005044:	183fb20e 	bge	r3,zero,4004f10 <__alt_data_end+0xfc004f10>
 4005048:	0005883a 	mov	r2,zero
 400504c:	003fb006 	br	4004f10 <__alt_data_end+0xfc004f10>
 4005050:	d9003617 	ldw	r4,216(sp)
 4005054:	000d883a 	mov	r6,zero
 4005058:	000f883a 	mov	r7,zero
 400505c:	980b883a 	mov	r5,r19
 4005060:	d8c03c15 	stw	r3,240(sp)
 4005064:	da003d15 	stw	r8,244(sp)
 4005068:	400e5cc0 	call	400e5cc <__eqdf2>
 400506c:	d8c03c17 	ldw	r3,240(sp)
 4005070:	da003d17 	ldw	r8,244(sp)
 4005074:	103f9826 	beq	r2,zero,4004ed8 <__alt_data_end+0xfc004ed8>
 4005078:	00800044 	movi	r2,1
 400507c:	10c7c83a 	sub	r3,r2,r3
 4005080:	d8c02615 	stw	r3,152(sp)
 4005084:	003f9506 	br	4004edc <__alt_data_end+0xfc004edc>
 4005088:	d9002a17 	ldw	r4,168(sp)
 400508c:	d8c03217 	ldw	r3,200(sp)
 4005090:	20800044 	addi	r2,r4,1
 4005094:	1885883a 	add	r2,r3,r2
 4005098:	d8802b15 	stw	r2,172(sp)
 400509c:	103dbf0e 	bge	r2,zero,400479c <__alt_data_end+0xfc00479c>
 40050a0:	0005883a 	mov	r2,zero
 40050a4:	003dbd06 	br	400479c <__alt_data_end+0xfc00479c>
 40050a8:	2000201e 	bne	r4,zero,400512c <___vfprintf_internal_r+0x222c>
 40050ac:	9480004c 	andi	r18,r18,1
 40050b0:	90001e1e 	bne	r18,zero,400512c <___vfprintf_internal_r+0x222c>
 40050b4:	00800044 	movi	r2,1
 40050b8:	d8802b15 	stw	r2,172(sp)
 40050bc:	003db706 	br	400479c <__alt_data_end+0xfc00479c>
 40050c0:	00800b44 	movi	r2,45
 40050c4:	05adc83a 	sub	r22,zero,r22
 40050c8:	d8802305 	stb	r2,140(sp)
 40050cc:	003f3f06 	br	4004dcc <__alt_data_end+0xfc004dcc>
 40050d0:	0005883a 	mov	r2,zero
 40050d4:	003f5206 	br	4004e20 <__alt_data_end+0xfc004e20>
 40050d8:	90a4703a 	and	r18,r18,r2
 40050dc:	903f4e26 	beq	r18,zero,4004e18 <__alt_data_end+0xfc004e18>
 40050e0:	003f4a06 	br	4004e0c <__alt_data_end+0xfc004e0c>
 40050e4:	00800084 	movi	r2,2
 40050e8:	10c5c83a 	sub	r2,r2,r3
 40050ec:	003f8406 	br	4004f00 <__alt_data_end+0xfc004f00>
 40050f0:	d9402e17 	ldw	r5,184(sp)
 40050f4:	d9002e17 	ldw	r4,184(sp)
 40050f8:	ac400043 	ldbu	r17,1(r21)
 40050fc:	29400017 	ldw	r5,0(r5)
 4005100:	20800104 	addi	r2,r4,4
 4005104:	d8802e15 	stw	r2,184(sp)
 4005108:	d9402a15 	stw	r5,168(sp)
 400510c:	182b883a 	mov	r21,r3
 4005110:	283e7b0e 	bge	r5,zero,4004b00 <__alt_data_end+0xfc004b00>
 4005114:	8c403fcc 	andi	r17,r17,255
 4005118:	017fffc4 	movi	r5,-1
 400511c:	8c40201c 	xori	r17,r17,128
 4005120:	d9402a15 	stw	r5,168(sp)
 4005124:	8c7fe004 	addi	r17,r17,-128
 4005128:	0037d706 	br	4003088 <__alt_data_end+0xfc003088>
 400512c:	d8c02a17 	ldw	r3,168(sp)
 4005130:	18c00084 	addi	r3,r3,2
 4005134:	d8c02b15 	stw	r3,172(sp)
 4005138:	1805883a 	mov	r2,r3
 400513c:	183d970e 	bge	r3,zero,400479c <__alt_data_end+0xfc00479c>
 4005140:	003fd706 	br	40050a0 <__alt_data_end+0xfc0050a0>
 4005144:	0005883a 	mov	r2,zero
 4005148:	003f8f06 	br	4004f88 <__alt_data_end+0xfc004f88>
 400514c:	9080004c 	andi	r2,r18,1
 4005150:	103f821e 	bne	r2,zero,4004f5c <__alt_data_end+0xfc004f5c>
 4005154:	d8802117 	ldw	r2,132(sp)
 4005158:	1405c83a 	sub	r2,r2,r16
 400515c:	d8803315 	stw	r2,204(sp)
 4005160:	b47ef426 	beq	r22,r17,4004d34 <__alt_data_end+0xfc004d34>
 4005164:	dd802617 	ldw	r22,152(sp)
 4005168:	003f1206 	br	4004db4 <__alt_data_end+0xfc004db4>
 400516c:	d8c02b03 	ldbu	r3,172(sp)
 4005170:	d8c02785 	stb	r3,158(sp)
 4005174:	0038df06 	br	40034f4 <__alt_data_end+0xfc0034f4>
 4005178:	d8c02b03 	ldbu	r3,172(sp)
 400517c:	d8c02785 	stb	r3,158(sp)
 4005180:	0038aa06 	br	400342c <__alt_data_end+0xfc00342c>
 4005184:	d8c02b03 	ldbu	r3,172(sp)
 4005188:	d8c02785 	stb	r3,158(sp)
 400518c:	003a4306 	br	4003a9c <__alt_data_end+0xfc003a9c>
 4005190:	d8c02b03 	ldbu	r3,172(sp)
 4005194:	d8c02785 	stb	r3,158(sp)
 4005198:	003af506 	br	4003d70 <__alt_data_end+0xfc003d70>
 400519c:	0005883a 	mov	r2,zero
 40051a0:	003d7b06 	br	4004790 <__alt_data_end+0xfc004790>
 40051a4:	d8802344 	addi	r2,sp,141
 40051a8:	003f1006 	br	4004dec <__alt_data_end+0xfc004dec>
 40051ac:	d8c02b03 	ldbu	r3,172(sp)
 40051b0:	d8c02785 	stb	r3,158(sp)
 40051b4:	0038fd06 	br	40035ac <__alt_data_end+0xfc0035ac>
 40051b8:	d8c02b03 	ldbu	r3,172(sp)
 40051bc:	d8c02785 	stb	r3,158(sp)
 40051c0:	003a9706 	br	4003c20 <__alt_data_end+0xfc003c20>
 40051c4:	d8c02b03 	ldbu	r3,172(sp)
 40051c8:	d8c02785 	stb	r3,158(sp)
 40051cc:	003a1806 	br	4003a30 <__alt_data_end+0xfc003a30>
 40051d0:	d8c02b03 	ldbu	r3,172(sp)
 40051d4:	d8c02785 	stb	r3,158(sp)
 40051d8:	003abe06 	br	4003cd4 <__alt_data_end+0xfc003cd4>

040051dc <__vfprintf_internal>:
 40051dc:	00810074 	movhi	r2,1025
 40051e0:	1091d704 	addi	r2,r2,18268
 40051e4:	300f883a 	mov	r7,r6
 40051e8:	280d883a 	mov	r6,r5
 40051ec:	200b883a 	mov	r5,r4
 40051f0:	11000017 	ldw	r4,0(r2)
 40051f4:	4002f001 	jmpi	4002f00 <___vfprintf_internal_r>

040051f8 <__sbprintf>:
 40051f8:	2880030b 	ldhu	r2,12(r5)
 40051fc:	2ac01917 	ldw	r11,100(r5)
 4005200:	2a80038b 	ldhu	r10,14(r5)
 4005204:	2a400717 	ldw	r9,28(r5)
 4005208:	2a000917 	ldw	r8,36(r5)
 400520c:	defee204 	addi	sp,sp,-1144
 4005210:	00c10004 	movi	r3,1024
 4005214:	dc011a15 	stw	r16,1128(sp)
 4005218:	10bfff4c 	andi	r2,r2,65533
 400521c:	2821883a 	mov	r16,r5
 4005220:	d8cb883a 	add	r5,sp,r3
 4005224:	dc811c15 	stw	r18,1136(sp)
 4005228:	dc411b15 	stw	r17,1132(sp)
 400522c:	dfc11d15 	stw	ra,1140(sp)
 4005230:	2025883a 	mov	r18,r4
 4005234:	d881030d 	sth	r2,1036(sp)
 4005238:	dac11915 	stw	r11,1124(sp)
 400523c:	da81038d 	sth	r10,1038(sp)
 4005240:	da410715 	stw	r9,1052(sp)
 4005244:	da010915 	stw	r8,1060(sp)
 4005248:	dec10015 	stw	sp,1024(sp)
 400524c:	dec10415 	stw	sp,1040(sp)
 4005250:	d8c10215 	stw	r3,1032(sp)
 4005254:	d8c10515 	stw	r3,1044(sp)
 4005258:	d8010615 	stw	zero,1048(sp)
 400525c:	4002f000 	call	4002f00 <___vfprintf_internal_r>
 4005260:	1023883a 	mov	r17,r2
 4005264:	10000416 	blt	r2,zero,4005278 <__sbprintf+0x80>
 4005268:	d9410004 	addi	r5,sp,1024
 400526c:	9009883a 	mov	r4,r18
 4005270:	4006ed40 	call	4006ed4 <_fflush_r>
 4005274:	10000d1e 	bne	r2,zero,40052ac <__sbprintf+0xb4>
 4005278:	d881030b 	ldhu	r2,1036(sp)
 400527c:	1080100c 	andi	r2,r2,64
 4005280:	10000326 	beq	r2,zero,4005290 <__sbprintf+0x98>
 4005284:	8080030b 	ldhu	r2,12(r16)
 4005288:	10801014 	ori	r2,r2,64
 400528c:	8080030d 	sth	r2,12(r16)
 4005290:	8805883a 	mov	r2,r17
 4005294:	dfc11d17 	ldw	ra,1140(sp)
 4005298:	dc811c17 	ldw	r18,1136(sp)
 400529c:	dc411b17 	ldw	r17,1132(sp)
 40052a0:	dc011a17 	ldw	r16,1128(sp)
 40052a4:	dec11e04 	addi	sp,sp,1144
 40052a8:	f800283a 	ret
 40052ac:	047fffc4 	movi	r17,-1
 40052b0:	003ff106 	br	4005278 <__alt_data_end+0xfc005278>

040052b4 <__swsetup_r>:
 40052b4:	00810074 	movhi	r2,1025
 40052b8:	defffd04 	addi	sp,sp,-12
 40052bc:	1091d704 	addi	r2,r2,18268
 40052c0:	dc400115 	stw	r17,4(sp)
 40052c4:	2023883a 	mov	r17,r4
 40052c8:	11000017 	ldw	r4,0(r2)
 40052cc:	dc000015 	stw	r16,0(sp)
 40052d0:	dfc00215 	stw	ra,8(sp)
 40052d4:	2821883a 	mov	r16,r5
 40052d8:	20000226 	beq	r4,zero,40052e4 <__swsetup_r+0x30>
 40052dc:	20800e17 	ldw	r2,56(r4)
 40052e0:	10003126 	beq	r2,zero,40053a8 <__swsetup_r+0xf4>
 40052e4:	8080030b 	ldhu	r2,12(r16)
 40052e8:	10c0020c 	andi	r3,r2,8
 40052ec:	1009883a 	mov	r4,r2
 40052f0:	18000f26 	beq	r3,zero,4005330 <__swsetup_r+0x7c>
 40052f4:	80c00417 	ldw	r3,16(r16)
 40052f8:	18001526 	beq	r3,zero,4005350 <__swsetup_r+0x9c>
 40052fc:	1100004c 	andi	r4,r2,1
 4005300:	20001c1e 	bne	r4,zero,4005374 <__swsetup_r+0xc0>
 4005304:	1080008c 	andi	r2,r2,2
 4005308:	1000291e 	bne	r2,zero,40053b0 <__swsetup_r+0xfc>
 400530c:	80800517 	ldw	r2,20(r16)
 4005310:	80800215 	stw	r2,8(r16)
 4005314:	18001c26 	beq	r3,zero,4005388 <__swsetup_r+0xd4>
 4005318:	0005883a 	mov	r2,zero
 400531c:	dfc00217 	ldw	ra,8(sp)
 4005320:	dc400117 	ldw	r17,4(sp)
 4005324:	dc000017 	ldw	r16,0(sp)
 4005328:	dec00304 	addi	sp,sp,12
 400532c:	f800283a 	ret
 4005330:	2080040c 	andi	r2,r4,16
 4005334:	10002e26 	beq	r2,zero,40053f0 <__swsetup_r+0x13c>
 4005338:	2080010c 	andi	r2,r4,4
 400533c:	10001e1e 	bne	r2,zero,40053b8 <__swsetup_r+0x104>
 4005340:	80c00417 	ldw	r3,16(r16)
 4005344:	20800214 	ori	r2,r4,8
 4005348:	8080030d 	sth	r2,12(r16)
 400534c:	183feb1e 	bne	r3,zero,40052fc <__alt_data_end+0xfc0052fc>
 4005350:	1100a00c 	andi	r4,r2,640
 4005354:	01408004 	movi	r5,512
 4005358:	217fe826 	beq	r4,r5,40052fc <__alt_data_end+0xfc0052fc>
 400535c:	800b883a 	mov	r5,r16
 4005360:	8809883a 	mov	r4,r17
 4005364:	4007e700 	call	4007e70 <__smakebuf_r>
 4005368:	8080030b 	ldhu	r2,12(r16)
 400536c:	80c00417 	ldw	r3,16(r16)
 4005370:	003fe206 	br	40052fc <__alt_data_end+0xfc0052fc>
 4005374:	80800517 	ldw	r2,20(r16)
 4005378:	80000215 	stw	zero,8(r16)
 400537c:	0085c83a 	sub	r2,zero,r2
 4005380:	80800615 	stw	r2,24(r16)
 4005384:	183fe41e 	bne	r3,zero,4005318 <__alt_data_end+0xfc005318>
 4005388:	80c0030b 	ldhu	r3,12(r16)
 400538c:	0005883a 	mov	r2,zero
 4005390:	1900200c 	andi	r4,r3,128
 4005394:	203fe126 	beq	r4,zero,400531c <__alt_data_end+0xfc00531c>
 4005398:	18c01014 	ori	r3,r3,64
 400539c:	80c0030d 	sth	r3,12(r16)
 40053a0:	00bfffc4 	movi	r2,-1
 40053a4:	003fdd06 	br	400531c <__alt_data_end+0xfc00531c>
 40053a8:	40072c00 	call	40072c0 <__sinit>
 40053ac:	003fcd06 	br	40052e4 <__alt_data_end+0xfc0052e4>
 40053b0:	0005883a 	mov	r2,zero
 40053b4:	003fd606 	br	4005310 <__alt_data_end+0xfc005310>
 40053b8:	81400c17 	ldw	r5,48(r16)
 40053bc:	28000626 	beq	r5,zero,40053d8 <__swsetup_r+0x124>
 40053c0:	80801004 	addi	r2,r16,64
 40053c4:	28800326 	beq	r5,r2,40053d4 <__swsetup_r+0x120>
 40053c8:	8809883a 	mov	r4,r17
 40053cc:	40074340 	call	4007434 <_free_r>
 40053d0:	8100030b 	ldhu	r4,12(r16)
 40053d4:	80000c15 	stw	zero,48(r16)
 40053d8:	80c00417 	ldw	r3,16(r16)
 40053dc:	00bff6c4 	movi	r2,-37
 40053e0:	1108703a 	and	r4,r2,r4
 40053e4:	80000115 	stw	zero,4(r16)
 40053e8:	80c00015 	stw	r3,0(r16)
 40053ec:	003fd506 	br	4005344 <__alt_data_end+0xfc005344>
 40053f0:	00800244 	movi	r2,9
 40053f4:	88800015 	stw	r2,0(r17)
 40053f8:	20801014 	ori	r2,r4,64
 40053fc:	8080030d 	sth	r2,12(r16)
 4005400:	00bfffc4 	movi	r2,-1
 4005404:	003fc506 	br	400531c <__alt_data_end+0xfc00531c>

04005408 <quorem>:
 4005408:	defff204 	addi	sp,sp,-56
 400540c:	ddc00b15 	stw	r23,44(sp)
 4005410:	20800417 	ldw	r2,16(r4)
 4005414:	2dc00417 	ldw	r23,16(r5)
 4005418:	dfc00d15 	stw	ra,52(sp)
 400541c:	df000c15 	stw	fp,48(sp)
 4005420:	dd800a15 	stw	r22,40(sp)
 4005424:	dd400915 	stw	r21,36(sp)
 4005428:	dd000815 	stw	r20,32(sp)
 400542c:	dcc00715 	stw	r19,28(sp)
 4005430:	dc800615 	stw	r18,24(sp)
 4005434:	dc400515 	stw	r17,20(sp)
 4005438:	dc000415 	stw	r16,16(sp)
 400543c:	15c07a16 	blt	r2,r23,4005628 <quorem+0x220>
 4005440:	bdffffc4 	addi	r23,r23,-1
 4005444:	bde9883a 	add	r20,r23,r23
 4005448:	28c00504 	addi	r3,r5,20
 400544c:	a529883a 	add	r20,r20,r20
 4005450:	1d39883a 	add	fp,r3,r20
 4005454:	24c00504 	addi	r19,r4,20
 4005458:	d9400215 	stw	r5,8(sp)
 400545c:	9d29883a 	add	r20,r19,r20
 4005460:	e1400017 	ldw	r5,0(fp)
 4005464:	d9000015 	stw	r4,0(sp)
 4005468:	a1000017 	ldw	r4,0(r20)
 400546c:	29400044 	addi	r5,r5,1
 4005470:	d8c00115 	stw	r3,4(sp)
 4005474:	dd000315 	stw	r20,12(sp)
 4005478:	4002c240 	call	4002c24 <__udivsi3>
 400547c:	1025883a 	mov	r18,r2
 4005480:	10003026 	beq	r2,zero,4005544 <quorem+0x13c>
 4005484:	dc400117 	ldw	r17,4(sp)
 4005488:	9829883a 	mov	r20,r19
 400548c:	002d883a 	mov	r22,zero
 4005490:	0021883a 	mov	r16,zero
 4005494:	8d400017 	ldw	r21,0(r17)
 4005498:	900b883a 	mov	r5,r18
 400549c:	8c400104 	addi	r17,r17,4
 40054a0:	a93fffcc 	andi	r4,r21,65535
 40054a4:	4002ce00 	call	4002ce0 <__mulsi3>
 40054a8:	a808d43a 	srli	r4,r21,16
 40054ac:	900b883a 	mov	r5,r18
 40054b0:	15ad883a 	add	r22,r2,r22
 40054b4:	4002ce00 	call	4002ce0 <__mulsi3>
 40054b8:	a1000017 	ldw	r4,0(r20)
 40054bc:	b00cd43a 	srli	r6,r22,16
 40054c0:	b0ffffcc 	andi	r3,r22,65535
 40054c4:	217fffcc 	andi	r5,r4,65535
 40054c8:	2c21883a 	add	r16,r5,r16
 40054cc:	80c7c83a 	sub	r3,r16,r3
 40054d0:	2008d43a 	srli	r4,r4,16
 40054d4:	1185883a 	add	r2,r2,r6
 40054d8:	1821d43a 	srai	r16,r3,16
 40054dc:	117fffcc 	andi	r5,r2,65535
 40054e0:	2149c83a 	sub	r4,r4,r5
 40054e4:	2421883a 	add	r16,r4,r16
 40054e8:	8008943a 	slli	r4,r16,16
 40054ec:	18ffffcc 	andi	r3,r3,65535
 40054f0:	102cd43a 	srli	r22,r2,16
 40054f4:	20c8b03a 	or	r4,r4,r3
 40054f8:	a1000015 	stw	r4,0(r20)
 40054fc:	8021d43a 	srai	r16,r16,16
 4005500:	a5000104 	addi	r20,r20,4
 4005504:	e47fe32e 	bgeu	fp,r17,4005494 <__alt_data_end+0xfc005494>
 4005508:	d8c00317 	ldw	r3,12(sp)
 400550c:	18800017 	ldw	r2,0(r3)
 4005510:	10000c1e 	bne	r2,zero,4005544 <quorem+0x13c>
 4005514:	18bfff04 	addi	r2,r3,-4
 4005518:	9880082e 	bgeu	r19,r2,400553c <quorem+0x134>
 400551c:	18ffff17 	ldw	r3,-4(r3)
 4005520:	18000326 	beq	r3,zero,4005530 <quorem+0x128>
 4005524:	00000506 	br	400553c <quorem+0x134>
 4005528:	10c00017 	ldw	r3,0(r2)
 400552c:	1800031e 	bne	r3,zero,400553c <quorem+0x134>
 4005530:	10bfff04 	addi	r2,r2,-4
 4005534:	bdffffc4 	addi	r23,r23,-1
 4005538:	98bffb36 	bltu	r19,r2,4005528 <__alt_data_end+0xfc005528>
 400553c:	d8c00017 	ldw	r3,0(sp)
 4005540:	1dc00415 	stw	r23,16(r3)
 4005544:	d9400217 	ldw	r5,8(sp)
 4005548:	d9000017 	ldw	r4,0(sp)
 400554c:	400966c0 	call	400966c <__mcmp>
 4005550:	10002816 	blt	r2,zero,40055f4 <quorem+0x1ec>
 4005554:	dc400117 	ldw	r17,4(sp)
 4005558:	94800044 	addi	r18,r18,1
 400555c:	980d883a 	mov	r6,r19
 4005560:	0007883a 	mov	r3,zero
 4005564:	31000017 	ldw	r4,0(r6)
 4005568:	89400017 	ldw	r5,0(r17)
 400556c:	31800104 	addi	r6,r6,4
 4005570:	20bfffcc 	andi	r2,r4,65535
 4005574:	10c7883a 	add	r3,r2,r3
 4005578:	28bfffcc 	andi	r2,r5,65535
 400557c:	1885c83a 	sub	r2,r3,r2
 4005580:	280ad43a 	srli	r5,r5,16
 4005584:	2008d43a 	srli	r4,r4,16
 4005588:	1007d43a 	srai	r3,r2,16
 400558c:	10bfffcc 	andi	r2,r2,65535
 4005590:	2149c83a 	sub	r4,r4,r5
 4005594:	20c9883a 	add	r4,r4,r3
 4005598:	200a943a 	slli	r5,r4,16
 400559c:	8c400104 	addi	r17,r17,4
 40055a0:	2007d43a 	srai	r3,r4,16
 40055a4:	2884b03a 	or	r2,r5,r2
 40055a8:	30bfff15 	stw	r2,-4(r6)
 40055ac:	e47fed2e 	bgeu	fp,r17,4005564 <__alt_data_end+0xfc005564>
 40055b0:	bdc5883a 	add	r2,r23,r23
 40055b4:	1085883a 	add	r2,r2,r2
 40055b8:	9887883a 	add	r3,r19,r2
 40055bc:	18800017 	ldw	r2,0(r3)
 40055c0:	10000c1e 	bne	r2,zero,40055f4 <quorem+0x1ec>
 40055c4:	18bfff04 	addi	r2,r3,-4
 40055c8:	9880082e 	bgeu	r19,r2,40055ec <quorem+0x1e4>
 40055cc:	18ffff17 	ldw	r3,-4(r3)
 40055d0:	18000326 	beq	r3,zero,40055e0 <quorem+0x1d8>
 40055d4:	00000506 	br	40055ec <quorem+0x1e4>
 40055d8:	10c00017 	ldw	r3,0(r2)
 40055dc:	1800031e 	bne	r3,zero,40055ec <quorem+0x1e4>
 40055e0:	10bfff04 	addi	r2,r2,-4
 40055e4:	bdffffc4 	addi	r23,r23,-1
 40055e8:	98bffb36 	bltu	r19,r2,40055d8 <__alt_data_end+0xfc0055d8>
 40055ec:	d8c00017 	ldw	r3,0(sp)
 40055f0:	1dc00415 	stw	r23,16(r3)
 40055f4:	9005883a 	mov	r2,r18
 40055f8:	dfc00d17 	ldw	ra,52(sp)
 40055fc:	df000c17 	ldw	fp,48(sp)
 4005600:	ddc00b17 	ldw	r23,44(sp)
 4005604:	dd800a17 	ldw	r22,40(sp)
 4005608:	dd400917 	ldw	r21,36(sp)
 400560c:	dd000817 	ldw	r20,32(sp)
 4005610:	dcc00717 	ldw	r19,28(sp)
 4005614:	dc800617 	ldw	r18,24(sp)
 4005618:	dc400517 	ldw	r17,20(sp)
 400561c:	dc000417 	ldw	r16,16(sp)
 4005620:	dec00e04 	addi	sp,sp,56
 4005624:	f800283a 	ret
 4005628:	0005883a 	mov	r2,zero
 400562c:	003ff206 	br	40055f8 <__alt_data_end+0xfc0055f8>

04005630 <_dtoa_r>:
 4005630:	20801017 	ldw	r2,64(r4)
 4005634:	deffde04 	addi	sp,sp,-136
 4005638:	df002015 	stw	fp,128(sp)
 400563c:	dcc01b15 	stw	r19,108(sp)
 4005640:	dc801a15 	stw	r18,104(sp)
 4005644:	dc401915 	stw	r17,100(sp)
 4005648:	dc001815 	stw	r16,96(sp)
 400564c:	dfc02115 	stw	ra,132(sp)
 4005650:	ddc01f15 	stw	r23,124(sp)
 4005654:	dd801e15 	stw	r22,120(sp)
 4005658:	dd401d15 	stw	r21,116(sp)
 400565c:	dd001c15 	stw	r20,112(sp)
 4005660:	d9c00315 	stw	r7,12(sp)
 4005664:	2039883a 	mov	fp,r4
 4005668:	3023883a 	mov	r17,r6
 400566c:	2825883a 	mov	r18,r5
 4005670:	dc002417 	ldw	r16,144(sp)
 4005674:	3027883a 	mov	r19,r6
 4005678:	10000826 	beq	r2,zero,400569c <_dtoa_r+0x6c>
 400567c:	21801117 	ldw	r6,68(r4)
 4005680:	00c00044 	movi	r3,1
 4005684:	100b883a 	mov	r5,r2
 4005688:	1986983a 	sll	r3,r3,r6
 400568c:	11800115 	stw	r6,4(r2)
 4005690:	10c00215 	stw	r3,8(r2)
 4005694:	4008d900 	call	4008d90 <_Bfree>
 4005698:	e0001015 	stw	zero,64(fp)
 400569c:	88002e16 	blt	r17,zero,4005758 <_dtoa_r+0x128>
 40056a0:	80000015 	stw	zero,0(r16)
 40056a4:	889ffc2c 	andhi	r2,r17,32752
 40056a8:	00dffc34 	movhi	r3,32752
 40056ac:	10c01c26 	beq	r2,r3,4005720 <_dtoa_r+0xf0>
 40056b0:	000d883a 	mov	r6,zero
 40056b4:	000f883a 	mov	r7,zero
 40056b8:	9009883a 	mov	r4,r18
 40056bc:	980b883a 	mov	r5,r19
 40056c0:	400e5cc0 	call	400e5cc <__eqdf2>
 40056c4:	10002b1e 	bne	r2,zero,4005774 <_dtoa_r+0x144>
 40056c8:	d9c02317 	ldw	r7,140(sp)
 40056cc:	00800044 	movi	r2,1
 40056d0:	38800015 	stw	r2,0(r7)
 40056d4:	d8802517 	ldw	r2,148(sp)
 40056d8:	10019e26 	beq	r2,zero,4005d54 <_dtoa_r+0x724>
 40056dc:	d8c02517 	ldw	r3,148(sp)
 40056e0:	00810074 	movhi	r2,1025
 40056e4:	108a6c44 	addi	r2,r2,10673
 40056e8:	18800015 	stw	r2,0(r3)
 40056ec:	10bfffc4 	addi	r2,r2,-1
 40056f0:	dfc02117 	ldw	ra,132(sp)
 40056f4:	df002017 	ldw	fp,128(sp)
 40056f8:	ddc01f17 	ldw	r23,124(sp)
 40056fc:	dd801e17 	ldw	r22,120(sp)
 4005700:	dd401d17 	ldw	r21,116(sp)
 4005704:	dd001c17 	ldw	r20,112(sp)
 4005708:	dcc01b17 	ldw	r19,108(sp)
 400570c:	dc801a17 	ldw	r18,104(sp)
 4005710:	dc401917 	ldw	r17,100(sp)
 4005714:	dc001817 	ldw	r16,96(sp)
 4005718:	dec02204 	addi	sp,sp,136
 400571c:	f800283a 	ret
 4005720:	d8c02317 	ldw	r3,140(sp)
 4005724:	0089c3c4 	movi	r2,9999
 4005728:	18800015 	stw	r2,0(r3)
 400572c:	90017726 	beq	r18,zero,4005d0c <_dtoa_r+0x6dc>
 4005730:	00810074 	movhi	r2,1025
 4005734:	108a7804 	addi	r2,r2,10720
 4005738:	d9002517 	ldw	r4,148(sp)
 400573c:	203fec26 	beq	r4,zero,40056f0 <__alt_data_end+0xfc0056f0>
 4005740:	10c000c7 	ldb	r3,3(r2)
 4005744:	1801781e 	bne	r3,zero,4005d28 <_dtoa_r+0x6f8>
 4005748:	10c000c4 	addi	r3,r2,3
 400574c:	d9802517 	ldw	r6,148(sp)
 4005750:	30c00015 	stw	r3,0(r6)
 4005754:	003fe606 	br	40056f0 <__alt_data_end+0xfc0056f0>
 4005758:	04e00034 	movhi	r19,32768
 400575c:	9cffffc4 	addi	r19,r19,-1
 4005760:	00800044 	movi	r2,1
 4005764:	8ce6703a 	and	r19,r17,r19
 4005768:	80800015 	stw	r2,0(r16)
 400576c:	9823883a 	mov	r17,r19
 4005770:	003fcc06 	br	40056a4 <__alt_data_end+0xfc0056a4>
 4005774:	d8800204 	addi	r2,sp,8
 4005778:	d8800015 	stw	r2,0(sp)
 400577c:	d9c00104 	addi	r7,sp,4
 4005780:	900b883a 	mov	r5,r18
 4005784:	980d883a 	mov	r6,r19
 4005788:	e009883a 	mov	r4,fp
 400578c:	8820d53a 	srli	r16,r17,20
 4005790:	4009a380 	call	4009a38 <__d2b>
 4005794:	d8800915 	stw	r2,36(sp)
 4005798:	8001651e 	bne	r16,zero,4005d30 <_dtoa_r+0x700>
 400579c:	dd800217 	ldw	r22,8(sp)
 40057a0:	dc000117 	ldw	r16,4(sp)
 40057a4:	00800804 	movi	r2,32
 40057a8:	b421883a 	add	r16,r22,r16
 40057ac:	80c10c84 	addi	r3,r16,1074
 40057b0:	10c2d10e 	bge	r2,r3,40062f8 <_dtoa_r+0xcc8>
 40057b4:	00801004 	movi	r2,64
 40057b8:	81010484 	addi	r4,r16,1042
 40057bc:	10c7c83a 	sub	r3,r2,r3
 40057c0:	9108d83a 	srl	r4,r18,r4
 40057c4:	88e2983a 	sll	r17,r17,r3
 40057c8:	2448b03a 	or	r4,r4,r17
 40057cc:	400fae80 	call	400fae8 <__floatunsidf>
 40057d0:	017f8434 	movhi	r5,65040
 40057d4:	01800044 	movi	r6,1
 40057d8:	1009883a 	mov	r4,r2
 40057dc:	194b883a 	add	r5,r3,r5
 40057e0:	843fffc4 	addi	r16,r16,-1
 40057e4:	d9801115 	stw	r6,68(sp)
 40057e8:	000d883a 	mov	r6,zero
 40057ec:	01cffe34 	movhi	r7,16376
 40057f0:	400f0900 	call	400f090 <__subdf3>
 40057f4:	0198dbf4 	movhi	r6,25455
 40057f8:	01cff4f4 	movhi	r7,16339
 40057fc:	3190d844 	addi	r6,r6,17249
 4005800:	39e1e9c4 	addi	r7,r7,-30809
 4005804:	1009883a 	mov	r4,r2
 4005808:	180b883a 	mov	r5,r3
 400580c:	400e8240 	call	400e824 <__muldf3>
 4005810:	01a2d874 	movhi	r6,35681
 4005814:	01cff1f4 	movhi	r7,16327
 4005818:	31b22cc4 	addi	r6,r6,-14157
 400581c:	39e28a04 	addi	r7,r7,-30168
 4005820:	180b883a 	mov	r5,r3
 4005824:	1009883a 	mov	r4,r2
 4005828:	400d3500 	call	400d350 <__adddf3>
 400582c:	8009883a 	mov	r4,r16
 4005830:	1029883a 	mov	r20,r2
 4005834:	1823883a 	mov	r17,r3
 4005838:	400fa0c0 	call	400fa0c <__floatsidf>
 400583c:	019427f4 	movhi	r6,20639
 4005840:	01cff4f4 	movhi	r7,16339
 4005844:	319e7ec4 	addi	r6,r6,31227
 4005848:	39d104c4 	addi	r7,r7,17427
 400584c:	1009883a 	mov	r4,r2
 4005850:	180b883a 	mov	r5,r3
 4005854:	400e8240 	call	400e824 <__muldf3>
 4005858:	100d883a 	mov	r6,r2
 400585c:	180f883a 	mov	r7,r3
 4005860:	a009883a 	mov	r4,r20
 4005864:	880b883a 	mov	r5,r17
 4005868:	400d3500 	call	400d350 <__adddf3>
 400586c:	1009883a 	mov	r4,r2
 4005870:	180b883a 	mov	r5,r3
 4005874:	1029883a 	mov	r20,r2
 4005878:	1823883a 	mov	r17,r3
 400587c:	400f98c0 	call	400f98c <__fixdfsi>
 4005880:	000d883a 	mov	r6,zero
 4005884:	000f883a 	mov	r7,zero
 4005888:	a009883a 	mov	r4,r20
 400588c:	880b883a 	mov	r5,r17
 4005890:	d8800515 	stw	r2,20(sp)
 4005894:	400e7300 	call	400e730 <__ledf2>
 4005898:	10028716 	blt	r2,zero,40062b8 <_dtoa_r+0xc88>
 400589c:	d8c00517 	ldw	r3,20(sp)
 40058a0:	00800584 	movi	r2,22
 40058a4:	10c27536 	bltu	r2,r3,400627c <_dtoa_r+0xc4c>
 40058a8:	180490fa 	slli	r2,r3,3
 40058ac:	00c10074 	movhi	r3,1025
 40058b0:	18ca9404 	addi	r3,r3,10832
 40058b4:	1885883a 	add	r2,r3,r2
 40058b8:	11000017 	ldw	r4,0(r2)
 40058bc:	11400117 	ldw	r5,4(r2)
 40058c0:	900d883a 	mov	r6,r18
 40058c4:	980f883a 	mov	r7,r19
 40058c8:	400e6540 	call	400e654 <__gedf2>
 40058cc:	00828d0e 	bge	zero,r2,4006304 <_dtoa_r+0xcd4>
 40058d0:	d9000517 	ldw	r4,20(sp)
 40058d4:	d8000e15 	stw	zero,56(sp)
 40058d8:	213fffc4 	addi	r4,r4,-1
 40058dc:	d9000515 	stw	r4,20(sp)
 40058e0:	b42dc83a 	sub	r22,r22,r16
 40058e4:	b5bfffc4 	addi	r22,r22,-1
 40058e8:	b0026f16 	blt	r22,zero,40062a8 <_dtoa_r+0xc78>
 40058ec:	d8000815 	stw	zero,32(sp)
 40058f0:	d9c00517 	ldw	r7,20(sp)
 40058f4:	38026416 	blt	r7,zero,4006288 <_dtoa_r+0xc58>
 40058f8:	b1ed883a 	add	r22,r22,r7
 40058fc:	d9c00d15 	stw	r7,52(sp)
 4005900:	d8000a15 	stw	zero,40(sp)
 4005904:	d9800317 	ldw	r6,12(sp)
 4005908:	00800244 	movi	r2,9
 400590c:	11811436 	bltu	r2,r6,4005d60 <_dtoa_r+0x730>
 4005910:	00800144 	movi	r2,5
 4005914:	1184e10e 	bge	r2,r6,4006c9c <_dtoa_r+0x166c>
 4005918:	31bfff04 	addi	r6,r6,-4
 400591c:	d9800315 	stw	r6,12(sp)
 4005920:	0023883a 	mov	r17,zero
 4005924:	d9800317 	ldw	r6,12(sp)
 4005928:	008000c4 	movi	r2,3
 400592c:	30836726 	beq	r6,r2,40066cc <_dtoa_r+0x109c>
 4005930:	1183410e 	bge	r2,r6,4006638 <_dtoa_r+0x1008>
 4005934:	d9c00317 	ldw	r7,12(sp)
 4005938:	00800104 	movi	r2,4
 400593c:	38827c26 	beq	r7,r2,4006330 <_dtoa_r+0xd00>
 4005940:	00800144 	movi	r2,5
 4005944:	3884c41e 	bne	r7,r2,4006c58 <_dtoa_r+0x1628>
 4005948:	00800044 	movi	r2,1
 400594c:	d8800b15 	stw	r2,44(sp)
 4005950:	d8c00517 	ldw	r3,20(sp)
 4005954:	d9002217 	ldw	r4,136(sp)
 4005958:	1907883a 	add	r3,r3,r4
 400595c:	19800044 	addi	r6,r3,1
 4005960:	d8c00c15 	stw	r3,48(sp)
 4005964:	d9800615 	stw	r6,24(sp)
 4005968:	0183a40e 	bge	zero,r6,40067fc <_dtoa_r+0x11cc>
 400596c:	d9800617 	ldw	r6,24(sp)
 4005970:	3021883a 	mov	r16,r6
 4005974:	e0001115 	stw	zero,68(fp)
 4005978:	008005c4 	movi	r2,23
 400597c:	1184c92e 	bgeu	r2,r6,4006ca4 <_dtoa_r+0x1674>
 4005980:	00c00044 	movi	r3,1
 4005984:	00800104 	movi	r2,4
 4005988:	1085883a 	add	r2,r2,r2
 400598c:	11000504 	addi	r4,r2,20
 4005990:	180b883a 	mov	r5,r3
 4005994:	18c00044 	addi	r3,r3,1
 4005998:	313ffb2e 	bgeu	r6,r4,4005988 <__alt_data_end+0xfc005988>
 400599c:	e1401115 	stw	r5,68(fp)
 40059a0:	e009883a 	mov	r4,fp
 40059a4:	4008ce80 	call	4008ce8 <_Balloc>
 40059a8:	d8800715 	stw	r2,28(sp)
 40059ac:	e0801015 	stw	r2,64(fp)
 40059b0:	00800384 	movi	r2,14
 40059b4:	1400f736 	bltu	r2,r16,4005d94 <_dtoa_r+0x764>
 40059b8:	8800f626 	beq	r17,zero,4005d94 <_dtoa_r+0x764>
 40059bc:	d9c00517 	ldw	r7,20(sp)
 40059c0:	01c39a0e 	bge	zero,r7,400682c <_dtoa_r+0x11fc>
 40059c4:	388003cc 	andi	r2,r7,15
 40059c8:	100490fa 	slli	r2,r2,3
 40059cc:	382bd13a 	srai	r21,r7,4
 40059d0:	00c10074 	movhi	r3,1025
 40059d4:	18ca9404 	addi	r3,r3,10832
 40059d8:	1885883a 	add	r2,r3,r2
 40059dc:	a8c0040c 	andi	r3,r21,16
 40059e0:	12400017 	ldw	r9,0(r2)
 40059e4:	12000117 	ldw	r8,4(r2)
 40059e8:	18037926 	beq	r3,zero,40067d0 <_dtoa_r+0x11a0>
 40059ec:	00810074 	movhi	r2,1025
 40059f0:	108a8a04 	addi	r2,r2,10792
 40059f4:	11800817 	ldw	r6,32(r2)
 40059f8:	11c00917 	ldw	r7,36(r2)
 40059fc:	9009883a 	mov	r4,r18
 4005a00:	980b883a 	mov	r5,r19
 4005a04:	da001715 	stw	r8,92(sp)
 4005a08:	da401615 	stw	r9,88(sp)
 4005a0c:	400dbfc0 	call	400dbfc <__divdf3>
 4005a10:	da001717 	ldw	r8,92(sp)
 4005a14:	da401617 	ldw	r9,88(sp)
 4005a18:	ad4003cc 	andi	r21,r21,15
 4005a1c:	040000c4 	movi	r16,3
 4005a20:	1023883a 	mov	r17,r2
 4005a24:	1829883a 	mov	r20,r3
 4005a28:	a8001126 	beq	r21,zero,4005a70 <_dtoa_r+0x440>
 4005a2c:	05c10074 	movhi	r23,1025
 4005a30:	bdca8a04 	addi	r23,r23,10792
 4005a34:	4805883a 	mov	r2,r9
 4005a38:	4007883a 	mov	r3,r8
 4005a3c:	a980004c 	andi	r6,r21,1
 4005a40:	1009883a 	mov	r4,r2
 4005a44:	a82bd07a 	srai	r21,r21,1
 4005a48:	180b883a 	mov	r5,r3
 4005a4c:	30000426 	beq	r6,zero,4005a60 <_dtoa_r+0x430>
 4005a50:	b9800017 	ldw	r6,0(r23)
 4005a54:	b9c00117 	ldw	r7,4(r23)
 4005a58:	84000044 	addi	r16,r16,1
 4005a5c:	400e8240 	call	400e824 <__muldf3>
 4005a60:	bdc00204 	addi	r23,r23,8
 4005a64:	a83ff51e 	bne	r21,zero,4005a3c <__alt_data_end+0xfc005a3c>
 4005a68:	1013883a 	mov	r9,r2
 4005a6c:	1811883a 	mov	r8,r3
 4005a70:	480d883a 	mov	r6,r9
 4005a74:	400f883a 	mov	r7,r8
 4005a78:	8809883a 	mov	r4,r17
 4005a7c:	a00b883a 	mov	r5,r20
 4005a80:	400dbfc0 	call	400dbfc <__divdf3>
 4005a84:	d8800f15 	stw	r2,60(sp)
 4005a88:	d8c01015 	stw	r3,64(sp)
 4005a8c:	d8c00e17 	ldw	r3,56(sp)
 4005a90:	18000626 	beq	r3,zero,4005aac <_dtoa_r+0x47c>
 4005a94:	d9000f17 	ldw	r4,60(sp)
 4005a98:	d9401017 	ldw	r5,64(sp)
 4005a9c:	000d883a 	mov	r6,zero
 4005aa0:	01cffc34 	movhi	r7,16368
 4005aa4:	400e7300 	call	400e730 <__ledf2>
 4005aa8:	10040b16 	blt	r2,zero,4006ad8 <_dtoa_r+0x14a8>
 4005aac:	8009883a 	mov	r4,r16
 4005ab0:	400fa0c0 	call	400fa0c <__floatsidf>
 4005ab4:	d9800f17 	ldw	r6,60(sp)
 4005ab8:	d9c01017 	ldw	r7,64(sp)
 4005abc:	1009883a 	mov	r4,r2
 4005ac0:	180b883a 	mov	r5,r3
 4005ac4:	400e8240 	call	400e824 <__muldf3>
 4005ac8:	000d883a 	mov	r6,zero
 4005acc:	01d00734 	movhi	r7,16412
 4005ad0:	1009883a 	mov	r4,r2
 4005ad4:	180b883a 	mov	r5,r3
 4005ad8:	400d3500 	call	400d350 <__adddf3>
 4005adc:	1021883a 	mov	r16,r2
 4005ae0:	d8800617 	ldw	r2,24(sp)
 4005ae4:	047f3034 	movhi	r17,64704
 4005ae8:	1c63883a 	add	r17,r3,r17
 4005aec:	10031826 	beq	r2,zero,4006750 <_dtoa_r+0x1120>
 4005af0:	d8c00517 	ldw	r3,20(sp)
 4005af4:	db000617 	ldw	r12,24(sp)
 4005af8:	d8c01315 	stw	r3,76(sp)
 4005afc:	d9000b17 	ldw	r4,44(sp)
 4005b00:	20038f26 	beq	r4,zero,4006940 <_dtoa_r+0x1310>
 4005b04:	60bfffc4 	addi	r2,r12,-1
 4005b08:	100490fa 	slli	r2,r2,3
 4005b0c:	00c10074 	movhi	r3,1025
 4005b10:	18ca9404 	addi	r3,r3,10832
 4005b14:	1885883a 	add	r2,r3,r2
 4005b18:	11800017 	ldw	r6,0(r2)
 4005b1c:	11c00117 	ldw	r7,4(r2)
 4005b20:	d8800717 	ldw	r2,28(sp)
 4005b24:	0009883a 	mov	r4,zero
 4005b28:	014ff834 	movhi	r5,16352
 4005b2c:	db001615 	stw	r12,88(sp)
 4005b30:	15c00044 	addi	r23,r2,1
 4005b34:	400dbfc0 	call	400dbfc <__divdf3>
 4005b38:	800d883a 	mov	r6,r16
 4005b3c:	880f883a 	mov	r7,r17
 4005b40:	1009883a 	mov	r4,r2
 4005b44:	180b883a 	mov	r5,r3
 4005b48:	400f0900 	call	400f090 <__subdf3>
 4005b4c:	d9401017 	ldw	r5,64(sp)
 4005b50:	d9000f17 	ldw	r4,60(sp)
 4005b54:	102b883a 	mov	r21,r2
 4005b58:	d8c01215 	stw	r3,72(sp)
 4005b5c:	400f98c0 	call	400f98c <__fixdfsi>
 4005b60:	1009883a 	mov	r4,r2
 4005b64:	1029883a 	mov	r20,r2
 4005b68:	400fa0c0 	call	400fa0c <__floatsidf>
 4005b6c:	d9000f17 	ldw	r4,60(sp)
 4005b70:	d9401017 	ldw	r5,64(sp)
 4005b74:	100d883a 	mov	r6,r2
 4005b78:	180f883a 	mov	r7,r3
 4005b7c:	400f0900 	call	400f090 <__subdf3>
 4005b80:	1823883a 	mov	r17,r3
 4005b84:	d8c00717 	ldw	r3,28(sp)
 4005b88:	d9401217 	ldw	r5,72(sp)
 4005b8c:	a2000c04 	addi	r8,r20,48
 4005b90:	1021883a 	mov	r16,r2
 4005b94:	1a000005 	stb	r8,0(r3)
 4005b98:	800d883a 	mov	r6,r16
 4005b9c:	880f883a 	mov	r7,r17
 4005ba0:	a809883a 	mov	r4,r21
 4005ba4:	4029883a 	mov	r20,r8
 4005ba8:	400e6540 	call	400e654 <__gedf2>
 4005bac:	00841d16 	blt	zero,r2,4006c24 <_dtoa_r+0x15f4>
 4005bb0:	800d883a 	mov	r6,r16
 4005bb4:	880f883a 	mov	r7,r17
 4005bb8:	0009883a 	mov	r4,zero
 4005bbc:	014ffc34 	movhi	r5,16368
 4005bc0:	400f0900 	call	400f090 <__subdf3>
 4005bc4:	d9401217 	ldw	r5,72(sp)
 4005bc8:	100d883a 	mov	r6,r2
 4005bcc:	180f883a 	mov	r7,r3
 4005bd0:	a809883a 	mov	r4,r21
 4005bd4:	400e6540 	call	400e654 <__gedf2>
 4005bd8:	db001617 	ldw	r12,88(sp)
 4005bdc:	00840e16 	blt	zero,r2,4006c18 <_dtoa_r+0x15e8>
 4005be0:	00800044 	movi	r2,1
 4005be4:	13006b0e 	bge	r2,r12,4005d94 <_dtoa_r+0x764>
 4005be8:	d9000717 	ldw	r4,28(sp)
 4005bec:	dd800f15 	stw	r22,60(sp)
 4005bf0:	dcc01015 	stw	r19,64(sp)
 4005bf4:	2319883a 	add	r12,r4,r12
 4005bf8:	dcc01217 	ldw	r19,72(sp)
 4005bfc:	602d883a 	mov	r22,r12
 4005c00:	dc801215 	stw	r18,72(sp)
 4005c04:	b825883a 	mov	r18,r23
 4005c08:	00000906 	br	4005c30 <_dtoa_r+0x600>
 4005c0c:	400f0900 	call	400f090 <__subdf3>
 4005c10:	a80d883a 	mov	r6,r21
 4005c14:	980f883a 	mov	r7,r19
 4005c18:	1009883a 	mov	r4,r2
 4005c1c:	180b883a 	mov	r5,r3
 4005c20:	400e7300 	call	400e730 <__ledf2>
 4005c24:	1003e816 	blt	r2,zero,4006bc8 <_dtoa_r+0x1598>
 4005c28:	b825883a 	mov	r18,r23
 4005c2c:	bd83e926 	beq	r23,r22,4006bd4 <_dtoa_r+0x15a4>
 4005c30:	a809883a 	mov	r4,r21
 4005c34:	980b883a 	mov	r5,r19
 4005c38:	000d883a 	mov	r6,zero
 4005c3c:	01d00934 	movhi	r7,16420
 4005c40:	400e8240 	call	400e824 <__muldf3>
 4005c44:	000d883a 	mov	r6,zero
 4005c48:	01d00934 	movhi	r7,16420
 4005c4c:	8009883a 	mov	r4,r16
 4005c50:	880b883a 	mov	r5,r17
 4005c54:	102b883a 	mov	r21,r2
 4005c58:	1827883a 	mov	r19,r3
 4005c5c:	400e8240 	call	400e824 <__muldf3>
 4005c60:	180b883a 	mov	r5,r3
 4005c64:	1009883a 	mov	r4,r2
 4005c68:	1821883a 	mov	r16,r3
 4005c6c:	1023883a 	mov	r17,r2
 4005c70:	400f98c0 	call	400f98c <__fixdfsi>
 4005c74:	1009883a 	mov	r4,r2
 4005c78:	1029883a 	mov	r20,r2
 4005c7c:	400fa0c0 	call	400fa0c <__floatsidf>
 4005c80:	8809883a 	mov	r4,r17
 4005c84:	800b883a 	mov	r5,r16
 4005c88:	100d883a 	mov	r6,r2
 4005c8c:	180f883a 	mov	r7,r3
 4005c90:	400f0900 	call	400f090 <__subdf3>
 4005c94:	a5000c04 	addi	r20,r20,48
 4005c98:	a80d883a 	mov	r6,r21
 4005c9c:	980f883a 	mov	r7,r19
 4005ca0:	1009883a 	mov	r4,r2
 4005ca4:	180b883a 	mov	r5,r3
 4005ca8:	95000005 	stb	r20,0(r18)
 4005cac:	1021883a 	mov	r16,r2
 4005cb0:	1823883a 	mov	r17,r3
 4005cb4:	400e7300 	call	400e730 <__ledf2>
 4005cb8:	bdc00044 	addi	r23,r23,1
 4005cbc:	800d883a 	mov	r6,r16
 4005cc0:	880f883a 	mov	r7,r17
 4005cc4:	0009883a 	mov	r4,zero
 4005cc8:	014ffc34 	movhi	r5,16368
 4005ccc:	103fcf0e 	bge	r2,zero,4005c0c <__alt_data_end+0xfc005c0c>
 4005cd0:	d8c01317 	ldw	r3,76(sp)
 4005cd4:	d8c00515 	stw	r3,20(sp)
 4005cd8:	d9400917 	ldw	r5,36(sp)
 4005cdc:	e009883a 	mov	r4,fp
 4005ce0:	4008d900 	call	4008d90 <_Bfree>
 4005ce4:	d9000517 	ldw	r4,20(sp)
 4005ce8:	d9802317 	ldw	r6,140(sp)
 4005cec:	d9c02517 	ldw	r7,148(sp)
 4005cf0:	b8000005 	stb	zero,0(r23)
 4005cf4:	20800044 	addi	r2,r4,1
 4005cf8:	30800015 	stw	r2,0(r6)
 4005cfc:	3802aa26 	beq	r7,zero,40067a8 <_dtoa_r+0x1178>
 4005d00:	3dc00015 	stw	r23,0(r7)
 4005d04:	d8800717 	ldw	r2,28(sp)
 4005d08:	003e7906 	br	40056f0 <__alt_data_end+0xfc0056f0>
 4005d0c:	00800434 	movhi	r2,16
 4005d10:	10bfffc4 	addi	r2,r2,-1
 4005d14:	88a2703a 	and	r17,r17,r2
 4005d18:	883e851e 	bne	r17,zero,4005730 <__alt_data_end+0xfc005730>
 4005d1c:	00810074 	movhi	r2,1025
 4005d20:	108a7504 	addi	r2,r2,10708
 4005d24:	003e8406 	br	4005738 <__alt_data_end+0xfc005738>
 4005d28:	10c00204 	addi	r3,r2,8
 4005d2c:	003e8706 	br	400574c <__alt_data_end+0xfc00574c>
 4005d30:	01400434 	movhi	r5,16
 4005d34:	297fffc4 	addi	r5,r5,-1
 4005d38:	994a703a 	and	r5,r19,r5
 4005d3c:	9009883a 	mov	r4,r18
 4005d40:	843f0044 	addi	r16,r16,-1023
 4005d44:	294ffc34 	orhi	r5,r5,16368
 4005d48:	dd800217 	ldw	r22,8(sp)
 4005d4c:	d8001115 	stw	zero,68(sp)
 4005d50:	003ea506 	br	40057e8 <__alt_data_end+0xfc0057e8>
 4005d54:	00810074 	movhi	r2,1025
 4005d58:	108a6c04 	addi	r2,r2,10672
 4005d5c:	003e6406 	br	40056f0 <__alt_data_end+0xfc0056f0>
 4005d60:	e0001115 	stw	zero,68(fp)
 4005d64:	000b883a 	mov	r5,zero
 4005d68:	e009883a 	mov	r4,fp
 4005d6c:	4008ce80 	call	4008ce8 <_Balloc>
 4005d70:	01bfffc4 	movi	r6,-1
 4005d74:	01c00044 	movi	r7,1
 4005d78:	d8800715 	stw	r2,28(sp)
 4005d7c:	d9800c15 	stw	r6,48(sp)
 4005d80:	e0801015 	stw	r2,64(fp)
 4005d84:	d8000315 	stw	zero,12(sp)
 4005d88:	d9c00b15 	stw	r7,44(sp)
 4005d8c:	d9800615 	stw	r6,24(sp)
 4005d90:	d8002215 	stw	zero,136(sp)
 4005d94:	d8800117 	ldw	r2,4(sp)
 4005d98:	10008916 	blt	r2,zero,4005fc0 <_dtoa_r+0x990>
 4005d9c:	d9000517 	ldw	r4,20(sp)
 4005da0:	00c00384 	movi	r3,14
 4005da4:	19008616 	blt	r3,r4,4005fc0 <_dtoa_r+0x990>
 4005da8:	200490fa 	slli	r2,r4,3
 4005dac:	00c10074 	movhi	r3,1025
 4005db0:	d9802217 	ldw	r6,136(sp)
 4005db4:	18ca9404 	addi	r3,r3,10832
 4005db8:	1885883a 	add	r2,r3,r2
 4005dbc:	14000017 	ldw	r16,0(r2)
 4005dc0:	14400117 	ldw	r17,4(r2)
 4005dc4:	30016316 	blt	r6,zero,4006354 <_dtoa_r+0xd24>
 4005dc8:	800d883a 	mov	r6,r16
 4005dcc:	880f883a 	mov	r7,r17
 4005dd0:	9009883a 	mov	r4,r18
 4005dd4:	980b883a 	mov	r5,r19
 4005dd8:	400dbfc0 	call	400dbfc <__divdf3>
 4005ddc:	180b883a 	mov	r5,r3
 4005de0:	1009883a 	mov	r4,r2
 4005de4:	400f98c0 	call	400f98c <__fixdfsi>
 4005de8:	1009883a 	mov	r4,r2
 4005dec:	102b883a 	mov	r21,r2
 4005df0:	400fa0c0 	call	400fa0c <__floatsidf>
 4005df4:	800d883a 	mov	r6,r16
 4005df8:	880f883a 	mov	r7,r17
 4005dfc:	1009883a 	mov	r4,r2
 4005e00:	180b883a 	mov	r5,r3
 4005e04:	400e8240 	call	400e824 <__muldf3>
 4005e08:	100d883a 	mov	r6,r2
 4005e0c:	180f883a 	mov	r7,r3
 4005e10:	9009883a 	mov	r4,r18
 4005e14:	980b883a 	mov	r5,r19
 4005e18:	400f0900 	call	400f090 <__subdf3>
 4005e1c:	d9c00717 	ldw	r7,28(sp)
 4005e20:	1009883a 	mov	r4,r2
 4005e24:	a8800c04 	addi	r2,r21,48
 4005e28:	38800005 	stb	r2,0(r7)
 4005e2c:	3dc00044 	addi	r23,r7,1
 4005e30:	d9c00617 	ldw	r7,24(sp)
 4005e34:	01800044 	movi	r6,1
 4005e38:	180b883a 	mov	r5,r3
 4005e3c:	2005883a 	mov	r2,r4
 4005e40:	39803826 	beq	r7,r6,4005f24 <_dtoa_r+0x8f4>
 4005e44:	000d883a 	mov	r6,zero
 4005e48:	01d00934 	movhi	r7,16420
 4005e4c:	400e8240 	call	400e824 <__muldf3>
 4005e50:	000d883a 	mov	r6,zero
 4005e54:	000f883a 	mov	r7,zero
 4005e58:	1009883a 	mov	r4,r2
 4005e5c:	180b883a 	mov	r5,r3
 4005e60:	1025883a 	mov	r18,r2
 4005e64:	1827883a 	mov	r19,r3
 4005e68:	400e5cc0 	call	400e5cc <__eqdf2>
 4005e6c:	103f9a26 	beq	r2,zero,4005cd8 <__alt_data_end+0xfc005cd8>
 4005e70:	d9c00617 	ldw	r7,24(sp)
 4005e74:	d8c00717 	ldw	r3,28(sp)
 4005e78:	b829883a 	mov	r20,r23
 4005e7c:	38bfffc4 	addi	r2,r7,-1
 4005e80:	18ad883a 	add	r22,r3,r2
 4005e84:	00000a06 	br	4005eb0 <_dtoa_r+0x880>
 4005e88:	400e8240 	call	400e824 <__muldf3>
 4005e8c:	000d883a 	mov	r6,zero
 4005e90:	000f883a 	mov	r7,zero
 4005e94:	1009883a 	mov	r4,r2
 4005e98:	180b883a 	mov	r5,r3
 4005e9c:	1025883a 	mov	r18,r2
 4005ea0:	1827883a 	mov	r19,r3
 4005ea4:	b829883a 	mov	r20,r23
 4005ea8:	400e5cc0 	call	400e5cc <__eqdf2>
 4005eac:	103f8a26 	beq	r2,zero,4005cd8 <__alt_data_end+0xfc005cd8>
 4005eb0:	800d883a 	mov	r6,r16
 4005eb4:	880f883a 	mov	r7,r17
 4005eb8:	9009883a 	mov	r4,r18
 4005ebc:	980b883a 	mov	r5,r19
 4005ec0:	400dbfc0 	call	400dbfc <__divdf3>
 4005ec4:	180b883a 	mov	r5,r3
 4005ec8:	1009883a 	mov	r4,r2
 4005ecc:	400f98c0 	call	400f98c <__fixdfsi>
 4005ed0:	1009883a 	mov	r4,r2
 4005ed4:	102b883a 	mov	r21,r2
 4005ed8:	400fa0c0 	call	400fa0c <__floatsidf>
 4005edc:	800d883a 	mov	r6,r16
 4005ee0:	880f883a 	mov	r7,r17
 4005ee4:	1009883a 	mov	r4,r2
 4005ee8:	180b883a 	mov	r5,r3
 4005eec:	400e8240 	call	400e824 <__muldf3>
 4005ef0:	100d883a 	mov	r6,r2
 4005ef4:	180f883a 	mov	r7,r3
 4005ef8:	9009883a 	mov	r4,r18
 4005efc:	980b883a 	mov	r5,r19
 4005f00:	400f0900 	call	400f090 <__subdf3>
 4005f04:	aa000c04 	addi	r8,r21,48
 4005f08:	a2000005 	stb	r8,0(r20)
 4005f0c:	000d883a 	mov	r6,zero
 4005f10:	01d00934 	movhi	r7,16420
 4005f14:	1009883a 	mov	r4,r2
 4005f18:	180b883a 	mov	r5,r3
 4005f1c:	a5c00044 	addi	r23,r20,1
 4005f20:	b53fd91e 	bne	r22,r20,4005e88 <__alt_data_end+0xfc005e88>
 4005f24:	100d883a 	mov	r6,r2
 4005f28:	180f883a 	mov	r7,r3
 4005f2c:	1009883a 	mov	r4,r2
 4005f30:	180b883a 	mov	r5,r3
 4005f34:	400d3500 	call	400d350 <__adddf3>
 4005f38:	100d883a 	mov	r6,r2
 4005f3c:	180f883a 	mov	r7,r3
 4005f40:	8009883a 	mov	r4,r16
 4005f44:	880b883a 	mov	r5,r17
 4005f48:	1027883a 	mov	r19,r2
 4005f4c:	1825883a 	mov	r18,r3
 4005f50:	400e7300 	call	400e730 <__ledf2>
 4005f54:	10000816 	blt	r2,zero,4005f78 <_dtoa_r+0x948>
 4005f58:	980d883a 	mov	r6,r19
 4005f5c:	900f883a 	mov	r7,r18
 4005f60:	8009883a 	mov	r4,r16
 4005f64:	880b883a 	mov	r5,r17
 4005f68:	400e5cc0 	call	400e5cc <__eqdf2>
 4005f6c:	103f5a1e 	bne	r2,zero,4005cd8 <__alt_data_end+0xfc005cd8>
 4005f70:	ad40004c 	andi	r21,r21,1
 4005f74:	a83f5826 	beq	r21,zero,4005cd8 <__alt_data_end+0xfc005cd8>
 4005f78:	bd3fffc3 	ldbu	r20,-1(r23)
 4005f7c:	b8bfffc4 	addi	r2,r23,-1
 4005f80:	1007883a 	mov	r3,r2
 4005f84:	01400e44 	movi	r5,57
 4005f88:	d9800717 	ldw	r6,28(sp)
 4005f8c:	00000506 	br	4005fa4 <_dtoa_r+0x974>
 4005f90:	18ffffc4 	addi	r3,r3,-1
 4005f94:	11824726 	beq	r2,r6,40068b4 <_dtoa_r+0x1284>
 4005f98:	1d000003 	ldbu	r20,0(r3)
 4005f9c:	102f883a 	mov	r23,r2
 4005fa0:	10bfffc4 	addi	r2,r2,-1
 4005fa4:	a1003fcc 	andi	r4,r20,255
 4005fa8:	2100201c 	xori	r4,r4,128
 4005fac:	213fe004 	addi	r4,r4,-128
 4005fb0:	217ff726 	beq	r4,r5,4005f90 <__alt_data_end+0xfc005f90>
 4005fb4:	a2000044 	addi	r8,r20,1
 4005fb8:	12000005 	stb	r8,0(r2)
 4005fbc:	003f4606 	br	4005cd8 <__alt_data_end+0xfc005cd8>
 4005fc0:	d9000b17 	ldw	r4,44(sp)
 4005fc4:	2000c826 	beq	r4,zero,40062e8 <_dtoa_r+0xcb8>
 4005fc8:	d9800317 	ldw	r6,12(sp)
 4005fcc:	00c00044 	movi	r3,1
 4005fd0:	1980f90e 	bge	r3,r6,40063b8 <_dtoa_r+0xd88>
 4005fd4:	d8800617 	ldw	r2,24(sp)
 4005fd8:	d8c00a17 	ldw	r3,40(sp)
 4005fdc:	157fffc4 	addi	r21,r2,-1
 4005fe0:	1d41f316 	blt	r3,r21,40067b0 <_dtoa_r+0x1180>
 4005fe4:	1d6bc83a 	sub	r21,r3,r21
 4005fe8:	d9c00617 	ldw	r7,24(sp)
 4005fec:	3802aa16 	blt	r7,zero,4006a98 <_dtoa_r+0x1468>
 4005ff0:	dd000817 	ldw	r20,32(sp)
 4005ff4:	d8800617 	ldw	r2,24(sp)
 4005ff8:	d8c00817 	ldw	r3,32(sp)
 4005ffc:	01400044 	movi	r5,1
 4006000:	e009883a 	mov	r4,fp
 4006004:	1887883a 	add	r3,r3,r2
 4006008:	d8c00815 	stw	r3,32(sp)
 400600c:	b0ad883a 	add	r22,r22,r2
 4006010:	400911c0 	call	400911c <__i2b>
 4006014:	1023883a 	mov	r17,r2
 4006018:	a0000826 	beq	r20,zero,400603c <_dtoa_r+0xa0c>
 400601c:	0580070e 	bge	zero,r22,400603c <_dtoa_r+0xa0c>
 4006020:	a005883a 	mov	r2,r20
 4006024:	b500b916 	blt	r22,r20,400630c <_dtoa_r+0xcdc>
 4006028:	d9000817 	ldw	r4,32(sp)
 400602c:	a0a9c83a 	sub	r20,r20,r2
 4006030:	b0adc83a 	sub	r22,r22,r2
 4006034:	2089c83a 	sub	r4,r4,r2
 4006038:	d9000815 	stw	r4,32(sp)
 400603c:	d9800a17 	ldw	r6,40(sp)
 4006040:	0181810e 	bge	zero,r6,4006648 <_dtoa_r+0x1018>
 4006044:	d9c00b17 	ldw	r7,44(sp)
 4006048:	3800b326 	beq	r7,zero,4006318 <_dtoa_r+0xce8>
 400604c:	a800b226 	beq	r21,zero,4006318 <_dtoa_r+0xce8>
 4006050:	880b883a 	mov	r5,r17
 4006054:	a80d883a 	mov	r6,r21
 4006058:	e009883a 	mov	r4,fp
 400605c:	40093e40 	call	40093e4 <__pow5mult>
 4006060:	d9800917 	ldw	r6,36(sp)
 4006064:	100b883a 	mov	r5,r2
 4006068:	e009883a 	mov	r4,fp
 400606c:	1023883a 	mov	r17,r2
 4006070:	40091580 	call	4009158 <__multiply>
 4006074:	1021883a 	mov	r16,r2
 4006078:	d8800a17 	ldw	r2,40(sp)
 400607c:	d9400917 	ldw	r5,36(sp)
 4006080:	e009883a 	mov	r4,fp
 4006084:	1545c83a 	sub	r2,r2,r21
 4006088:	d8800a15 	stw	r2,40(sp)
 400608c:	4008d900 	call	4008d90 <_Bfree>
 4006090:	d8c00a17 	ldw	r3,40(sp)
 4006094:	18009f1e 	bne	r3,zero,4006314 <_dtoa_r+0xce4>
 4006098:	05c00044 	movi	r23,1
 400609c:	e009883a 	mov	r4,fp
 40060a0:	b80b883a 	mov	r5,r23
 40060a4:	400911c0 	call	400911c <__i2b>
 40060a8:	d9000d17 	ldw	r4,52(sp)
 40060ac:	102b883a 	mov	r21,r2
 40060b0:	2000ce26 	beq	r4,zero,40063ec <_dtoa_r+0xdbc>
 40060b4:	200d883a 	mov	r6,r4
 40060b8:	100b883a 	mov	r5,r2
 40060bc:	e009883a 	mov	r4,fp
 40060c0:	40093e40 	call	40093e4 <__pow5mult>
 40060c4:	d9800317 	ldw	r6,12(sp)
 40060c8:	102b883a 	mov	r21,r2
 40060cc:	b981810e 	bge	r23,r6,40066d4 <_dtoa_r+0x10a4>
 40060d0:	0027883a 	mov	r19,zero
 40060d4:	a8800417 	ldw	r2,16(r21)
 40060d8:	05c00804 	movi	r23,32
 40060dc:	10800104 	addi	r2,r2,4
 40060e0:	1085883a 	add	r2,r2,r2
 40060e4:	1085883a 	add	r2,r2,r2
 40060e8:	a885883a 	add	r2,r21,r2
 40060ec:	11000017 	ldw	r4,0(r2)
 40060f0:	40090040 	call	4009004 <__hi0bits>
 40060f4:	b885c83a 	sub	r2,r23,r2
 40060f8:	1585883a 	add	r2,r2,r22
 40060fc:	108007cc 	andi	r2,r2,31
 4006100:	1000b326 	beq	r2,zero,40063d0 <_dtoa_r+0xda0>
 4006104:	00c00804 	movi	r3,32
 4006108:	1887c83a 	sub	r3,r3,r2
 400610c:	01000104 	movi	r4,4
 4006110:	20c2cd0e 	bge	r4,r3,4006c48 <_dtoa_r+0x1618>
 4006114:	00c00704 	movi	r3,28
 4006118:	1885c83a 	sub	r2,r3,r2
 400611c:	d8c00817 	ldw	r3,32(sp)
 4006120:	a0a9883a 	add	r20,r20,r2
 4006124:	b0ad883a 	add	r22,r22,r2
 4006128:	1887883a 	add	r3,r3,r2
 400612c:	d8c00815 	stw	r3,32(sp)
 4006130:	d9800817 	ldw	r6,32(sp)
 4006134:	0180040e 	bge	zero,r6,4006148 <_dtoa_r+0xb18>
 4006138:	800b883a 	mov	r5,r16
 400613c:	e009883a 	mov	r4,fp
 4006140:	40095240 	call	4009524 <__lshift>
 4006144:	1021883a 	mov	r16,r2
 4006148:	0580050e 	bge	zero,r22,4006160 <_dtoa_r+0xb30>
 400614c:	a80b883a 	mov	r5,r21
 4006150:	b00d883a 	mov	r6,r22
 4006154:	e009883a 	mov	r4,fp
 4006158:	40095240 	call	4009524 <__lshift>
 400615c:	102b883a 	mov	r21,r2
 4006160:	d9c00e17 	ldw	r7,56(sp)
 4006164:	3801211e 	bne	r7,zero,40065ec <_dtoa_r+0xfbc>
 4006168:	d9800617 	ldw	r6,24(sp)
 400616c:	0181380e 	bge	zero,r6,4006650 <_dtoa_r+0x1020>
 4006170:	d8c00b17 	ldw	r3,44(sp)
 4006174:	1800ab1e 	bne	r3,zero,4006424 <_dtoa_r+0xdf4>
 4006178:	dc800717 	ldw	r18,28(sp)
 400617c:	dcc00617 	ldw	r19,24(sp)
 4006180:	9029883a 	mov	r20,r18
 4006184:	00000206 	br	4006190 <_dtoa_r+0xb60>
 4006188:	4008db80 	call	4008db8 <__multadd>
 400618c:	1021883a 	mov	r16,r2
 4006190:	a80b883a 	mov	r5,r21
 4006194:	8009883a 	mov	r4,r16
 4006198:	40054080 	call	4005408 <quorem>
 400619c:	10800c04 	addi	r2,r2,48
 40061a0:	90800005 	stb	r2,0(r18)
 40061a4:	94800044 	addi	r18,r18,1
 40061a8:	9507c83a 	sub	r3,r18,r20
 40061ac:	000f883a 	mov	r7,zero
 40061b0:	01800284 	movi	r6,10
 40061b4:	800b883a 	mov	r5,r16
 40061b8:	e009883a 	mov	r4,fp
 40061bc:	1cfff216 	blt	r3,r19,4006188 <__alt_data_end+0xfc006188>
 40061c0:	1011883a 	mov	r8,r2
 40061c4:	d8800617 	ldw	r2,24(sp)
 40061c8:	0082370e 	bge	zero,r2,4006aa8 <_dtoa_r+0x1478>
 40061cc:	d9000717 	ldw	r4,28(sp)
 40061d0:	0025883a 	mov	r18,zero
 40061d4:	20af883a 	add	r23,r4,r2
 40061d8:	01800044 	movi	r6,1
 40061dc:	800b883a 	mov	r5,r16
 40061e0:	e009883a 	mov	r4,fp
 40061e4:	da001715 	stw	r8,92(sp)
 40061e8:	40095240 	call	4009524 <__lshift>
 40061ec:	a80b883a 	mov	r5,r21
 40061f0:	1009883a 	mov	r4,r2
 40061f4:	d8800915 	stw	r2,36(sp)
 40061f8:	400966c0 	call	400966c <__mcmp>
 40061fc:	da001717 	ldw	r8,92(sp)
 4006200:	0081800e 	bge	zero,r2,4006804 <_dtoa_r+0x11d4>
 4006204:	b93fffc3 	ldbu	r4,-1(r23)
 4006208:	b8bfffc4 	addi	r2,r23,-1
 400620c:	1007883a 	mov	r3,r2
 4006210:	01800e44 	movi	r6,57
 4006214:	d9c00717 	ldw	r7,28(sp)
 4006218:	00000506 	br	4006230 <_dtoa_r+0xc00>
 400621c:	18ffffc4 	addi	r3,r3,-1
 4006220:	11c12326 	beq	r2,r7,40066b0 <_dtoa_r+0x1080>
 4006224:	19000003 	ldbu	r4,0(r3)
 4006228:	102f883a 	mov	r23,r2
 400622c:	10bfffc4 	addi	r2,r2,-1
 4006230:	21403fcc 	andi	r5,r4,255
 4006234:	2940201c 	xori	r5,r5,128
 4006238:	297fe004 	addi	r5,r5,-128
 400623c:	29bff726 	beq	r5,r6,400621c <__alt_data_end+0xfc00621c>
 4006240:	21000044 	addi	r4,r4,1
 4006244:	11000005 	stb	r4,0(r2)
 4006248:	a80b883a 	mov	r5,r21
 400624c:	e009883a 	mov	r4,fp
 4006250:	4008d900 	call	4008d90 <_Bfree>
 4006254:	883ea026 	beq	r17,zero,4005cd8 <__alt_data_end+0xfc005cd8>
 4006258:	90000426 	beq	r18,zero,400626c <_dtoa_r+0xc3c>
 400625c:	94400326 	beq	r18,r17,400626c <_dtoa_r+0xc3c>
 4006260:	900b883a 	mov	r5,r18
 4006264:	e009883a 	mov	r4,fp
 4006268:	4008d900 	call	4008d90 <_Bfree>
 400626c:	880b883a 	mov	r5,r17
 4006270:	e009883a 	mov	r4,fp
 4006274:	4008d900 	call	4008d90 <_Bfree>
 4006278:	003e9706 	br	4005cd8 <__alt_data_end+0xfc005cd8>
 400627c:	01800044 	movi	r6,1
 4006280:	d9800e15 	stw	r6,56(sp)
 4006284:	003d9606 	br	40058e0 <__alt_data_end+0xfc0058e0>
 4006288:	d8800817 	ldw	r2,32(sp)
 400628c:	d8c00517 	ldw	r3,20(sp)
 4006290:	d8000d15 	stw	zero,52(sp)
 4006294:	10c5c83a 	sub	r2,r2,r3
 4006298:	00c9c83a 	sub	r4,zero,r3
 400629c:	d8800815 	stw	r2,32(sp)
 40062a0:	d9000a15 	stw	r4,40(sp)
 40062a4:	003d9706 	br	4005904 <__alt_data_end+0xfc005904>
 40062a8:	05adc83a 	sub	r22,zero,r22
 40062ac:	dd800815 	stw	r22,32(sp)
 40062b0:	002d883a 	mov	r22,zero
 40062b4:	003d8e06 	br	40058f0 <__alt_data_end+0xfc0058f0>
 40062b8:	d9000517 	ldw	r4,20(sp)
 40062bc:	400fa0c0 	call	400fa0c <__floatsidf>
 40062c0:	100d883a 	mov	r6,r2
 40062c4:	180f883a 	mov	r7,r3
 40062c8:	a009883a 	mov	r4,r20
 40062cc:	880b883a 	mov	r5,r17
 40062d0:	400e5cc0 	call	400e5cc <__eqdf2>
 40062d4:	103d7126 	beq	r2,zero,400589c <__alt_data_end+0xfc00589c>
 40062d8:	d9c00517 	ldw	r7,20(sp)
 40062dc:	39ffffc4 	addi	r7,r7,-1
 40062e0:	d9c00515 	stw	r7,20(sp)
 40062e4:	003d6d06 	br	400589c <__alt_data_end+0xfc00589c>
 40062e8:	dd400a17 	ldw	r21,40(sp)
 40062ec:	dd000817 	ldw	r20,32(sp)
 40062f0:	0023883a 	mov	r17,zero
 40062f4:	003f4806 	br	4006018 <__alt_data_end+0xfc006018>
 40062f8:	10e3c83a 	sub	r17,r2,r3
 40062fc:	9448983a 	sll	r4,r18,r17
 4006300:	003d3206 	br	40057cc <__alt_data_end+0xfc0057cc>
 4006304:	d8000e15 	stw	zero,56(sp)
 4006308:	003d7506 	br	40058e0 <__alt_data_end+0xfc0058e0>
 400630c:	b005883a 	mov	r2,r22
 4006310:	003f4506 	br	4006028 <__alt_data_end+0xfc006028>
 4006314:	dc000915 	stw	r16,36(sp)
 4006318:	d9800a17 	ldw	r6,40(sp)
 400631c:	d9400917 	ldw	r5,36(sp)
 4006320:	e009883a 	mov	r4,fp
 4006324:	40093e40 	call	40093e4 <__pow5mult>
 4006328:	1021883a 	mov	r16,r2
 400632c:	003f5a06 	br	4006098 <__alt_data_end+0xfc006098>
 4006330:	01c00044 	movi	r7,1
 4006334:	d9c00b15 	stw	r7,44(sp)
 4006338:	d8802217 	ldw	r2,136(sp)
 400633c:	0081280e 	bge	zero,r2,40067e0 <_dtoa_r+0x11b0>
 4006340:	100d883a 	mov	r6,r2
 4006344:	1021883a 	mov	r16,r2
 4006348:	d8800c15 	stw	r2,48(sp)
 400634c:	d8800615 	stw	r2,24(sp)
 4006350:	003d8806 	br	4005974 <__alt_data_end+0xfc005974>
 4006354:	d8800617 	ldw	r2,24(sp)
 4006358:	00be9b16 	blt	zero,r2,4005dc8 <__alt_data_end+0xfc005dc8>
 400635c:	10010f1e 	bne	r2,zero,400679c <_dtoa_r+0x116c>
 4006360:	880b883a 	mov	r5,r17
 4006364:	000d883a 	mov	r6,zero
 4006368:	01d00534 	movhi	r7,16404
 400636c:	8009883a 	mov	r4,r16
 4006370:	400e8240 	call	400e824 <__muldf3>
 4006374:	900d883a 	mov	r6,r18
 4006378:	980f883a 	mov	r7,r19
 400637c:	1009883a 	mov	r4,r2
 4006380:	180b883a 	mov	r5,r3
 4006384:	400e6540 	call	400e654 <__gedf2>
 4006388:	002b883a 	mov	r21,zero
 400638c:	0023883a 	mov	r17,zero
 4006390:	1000bf16 	blt	r2,zero,4006690 <_dtoa_r+0x1060>
 4006394:	d9802217 	ldw	r6,136(sp)
 4006398:	ddc00717 	ldw	r23,28(sp)
 400639c:	018c303a 	nor	r6,zero,r6
 40063a0:	d9800515 	stw	r6,20(sp)
 40063a4:	a80b883a 	mov	r5,r21
 40063a8:	e009883a 	mov	r4,fp
 40063ac:	4008d900 	call	4008d90 <_Bfree>
 40063b0:	883e4926 	beq	r17,zero,4005cd8 <__alt_data_end+0xfc005cd8>
 40063b4:	003fad06 	br	400626c <__alt_data_end+0xfc00626c>
 40063b8:	d9c01117 	ldw	r7,68(sp)
 40063bc:	3801bc26 	beq	r7,zero,4006ab0 <_dtoa_r+0x1480>
 40063c0:	10810cc4 	addi	r2,r2,1075
 40063c4:	dd400a17 	ldw	r21,40(sp)
 40063c8:	dd000817 	ldw	r20,32(sp)
 40063cc:	003f0a06 	br	4005ff8 <__alt_data_end+0xfc005ff8>
 40063d0:	00800704 	movi	r2,28
 40063d4:	d9000817 	ldw	r4,32(sp)
 40063d8:	a0a9883a 	add	r20,r20,r2
 40063dc:	b0ad883a 	add	r22,r22,r2
 40063e0:	2089883a 	add	r4,r4,r2
 40063e4:	d9000815 	stw	r4,32(sp)
 40063e8:	003f5106 	br	4006130 <__alt_data_end+0xfc006130>
 40063ec:	d8c00317 	ldw	r3,12(sp)
 40063f0:	b8c1fc0e 	bge	r23,r3,4006be4 <_dtoa_r+0x15b4>
 40063f4:	0027883a 	mov	r19,zero
 40063f8:	b805883a 	mov	r2,r23
 40063fc:	003f3e06 	br	40060f8 <__alt_data_end+0xfc0060f8>
 4006400:	880b883a 	mov	r5,r17
 4006404:	e009883a 	mov	r4,fp
 4006408:	000f883a 	mov	r7,zero
 400640c:	01800284 	movi	r6,10
 4006410:	4008db80 	call	4008db8 <__multadd>
 4006414:	d9000c17 	ldw	r4,48(sp)
 4006418:	1023883a 	mov	r17,r2
 400641c:	0102040e 	bge	zero,r4,4006c30 <_dtoa_r+0x1600>
 4006420:	d9000615 	stw	r4,24(sp)
 4006424:	0500050e 	bge	zero,r20,400643c <_dtoa_r+0xe0c>
 4006428:	880b883a 	mov	r5,r17
 400642c:	a00d883a 	mov	r6,r20
 4006430:	e009883a 	mov	r4,fp
 4006434:	40095240 	call	4009524 <__lshift>
 4006438:	1023883a 	mov	r17,r2
 400643c:	9801241e 	bne	r19,zero,40068d0 <_dtoa_r+0x12a0>
 4006440:	8829883a 	mov	r20,r17
 4006444:	d9000617 	ldw	r4,24(sp)
 4006448:	dcc00717 	ldw	r19,28(sp)
 400644c:	9480004c 	andi	r18,r18,1
 4006450:	20bfffc4 	addi	r2,r4,-1
 4006454:	9885883a 	add	r2,r19,r2
 4006458:	d8800415 	stw	r2,16(sp)
 400645c:	dc800615 	stw	r18,24(sp)
 4006460:	a80b883a 	mov	r5,r21
 4006464:	8009883a 	mov	r4,r16
 4006468:	40054080 	call	4005408 <quorem>
 400646c:	880b883a 	mov	r5,r17
 4006470:	8009883a 	mov	r4,r16
 4006474:	102f883a 	mov	r23,r2
 4006478:	400966c0 	call	400966c <__mcmp>
 400647c:	a80b883a 	mov	r5,r21
 4006480:	a00d883a 	mov	r6,r20
 4006484:	e009883a 	mov	r4,fp
 4006488:	102d883a 	mov	r22,r2
 400648c:	40096cc0 	call	40096cc <__mdiff>
 4006490:	1007883a 	mov	r3,r2
 4006494:	10800317 	ldw	r2,12(r2)
 4006498:	bc800c04 	addi	r18,r23,48
 400649c:	180b883a 	mov	r5,r3
 40064a0:	10004e1e 	bne	r2,zero,40065dc <_dtoa_r+0xfac>
 40064a4:	8009883a 	mov	r4,r16
 40064a8:	d8c01615 	stw	r3,88(sp)
 40064ac:	400966c0 	call	400966c <__mcmp>
 40064b0:	d8c01617 	ldw	r3,88(sp)
 40064b4:	e009883a 	mov	r4,fp
 40064b8:	d8801615 	stw	r2,88(sp)
 40064bc:	180b883a 	mov	r5,r3
 40064c0:	4008d900 	call	4008d90 <_Bfree>
 40064c4:	d8801617 	ldw	r2,88(sp)
 40064c8:	1000041e 	bne	r2,zero,40064dc <_dtoa_r+0xeac>
 40064cc:	d9800317 	ldw	r6,12(sp)
 40064d0:	3000021e 	bne	r6,zero,40064dc <_dtoa_r+0xeac>
 40064d4:	d8c00617 	ldw	r3,24(sp)
 40064d8:	18003726 	beq	r3,zero,40065b8 <_dtoa_r+0xf88>
 40064dc:	b0002016 	blt	r22,zero,4006560 <_dtoa_r+0xf30>
 40064e0:	b000041e 	bne	r22,zero,40064f4 <_dtoa_r+0xec4>
 40064e4:	d9000317 	ldw	r4,12(sp)
 40064e8:	2000021e 	bne	r4,zero,40064f4 <_dtoa_r+0xec4>
 40064ec:	d8c00617 	ldw	r3,24(sp)
 40064f0:	18001b26 	beq	r3,zero,4006560 <_dtoa_r+0xf30>
 40064f4:	00810716 	blt	zero,r2,4006914 <_dtoa_r+0x12e4>
 40064f8:	d8c00417 	ldw	r3,16(sp)
 40064fc:	9d800044 	addi	r22,r19,1
 4006500:	9c800005 	stb	r18,0(r19)
 4006504:	b02f883a 	mov	r23,r22
 4006508:	98c10626 	beq	r19,r3,4006924 <_dtoa_r+0x12f4>
 400650c:	800b883a 	mov	r5,r16
 4006510:	000f883a 	mov	r7,zero
 4006514:	01800284 	movi	r6,10
 4006518:	e009883a 	mov	r4,fp
 400651c:	4008db80 	call	4008db8 <__multadd>
 4006520:	1021883a 	mov	r16,r2
 4006524:	000f883a 	mov	r7,zero
 4006528:	01800284 	movi	r6,10
 400652c:	880b883a 	mov	r5,r17
 4006530:	e009883a 	mov	r4,fp
 4006534:	8d002526 	beq	r17,r20,40065cc <_dtoa_r+0xf9c>
 4006538:	4008db80 	call	4008db8 <__multadd>
 400653c:	a00b883a 	mov	r5,r20
 4006540:	000f883a 	mov	r7,zero
 4006544:	01800284 	movi	r6,10
 4006548:	e009883a 	mov	r4,fp
 400654c:	1023883a 	mov	r17,r2
 4006550:	4008db80 	call	4008db8 <__multadd>
 4006554:	1029883a 	mov	r20,r2
 4006558:	b027883a 	mov	r19,r22
 400655c:	003fc006 	br	4006460 <__alt_data_end+0xfc006460>
 4006560:	9011883a 	mov	r8,r18
 4006564:	00800e0e 	bge	zero,r2,40065a0 <_dtoa_r+0xf70>
 4006568:	800b883a 	mov	r5,r16
 400656c:	01800044 	movi	r6,1
 4006570:	e009883a 	mov	r4,fp
 4006574:	da001715 	stw	r8,92(sp)
 4006578:	40095240 	call	4009524 <__lshift>
 400657c:	a80b883a 	mov	r5,r21
 4006580:	1009883a 	mov	r4,r2
 4006584:	1021883a 	mov	r16,r2
 4006588:	400966c0 	call	400966c <__mcmp>
 400658c:	da001717 	ldw	r8,92(sp)
 4006590:	0081960e 	bge	zero,r2,4006bec <_dtoa_r+0x15bc>
 4006594:	00800e44 	movi	r2,57
 4006598:	40817026 	beq	r8,r2,4006b5c <_dtoa_r+0x152c>
 400659c:	ba000c44 	addi	r8,r23,49
 40065a0:	8825883a 	mov	r18,r17
 40065a4:	9dc00044 	addi	r23,r19,1
 40065a8:	9a000005 	stb	r8,0(r19)
 40065ac:	a023883a 	mov	r17,r20
 40065b0:	dc000915 	stw	r16,36(sp)
 40065b4:	003f2406 	br	4006248 <__alt_data_end+0xfc006248>
 40065b8:	00800e44 	movi	r2,57
 40065bc:	9011883a 	mov	r8,r18
 40065c0:	90816626 	beq	r18,r2,4006b5c <_dtoa_r+0x152c>
 40065c4:	05bff516 	blt	zero,r22,400659c <__alt_data_end+0xfc00659c>
 40065c8:	003ff506 	br	40065a0 <__alt_data_end+0xfc0065a0>
 40065cc:	4008db80 	call	4008db8 <__multadd>
 40065d0:	1023883a 	mov	r17,r2
 40065d4:	1029883a 	mov	r20,r2
 40065d8:	003fdf06 	br	4006558 <__alt_data_end+0xfc006558>
 40065dc:	e009883a 	mov	r4,fp
 40065e0:	4008d900 	call	4008d90 <_Bfree>
 40065e4:	00800044 	movi	r2,1
 40065e8:	003fbc06 	br	40064dc <__alt_data_end+0xfc0064dc>
 40065ec:	a80b883a 	mov	r5,r21
 40065f0:	8009883a 	mov	r4,r16
 40065f4:	400966c0 	call	400966c <__mcmp>
 40065f8:	103edb0e 	bge	r2,zero,4006168 <__alt_data_end+0xfc006168>
 40065fc:	800b883a 	mov	r5,r16
 4006600:	000f883a 	mov	r7,zero
 4006604:	01800284 	movi	r6,10
 4006608:	e009883a 	mov	r4,fp
 400660c:	4008db80 	call	4008db8 <__multadd>
 4006610:	1021883a 	mov	r16,r2
 4006614:	d8800517 	ldw	r2,20(sp)
 4006618:	d8c00b17 	ldw	r3,44(sp)
 400661c:	10bfffc4 	addi	r2,r2,-1
 4006620:	d8800515 	stw	r2,20(sp)
 4006624:	183f761e 	bne	r3,zero,4006400 <__alt_data_end+0xfc006400>
 4006628:	d9000c17 	ldw	r4,48(sp)
 400662c:	0101730e 	bge	zero,r4,4006bfc <_dtoa_r+0x15cc>
 4006630:	d9000615 	stw	r4,24(sp)
 4006634:	003ed006 	br	4006178 <__alt_data_end+0xfc006178>
 4006638:	00800084 	movi	r2,2
 400663c:	3081861e 	bne	r6,r2,4006c58 <_dtoa_r+0x1628>
 4006640:	d8000b15 	stw	zero,44(sp)
 4006644:	003f3c06 	br	4006338 <__alt_data_end+0xfc006338>
 4006648:	dc000917 	ldw	r16,36(sp)
 400664c:	003e9206 	br	4006098 <__alt_data_end+0xfc006098>
 4006650:	d9c00317 	ldw	r7,12(sp)
 4006654:	00800084 	movi	r2,2
 4006658:	11fec50e 	bge	r2,r7,4006170 <__alt_data_end+0xfc006170>
 400665c:	d9000617 	ldw	r4,24(sp)
 4006660:	20013c1e 	bne	r4,zero,4006b54 <_dtoa_r+0x1524>
 4006664:	a80b883a 	mov	r5,r21
 4006668:	000f883a 	mov	r7,zero
 400666c:	01800144 	movi	r6,5
 4006670:	e009883a 	mov	r4,fp
 4006674:	4008db80 	call	4008db8 <__multadd>
 4006678:	100b883a 	mov	r5,r2
 400667c:	8009883a 	mov	r4,r16
 4006680:	102b883a 	mov	r21,r2
 4006684:	400966c0 	call	400966c <__mcmp>
 4006688:	dc000915 	stw	r16,36(sp)
 400668c:	00bf410e 	bge	zero,r2,4006394 <__alt_data_end+0xfc006394>
 4006690:	d9c00717 	ldw	r7,28(sp)
 4006694:	00800c44 	movi	r2,49
 4006698:	38800005 	stb	r2,0(r7)
 400669c:	d8800517 	ldw	r2,20(sp)
 40066a0:	3dc00044 	addi	r23,r7,1
 40066a4:	10800044 	addi	r2,r2,1
 40066a8:	d8800515 	stw	r2,20(sp)
 40066ac:	003f3d06 	br	40063a4 <__alt_data_end+0xfc0063a4>
 40066b0:	d9800517 	ldw	r6,20(sp)
 40066b4:	d9c00717 	ldw	r7,28(sp)
 40066b8:	00800c44 	movi	r2,49
 40066bc:	31800044 	addi	r6,r6,1
 40066c0:	d9800515 	stw	r6,20(sp)
 40066c4:	38800005 	stb	r2,0(r7)
 40066c8:	003edf06 	br	4006248 <__alt_data_end+0xfc006248>
 40066cc:	d8000b15 	stw	zero,44(sp)
 40066d0:	003c9f06 	br	4005950 <__alt_data_end+0xfc005950>
 40066d4:	903e7e1e 	bne	r18,zero,40060d0 <__alt_data_end+0xfc0060d0>
 40066d8:	00800434 	movhi	r2,16
 40066dc:	10bfffc4 	addi	r2,r2,-1
 40066e0:	9884703a 	and	r2,r19,r2
 40066e4:	1000ea1e 	bne	r2,zero,4006a90 <_dtoa_r+0x1460>
 40066e8:	9cdffc2c 	andhi	r19,r19,32752
 40066ec:	9800e826 	beq	r19,zero,4006a90 <_dtoa_r+0x1460>
 40066f0:	d9c00817 	ldw	r7,32(sp)
 40066f4:	b5800044 	addi	r22,r22,1
 40066f8:	04c00044 	movi	r19,1
 40066fc:	39c00044 	addi	r7,r7,1
 4006700:	d9c00815 	stw	r7,32(sp)
 4006704:	d8800d17 	ldw	r2,52(sp)
 4006708:	103e721e 	bne	r2,zero,40060d4 <__alt_data_end+0xfc0060d4>
 400670c:	00800044 	movi	r2,1
 4006710:	003e7906 	br	40060f8 <__alt_data_end+0xfc0060f8>
 4006714:	8009883a 	mov	r4,r16
 4006718:	400fa0c0 	call	400fa0c <__floatsidf>
 400671c:	d9800f17 	ldw	r6,60(sp)
 4006720:	d9c01017 	ldw	r7,64(sp)
 4006724:	1009883a 	mov	r4,r2
 4006728:	180b883a 	mov	r5,r3
 400672c:	400e8240 	call	400e824 <__muldf3>
 4006730:	000d883a 	mov	r6,zero
 4006734:	01d00734 	movhi	r7,16412
 4006738:	1009883a 	mov	r4,r2
 400673c:	180b883a 	mov	r5,r3
 4006740:	400d3500 	call	400d350 <__adddf3>
 4006744:	047f3034 	movhi	r17,64704
 4006748:	1021883a 	mov	r16,r2
 400674c:	1c63883a 	add	r17,r3,r17
 4006750:	d9000f17 	ldw	r4,60(sp)
 4006754:	d9401017 	ldw	r5,64(sp)
 4006758:	000d883a 	mov	r6,zero
 400675c:	01d00534 	movhi	r7,16404
 4006760:	400f0900 	call	400f090 <__subdf3>
 4006764:	800d883a 	mov	r6,r16
 4006768:	880f883a 	mov	r7,r17
 400676c:	1009883a 	mov	r4,r2
 4006770:	180b883a 	mov	r5,r3
 4006774:	102b883a 	mov	r21,r2
 4006778:	1829883a 	mov	r20,r3
 400677c:	400e6540 	call	400e654 <__gedf2>
 4006780:	00806c16 	blt	zero,r2,4006934 <_dtoa_r+0x1304>
 4006784:	89e0003c 	xorhi	r7,r17,32768
 4006788:	800d883a 	mov	r6,r16
 400678c:	a809883a 	mov	r4,r21
 4006790:	a00b883a 	mov	r5,r20
 4006794:	400e7300 	call	400e730 <__ledf2>
 4006798:	103d7e0e 	bge	r2,zero,4005d94 <__alt_data_end+0xfc005d94>
 400679c:	002b883a 	mov	r21,zero
 40067a0:	0023883a 	mov	r17,zero
 40067a4:	003efb06 	br	4006394 <__alt_data_end+0xfc006394>
 40067a8:	d8800717 	ldw	r2,28(sp)
 40067ac:	003bd006 	br	40056f0 <__alt_data_end+0xfc0056f0>
 40067b0:	d9000a17 	ldw	r4,40(sp)
 40067b4:	d9800d17 	ldw	r6,52(sp)
 40067b8:	dd400a15 	stw	r21,40(sp)
 40067bc:	a905c83a 	sub	r2,r21,r4
 40067c0:	308d883a 	add	r6,r6,r2
 40067c4:	d9800d15 	stw	r6,52(sp)
 40067c8:	002b883a 	mov	r21,zero
 40067cc:	003e0606 	br	4005fe8 <__alt_data_end+0xfc005fe8>
 40067d0:	9023883a 	mov	r17,r18
 40067d4:	9829883a 	mov	r20,r19
 40067d8:	04000084 	movi	r16,2
 40067dc:	003c9206 	br	4005a28 <__alt_data_end+0xfc005a28>
 40067e0:	04000044 	movi	r16,1
 40067e4:	dc000c15 	stw	r16,48(sp)
 40067e8:	dc000615 	stw	r16,24(sp)
 40067ec:	dc002215 	stw	r16,136(sp)
 40067f0:	e0001115 	stw	zero,68(fp)
 40067f4:	000b883a 	mov	r5,zero
 40067f8:	003c6906 	br	40059a0 <__alt_data_end+0xfc0059a0>
 40067fc:	3021883a 	mov	r16,r6
 4006800:	003ffb06 	br	40067f0 <__alt_data_end+0xfc0067f0>
 4006804:	1000021e 	bne	r2,zero,4006810 <_dtoa_r+0x11e0>
 4006808:	4200004c 	andi	r8,r8,1
 400680c:	403e7d1e 	bne	r8,zero,4006204 <__alt_data_end+0xfc006204>
 4006810:	01000c04 	movi	r4,48
 4006814:	00000106 	br	400681c <_dtoa_r+0x11ec>
 4006818:	102f883a 	mov	r23,r2
 400681c:	b8bfffc4 	addi	r2,r23,-1
 4006820:	10c00007 	ldb	r3,0(r2)
 4006824:	193ffc26 	beq	r3,r4,4006818 <__alt_data_end+0xfc006818>
 4006828:	003e8706 	br	4006248 <__alt_data_end+0xfc006248>
 400682c:	d8800517 	ldw	r2,20(sp)
 4006830:	00a3c83a 	sub	r17,zero,r2
 4006834:	8800a426 	beq	r17,zero,4006ac8 <_dtoa_r+0x1498>
 4006838:	888003cc 	andi	r2,r17,15
 400683c:	100490fa 	slli	r2,r2,3
 4006840:	00c10074 	movhi	r3,1025
 4006844:	18ca9404 	addi	r3,r3,10832
 4006848:	1885883a 	add	r2,r3,r2
 400684c:	11800017 	ldw	r6,0(r2)
 4006850:	11c00117 	ldw	r7,4(r2)
 4006854:	9009883a 	mov	r4,r18
 4006858:	980b883a 	mov	r5,r19
 400685c:	8823d13a 	srai	r17,r17,4
 4006860:	400e8240 	call	400e824 <__muldf3>
 4006864:	d8800f15 	stw	r2,60(sp)
 4006868:	d8c01015 	stw	r3,64(sp)
 400686c:	8800e826 	beq	r17,zero,4006c10 <_dtoa_r+0x15e0>
 4006870:	05010074 	movhi	r20,1025
 4006874:	a50a8a04 	addi	r20,r20,10792
 4006878:	04000084 	movi	r16,2
 400687c:	8980004c 	andi	r6,r17,1
 4006880:	1009883a 	mov	r4,r2
 4006884:	8823d07a 	srai	r17,r17,1
 4006888:	180b883a 	mov	r5,r3
 400688c:	30000426 	beq	r6,zero,40068a0 <_dtoa_r+0x1270>
 4006890:	a1800017 	ldw	r6,0(r20)
 4006894:	a1c00117 	ldw	r7,4(r20)
 4006898:	84000044 	addi	r16,r16,1
 400689c:	400e8240 	call	400e824 <__muldf3>
 40068a0:	a5000204 	addi	r20,r20,8
 40068a4:	883ff51e 	bne	r17,zero,400687c <__alt_data_end+0xfc00687c>
 40068a8:	d8800f15 	stw	r2,60(sp)
 40068ac:	d8c01015 	stw	r3,64(sp)
 40068b0:	003c7606 	br	4005a8c <__alt_data_end+0xfc005a8c>
 40068b4:	00c00c04 	movi	r3,48
 40068b8:	10c00005 	stb	r3,0(r2)
 40068bc:	d8c00517 	ldw	r3,20(sp)
 40068c0:	bd3fffc3 	ldbu	r20,-1(r23)
 40068c4:	18c00044 	addi	r3,r3,1
 40068c8:	d8c00515 	stw	r3,20(sp)
 40068cc:	003db906 	br	4005fb4 <__alt_data_end+0xfc005fb4>
 40068d0:	89400117 	ldw	r5,4(r17)
 40068d4:	e009883a 	mov	r4,fp
 40068d8:	4008ce80 	call	4008ce8 <_Balloc>
 40068dc:	89800417 	ldw	r6,16(r17)
 40068e0:	89400304 	addi	r5,r17,12
 40068e4:	11000304 	addi	r4,r2,12
 40068e8:	31800084 	addi	r6,r6,2
 40068ec:	318d883a 	add	r6,r6,r6
 40068f0:	318d883a 	add	r6,r6,r6
 40068f4:	1027883a 	mov	r19,r2
 40068f8:	400891c0 	call	400891c <memcpy>
 40068fc:	01800044 	movi	r6,1
 4006900:	980b883a 	mov	r5,r19
 4006904:	e009883a 	mov	r4,fp
 4006908:	40095240 	call	4009524 <__lshift>
 400690c:	1029883a 	mov	r20,r2
 4006910:	003ecc06 	br	4006444 <__alt_data_end+0xfc006444>
 4006914:	00800e44 	movi	r2,57
 4006918:	90809026 	beq	r18,r2,4006b5c <_dtoa_r+0x152c>
 400691c:	92000044 	addi	r8,r18,1
 4006920:	003f1f06 	br	40065a0 <__alt_data_end+0xfc0065a0>
 4006924:	9011883a 	mov	r8,r18
 4006928:	8825883a 	mov	r18,r17
 400692c:	a023883a 	mov	r17,r20
 4006930:	003e2906 	br	40061d8 <__alt_data_end+0xfc0061d8>
 4006934:	002b883a 	mov	r21,zero
 4006938:	0023883a 	mov	r17,zero
 400693c:	003f5406 	br	4006690 <__alt_data_end+0xfc006690>
 4006940:	61bfffc4 	addi	r6,r12,-1
 4006944:	300490fa 	slli	r2,r6,3
 4006948:	00c10074 	movhi	r3,1025
 400694c:	18ca9404 	addi	r3,r3,10832
 4006950:	1885883a 	add	r2,r3,r2
 4006954:	11000017 	ldw	r4,0(r2)
 4006958:	11400117 	ldw	r5,4(r2)
 400695c:	d8800717 	ldw	r2,28(sp)
 4006960:	880f883a 	mov	r7,r17
 4006964:	d9801215 	stw	r6,72(sp)
 4006968:	800d883a 	mov	r6,r16
 400696c:	db001615 	stw	r12,88(sp)
 4006970:	15c00044 	addi	r23,r2,1
 4006974:	400e8240 	call	400e824 <__muldf3>
 4006978:	d9401017 	ldw	r5,64(sp)
 400697c:	d9000f17 	ldw	r4,60(sp)
 4006980:	d8c01515 	stw	r3,84(sp)
 4006984:	d8801415 	stw	r2,80(sp)
 4006988:	400f98c0 	call	400f98c <__fixdfsi>
 400698c:	1009883a 	mov	r4,r2
 4006990:	1021883a 	mov	r16,r2
 4006994:	400fa0c0 	call	400fa0c <__floatsidf>
 4006998:	d9000f17 	ldw	r4,60(sp)
 400699c:	d9401017 	ldw	r5,64(sp)
 40069a0:	100d883a 	mov	r6,r2
 40069a4:	180f883a 	mov	r7,r3
 40069a8:	400f0900 	call	400f090 <__subdf3>
 40069ac:	1829883a 	mov	r20,r3
 40069b0:	d8c00717 	ldw	r3,28(sp)
 40069b4:	84000c04 	addi	r16,r16,48
 40069b8:	1023883a 	mov	r17,r2
 40069bc:	1c000005 	stb	r16,0(r3)
 40069c0:	db001617 	ldw	r12,88(sp)
 40069c4:	00800044 	movi	r2,1
 40069c8:	60802226 	beq	r12,r2,4006a54 <_dtoa_r+0x1424>
 40069cc:	d9c00717 	ldw	r7,28(sp)
 40069d0:	8805883a 	mov	r2,r17
 40069d4:	b82b883a 	mov	r21,r23
 40069d8:	3b19883a 	add	r12,r7,r12
 40069dc:	6023883a 	mov	r17,r12
 40069e0:	a007883a 	mov	r3,r20
 40069e4:	dc800f15 	stw	r18,60(sp)
 40069e8:	000d883a 	mov	r6,zero
 40069ec:	01d00934 	movhi	r7,16420
 40069f0:	1009883a 	mov	r4,r2
 40069f4:	180b883a 	mov	r5,r3
 40069f8:	400e8240 	call	400e824 <__muldf3>
 40069fc:	180b883a 	mov	r5,r3
 4006a00:	1009883a 	mov	r4,r2
 4006a04:	1829883a 	mov	r20,r3
 4006a08:	1025883a 	mov	r18,r2
 4006a0c:	400f98c0 	call	400f98c <__fixdfsi>
 4006a10:	1009883a 	mov	r4,r2
 4006a14:	1021883a 	mov	r16,r2
 4006a18:	400fa0c0 	call	400fa0c <__floatsidf>
 4006a1c:	100d883a 	mov	r6,r2
 4006a20:	180f883a 	mov	r7,r3
 4006a24:	9009883a 	mov	r4,r18
 4006a28:	a00b883a 	mov	r5,r20
 4006a2c:	84000c04 	addi	r16,r16,48
 4006a30:	400f0900 	call	400f090 <__subdf3>
 4006a34:	ad400044 	addi	r21,r21,1
 4006a38:	ac3fffc5 	stb	r16,-1(r21)
 4006a3c:	ac7fea1e 	bne	r21,r17,40069e8 <__alt_data_end+0xfc0069e8>
 4006a40:	1023883a 	mov	r17,r2
 4006a44:	d8801217 	ldw	r2,72(sp)
 4006a48:	dc800f17 	ldw	r18,60(sp)
 4006a4c:	1829883a 	mov	r20,r3
 4006a50:	b8af883a 	add	r23,r23,r2
 4006a54:	d9001417 	ldw	r4,80(sp)
 4006a58:	d9401517 	ldw	r5,84(sp)
 4006a5c:	000d883a 	mov	r6,zero
 4006a60:	01cff834 	movhi	r7,16352
 4006a64:	400d3500 	call	400d350 <__adddf3>
 4006a68:	880d883a 	mov	r6,r17
 4006a6c:	a00f883a 	mov	r7,r20
 4006a70:	1009883a 	mov	r4,r2
 4006a74:	180b883a 	mov	r5,r3
 4006a78:	400e7300 	call	400e730 <__ledf2>
 4006a7c:	10003e0e 	bge	r2,zero,4006b78 <_dtoa_r+0x1548>
 4006a80:	d9001317 	ldw	r4,76(sp)
 4006a84:	bd3fffc3 	ldbu	r20,-1(r23)
 4006a88:	d9000515 	stw	r4,20(sp)
 4006a8c:	003d3b06 	br	4005f7c <__alt_data_end+0xfc005f7c>
 4006a90:	0027883a 	mov	r19,zero
 4006a94:	003f1b06 	br	4006704 <__alt_data_end+0xfc006704>
 4006a98:	d8800817 	ldw	r2,32(sp)
 4006a9c:	11e9c83a 	sub	r20,r2,r7
 4006aa0:	0005883a 	mov	r2,zero
 4006aa4:	003d5406 	br	4005ff8 <__alt_data_end+0xfc005ff8>
 4006aa8:	00800044 	movi	r2,1
 4006aac:	003dc706 	br	40061cc <__alt_data_end+0xfc0061cc>
 4006ab0:	d8c00217 	ldw	r3,8(sp)
 4006ab4:	00800d84 	movi	r2,54
 4006ab8:	dd400a17 	ldw	r21,40(sp)
 4006abc:	10c5c83a 	sub	r2,r2,r3
 4006ac0:	dd000817 	ldw	r20,32(sp)
 4006ac4:	003d4c06 	br	4005ff8 <__alt_data_end+0xfc005ff8>
 4006ac8:	dc800f15 	stw	r18,60(sp)
 4006acc:	dcc01015 	stw	r19,64(sp)
 4006ad0:	04000084 	movi	r16,2
 4006ad4:	003bed06 	br	4005a8c <__alt_data_end+0xfc005a8c>
 4006ad8:	d9000617 	ldw	r4,24(sp)
 4006adc:	203f0d26 	beq	r4,zero,4006714 <__alt_data_end+0xfc006714>
 4006ae0:	d9800c17 	ldw	r6,48(sp)
 4006ae4:	01bcab0e 	bge	zero,r6,4005d94 <__alt_data_end+0xfc005d94>
 4006ae8:	d9401017 	ldw	r5,64(sp)
 4006aec:	d9000f17 	ldw	r4,60(sp)
 4006af0:	000d883a 	mov	r6,zero
 4006af4:	01d00934 	movhi	r7,16420
 4006af8:	400e8240 	call	400e824 <__muldf3>
 4006afc:	81000044 	addi	r4,r16,1
 4006b00:	d8800f15 	stw	r2,60(sp)
 4006b04:	d8c01015 	stw	r3,64(sp)
 4006b08:	400fa0c0 	call	400fa0c <__floatsidf>
 4006b0c:	d9800f17 	ldw	r6,60(sp)
 4006b10:	d9c01017 	ldw	r7,64(sp)
 4006b14:	1009883a 	mov	r4,r2
 4006b18:	180b883a 	mov	r5,r3
 4006b1c:	400e8240 	call	400e824 <__muldf3>
 4006b20:	01d00734 	movhi	r7,16412
 4006b24:	000d883a 	mov	r6,zero
 4006b28:	1009883a 	mov	r4,r2
 4006b2c:	180b883a 	mov	r5,r3
 4006b30:	400d3500 	call	400d350 <__adddf3>
 4006b34:	d9c00517 	ldw	r7,20(sp)
 4006b38:	047f3034 	movhi	r17,64704
 4006b3c:	1021883a 	mov	r16,r2
 4006b40:	39ffffc4 	addi	r7,r7,-1
 4006b44:	d9c01315 	stw	r7,76(sp)
 4006b48:	1c63883a 	add	r17,r3,r17
 4006b4c:	db000c17 	ldw	r12,48(sp)
 4006b50:	003bea06 	br	4005afc <__alt_data_end+0xfc005afc>
 4006b54:	dc000915 	stw	r16,36(sp)
 4006b58:	003e0e06 	br	4006394 <__alt_data_end+0xfc006394>
 4006b5c:	01000e44 	movi	r4,57
 4006b60:	8825883a 	mov	r18,r17
 4006b64:	9dc00044 	addi	r23,r19,1
 4006b68:	99000005 	stb	r4,0(r19)
 4006b6c:	a023883a 	mov	r17,r20
 4006b70:	dc000915 	stw	r16,36(sp)
 4006b74:	003da406 	br	4006208 <__alt_data_end+0xfc006208>
 4006b78:	d9801417 	ldw	r6,80(sp)
 4006b7c:	d9c01517 	ldw	r7,84(sp)
 4006b80:	0009883a 	mov	r4,zero
 4006b84:	014ff834 	movhi	r5,16352
 4006b88:	400f0900 	call	400f090 <__subdf3>
 4006b8c:	880d883a 	mov	r6,r17
 4006b90:	a00f883a 	mov	r7,r20
 4006b94:	1009883a 	mov	r4,r2
 4006b98:	180b883a 	mov	r5,r3
 4006b9c:	400e6540 	call	400e654 <__gedf2>
 4006ba0:	00bc7c0e 	bge	zero,r2,4005d94 <__alt_data_end+0xfc005d94>
 4006ba4:	01000c04 	movi	r4,48
 4006ba8:	00000106 	br	4006bb0 <_dtoa_r+0x1580>
 4006bac:	102f883a 	mov	r23,r2
 4006bb0:	b8bfffc4 	addi	r2,r23,-1
 4006bb4:	10c00007 	ldb	r3,0(r2)
 4006bb8:	193ffc26 	beq	r3,r4,4006bac <__alt_data_end+0xfc006bac>
 4006bbc:	d9801317 	ldw	r6,76(sp)
 4006bc0:	d9800515 	stw	r6,20(sp)
 4006bc4:	003c4406 	br	4005cd8 <__alt_data_end+0xfc005cd8>
 4006bc8:	d9801317 	ldw	r6,76(sp)
 4006bcc:	d9800515 	stw	r6,20(sp)
 4006bd0:	003cea06 	br	4005f7c <__alt_data_end+0xfc005f7c>
 4006bd4:	dd800f17 	ldw	r22,60(sp)
 4006bd8:	dcc01017 	ldw	r19,64(sp)
 4006bdc:	dc801217 	ldw	r18,72(sp)
 4006be0:	003c6c06 	br	4005d94 <__alt_data_end+0xfc005d94>
 4006be4:	903e031e 	bne	r18,zero,40063f4 <__alt_data_end+0xfc0063f4>
 4006be8:	003ebb06 	br	40066d8 <__alt_data_end+0xfc0066d8>
 4006bec:	103e6c1e 	bne	r2,zero,40065a0 <__alt_data_end+0xfc0065a0>
 4006bf0:	4080004c 	andi	r2,r8,1
 4006bf4:	103e6a26 	beq	r2,zero,40065a0 <__alt_data_end+0xfc0065a0>
 4006bf8:	003e6606 	br	4006594 <__alt_data_end+0xfc006594>
 4006bfc:	d8c00317 	ldw	r3,12(sp)
 4006c00:	00800084 	movi	r2,2
 4006c04:	10c02916 	blt	r2,r3,4006cac <_dtoa_r+0x167c>
 4006c08:	d9000c17 	ldw	r4,48(sp)
 4006c0c:	003e8806 	br	4006630 <__alt_data_end+0xfc006630>
 4006c10:	04000084 	movi	r16,2
 4006c14:	003b9d06 	br	4005a8c <__alt_data_end+0xfc005a8c>
 4006c18:	d9001317 	ldw	r4,76(sp)
 4006c1c:	d9000515 	stw	r4,20(sp)
 4006c20:	003cd606 	br	4005f7c <__alt_data_end+0xfc005f7c>
 4006c24:	d8801317 	ldw	r2,76(sp)
 4006c28:	d8800515 	stw	r2,20(sp)
 4006c2c:	003c2a06 	br	4005cd8 <__alt_data_end+0xfc005cd8>
 4006c30:	d9800317 	ldw	r6,12(sp)
 4006c34:	00800084 	movi	r2,2
 4006c38:	11801516 	blt	r2,r6,4006c90 <_dtoa_r+0x1660>
 4006c3c:	d9c00c17 	ldw	r7,48(sp)
 4006c40:	d9c00615 	stw	r7,24(sp)
 4006c44:	003df706 	br	4006424 <__alt_data_end+0xfc006424>
 4006c48:	193d3926 	beq	r3,r4,4006130 <__alt_data_end+0xfc006130>
 4006c4c:	00c00f04 	movi	r3,60
 4006c50:	1885c83a 	sub	r2,r3,r2
 4006c54:	003ddf06 	br	40063d4 <__alt_data_end+0xfc0063d4>
 4006c58:	e009883a 	mov	r4,fp
 4006c5c:	e0001115 	stw	zero,68(fp)
 4006c60:	000b883a 	mov	r5,zero
 4006c64:	4008ce80 	call	4008ce8 <_Balloc>
 4006c68:	d8800715 	stw	r2,28(sp)
 4006c6c:	d8c00717 	ldw	r3,28(sp)
 4006c70:	00bfffc4 	movi	r2,-1
 4006c74:	01000044 	movi	r4,1
 4006c78:	d8800c15 	stw	r2,48(sp)
 4006c7c:	e0c01015 	stw	r3,64(fp)
 4006c80:	d9000b15 	stw	r4,44(sp)
 4006c84:	d8800615 	stw	r2,24(sp)
 4006c88:	d8002215 	stw	zero,136(sp)
 4006c8c:	003c4106 	br	4005d94 <__alt_data_end+0xfc005d94>
 4006c90:	d8c00c17 	ldw	r3,48(sp)
 4006c94:	d8c00615 	stw	r3,24(sp)
 4006c98:	003e7006 	br	400665c <__alt_data_end+0xfc00665c>
 4006c9c:	04400044 	movi	r17,1
 4006ca0:	003b2006 	br	4005924 <__alt_data_end+0xfc005924>
 4006ca4:	000b883a 	mov	r5,zero
 4006ca8:	003b3d06 	br	40059a0 <__alt_data_end+0xfc0059a0>
 4006cac:	d8800c17 	ldw	r2,48(sp)
 4006cb0:	d8800615 	stw	r2,24(sp)
 4006cb4:	003e6906 	br	400665c <__alt_data_end+0xfc00665c>

04006cb8 <__sflush_r>:
 4006cb8:	2880030b 	ldhu	r2,12(r5)
 4006cbc:	defffb04 	addi	sp,sp,-20
 4006cc0:	dcc00315 	stw	r19,12(sp)
 4006cc4:	dc400115 	stw	r17,4(sp)
 4006cc8:	dfc00415 	stw	ra,16(sp)
 4006ccc:	dc800215 	stw	r18,8(sp)
 4006cd0:	dc000015 	stw	r16,0(sp)
 4006cd4:	10c0020c 	andi	r3,r2,8
 4006cd8:	2823883a 	mov	r17,r5
 4006cdc:	2027883a 	mov	r19,r4
 4006ce0:	1800311e 	bne	r3,zero,4006da8 <__sflush_r+0xf0>
 4006ce4:	28c00117 	ldw	r3,4(r5)
 4006ce8:	10820014 	ori	r2,r2,2048
 4006cec:	2880030d 	sth	r2,12(r5)
 4006cf0:	00c04b0e 	bge	zero,r3,4006e20 <__sflush_r+0x168>
 4006cf4:	8a000a17 	ldw	r8,40(r17)
 4006cf8:	40002326 	beq	r8,zero,4006d88 <__sflush_r+0xd0>
 4006cfc:	9c000017 	ldw	r16,0(r19)
 4006d00:	10c4000c 	andi	r3,r2,4096
 4006d04:	98000015 	stw	zero,0(r19)
 4006d08:	18004826 	beq	r3,zero,4006e2c <__sflush_r+0x174>
 4006d0c:	89801417 	ldw	r6,80(r17)
 4006d10:	10c0010c 	andi	r3,r2,4
 4006d14:	18000626 	beq	r3,zero,4006d30 <__sflush_r+0x78>
 4006d18:	88c00117 	ldw	r3,4(r17)
 4006d1c:	88800c17 	ldw	r2,48(r17)
 4006d20:	30cdc83a 	sub	r6,r6,r3
 4006d24:	10000226 	beq	r2,zero,4006d30 <__sflush_r+0x78>
 4006d28:	88800f17 	ldw	r2,60(r17)
 4006d2c:	308dc83a 	sub	r6,r6,r2
 4006d30:	89400717 	ldw	r5,28(r17)
 4006d34:	000f883a 	mov	r7,zero
 4006d38:	9809883a 	mov	r4,r19
 4006d3c:	403ee83a 	callr	r8
 4006d40:	00ffffc4 	movi	r3,-1
 4006d44:	10c04426 	beq	r2,r3,4006e58 <__sflush_r+0x1a0>
 4006d48:	88c0030b 	ldhu	r3,12(r17)
 4006d4c:	89000417 	ldw	r4,16(r17)
 4006d50:	88000115 	stw	zero,4(r17)
 4006d54:	197dffcc 	andi	r5,r3,63487
 4006d58:	8940030d 	sth	r5,12(r17)
 4006d5c:	89000015 	stw	r4,0(r17)
 4006d60:	18c4000c 	andi	r3,r3,4096
 4006d64:	18002c1e 	bne	r3,zero,4006e18 <__sflush_r+0x160>
 4006d68:	89400c17 	ldw	r5,48(r17)
 4006d6c:	9c000015 	stw	r16,0(r19)
 4006d70:	28000526 	beq	r5,zero,4006d88 <__sflush_r+0xd0>
 4006d74:	88801004 	addi	r2,r17,64
 4006d78:	28800226 	beq	r5,r2,4006d84 <__sflush_r+0xcc>
 4006d7c:	9809883a 	mov	r4,r19
 4006d80:	40074340 	call	4007434 <_free_r>
 4006d84:	88000c15 	stw	zero,48(r17)
 4006d88:	0005883a 	mov	r2,zero
 4006d8c:	dfc00417 	ldw	ra,16(sp)
 4006d90:	dcc00317 	ldw	r19,12(sp)
 4006d94:	dc800217 	ldw	r18,8(sp)
 4006d98:	dc400117 	ldw	r17,4(sp)
 4006d9c:	dc000017 	ldw	r16,0(sp)
 4006da0:	dec00504 	addi	sp,sp,20
 4006da4:	f800283a 	ret
 4006da8:	2c800417 	ldw	r18,16(r5)
 4006dac:	903ff626 	beq	r18,zero,4006d88 <__alt_data_end+0xfc006d88>
 4006db0:	2c000017 	ldw	r16,0(r5)
 4006db4:	108000cc 	andi	r2,r2,3
 4006db8:	2c800015 	stw	r18,0(r5)
 4006dbc:	84a1c83a 	sub	r16,r16,r18
 4006dc0:	1000131e 	bne	r2,zero,4006e10 <__sflush_r+0x158>
 4006dc4:	28800517 	ldw	r2,20(r5)
 4006dc8:	88800215 	stw	r2,8(r17)
 4006dcc:	04000316 	blt	zero,r16,4006ddc <__sflush_r+0x124>
 4006dd0:	003fed06 	br	4006d88 <__alt_data_end+0xfc006d88>
 4006dd4:	90a5883a 	add	r18,r18,r2
 4006dd8:	043feb0e 	bge	zero,r16,4006d88 <__alt_data_end+0xfc006d88>
 4006ddc:	88800917 	ldw	r2,36(r17)
 4006de0:	89400717 	ldw	r5,28(r17)
 4006de4:	800f883a 	mov	r7,r16
 4006de8:	900d883a 	mov	r6,r18
 4006dec:	9809883a 	mov	r4,r19
 4006df0:	103ee83a 	callr	r2
 4006df4:	80a1c83a 	sub	r16,r16,r2
 4006df8:	00bff616 	blt	zero,r2,4006dd4 <__alt_data_end+0xfc006dd4>
 4006dfc:	88c0030b 	ldhu	r3,12(r17)
 4006e00:	00bfffc4 	movi	r2,-1
 4006e04:	18c01014 	ori	r3,r3,64
 4006e08:	88c0030d 	sth	r3,12(r17)
 4006e0c:	003fdf06 	br	4006d8c <__alt_data_end+0xfc006d8c>
 4006e10:	0005883a 	mov	r2,zero
 4006e14:	003fec06 	br	4006dc8 <__alt_data_end+0xfc006dc8>
 4006e18:	88801415 	stw	r2,80(r17)
 4006e1c:	003fd206 	br	4006d68 <__alt_data_end+0xfc006d68>
 4006e20:	28c00f17 	ldw	r3,60(r5)
 4006e24:	00ffb316 	blt	zero,r3,4006cf4 <__alt_data_end+0xfc006cf4>
 4006e28:	003fd706 	br	4006d88 <__alt_data_end+0xfc006d88>
 4006e2c:	89400717 	ldw	r5,28(r17)
 4006e30:	000d883a 	mov	r6,zero
 4006e34:	01c00044 	movi	r7,1
 4006e38:	9809883a 	mov	r4,r19
 4006e3c:	403ee83a 	callr	r8
 4006e40:	100d883a 	mov	r6,r2
 4006e44:	00bfffc4 	movi	r2,-1
 4006e48:	30801426 	beq	r6,r2,4006e9c <__sflush_r+0x1e4>
 4006e4c:	8880030b 	ldhu	r2,12(r17)
 4006e50:	8a000a17 	ldw	r8,40(r17)
 4006e54:	003fae06 	br	4006d10 <__alt_data_end+0xfc006d10>
 4006e58:	98c00017 	ldw	r3,0(r19)
 4006e5c:	183fba26 	beq	r3,zero,4006d48 <__alt_data_end+0xfc006d48>
 4006e60:	01000744 	movi	r4,29
 4006e64:	19000626 	beq	r3,r4,4006e80 <__sflush_r+0x1c8>
 4006e68:	01000584 	movi	r4,22
 4006e6c:	19000426 	beq	r3,r4,4006e80 <__sflush_r+0x1c8>
 4006e70:	88c0030b 	ldhu	r3,12(r17)
 4006e74:	18c01014 	ori	r3,r3,64
 4006e78:	88c0030d 	sth	r3,12(r17)
 4006e7c:	003fc306 	br	4006d8c <__alt_data_end+0xfc006d8c>
 4006e80:	8880030b 	ldhu	r2,12(r17)
 4006e84:	88c00417 	ldw	r3,16(r17)
 4006e88:	88000115 	stw	zero,4(r17)
 4006e8c:	10bdffcc 	andi	r2,r2,63487
 4006e90:	8880030d 	sth	r2,12(r17)
 4006e94:	88c00015 	stw	r3,0(r17)
 4006e98:	003fb306 	br	4006d68 <__alt_data_end+0xfc006d68>
 4006e9c:	98800017 	ldw	r2,0(r19)
 4006ea0:	103fea26 	beq	r2,zero,4006e4c <__alt_data_end+0xfc006e4c>
 4006ea4:	00c00744 	movi	r3,29
 4006ea8:	10c00226 	beq	r2,r3,4006eb4 <__sflush_r+0x1fc>
 4006eac:	00c00584 	movi	r3,22
 4006eb0:	10c0031e 	bne	r2,r3,4006ec0 <__sflush_r+0x208>
 4006eb4:	9c000015 	stw	r16,0(r19)
 4006eb8:	0005883a 	mov	r2,zero
 4006ebc:	003fb306 	br	4006d8c <__alt_data_end+0xfc006d8c>
 4006ec0:	88c0030b 	ldhu	r3,12(r17)
 4006ec4:	3005883a 	mov	r2,r6
 4006ec8:	18c01014 	ori	r3,r3,64
 4006ecc:	88c0030d 	sth	r3,12(r17)
 4006ed0:	003fae06 	br	4006d8c <__alt_data_end+0xfc006d8c>

04006ed4 <_fflush_r>:
 4006ed4:	defffd04 	addi	sp,sp,-12
 4006ed8:	dc000115 	stw	r16,4(sp)
 4006edc:	dfc00215 	stw	ra,8(sp)
 4006ee0:	2021883a 	mov	r16,r4
 4006ee4:	20000226 	beq	r4,zero,4006ef0 <_fflush_r+0x1c>
 4006ee8:	20800e17 	ldw	r2,56(r4)
 4006eec:	10000c26 	beq	r2,zero,4006f20 <_fflush_r+0x4c>
 4006ef0:	2880030f 	ldh	r2,12(r5)
 4006ef4:	1000051e 	bne	r2,zero,4006f0c <_fflush_r+0x38>
 4006ef8:	0005883a 	mov	r2,zero
 4006efc:	dfc00217 	ldw	ra,8(sp)
 4006f00:	dc000117 	ldw	r16,4(sp)
 4006f04:	dec00304 	addi	sp,sp,12
 4006f08:	f800283a 	ret
 4006f0c:	8009883a 	mov	r4,r16
 4006f10:	dfc00217 	ldw	ra,8(sp)
 4006f14:	dc000117 	ldw	r16,4(sp)
 4006f18:	dec00304 	addi	sp,sp,12
 4006f1c:	4006cb81 	jmpi	4006cb8 <__sflush_r>
 4006f20:	d9400015 	stw	r5,0(sp)
 4006f24:	40072c00 	call	40072c0 <__sinit>
 4006f28:	d9400017 	ldw	r5,0(sp)
 4006f2c:	003ff006 	br	4006ef0 <__alt_data_end+0xfc006ef0>

04006f30 <fflush>:
 4006f30:	20000526 	beq	r4,zero,4006f48 <fflush+0x18>
 4006f34:	00810074 	movhi	r2,1025
 4006f38:	1091d704 	addi	r2,r2,18268
 4006f3c:	200b883a 	mov	r5,r4
 4006f40:	11000017 	ldw	r4,0(r2)
 4006f44:	4006ed41 	jmpi	4006ed4 <_fflush_r>
 4006f48:	00810074 	movhi	r2,1025
 4006f4c:	1091d604 	addi	r2,r2,18264
 4006f50:	11000017 	ldw	r4,0(r2)
 4006f54:	01410034 	movhi	r5,1024
 4006f58:	295bb504 	addi	r5,r5,28372
 4006f5c:	4007cd01 	jmpi	4007cd0 <_fwalk_reent>

04006f60 <__fp_unlock>:
 4006f60:	0005883a 	mov	r2,zero
 4006f64:	f800283a 	ret

04006f68 <_cleanup_r>:
 4006f68:	01410074 	movhi	r5,1025
 4006f6c:	29704b04 	addi	r5,r5,-16084
 4006f70:	4007cd01 	jmpi	4007cd0 <_fwalk_reent>

04006f74 <__sinit.part.1>:
 4006f74:	defff704 	addi	sp,sp,-36
 4006f78:	00c10034 	movhi	r3,1024
 4006f7c:	dfc00815 	stw	ra,32(sp)
 4006f80:	ddc00715 	stw	r23,28(sp)
 4006f84:	dd800615 	stw	r22,24(sp)
 4006f88:	dd400515 	stw	r21,20(sp)
 4006f8c:	dd000415 	stw	r20,16(sp)
 4006f90:	dcc00315 	stw	r19,12(sp)
 4006f94:	dc800215 	stw	r18,8(sp)
 4006f98:	dc400115 	stw	r17,4(sp)
 4006f9c:	dc000015 	stw	r16,0(sp)
 4006fa0:	18dbda04 	addi	r3,r3,28520
 4006fa4:	24000117 	ldw	r16,4(r4)
 4006fa8:	20c00f15 	stw	r3,60(r4)
 4006fac:	2080bb04 	addi	r2,r4,748
 4006fb0:	00c000c4 	movi	r3,3
 4006fb4:	20c0b915 	stw	r3,740(r4)
 4006fb8:	2080ba15 	stw	r2,744(r4)
 4006fbc:	2000b815 	stw	zero,736(r4)
 4006fc0:	05c00204 	movi	r23,8
 4006fc4:	00800104 	movi	r2,4
 4006fc8:	2025883a 	mov	r18,r4
 4006fcc:	b80d883a 	mov	r6,r23
 4006fd0:	81001704 	addi	r4,r16,92
 4006fd4:	000b883a 	mov	r5,zero
 4006fd8:	80000015 	stw	zero,0(r16)
 4006fdc:	80000115 	stw	zero,4(r16)
 4006fe0:	80000215 	stw	zero,8(r16)
 4006fe4:	8080030d 	sth	r2,12(r16)
 4006fe8:	80001915 	stw	zero,100(r16)
 4006fec:	8000038d 	sth	zero,14(r16)
 4006ff0:	80000415 	stw	zero,16(r16)
 4006ff4:	80000515 	stw	zero,20(r16)
 4006ff8:	80000615 	stw	zero,24(r16)
 4006ffc:	4008bc00 	call	4008bc0 <memset>
 4007000:	05810074 	movhi	r22,1025
 4007004:	94400217 	ldw	r17,8(r18)
 4007008:	05410074 	movhi	r21,1025
 400700c:	05010074 	movhi	r20,1025
 4007010:	04c10074 	movhi	r19,1025
 4007014:	b5a94d04 	addi	r22,r22,-23244
 4007018:	ad696404 	addi	r21,r21,-23152
 400701c:	a5298304 	addi	r20,r20,-23028
 4007020:	9ce99a04 	addi	r19,r19,-22936
 4007024:	85800815 	stw	r22,32(r16)
 4007028:	85400915 	stw	r21,36(r16)
 400702c:	85000a15 	stw	r20,40(r16)
 4007030:	84c00b15 	stw	r19,44(r16)
 4007034:	84000715 	stw	r16,28(r16)
 4007038:	00800284 	movi	r2,10
 400703c:	8880030d 	sth	r2,12(r17)
 4007040:	00800044 	movi	r2,1
 4007044:	b80d883a 	mov	r6,r23
 4007048:	89001704 	addi	r4,r17,92
 400704c:	000b883a 	mov	r5,zero
 4007050:	88000015 	stw	zero,0(r17)
 4007054:	88000115 	stw	zero,4(r17)
 4007058:	88000215 	stw	zero,8(r17)
 400705c:	88001915 	stw	zero,100(r17)
 4007060:	8880038d 	sth	r2,14(r17)
 4007064:	88000415 	stw	zero,16(r17)
 4007068:	88000515 	stw	zero,20(r17)
 400706c:	88000615 	stw	zero,24(r17)
 4007070:	4008bc00 	call	4008bc0 <memset>
 4007074:	94000317 	ldw	r16,12(r18)
 4007078:	00800484 	movi	r2,18
 400707c:	8c400715 	stw	r17,28(r17)
 4007080:	8d800815 	stw	r22,32(r17)
 4007084:	8d400915 	stw	r21,36(r17)
 4007088:	8d000a15 	stw	r20,40(r17)
 400708c:	8cc00b15 	stw	r19,44(r17)
 4007090:	8080030d 	sth	r2,12(r16)
 4007094:	00800084 	movi	r2,2
 4007098:	80000015 	stw	zero,0(r16)
 400709c:	80000115 	stw	zero,4(r16)
 40070a0:	80000215 	stw	zero,8(r16)
 40070a4:	80001915 	stw	zero,100(r16)
 40070a8:	8080038d 	sth	r2,14(r16)
 40070ac:	80000415 	stw	zero,16(r16)
 40070b0:	80000515 	stw	zero,20(r16)
 40070b4:	80000615 	stw	zero,24(r16)
 40070b8:	b80d883a 	mov	r6,r23
 40070bc:	000b883a 	mov	r5,zero
 40070c0:	81001704 	addi	r4,r16,92
 40070c4:	4008bc00 	call	4008bc0 <memset>
 40070c8:	00800044 	movi	r2,1
 40070cc:	84000715 	stw	r16,28(r16)
 40070d0:	85800815 	stw	r22,32(r16)
 40070d4:	85400915 	stw	r21,36(r16)
 40070d8:	85000a15 	stw	r20,40(r16)
 40070dc:	84c00b15 	stw	r19,44(r16)
 40070e0:	90800e15 	stw	r2,56(r18)
 40070e4:	dfc00817 	ldw	ra,32(sp)
 40070e8:	ddc00717 	ldw	r23,28(sp)
 40070ec:	dd800617 	ldw	r22,24(sp)
 40070f0:	dd400517 	ldw	r21,20(sp)
 40070f4:	dd000417 	ldw	r20,16(sp)
 40070f8:	dcc00317 	ldw	r19,12(sp)
 40070fc:	dc800217 	ldw	r18,8(sp)
 4007100:	dc400117 	ldw	r17,4(sp)
 4007104:	dc000017 	ldw	r16,0(sp)
 4007108:	dec00904 	addi	sp,sp,36
 400710c:	f800283a 	ret

04007110 <__fp_lock>:
 4007110:	0005883a 	mov	r2,zero
 4007114:	f800283a 	ret

04007118 <__sfmoreglue>:
 4007118:	defffc04 	addi	sp,sp,-16
 400711c:	dc800215 	stw	r18,8(sp)
 4007120:	2825883a 	mov	r18,r5
 4007124:	dc000015 	stw	r16,0(sp)
 4007128:	01401a04 	movi	r5,104
 400712c:	2021883a 	mov	r16,r4
 4007130:	913fffc4 	addi	r4,r18,-1
 4007134:	dfc00315 	stw	ra,12(sp)
 4007138:	dc400115 	stw	r17,4(sp)
 400713c:	4002ce00 	call	4002ce0 <__mulsi3>
 4007140:	8009883a 	mov	r4,r16
 4007144:	11401d04 	addi	r5,r2,116
 4007148:	1023883a 	mov	r17,r2
 400714c:	400802c0 	call	400802c <_malloc_r>
 4007150:	1021883a 	mov	r16,r2
 4007154:	10000726 	beq	r2,zero,4007174 <__sfmoreglue+0x5c>
 4007158:	11000304 	addi	r4,r2,12
 400715c:	10000015 	stw	zero,0(r2)
 4007160:	14800115 	stw	r18,4(r2)
 4007164:	11000215 	stw	r4,8(r2)
 4007168:	89801a04 	addi	r6,r17,104
 400716c:	000b883a 	mov	r5,zero
 4007170:	4008bc00 	call	4008bc0 <memset>
 4007174:	8005883a 	mov	r2,r16
 4007178:	dfc00317 	ldw	ra,12(sp)
 400717c:	dc800217 	ldw	r18,8(sp)
 4007180:	dc400117 	ldw	r17,4(sp)
 4007184:	dc000017 	ldw	r16,0(sp)
 4007188:	dec00404 	addi	sp,sp,16
 400718c:	f800283a 	ret

04007190 <__sfp>:
 4007190:	defffb04 	addi	sp,sp,-20
 4007194:	dc000015 	stw	r16,0(sp)
 4007198:	04010074 	movhi	r16,1025
 400719c:	8411d604 	addi	r16,r16,18264
 40071a0:	dcc00315 	stw	r19,12(sp)
 40071a4:	2027883a 	mov	r19,r4
 40071a8:	81000017 	ldw	r4,0(r16)
 40071ac:	dfc00415 	stw	ra,16(sp)
 40071b0:	dc800215 	stw	r18,8(sp)
 40071b4:	20800e17 	ldw	r2,56(r4)
 40071b8:	dc400115 	stw	r17,4(sp)
 40071bc:	1000021e 	bne	r2,zero,40071c8 <__sfp+0x38>
 40071c0:	4006f740 	call	4006f74 <__sinit.part.1>
 40071c4:	81000017 	ldw	r4,0(r16)
 40071c8:	2480b804 	addi	r18,r4,736
 40071cc:	047fffc4 	movi	r17,-1
 40071d0:	91000117 	ldw	r4,4(r18)
 40071d4:	94000217 	ldw	r16,8(r18)
 40071d8:	213fffc4 	addi	r4,r4,-1
 40071dc:	20000a16 	blt	r4,zero,4007208 <__sfp+0x78>
 40071e0:	8080030f 	ldh	r2,12(r16)
 40071e4:	10000c26 	beq	r2,zero,4007218 <__sfp+0x88>
 40071e8:	80c01d04 	addi	r3,r16,116
 40071ec:	00000206 	br	40071f8 <__sfp+0x68>
 40071f0:	18bfe60f 	ldh	r2,-104(r3)
 40071f4:	10000826 	beq	r2,zero,4007218 <__sfp+0x88>
 40071f8:	213fffc4 	addi	r4,r4,-1
 40071fc:	1c3ffd04 	addi	r16,r3,-12
 4007200:	18c01a04 	addi	r3,r3,104
 4007204:	247ffa1e 	bne	r4,r17,40071f0 <__alt_data_end+0xfc0071f0>
 4007208:	90800017 	ldw	r2,0(r18)
 400720c:	10001d26 	beq	r2,zero,4007284 <__sfp+0xf4>
 4007210:	1025883a 	mov	r18,r2
 4007214:	003fee06 	br	40071d0 <__alt_data_end+0xfc0071d0>
 4007218:	00bfffc4 	movi	r2,-1
 400721c:	8080038d 	sth	r2,14(r16)
 4007220:	00800044 	movi	r2,1
 4007224:	8080030d 	sth	r2,12(r16)
 4007228:	80001915 	stw	zero,100(r16)
 400722c:	80000015 	stw	zero,0(r16)
 4007230:	80000215 	stw	zero,8(r16)
 4007234:	80000115 	stw	zero,4(r16)
 4007238:	80000415 	stw	zero,16(r16)
 400723c:	80000515 	stw	zero,20(r16)
 4007240:	80000615 	stw	zero,24(r16)
 4007244:	01800204 	movi	r6,8
 4007248:	000b883a 	mov	r5,zero
 400724c:	81001704 	addi	r4,r16,92
 4007250:	4008bc00 	call	4008bc0 <memset>
 4007254:	8005883a 	mov	r2,r16
 4007258:	80000c15 	stw	zero,48(r16)
 400725c:	80000d15 	stw	zero,52(r16)
 4007260:	80001115 	stw	zero,68(r16)
 4007264:	80001215 	stw	zero,72(r16)
 4007268:	dfc00417 	ldw	ra,16(sp)
 400726c:	dcc00317 	ldw	r19,12(sp)
 4007270:	dc800217 	ldw	r18,8(sp)
 4007274:	dc400117 	ldw	r17,4(sp)
 4007278:	dc000017 	ldw	r16,0(sp)
 400727c:	dec00504 	addi	sp,sp,20
 4007280:	f800283a 	ret
 4007284:	01400104 	movi	r5,4
 4007288:	9809883a 	mov	r4,r19
 400728c:	40071180 	call	4007118 <__sfmoreglue>
 4007290:	90800015 	stw	r2,0(r18)
 4007294:	103fde1e 	bne	r2,zero,4007210 <__alt_data_end+0xfc007210>
 4007298:	00800304 	movi	r2,12
 400729c:	98800015 	stw	r2,0(r19)
 40072a0:	0005883a 	mov	r2,zero
 40072a4:	003ff006 	br	4007268 <__alt_data_end+0xfc007268>

040072a8 <_cleanup>:
 40072a8:	00810074 	movhi	r2,1025
 40072ac:	1091d604 	addi	r2,r2,18264
 40072b0:	11000017 	ldw	r4,0(r2)
 40072b4:	01410074 	movhi	r5,1025
 40072b8:	29704b04 	addi	r5,r5,-16084
 40072bc:	4007cd01 	jmpi	4007cd0 <_fwalk_reent>

040072c0 <__sinit>:
 40072c0:	20800e17 	ldw	r2,56(r4)
 40072c4:	10000126 	beq	r2,zero,40072cc <__sinit+0xc>
 40072c8:	f800283a 	ret
 40072cc:	4006f741 	jmpi	4006f74 <__sinit.part.1>

040072d0 <__sfp_lock_acquire>:
 40072d0:	f800283a 	ret

040072d4 <__sfp_lock_release>:
 40072d4:	f800283a 	ret

040072d8 <__sinit_lock_acquire>:
 40072d8:	f800283a 	ret

040072dc <__sinit_lock_release>:
 40072dc:	f800283a 	ret

040072e0 <__fp_lock_all>:
 40072e0:	00810074 	movhi	r2,1025
 40072e4:	1091d704 	addi	r2,r2,18268
 40072e8:	11000017 	ldw	r4,0(r2)
 40072ec:	01410034 	movhi	r5,1024
 40072f0:	295c4404 	addi	r5,r5,28944
 40072f4:	4007c0c1 	jmpi	4007c0c <_fwalk>

040072f8 <__fp_unlock_all>:
 40072f8:	00810074 	movhi	r2,1025
 40072fc:	1091d704 	addi	r2,r2,18268
 4007300:	11000017 	ldw	r4,0(r2)
 4007304:	01410034 	movhi	r5,1024
 4007308:	295bd804 	addi	r5,r5,28512
 400730c:	4007c0c1 	jmpi	4007c0c <_fwalk>

04007310 <_malloc_trim_r>:
 4007310:	defffb04 	addi	sp,sp,-20
 4007314:	dcc00315 	stw	r19,12(sp)
 4007318:	04c10074 	movhi	r19,1025
 400731c:	dc800215 	stw	r18,8(sp)
 4007320:	dc400115 	stw	r17,4(sp)
 4007324:	dc000015 	stw	r16,0(sp)
 4007328:	dfc00415 	stw	ra,16(sp)
 400732c:	2821883a 	mov	r16,r5
 4007330:	9ccc4e04 	addi	r19,r19,12600
 4007334:	2025883a 	mov	r18,r4
 4007338:	40101900 	call	4010190 <__malloc_lock>
 400733c:	98800217 	ldw	r2,8(r19)
 4007340:	14400117 	ldw	r17,4(r2)
 4007344:	00bfff04 	movi	r2,-4
 4007348:	88a2703a 	and	r17,r17,r2
 400734c:	8c21c83a 	sub	r16,r17,r16
 4007350:	8403fbc4 	addi	r16,r16,4079
 4007354:	8020d33a 	srli	r16,r16,12
 4007358:	0083ffc4 	movi	r2,4095
 400735c:	843fffc4 	addi	r16,r16,-1
 4007360:	8020933a 	slli	r16,r16,12
 4007364:	1400060e 	bge	r2,r16,4007380 <_malloc_trim_r+0x70>
 4007368:	000b883a 	mov	r5,zero
 400736c:	9009883a 	mov	r4,r18
 4007370:	400a4e00 	call	400a4e0 <_sbrk_r>
 4007374:	98c00217 	ldw	r3,8(r19)
 4007378:	1c47883a 	add	r3,r3,r17
 400737c:	10c00a26 	beq	r2,r3,40073a8 <_malloc_trim_r+0x98>
 4007380:	9009883a 	mov	r4,r18
 4007384:	40101b40 	call	40101b4 <__malloc_unlock>
 4007388:	0005883a 	mov	r2,zero
 400738c:	dfc00417 	ldw	ra,16(sp)
 4007390:	dcc00317 	ldw	r19,12(sp)
 4007394:	dc800217 	ldw	r18,8(sp)
 4007398:	dc400117 	ldw	r17,4(sp)
 400739c:	dc000017 	ldw	r16,0(sp)
 40073a0:	dec00504 	addi	sp,sp,20
 40073a4:	f800283a 	ret
 40073a8:	040bc83a 	sub	r5,zero,r16
 40073ac:	9009883a 	mov	r4,r18
 40073b0:	400a4e00 	call	400a4e0 <_sbrk_r>
 40073b4:	00ffffc4 	movi	r3,-1
 40073b8:	10c00d26 	beq	r2,r3,40073f0 <_malloc_trim_r+0xe0>
 40073bc:	00c10074 	movhi	r3,1025
 40073c0:	18d8cf04 	addi	r3,r3,25404
 40073c4:	18800017 	ldw	r2,0(r3)
 40073c8:	99000217 	ldw	r4,8(r19)
 40073cc:	8c23c83a 	sub	r17,r17,r16
 40073d0:	8c400054 	ori	r17,r17,1
 40073d4:	1421c83a 	sub	r16,r2,r16
 40073d8:	24400115 	stw	r17,4(r4)
 40073dc:	9009883a 	mov	r4,r18
 40073e0:	1c000015 	stw	r16,0(r3)
 40073e4:	40101b40 	call	40101b4 <__malloc_unlock>
 40073e8:	00800044 	movi	r2,1
 40073ec:	003fe706 	br	400738c <__alt_data_end+0xfc00738c>
 40073f0:	000b883a 	mov	r5,zero
 40073f4:	9009883a 	mov	r4,r18
 40073f8:	400a4e00 	call	400a4e0 <_sbrk_r>
 40073fc:	99000217 	ldw	r4,8(r19)
 4007400:	014003c4 	movi	r5,15
 4007404:	1107c83a 	sub	r3,r2,r4
 4007408:	28ffdd0e 	bge	r5,r3,4007380 <__alt_data_end+0xfc007380>
 400740c:	01410074 	movhi	r5,1025
 4007410:	2951d904 	addi	r5,r5,18276
 4007414:	29400017 	ldw	r5,0(r5)
 4007418:	18c00054 	ori	r3,r3,1
 400741c:	20c00115 	stw	r3,4(r4)
 4007420:	00c10074 	movhi	r3,1025
 4007424:	1145c83a 	sub	r2,r2,r5
 4007428:	18d8cf04 	addi	r3,r3,25404
 400742c:	18800015 	stw	r2,0(r3)
 4007430:	003fd306 	br	4007380 <__alt_data_end+0xfc007380>

04007434 <_free_r>:
 4007434:	28004126 	beq	r5,zero,400753c <_free_r+0x108>
 4007438:	defffd04 	addi	sp,sp,-12
 400743c:	dc400115 	stw	r17,4(sp)
 4007440:	dc000015 	stw	r16,0(sp)
 4007444:	2023883a 	mov	r17,r4
 4007448:	2821883a 	mov	r16,r5
 400744c:	dfc00215 	stw	ra,8(sp)
 4007450:	40101900 	call	4010190 <__malloc_lock>
 4007454:	81ffff17 	ldw	r7,-4(r16)
 4007458:	00bfff84 	movi	r2,-2
 400745c:	01010074 	movhi	r4,1025
 4007460:	81bffe04 	addi	r6,r16,-8
 4007464:	3884703a 	and	r2,r7,r2
 4007468:	210c4e04 	addi	r4,r4,12600
 400746c:	308b883a 	add	r5,r6,r2
 4007470:	2a400117 	ldw	r9,4(r5)
 4007474:	22000217 	ldw	r8,8(r4)
 4007478:	00ffff04 	movi	r3,-4
 400747c:	48c6703a 	and	r3,r9,r3
 4007480:	2a005726 	beq	r5,r8,40075e0 <_free_r+0x1ac>
 4007484:	28c00115 	stw	r3,4(r5)
 4007488:	39c0004c 	andi	r7,r7,1
 400748c:	3800091e 	bne	r7,zero,40074b4 <_free_r+0x80>
 4007490:	823ffe17 	ldw	r8,-8(r16)
 4007494:	22400204 	addi	r9,r4,8
 4007498:	320dc83a 	sub	r6,r6,r8
 400749c:	31c00217 	ldw	r7,8(r6)
 40074a0:	1205883a 	add	r2,r2,r8
 40074a4:	3a406526 	beq	r7,r9,400763c <_free_r+0x208>
 40074a8:	32000317 	ldw	r8,12(r6)
 40074ac:	3a000315 	stw	r8,12(r7)
 40074b0:	41c00215 	stw	r7,8(r8)
 40074b4:	28cf883a 	add	r7,r5,r3
 40074b8:	39c00117 	ldw	r7,4(r7)
 40074bc:	39c0004c 	andi	r7,r7,1
 40074c0:	38003a26 	beq	r7,zero,40075ac <_free_r+0x178>
 40074c4:	10c00054 	ori	r3,r2,1
 40074c8:	30c00115 	stw	r3,4(r6)
 40074cc:	3087883a 	add	r3,r6,r2
 40074d0:	18800015 	stw	r2,0(r3)
 40074d4:	00c07fc4 	movi	r3,511
 40074d8:	18801936 	bltu	r3,r2,4007540 <_free_r+0x10c>
 40074dc:	1004d0fa 	srli	r2,r2,3
 40074e0:	01c00044 	movi	r7,1
 40074e4:	21400117 	ldw	r5,4(r4)
 40074e8:	10c00044 	addi	r3,r2,1
 40074ec:	18c7883a 	add	r3,r3,r3
 40074f0:	1005d0ba 	srai	r2,r2,2
 40074f4:	18c7883a 	add	r3,r3,r3
 40074f8:	18c7883a 	add	r3,r3,r3
 40074fc:	1907883a 	add	r3,r3,r4
 4007500:	3884983a 	sll	r2,r7,r2
 4007504:	19c00017 	ldw	r7,0(r3)
 4007508:	1a3ffe04 	addi	r8,r3,-8
 400750c:	1144b03a 	or	r2,r2,r5
 4007510:	32000315 	stw	r8,12(r6)
 4007514:	31c00215 	stw	r7,8(r6)
 4007518:	20800115 	stw	r2,4(r4)
 400751c:	19800015 	stw	r6,0(r3)
 4007520:	39800315 	stw	r6,12(r7)
 4007524:	8809883a 	mov	r4,r17
 4007528:	dfc00217 	ldw	ra,8(sp)
 400752c:	dc400117 	ldw	r17,4(sp)
 4007530:	dc000017 	ldw	r16,0(sp)
 4007534:	dec00304 	addi	sp,sp,12
 4007538:	40101b41 	jmpi	40101b4 <__malloc_unlock>
 400753c:	f800283a 	ret
 4007540:	100ad27a 	srli	r5,r2,9
 4007544:	00c00104 	movi	r3,4
 4007548:	19404a36 	bltu	r3,r5,4007674 <_free_r+0x240>
 400754c:	100ad1ba 	srli	r5,r2,6
 4007550:	28c00e44 	addi	r3,r5,57
 4007554:	18c7883a 	add	r3,r3,r3
 4007558:	29400e04 	addi	r5,r5,56
 400755c:	18c7883a 	add	r3,r3,r3
 4007560:	18c7883a 	add	r3,r3,r3
 4007564:	1909883a 	add	r4,r3,r4
 4007568:	20c00017 	ldw	r3,0(r4)
 400756c:	01c10074 	movhi	r7,1025
 4007570:	213ffe04 	addi	r4,r4,-8
 4007574:	39cc4e04 	addi	r7,r7,12600
 4007578:	20c04426 	beq	r4,r3,400768c <_free_r+0x258>
 400757c:	01ffff04 	movi	r7,-4
 4007580:	19400117 	ldw	r5,4(r3)
 4007584:	29ca703a 	and	r5,r5,r7
 4007588:	1140022e 	bgeu	r2,r5,4007594 <_free_r+0x160>
 400758c:	18c00217 	ldw	r3,8(r3)
 4007590:	20fffb1e 	bne	r4,r3,4007580 <__alt_data_end+0xfc007580>
 4007594:	19000317 	ldw	r4,12(r3)
 4007598:	31000315 	stw	r4,12(r6)
 400759c:	30c00215 	stw	r3,8(r6)
 40075a0:	21800215 	stw	r6,8(r4)
 40075a4:	19800315 	stw	r6,12(r3)
 40075a8:	003fde06 	br	4007524 <__alt_data_end+0xfc007524>
 40075ac:	29c00217 	ldw	r7,8(r5)
 40075b0:	10c5883a 	add	r2,r2,r3
 40075b4:	00c10074 	movhi	r3,1025
 40075b8:	18cc5004 	addi	r3,r3,12608
 40075bc:	38c03b26 	beq	r7,r3,40076ac <_free_r+0x278>
 40075c0:	2a000317 	ldw	r8,12(r5)
 40075c4:	11400054 	ori	r5,r2,1
 40075c8:	3087883a 	add	r3,r6,r2
 40075cc:	3a000315 	stw	r8,12(r7)
 40075d0:	41c00215 	stw	r7,8(r8)
 40075d4:	31400115 	stw	r5,4(r6)
 40075d8:	18800015 	stw	r2,0(r3)
 40075dc:	003fbd06 	br	40074d4 <__alt_data_end+0xfc0074d4>
 40075e0:	39c0004c 	andi	r7,r7,1
 40075e4:	10c5883a 	add	r2,r2,r3
 40075e8:	3800071e 	bne	r7,zero,4007608 <_free_r+0x1d4>
 40075ec:	81fffe17 	ldw	r7,-8(r16)
 40075f0:	31cdc83a 	sub	r6,r6,r7
 40075f4:	30c00317 	ldw	r3,12(r6)
 40075f8:	31400217 	ldw	r5,8(r6)
 40075fc:	11c5883a 	add	r2,r2,r7
 4007600:	28c00315 	stw	r3,12(r5)
 4007604:	19400215 	stw	r5,8(r3)
 4007608:	10c00054 	ori	r3,r2,1
 400760c:	30c00115 	stw	r3,4(r6)
 4007610:	00c10074 	movhi	r3,1025
 4007614:	18d1da04 	addi	r3,r3,18280
 4007618:	18c00017 	ldw	r3,0(r3)
 400761c:	21800215 	stw	r6,8(r4)
 4007620:	10ffc036 	bltu	r2,r3,4007524 <__alt_data_end+0xfc007524>
 4007624:	00810074 	movhi	r2,1025
 4007628:	1098bc04 	addi	r2,r2,25328
 400762c:	11400017 	ldw	r5,0(r2)
 4007630:	8809883a 	mov	r4,r17
 4007634:	40073100 	call	4007310 <_malloc_trim_r>
 4007638:	003fba06 	br	4007524 <__alt_data_end+0xfc007524>
 400763c:	28c9883a 	add	r4,r5,r3
 4007640:	21000117 	ldw	r4,4(r4)
 4007644:	2100004c 	andi	r4,r4,1
 4007648:	2000391e 	bne	r4,zero,4007730 <_free_r+0x2fc>
 400764c:	29c00217 	ldw	r7,8(r5)
 4007650:	29000317 	ldw	r4,12(r5)
 4007654:	1885883a 	add	r2,r3,r2
 4007658:	10c00054 	ori	r3,r2,1
 400765c:	39000315 	stw	r4,12(r7)
 4007660:	21c00215 	stw	r7,8(r4)
 4007664:	30c00115 	stw	r3,4(r6)
 4007668:	308d883a 	add	r6,r6,r2
 400766c:	30800015 	stw	r2,0(r6)
 4007670:	003fac06 	br	4007524 <__alt_data_end+0xfc007524>
 4007674:	00c00504 	movi	r3,20
 4007678:	19401536 	bltu	r3,r5,40076d0 <_free_r+0x29c>
 400767c:	28c01704 	addi	r3,r5,92
 4007680:	18c7883a 	add	r3,r3,r3
 4007684:	294016c4 	addi	r5,r5,91
 4007688:	003fb406 	br	400755c <__alt_data_end+0xfc00755c>
 400768c:	280bd0ba 	srai	r5,r5,2
 4007690:	00c00044 	movi	r3,1
 4007694:	38800117 	ldw	r2,4(r7)
 4007698:	194a983a 	sll	r5,r3,r5
 400769c:	2007883a 	mov	r3,r4
 40076a0:	2884b03a 	or	r2,r5,r2
 40076a4:	38800115 	stw	r2,4(r7)
 40076a8:	003fbb06 	br	4007598 <__alt_data_end+0xfc007598>
 40076ac:	21800515 	stw	r6,20(r4)
 40076b0:	21800415 	stw	r6,16(r4)
 40076b4:	10c00054 	ori	r3,r2,1
 40076b8:	31c00315 	stw	r7,12(r6)
 40076bc:	31c00215 	stw	r7,8(r6)
 40076c0:	30c00115 	stw	r3,4(r6)
 40076c4:	308d883a 	add	r6,r6,r2
 40076c8:	30800015 	stw	r2,0(r6)
 40076cc:	003f9506 	br	4007524 <__alt_data_end+0xfc007524>
 40076d0:	00c01504 	movi	r3,84
 40076d4:	19400536 	bltu	r3,r5,40076ec <_free_r+0x2b8>
 40076d8:	100ad33a 	srli	r5,r2,12
 40076dc:	28c01bc4 	addi	r3,r5,111
 40076e0:	18c7883a 	add	r3,r3,r3
 40076e4:	29401b84 	addi	r5,r5,110
 40076e8:	003f9c06 	br	400755c <__alt_data_end+0xfc00755c>
 40076ec:	00c05504 	movi	r3,340
 40076f0:	19400536 	bltu	r3,r5,4007708 <_free_r+0x2d4>
 40076f4:	100ad3fa 	srli	r5,r2,15
 40076f8:	28c01e04 	addi	r3,r5,120
 40076fc:	18c7883a 	add	r3,r3,r3
 4007700:	29401dc4 	addi	r5,r5,119
 4007704:	003f9506 	br	400755c <__alt_data_end+0xfc00755c>
 4007708:	00c15504 	movi	r3,1364
 400770c:	19400536 	bltu	r3,r5,4007724 <_free_r+0x2f0>
 4007710:	100ad4ba 	srli	r5,r2,18
 4007714:	28c01f44 	addi	r3,r5,125
 4007718:	18c7883a 	add	r3,r3,r3
 400771c:	29401f04 	addi	r5,r5,124
 4007720:	003f8e06 	br	400755c <__alt_data_end+0xfc00755c>
 4007724:	00c03f84 	movi	r3,254
 4007728:	01401f84 	movi	r5,126
 400772c:	003f8b06 	br	400755c <__alt_data_end+0xfc00755c>
 4007730:	10c00054 	ori	r3,r2,1
 4007734:	30c00115 	stw	r3,4(r6)
 4007738:	308d883a 	add	r6,r6,r2
 400773c:	30800015 	stw	r2,0(r6)
 4007740:	003f7806 	br	4007524 <__alt_data_end+0xfc007524>

04007744 <__sfvwrite_r>:
 4007744:	30800217 	ldw	r2,8(r6)
 4007748:	10006726 	beq	r2,zero,40078e8 <__sfvwrite_r+0x1a4>
 400774c:	28c0030b 	ldhu	r3,12(r5)
 4007750:	defff404 	addi	sp,sp,-48
 4007754:	dd400715 	stw	r21,28(sp)
 4007758:	dd000615 	stw	r20,24(sp)
 400775c:	dc000215 	stw	r16,8(sp)
 4007760:	dfc00b15 	stw	ra,44(sp)
 4007764:	df000a15 	stw	fp,40(sp)
 4007768:	ddc00915 	stw	r23,36(sp)
 400776c:	dd800815 	stw	r22,32(sp)
 4007770:	dcc00515 	stw	r19,20(sp)
 4007774:	dc800415 	stw	r18,16(sp)
 4007778:	dc400315 	stw	r17,12(sp)
 400777c:	1880020c 	andi	r2,r3,8
 4007780:	2821883a 	mov	r16,r5
 4007784:	202b883a 	mov	r21,r4
 4007788:	3029883a 	mov	r20,r6
 400778c:	10002726 	beq	r2,zero,400782c <__sfvwrite_r+0xe8>
 4007790:	28800417 	ldw	r2,16(r5)
 4007794:	10002526 	beq	r2,zero,400782c <__sfvwrite_r+0xe8>
 4007798:	1880008c 	andi	r2,r3,2
 400779c:	a4400017 	ldw	r17,0(r20)
 40077a0:	10002a26 	beq	r2,zero,400784c <__sfvwrite_r+0x108>
 40077a4:	05a00034 	movhi	r22,32768
 40077a8:	0027883a 	mov	r19,zero
 40077ac:	0025883a 	mov	r18,zero
 40077b0:	b5bf0004 	addi	r22,r22,-1024
 40077b4:	980d883a 	mov	r6,r19
 40077b8:	a809883a 	mov	r4,r21
 40077bc:	90004626 	beq	r18,zero,40078d8 <__sfvwrite_r+0x194>
 40077c0:	900f883a 	mov	r7,r18
 40077c4:	b480022e 	bgeu	r22,r18,40077d0 <__sfvwrite_r+0x8c>
 40077c8:	01e00034 	movhi	r7,32768
 40077cc:	39ff0004 	addi	r7,r7,-1024
 40077d0:	80800917 	ldw	r2,36(r16)
 40077d4:	81400717 	ldw	r5,28(r16)
 40077d8:	103ee83a 	callr	r2
 40077dc:	00805a0e 	bge	zero,r2,4007948 <__sfvwrite_r+0x204>
 40077e0:	a0c00217 	ldw	r3,8(r20)
 40077e4:	98a7883a 	add	r19,r19,r2
 40077e8:	90a5c83a 	sub	r18,r18,r2
 40077ec:	1885c83a 	sub	r2,r3,r2
 40077f0:	a0800215 	stw	r2,8(r20)
 40077f4:	103fef1e 	bne	r2,zero,40077b4 <__alt_data_end+0xfc0077b4>
 40077f8:	0005883a 	mov	r2,zero
 40077fc:	dfc00b17 	ldw	ra,44(sp)
 4007800:	df000a17 	ldw	fp,40(sp)
 4007804:	ddc00917 	ldw	r23,36(sp)
 4007808:	dd800817 	ldw	r22,32(sp)
 400780c:	dd400717 	ldw	r21,28(sp)
 4007810:	dd000617 	ldw	r20,24(sp)
 4007814:	dcc00517 	ldw	r19,20(sp)
 4007818:	dc800417 	ldw	r18,16(sp)
 400781c:	dc400317 	ldw	r17,12(sp)
 4007820:	dc000217 	ldw	r16,8(sp)
 4007824:	dec00c04 	addi	sp,sp,48
 4007828:	f800283a 	ret
 400782c:	800b883a 	mov	r5,r16
 4007830:	a809883a 	mov	r4,r21
 4007834:	40052b40 	call	40052b4 <__swsetup_r>
 4007838:	1000ee1e 	bne	r2,zero,4007bf4 <__sfvwrite_r+0x4b0>
 400783c:	80c0030b 	ldhu	r3,12(r16)
 4007840:	a4400017 	ldw	r17,0(r20)
 4007844:	1880008c 	andi	r2,r3,2
 4007848:	103fd61e 	bne	r2,zero,40077a4 <__alt_data_end+0xfc0077a4>
 400784c:	1880004c 	andi	r2,r3,1
 4007850:	1000421e 	bne	r2,zero,400795c <__sfvwrite_r+0x218>
 4007854:	0039883a 	mov	fp,zero
 4007858:	0025883a 	mov	r18,zero
 400785c:	90001a26 	beq	r18,zero,40078c8 <__sfvwrite_r+0x184>
 4007860:	1880800c 	andi	r2,r3,512
 4007864:	84c00217 	ldw	r19,8(r16)
 4007868:	10002126 	beq	r2,zero,40078f0 <__sfvwrite_r+0x1ac>
 400786c:	982f883a 	mov	r23,r19
 4007870:	94c09636 	bltu	r18,r19,4007acc <__sfvwrite_r+0x388>
 4007874:	1881200c 	andi	r2,r3,1152
 4007878:	1000a11e 	bne	r2,zero,4007b00 <__sfvwrite_r+0x3bc>
 400787c:	81000017 	ldw	r4,0(r16)
 4007880:	b80d883a 	mov	r6,r23
 4007884:	e00b883a 	mov	r5,fp
 4007888:	4008a640 	call	4008a64 <memmove>
 400788c:	80c00217 	ldw	r3,8(r16)
 4007890:	81000017 	ldw	r4,0(r16)
 4007894:	9005883a 	mov	r2,r18
 4007898:	1ce7c83a 	sub	r19,r3,r19
 400789c:	25cf883a 	add	r7,r4,r23
 40078a0:	84c00215 	stw	r19,8(r16)
 40078a4:	81c00015 	stw	r7,0(r16)
 40078a8:	a0c00217 	ldw	r3,8(r20)
 40078ac:	e0b9883a 	add	fp,fp,r2
 40078b0:	90a5c83a 	sub	r18,r18,r2
 40078b4:	18a7c83a 	sub	r19,r3,r2
 40078b8:	a4c00215 	stw	r19,8(r20)
 40078bc:	983fce26 	beq	r19,zero,40077f8 <__alt_data_end+0xfc0077f8>
 40078c0:	80c0030b 	ldhu	r3,12(r16)
 40078c4:	903fe61e 	bne	r18,zero,4007860 <__alt_data_end+0xfc007860>
 40078c8:	8f000017 	ldw	fp,0(r17)
 40078cc:	8c800117 	ldw	r18,4(r17)
 40078d0:	8c400204 	addi	r17,r17,8
 40078d4:	003fe106 	br	400785c <__alt_data_end+0xfc00785c>
 40078d8:	8cc00017 	ldw	r19,0(r17)
 40078dc:	8c800117 	ldw	r18,4(r17)
 40078e0:	8c400204 	addi	r17,r17,8
 40078e4:	003fb306 	br	40077b4 <__alt_data_end+0xfc0077b4>
 40078e8:	0005883a 	mov	r2,zero
 40078ec:	f800283a 	ret
 40078f0:	81000017 	ldw	r4,0(r16)
 40078f4:	80800417 	ldw	r2,16(r16)
 40078f8:	11005a36 	bltu	r2,r4,4007a64 <__sfvwrite_r+0x320>
 40078fc:	85c00517 	ldw	r23,20(r16)
 4007900:	95c05836 	bltu	r18,r23,4007a64 <__sfvwrite_r+0x320>
 4007904:	00a00034 	movhi	r2,32768
 4007908:	10bfffc4 	addi	r2,r2,-1
 400790c:	9009883a 	mov	r4,r18
 4007910:	1480012e 	bgeu	r2,r18,4007918 <__sfvwrite_r+0x1d4>
 4007914:	1009883a 	mov	r4,r2
 4007918:	b80b883a 	mov	r5,r23
 400791c:	4002b2c0 	call	4002b2c <__divsi3>
 4007920:	b80b883a 	mov	r5,r23
 4007924:	1009883a 	mov	r4,r2
 4007928:	4002ce00 	call	4002ce0 <__mulsi3>
 400792c:	81400717 	ldw	r5,28(r16)
 4007930:	80c00917 	ldw	r3,36(r16)
 4007934:	100f883a 	mov	r7,r2
 4007938:	e00d883a 	mov	r6,fp
 400793c:	a809883a 	mov	r4,r21
 4007940:	183ee83a 	callr	r3
 4007944:	00bfd816 	blt	zero,r2,40078a8 <__alt_data_end+0xfc0078a8>
 4007948:	8080030b 	ldhu	r2,12(r16)
 400794c:	10801014 	ori	r2,r2,64
 4007950:	8080030d 	sth	r2,12(r16)
 4007954:	00bfffc4 	movi	r2,-1
 4007958:	003fa806 	br	40077fc <__alt_data_end+0xfc0077fc>
 400795c:	0027883a 	mov	r19,zero
 4007960:	0011883a 	mov	r8,zero
 4007964:	0039883a 	mov	fp,zero
 4007968:	0025883a 	mov	r18,zero
 400796c:	90001f26 	beq	r18,zero,40079ec <__sfvwrite_r+0x2a8>
 4007970:	40005a26 	beq	r8,zero,4007adc <__sfvwrite_r+0x398>
 4007974:	982d883a 	mov	r22,r19
 4007978:	94c0012e 	bgeu	r18,r19,4007980 <__sfvwrite_r+0x23c>
 400797c:	902d883a 	mov	r22,r18
 4007980:	81000017 	ldw	r4,0(r16)
 4007984:	80800417 	ldw	r2,16(r16)
 4007988:	b02f883a 	mov	r23,r22
 400798c:	81c00517 	ldw	r7,20(r16)
 4007990:	1100032e 	bgeu	r2,r4,40079a0 <__sfvwrite_r+0x25c>
 4007994:	80c00217 	ldw	r3,8(r16)
 4007998:	38c7883a 	add	r3,r7,r3
 400799c:	1d801816 	blt	r3,r22,4007a00 <__sfvwrite_r+0x2bc>
 40079a0:	b1c03e16 	blt	r22,r7,4007a9c <__sfvwrite_r+0x358>
 40079a4:	80800917 	ldw	r2,36(r16)
 40079a8:	81400717 	ldw	r5,28(r16)
 40079ac:	e00d883a 	mov	r6,fp
 40079b0:	da000115 	stw	r8,4(sp)
 40079b4:	a809883a 	mov	r4,r21
 40079b8:	103ee83a 	callr	r2
 40079bc:	102f883a 	mov	r23,r2
 40079c0:	da000117 	ldw	r8,4(sp)
 40079c4:	00bfe00e 	bge	zero,r2,4007948 <__alt_data_end+0xfc007948>
 40079c8:	9de7c83a 	sub	r19,r19,r23
 40079cc:	98001f26 	beq	r19,zero,4007a4c <__sfvwrite_r+0x308>
 40079d0:	a0800217 	ldw	r2,8(r20)
 40079d4:	e5f9883a 	add	fp,fp,r23
 40079d8:	95e5c83a 	sub	r18,r18,r23
 40079dc:	15efc83a 	sub	r23,r2,r23
 40079e0:	a5c00215 	stw	r23,8(r20)
 40079e4:	b83f8426 	beq	r23,zero,40077f8 <__alt_data_end+0xfc0077f8>
 40079e8:	903fe11e 	bne	r18,zero,4007970 <__alt_data_end+0xfc007970>
 40079ec:	8f000017 	ldw	fp,0(r17)
 40079f0:	8c800117 	ldw	r18,4(r17)
 40079f4:	0011883a 	mov	r8,zero
 40079f8:	8c400204 	addi	r17,r17,8
 40079fc:	003fdb06 	br	400796c <__alt_data_end+0xfc00796c>
 4007a00:	180d883a 	mov	r6,r3
 4007a04:	e00b883a 	mov	r5,fp
 4007a08:	da000115 	stw	r8,4(sp)
 4007a0c:	d8c00015 	stw	r3,0(sp)
 4007a10:	4008a640 	call	4008a64 <memmove>
 4007a14:	d8c00017 	ldw	r3,0(sp)
 4007a18:	80800017 	ldw	r2,0(r16)
 4007a1c:	800b883a 	mov	r5,r16
 4007a20:	a809883a 	mov	r4,r21
 4007a24:	10c5883a 	add	r2,r2,r3
 4007a28:	80800015 	stw	r2,0(r16)
 4007a2c:	d8c00015 	stw	r3,0(sp)
 4007a30:	4006ed40 	call	4006ed4 <_fflush_r>
 4007a34:	d8c00017 	ldw	r3,0(sp)
 4007a38:	da000117 	ldw	r8,4(sp)
 4007a3c:	103fc21e 	bne	r2,zero,4007948 <__alt_data_end+0xfc007948>
 4007a40:	182f883a 	mov	r23,r3
 4007a44:	9de7c83a 	sub	r19,r19,r23
 4007a48:	983fe11e 	bne	r19,zero,40079d0 <__alt_data_end+0xfc0079d0>
 4007a4c:	800b883a 	mov	r5,r16
 4007a50:	a809883a 	mov	r4,r21
 4007a54:	4006ed40 	call	4006ed4 <_fflush_r>
 4007a58:	103fbb1e 	bne	r2,zero,4007948 <__alt_data_end+0xfc007948>
 4007a5c:	0011883a 	mov	r8,zero
 4007a60:	003fdb06 	br	40079d0 <__alt_data_end+0xfc0079d0>
 4007a64:	94c0012e 	bgeu	r18,r19,4007a6c <__sfvwrite_r+0x328>
 4007a68:	9027883a 	mov	r19,r18
 4007a6c:	980d883a 	mov	r6,r19
 4007a70:	e00b883a 	mov	r5,fp
 4007a74:	4008a640 	call	4008a64 <memmove>
 4007a78:	80800217 	ldw	r2,8(r16)
 4007a7c:	80c00017 	ldw	r3,0(r16)
 4007a80:	14c5c83a 	sub	r2,r2,r19
 4007a84:	1cc7883a 	add	r3,r3,r19
 4007a88:	80800215 	stw	r2,8(r16)
 4007a8c:	80c00015 	stw	r3,0(r16)
 4007a90:	10004326 	beq	r2,zero,4007ba0 <__sfvwrite_r+0x45c>
 4007a94:	9805883a 	mov	r2,r19
 4007a98:	003f8306 	br	40078a8 <__alt_data_end+0xfc0078a8>
 4007a9c:	b00d883a 	mov	r6,r22
 4007aa0:	e00b883a 	mov	r5,fp
 4007aa4:	da000115 	stw	r8,4(sp)
 4007aa8:	4008a640 	call	4008a64 <memmove>
 4007aac:	80800217 	ldw	r2,8(r16)
 4007ab0:	80c00017 	ldw	r3,0(r16)
 4007ab4:	da000117 	ldw	r8,4(sp)
 4007ab8:	1585c83a 	sub	r2,r2,r22
 4007abc:	1dad883a 	add	r22,r3,r22
 4007ac0:	80800215 	stw	r2,8(r16)
 4007ac4:	85800015 	stw	r22,0(r16)
 4007ac8:	003fbf06 	br	40079c8 <__alt_data_end+0xfc0079c8>
 4007acc:	81000017 	ldw	r4,0(r16)
 4007ad0:	9027883a 	mov	r19,r18
 4007ad4:	902f883a 	mov	r23,r18
 4007ad8:	003f6906 	br	4007880 <__alt_data_end+0xfc007880>
 4007adc:	900d883a 	mov	r6,r18
 4007ae0:	01400284 	movi	r5,10
 4007ae4:	e009883a 	mov	r4,fp
 4007ae8:	40088380 	call	4008838 <memchr>
 4007aec:	10003e26 	beq	r2,zero,4007be8 <__sfvwrite_r+0x4a4>
 4007af0:	10800044 	addi	r2,r2,1
 4007af4:	1727c83a 	sub	r19,r2,fp
 4007af8:	02000044 	movi	r8,1
 4007afc:	003f9d06 	br	4007974 <__alt_data_end+0xfc007974>
 4007b00:	80800517 	ldw	r2,20(r16)
 4007b04:	81400417 	ldw	r5,16(r16)
 4007b08:	81c00017 	ldw	r7,0(r16)
 4007b0c:	10a7883a 	add	r19,r2,r2
 4007b10:	9885883a 	add	r2,r19,r2
 4007b14:	1026d7fa 	srli	r19,r2,31
 4007b18:	396dc83a 	sub	r22,r7,r5
 4007b1c:	b1000044 	addi	r4,r22,1
 4007b20:	9885883a 	add	r2,r19,r2
 4007b24:	1027d07a 	srai	r19,r2,1
 4007b28:	2485883a 	add	r2,r4,r18
 4007b2c:	980d883a 	mov	r6,r19
 4007b30:	9880022e 	bgeu	r19,r2,4007b3c <__sfvwrite_r+0x3f8>
 4007b34:	1027883a 	mov	r19,r2
 4007b38:	100d883a 	mov	r6,r2
 4007b3c:	18c1000c 	andi	r3,r3,1024
 4007b40:	18001c26 	beq	r3,zero,4007bb4 <__sfvwrite_r+0x470>
 4007b44:	300b883a 	mov	r5,r6
 4007b48:	a809883a 	mov	r4,r21
 4007b4c:	400802c0 	call	400802c <_malloc_r>
 4007b50:	102f883a 	mov	r23,r2
 4007b54:	10002926 	beq	r2,zero,4007bfc <__sfvwrite_r+0x4b8>
 4007b58:	81400417 	ldw	r5,16(r16)
 4007b5c:	b00d883a 	mov	r6,r22
 4007b60:	1009883a 	mov	r4,r2
 4007b64:	400891c0 	call	400891c <memcpy>
 4007b68:	8080030b 	ldhu	r2,12(r16)
 4007b6c:	00fedfc4 	movi	r3,-1153
 4007b70:	10c4703a 	and	r2,r2,r3
 4007b74:	10802014 	ori	r2,r2,128
 4007b78:	8080030d 	sth	r2,12(r16)
 4007b7c:	bd89883a 	add	r4,r23,r22
 4007b80:	9d8fc83a 	sub	r7,r19,r22
 4007b84:	85c00415 	stw	r23,16(r16)
 4007b88:	84c00515 	stw	r19,20(r16)
 4007b8c:	81000015 	stw	r4,0(r16)
 4007b90:	9027883a 	mov	r19,r18
 4007b94:	81c00215 	stw	r7,8(r16)
 4007b98:	902f883a 	mov	r23,r18
 4007b9c:	003f3806 	br	4007880 <__alt_data_end+0xfc007880>
 4007ba0:	800b883a 	mov	r5,r16
 4007ba4:	a809883a 	mov	r4,r21
 4007ba8:	4006ed40 	call	4006ed4 <_fflush_r>
 4007bac:	103fb926 	beq	r2,zero,4007a94 <__alt_data_end+0xfc007a94>
 4007bb0:	003f6506 	br	4007948 <__alt_data_end+0xfc007948>
 4007bb4:	a809883a 	mov	r4,r21
 4007bb8:	4009f080 	call	4009f08 <_realloc_r>
 4007bbc:	102f883a 	mov	r23,r2
 4007bc0:	103fee1e 	bne	r2,zero,4007b7c <__alt_data_end+0xfc007b7c>
 4007bc4:	81400417 	ldw	r5,16(r16)
 4007bc8:	a809883a 	mov	r4,r21
 4007bcc:	40074340 	call	4007434 <_free_r>
 4007bd0:	8080030b 	ldhu	r2,12(r16)
 4007bd4:	00ffdfc4 	movi	r3,-129
 4007bd8:	1884703a 	and	r2,r3,r2
 4007bdc:	00c00304 	movi	r3,12
 4007be0:	a8c00015 	stw	r3,0(r21)
 4007be4:	003f5906 	br	400794c <__alt_data_end+0xfc00794c>
 4007be8:	94c00044 	addi	r19,r18,1
 4007bec:	02000044 	movi	r8,1
 4007bf0:	003f6006 	br	4007974 <__alt_data_end+0xfc007974>
 4007bf4:	00bfffc4 	movi	r2,-1
 4007bf8:	003f0006 	br	40077fc <__alt_data_end+0xfc0077fc>
 4007bfc:	00800304 	movi	r2,12
 4007c00:	a8800015 	stw	r2,0(r21)
 4007c04:	8080030b 	ldhu	r2,12(r16)
 4007c08:	003f5006 	br	400794c <__alt_data_end+0xfc00794c>

04007c0c <_fwalk>:
 4007c0c:	defff704 	addi	sp,sp,-36
 4007c10:	dd000415 	stw	r20,16(sp)
 4007c14:	dfc00815 	stw	ra,32(sp)
 4007c18:	ddc00715 	stw	r23,28(sp)
 4007c1c:	dd800615 	stw	r22,24(sp)
 4007c20:	dd400515 	stw	r21,20(sp)
 4007c24:	dcc00315 	stw	r19,12(sp)
 4007c28:	dc800215 	stw	r18,8(sp)
 4007c2c:	dc400115 	stw	r17,4(sp)
 4007c30:	dc000015 	stw	r16,0(sp)
 4007c34:	2500b804 	addi	r20,r4,736
 4007c38:	a0002326 	beq	r20,zero,4007cc8 <_fwalk+0xbc>
 4007c3c:	282b883a 	mov	r21,r5
 4007c40:	002f883a 	mov	r23,zero
 4007c44:	05800044 	movi	r22,1
 4007c48:	04ffffc4 	movi	r19,-1
 4007c4c:	a4400117 	ldw	r17,4(r20)
 4007c50:	a4800217 	ldw	r18,8(r20)
 4007c54:	8c7fffc4 	addi	r17,r17,-1
 4007c58:	88000d16 	blt	r17,zero,4007c90 <_fwalk+0x84>
 4007c5c:	94000304 	addi	r16,r18,12
 4007c60:	94800384 	addi	r18,r18,14
 4007c64:	8080000b 	ldhu	r2,0(r16)
 4007c68:	8c7fffc4 	addi	r17,r17,-1
 4007c6c:	813ffd04 	addi	r4,r16,-12
 4007c70:	b080042e 	bgeu	r22,r2,4007c84 <_fwalk+0x78>
 4007c74:	9080000f 	ldh	r2,0(r18)
 4007c78:	14c00226 	beq	r2,r19,4007c84 <_fwalk+0x78>
 4007c7c:	a83ee83a 	callr	r21
 4007c80:	b8aeb03a 	or	r23,r23,r2
 4007c84:	84001a04 	addi	r16,r16,104
 4007c88:	94801a04 	addi	r18,r18,104
 4007c8c:	8cfff51e 	bne	r17,r19,4007c64 <__alt_data_end+0xfc007c64>
 4007c90:	a5000017 	ldw	r20,0(r20)
 4007c94:	a03fed1e 	bne	r20,zero,4007c4c <__alt_data_end+0xfc007c4c>
 4007c98:	b805883a 	mov	r2,r23
 4007c9c:	dfc00817 	ldw	ra,32(sp)
 4007ca0:	ddc00717 	ldw	r23,28(sp)
 4007ca4:	dd800617 	ldw	r22,24(sp)
 4007ca8:	dd400517 	ldw	r21,20(sp)
 4007cac:	dd000417 	ldw	r20,16(sp)
 4007cb0:	dcc00317 	ldw	r19,12(sp)
 4007cb4:	dc800217 	ldw	r18,8(sp)
 4007cb8:	dc400117 	ldw	r17,4(sp)
 4007cbc:	dc000017 	ldw	r16,0(sp)
 4007cc0:	dec00904 	addi	sp,sp,36
 4007cc4:	f800283a 	ret
 4007cc8:	002f883a 	mov	r23,zero
 4007ccc:	003ff206 	br	4007c98 <__alt_data_end+0xfc007c98>

04007cd0 <_fwalk_reent>:
 4007cd0:	defff704 	addi	sp,sp,-36
 4007cd4:	dd000415 	stw	r20,16(sp)
 4007cd8:	dfc00815 	stw	ra,32(sp)
 4007cdc:	ddc00715 	stw	r23,28(sp)
 4007ce0:	dd800615 	stw	r22,24(sp)
 4007ce4:	dd400515 	stw	r21,20(sp)
 4007ce8:	dcc00315 	stw	r19,12(sp)
 4007cec:	dc800215 	stw	r18,8(sp)
 4007cf0:	dc400115 	stw	r17,4(sp)
 4007cf4:	dc000015 	stw	r16,0(sp)
 4007cf8:	2500b804 	addi	r20,r4,736
 4007cfc:	a0002326 	beq	r20,zero,4007d8c <_fwalk_reent+0xbc>
 4007d00:	282b883a 	mov	r21,r5
 4007d04:	2027883a 	mov	r19,r4
 4007d08:	002f883a 	mov	r23,zero
 4007d0c:	05800044 	movi	r22,1
 4007d10:	04bfffc4 	movi	r18,-1
 4007d14:	a4400117 	ldw	r17,4(r20)
 4007d18:	a4000217 	ldw	r16,8(r20)
 4007d1c:	8c7fffc4 	addi	r17,r17,-1
 4007d20:	88000c16 	blt	r17,zero,4007d54 <_fwalk_reent+0x84>
 4007d24:	84000304 	addi	r16,r16,12
 4007d28:	8080000b 	ldhu	r2,0(r16)
 4007d2c:	8c7fffc4 	addi	r17,r17,-1
 4007d30:	817ffd04 	addi	r5,r16,-12
 4007d34:	b080052e 	bgeu	r22,r2,4007d4c <_fwalk_reent+0x7c>
 4007d38:	8080008f 	ldh	r2,2(r16)
 4007d3c:	9809883a 	mov	r4,r19
 4007d40:	14800226 	beq	r2,r18,4007d4c <_fwalk_reent+0x7c>
 4007d44:	a83ee83a 	callr	r21
 4007d48:	b8aeb03a 	or	r23,r23,r2
 4007d4c:	84001a04 	addi	r16,r16,104
 4007d50:	8cbff51e 	bne	r17,r18,4007d28 <__alt_data_end+0xfc007d28>
 4007d54:	a5000017 	ldw	r20,0(r20)
 4007d58:	a03fee1e 	bne	r20,zero,4007d14 <__alt_data_end+0xfc007d14>
 4007d5c:	b805883a 	mov	r2,r23
 4007d60:	dfc00817 	ldw	ra,32(sp)
 4007d64:	ddc00717 	ldw	r23,28(sp)
 4007d68:	dd800617 	ldw	r22,24(sp)
 4007d6c:	dd400517 	ldw	r21,20(sp)
 4007d70:	dd000417 	ldw	r20,16(sp)
 4007d74:	dcc00317 	ldw	r19,12(sp)
 4007d78:	dc800217 	ldw	r18,8(sp)
 4007d7c:	dc400117 	ldw	r17,4(sp)
 4007d80:	dc000017 	ldw	r16,0(sp)
 4007d84:	dec00904 	addi	sp,sp,36
 4007d88:	f800283a 	ret
 4007d8c:	002f883a 	mov	r23,zero
 4007d90:	003ff206 	br	4007d5c <__alt_data_end+0xfc007d5c>

04007d94 <_setlocale_r>:
 4007d94:	30001b26 	beq	r6,zero,4007e04 <_setlocale_r+0x70>
 4007d98:	01410074 	movhi	r5,1025
 4007d9c:	defffe04 	addi	sp,sp,-8
 4007da0:	294a7a04 	addi	r5,r5,10728
 4007da4:	3009883a 	mov	r4,r6
 4007da8:	dc000015 	stw	r16,0(sp)
 4007dac:	dfc00115 	stw	ra,4(sp)
 4007db0:	3021883a 	mov	r16,r6
 4007db4:	400a6700 	call	400a670 <strcmp>
 4007db8:	1000061e 	bne	r2,zero,4007dd4 <_setlocale_r+0x40>
 4007dbc:	00810074 	movhi	r2,1025
 4007dc0:	108a7904 	addi	r2,r2,10724
 4007dc4:	dfc00117 	ldw	ra,4(sp)
 4007dc8:	dc000017 	ldw	r16,0(sp)
 4007dcc:	dec00204 	addi	sp,sp,8
 4007dd0:	f800283a 	ret
 4007dd4:	01410074 	movhi	r5,1025
 4007dd8:	294a7904 	addi	r5,r5,10724
 4007ddc:	8009883a 	mov	r4,r16
 4007de0:	400a6700 	call	400a670 <strcmp>
 4007de4:	103ff526 	beq	r2,zero,4007dbc <__alt_data_end+0xfc007dbc>
 4007de8:	01410074 	movhi	r5,1025
 4007dec:	294a6404 	addi	r5,r5,10640
 4007df0:	8009883a 	mov	r4,r16
 4007df4:	400a6700 	call	400a670 <strcmp>
 4007df8:	103ff026 	beq	r2,zero,4007dbc <__alt_data_end+0xfc007dbc>
 4007dfc:	0005883a 	mov	r2,zero
 4007e00:	003ff006 	br	4007dc4 <__alt_data_end+0xfc007dc4>
 4007e04:	00810074 	movhi	r2,1025
 4007e08:	108a7904 	addi	r2,r2,10724
 4007e0c:	f800283a 	ret

04007e10 <__locale_charset>:
 4007e10:	00810074 	movhi	r2,1025
 4007e14:	108c3804 	addi	r2,r2,12512
 4007e18:	f800283a 	ret

04007e1c <__locale_mb_cur_max>:
 4007e1c:	00810074 	movhi	r2,1025
 4007e20:	1091d804 	addi	r2,r2,18272
 4007e24:	10800017 	ldw	r2,0(r2)
 4007e28:	f800283a 	ret

04007e2c <__locale_msgcharset>:
 4007e2c:	00810074 	movhi	r2,1025
 4007e30:	108c3004 	addi	r2,r2,12480
 4007e34:	f800283a 	ret

04007e38 <__locale_cjk_lang>:
 4007e38:	0005883a 	mov	r2,zero
 4007e3c:	f800283a 	ret

04007e40 <_localeconv_r>:
 4007e40:	00810074 	movhi	r2,1025
 4007e44:	108c4004 	addi	r2,r2,12544
 4007e48:	f800283a 	ret

04007e4c <setlocale>:
 4007e4c:	00810074 	movhi	r2,1025
 4007e50:	1091d704 	addi	r2,r2,18268
 4007e54:	280d883a 	mov	r6,r5
 4007e58:	200b883a 	mov	r5,r4
 4007e5c:	11000017 	ldw	r4,0(r2)
 4007e60:	4007d941 	jmpi	4007d94 <_setlocale_r>

04007e64 <localeconv>:
 4007e64:	00810074 	movhi	r2,1025
 4007e68:	108c4004 	addi	r2,r2,12544
 4007e6c:	f800283a 	ret

04007e70 <__smakebuf_r>:
 4007e70:	2880030b 	ldhu	r2,12(r5)
 4007e74:	10c0008c 	andi	r3,r2,2
 4007e78:	1800411e 	bne	r3,zero,4007f80 <__smakebuf_r+0x110>
 4007e7c:	deffec04 	addi	sp,sp,-80
 4007e80:	dc000f15 	stw	r16,60(sp)
 4007e84:	2821883a 	mov	r16,r5
 4007e88:	2940038f 	ldh	r5,14(r5)
 4007e8c:	dc401015 	stw	r17,64(sp)
 4007e90:	dfc01315 	stw	ra,76(sp)
 4007e94:	dcc01215 	stw	r19,72(sp)
 4007e98:	dc801115 	stw	r18,68(sp)
 4007e9c:	2023883a 	mov	r17,r4
 4007ea0:	28001c16 	blt	r5,zero,4007f14 <__smakebuf_r+0xa4>
 4007ea4:	d80d883a 	mov	r6,sp
 4007ea8:	400c4380 	call	400c438 <_fstat_r>
 4007eac:	10001816 	blt	r2,zero,4007f10 <__smakebuf_r+0xa0>
 4007eb0:	d8800117 	ldw	r2,4(sp)
 4007eb4:	00e00014 	movui	r3,32768
 4007eb8:	10bc000c 	andi	r2,r2,61440
 4007ebc:	14c80020 	cmpeqi	r19,r2,8192
 4007ec0:	10c03726 	beq	r2,r3,4007fa0 <__smakebuf_r+0x130>
 4007ec4:	80c0030b 	ldhu	r3,12(r16)
 4007ec8:	18c20014 	ori	r3,r3,2048
 4007ecc:	80c0030d 	sth	r3,12(r16)
 4007ed0:	00c80004 	movi	r3,8192
 4007ed4:	10c0521e 	bne	r2,r3,4008020 <__smakebuf_r+0x1b0>
 4007ed8:	8140038f 	ldh	r5,14(r16)
 4007edc:	8809883a 	mov	r4,r17
 4007ee0:	400c4940 	call	400c494 <_isatty_r>
 4007ee4:	10004c26 	beq	r2,zero,4008018 <__smakebuf_r+0x1a8>
 4007ee8:	8080030b 	ldhu	r2,12(r16)
 4007eec:	80c010c4 	addi	r3,r16,67
 4007ef0:	80c00015 	stw	r3,0(r16)
 4007ef4:	10800054 	ori	r2,r2,1
 4007ef8:	8080030d 	sth	r2,12(r16)
 4007efc:	00800044 	movi	r2,1
 4007f00:	80c00415 	stw	r3,16(r16)
 4007f04:	80800515 	stw	r2,20(r16)
 4007f08:	04810004 	movi	r18,1024
 4007f0c:	00000706 	br	4007f2c <__smakebuf_r+0xbc>
 4007f10:	8080030b 	ldhu	r2,12(r16)
 4007f14:	10c0200c 	andi	r3,r2,128
 4007f18:	18001f1e 	bne	r3,zero,4007f98 <__smakebuf_r+0x128>
 4007f1c:	04810004 	movi	r18,1024
 4007f20:	10820014 	ori	r2,r2,2048
 4007f24:	8080030d 	sth	r2,12(r16)
 4007f28:	0027883a 	mov	r19,zero
 4007f2c:	900b883a 	mov	r5,r18
 4007f30:	8809883a 	mov	r4,r17
 4007f34:	400802c0 	call	400802c <_malloc_r>
 4007f38:	10002c26 	beq	r2,zero,4007fec <__smakebuf_r+0x17c>
 4007f3c:	80c0030b 	ldhu	r3,12(r16)
 4007f40:	01010034 	movhi	r4,1024
 4007f44:	211bda04 	addi	r4,r4,28520
 4007f48:	89000f15 	stw	r4,60(r17)
 4007f4c:	18c02014 	ori	r3,r3,128
 4007f50:	80c0030d 	sth	r3,12(r16)
 4007f54:	80800015 	stw	r2,0(r16)
 4007f58:	80800415 	stw	r2,16(r16)
 4007f5c:	84800515 	stw	r18,20(r16)
 4007f60:	98001a1e 	bne	r19,zero,4007fcc <__smakebuf_r+0x15c>
 4007f64:	dfc01317 	ldw	ra,76(sp)
 4007f68:	dcc01217 	ldw	r19,72(sp)
 4007f6c:	dc801117 	ldw	r18,68(sp)
 4007f70:	dc401017 	ldw	r17,64(sp)
 4007f74:	dc000f17 	ldw	r16,60(sp)
 4007f78:	dec01404 	addi	sp,sp,80
 4007f7c:	f800283a 	ret
 4007f80:	288010c4 	addi	r2,r5,67
 4007f84:	28800015 	stw	r2,0(r5)
 4007f88:	28800415 	stw	r2,16(r5)
 4007f8c:	00800044 	movi	r2,1
 4007f90:	28800515 	stw	r2,20(r5)
 4007f94:	f800283a 	ret
 4007f98:	04801004 	movi	r18,64
 4007f9c:	003fe006 	br	4007f20 <__alt_data_end+0xfc007f20>
 4007fa0:	81000a17 	ldw	r4,40(r16)
 4007fa4:	00c10074 	movhi	r3,1025
 4007fa8:	18e98304 	addi	r3,r3,-23028
 4007fac:	20ffc51e 	bne	r4,r3,4007ec4 <__alt_data_end+0xfc007ec4>
 4007fb0:	8080030b 	ldhu	r2,12(r16)
 4007fb4:	04810004 	movi	r18,1024
 4007fb8:	84801315 	stw	r18,76(r16)
 4007fbc:	1484b03a 	or	r2,r2,r18
 4007fc0:	8080030d 	sth	r2,12(r16)
 4007fc4:	0027883a 	mov	r19,zero
 4007fc8:	003fd806 	br	4007f2c <__alt_data_end+0xfc007f2c>
 4007fcc:	8140038f 	ldh	r5,14(r16)
 4007fd0:	8809883a 	mov	r4,r17
 4007fd4:	400c4940 	call	400c494 <_isatty_r>
 4007fd8:	103fe226 	beq	r2,zero,4007f64 <__alt_data_end+0xfc007f64>
 4007fdc:	8080030b 	ldhu	r2,12(r16)
 4007fe0:	10800054 	ori	r2,r2,1
 4007fe4:	8080030d 	sth	r2,12(r16)
 4007fe8:	003fde06 	br	4007f64 <__alt_data_end+0xfc007f64>
 4007fec:	8080030b 	ldhu	r2,12(r16)
 4007ff0:	10c0800c 	andi	r3,r2,512
 4007ff4:	183fdb1e 	bne	r3,zero,4007f64 <__alt_data_end+0xfc007f64>
 4007ff8:	10800094 	ori	r2,r2,2
 4007ffc:	80c010c4 	addi	r3,r16,67
 4008000:	8080030d 	sth	r2,12(r16)
 4008004:	00800044 	movi	r2,1
 4008008:	80c00015 	stw	r3,0(r16)
 400800c:	80c00415 	stw	r3,16(r16)
 4008010:	80800515 	stw	r2,20(r16)
 4008014:	003fd306 	br	4007f64 <__alt_data_end+0xfc007f64>
 4008018:	04810004 	movi	r18,1024
 400801c:	003fc306 	br	4007f2c <__alt_data_end+0xfc007f2c>
 4008020:	0027883a 	mov	r19,zero
 4008024:	04810004 	movi	r18,1024
 4008028:	003fc006 	br	4007f2c <__alt_data_end+0xfc007f2c>

0400802c <_malloc_r>:
 400802c:	defff504 	addi	sp,sp,-44
 4008030:	dc800315 	stw	r18,12(sp)
 4008034:	dfc00a15 	stw	ra,40(sp)
 4008038:	df000915 	stw	fp,36(sp)
 400803c:	ddc00815 	stw	r23,32(sp)
 4008040:	dd800715 	stw	r22,28(sp)
 4008044:	dd400615 	stw	r21,24(sp)
 4008048:	dd000515 	stw	r20,20(sp)
 400804c:	dcc00415 	stw	r19,16(sp)
 4008050:	dc400215 	stw	r17,8(sp)
 4008054:	dc000115 	stw	r16,4(sp)
 4008058:	288002c4 	addi	r2,r5,11
 400805c:	00c00584 	movi	r3,22
 4008060:	2025883a 	mov	r18,r4
 4008064:	18807f2e 	bgeu	r3,r2,4008264 <_malloc_r+0x238>
 4008068:	047ffe04 	movi	r17,-8
 400806c:	1462703a 	and	r17,r2,r17
 4008070:	8800a316 	blt	r17,zero,4008300 <_malloc_r+0x2d4>
 4008074:	8940a236 	bltu	r17,r5,4008300 <_malloc_r+0x2d4>
 4008078:	40101900 	call	4010190 <__malloc_lock>
 400807c:	00807dc4 	movi	r2,503
 4008080:	1441e92e 	bgeu	r2,r17,4008828 <_malloc_r+0x7fc>
 4008084:	8804d27a 	srli	r2,r17,9
 4008088:	1000a126 	beq	r2,zero,4008310 <_malloc_r+0x2e4>
 400808c:	00c00104 	movi	r3,4
 4008090:	18811e36 	bltu	r3,r2,400850c <_malloc_r+0x4e0>
 4008094:	8804d1ba 	srli	r2,r17,6
 4008098:	12000e44 	addi	r8,r2,57
 400809c:	11c00e04 	addi	r7,r2,56
 40080a0:	4209883a 	add	r4,r8,r8
 40080a4:	04c10074 	movhi	r19,1025
 40080a8:	2109883a 	add	r4,r4,r4
 40080ac:	9ccc4e04 	addi	r19,r19,12600
 40080b0:	2109883a 	add	r4,r4,r4
 40080b4:	9909883a 	add	r4,r19,r4
 40080b8:	24000117 	ldw	r16,4(r4)
 40080bc:	213ffe04 	addi	r4,r4,-8
 40080c0:	24009726 	beq	r4,r16,4008320 <_malloc_r+0x2f4>
 40080c4:	80800117 	ldw	r2,4(r16)
 40080c8:	01bfff04 	movi	r6,-4
 40080cc:	014003c4 	movi	r5,15
 40080d0:	1184703a 	and	r2,r2,r6
 40080d4:	1447c83a 	sub	r3,r2,r17
 40080d8:	28c00716 	blt	r5,r3,40080f8 <_malloc_r+0xcc>
 40080dc:	1800920e 	bge	r3,zero,4008328 <_malloc_r+0x2fc>
 40080e0:	84000317 	ldw	r16,12(r16)
 40080e4:	24008e26 	beq	r4,r16,4008320 <_malloc_r+0x2f4>
 40080e8:	80800117 	ldw	r2,4(r16)
 40080ec:	1184703a 	and	r2,r2,r6
 40080f0:	1447c83a 	sub	r3,r2,r17
 40080f4:	28fff90e 	bge	r5,r3,40080dc <__alt_data_end+0xfc0080dc>
 40080f8:	3809883a 	mov	r4,r7
 40080fc:	01810074 	movhi	r6,1025
 4008100:	9c000417 	ldw	r16,16(r19)
 4008104:	318c4e04 	addi	r6,r6,12600
 4008108:	32000204 	addi	r8,r6,8
 400810c:	82013426 	beq	r16,r8,40085e0 <_malloc_r+0x5b4>
 4008110:	80c00117 	ldw	r3,4(r16)
 4008114:	00bfff04 	movi	r2,-4
 4008118:	188e703a 	and	r7,r3,r2
 400811c:	3c45c83a 	sub	r2,r7,r17
 4008120:	00c003c4 	movi	r3,15
 4008124:	18811f16 	blt	r3,r2,40085a4 <_malloc_r+0x578>
 4008128:	32000515 	stw	r8,20(r6)
 400812c:	32000415 	stw	r8,16(r6)
 4008130:	10007f0e 	bge	r2,zero,4008330 <_malloc_r+0x304>
 4008134:	00807fc4 	movi	r2,511
 4008138:	11c0fd36 	bltu	r2,r7,4008530 <_malloc_r+0x504>
 400813c:	3806d0fa 	srli	r3,r7,3
 4008140:	01c00044 	movi	r7,1
 4008144:	30800117 	ldw	r2,4(r6)
 4008148:	19400044 	addi	r5,r3,1
 400814c:	294b883a 	add	r5,r5,r5
 4008150:	1807d0ba 	srai	r3,r3,2
 4008154:	294b883a 	add	r5,r5,r5
 4008158:	294b883a 	add	r5,r5,r5
 400815c:	298b883a 	add	r5,r5,r6
 4008160:	38c6983a 	sll	r3,r7,r3
 4008164:	29c00017 	ldw	r7,0(r5)
 4008168:	2a7ffe04 	addi	r9,r5,-8
 400816c:	1886b03a 	or	r3,r3,r2
 4008170:	82400315 	stw	r9,12(r16)
 4008174:	81c00215 	stw	r7,8(r16)
 4008178:	30c00115 	stw	r3,4(r6)
 400817c:	2c000015 	stw	r16,0(r5)
 4008180:	3c000315 	stw	r16,12(r7)
 4008184:	2005d0ba 	srai	r2,r4,2
 4008188:	01400044 	movi	r5,1
 400818c:	288a983a 	sll	r5,r5,r2
 4008190:	19406f36 	bltu	r3,r5,4008350 <_malloc_r+0x324>
 4008194:	28c4703a 	and	r2,r5,r3
 4008198:	10000a1e 	bne	r2,zero,40081c4 <_malloc_r+0x198>
 400819c:	00bfff04 	movi	r2,-4
 40081a0:	294b883a 	add	r5,r5,r5
 40081a4:	2088703a 	and	r4,r4,r2
 40081a8:	28c4703a 	and	r2,r5,r3
 40081ac:	21000104 	addi	r4,r4,4
 40081b0:	1000041e 	bne	r2,zero,40081c4 <_malloc_r+0x198>
 40081b4:	294b883a 	add	r5,r5,r5
 40081b8:	28c4703a 	and	r2,r5,r3
 40081bc:	21000104 	addi	r4,r4,4
 40081c0:	103ffc26 	beq	r2,zero,40081b4 <__alt_data_end+0xfc0081b4>
 40081c4:	02bfff04 	movi	r10,-4
 40081c8:	024003c4 	movi	r9,15
 40081cc:	21800044 	addi	r6,r4,1
 40081d0:	318d883a 	add	r6,r6,r6
 40081d4:	318d883a 	add	r6,r6,r6
 40081d8:	318d883a 	add	r6,r6,r6
 40081dc:	998d883a 	add	r6,r19,r6
 40081e0:	333ffe04 	addi	r12,r6,-8
 40081e4:	2017883a 	mov	r11,r4
 40081e8:	31800104 	addi	r6,r6,4
 40081ec:	34000017 	ldw	r16,0(r6)
 40081f0:	31fffd04 	addi	r7,r6,-12
 40081f4:	81c0041e 	bne	r16,r7,4008208 <_malloc_r+0x1dc>
 40081f8:	0000fb06 	br	40085e8 <_malloc_r+0x5bc>
 40081fc:	1801030e 	bge	r3,zero,400860c <_malloc_r+0x5e0>
 4008200:	84000317 	ldw	r16,12(r16)
 4008204:	81c0f826 	beq	r16,r7,40085e8 <_malloc_r+0x5bc>
 4008208:	80800117 	ldw	r2,4(r16)
 400820c:	1284703a 	and	r2,r2,r10
 4008210:	1447c83a 	sub	r3,r2,r17
 4008214:	48fff90e 	bge	r9,r3,40081fc <__alt_data_end+0xfc0081fc>
 4008218:	80800317 	ldw	r2,12(r16)
 400821c:	81000217 	ldw	r4,8(r16)
 4008220:	89400054 	ori	r5,r17,1
 4008224:	81400115 	stw	r5,4(r16)
 4008228:	20800315 	stw	r2,12(r4)
 400822c:	11000215 	stw	r4,8(r2)
 4008230:	8463883a 	add	r17,r16,r17
 4008234:	9c400515 	stw	r17,20(r19)
 4008238:	9c400415 	stw	r17,16(r19)
 400823c:	18800054 	ori	r2,r3,1
 4008240:	88800115 	stw	r2,4(r17)
 4008244:	8a000315 	stw	r8,12(r17)
 4008248:	8a000215 	stw	r8,8(r17)
 400824c:	88e3883a 	add	r17,r17,r3
 4008250:	88c00015 	stw	r3,0(r17)
 4008254:	9009883a 	mov	r4,r18
 4008258:	40101b40 	call	40101b4 <__malloc_unlock>
 400825c:	80800204 	addi	r2,r16,8
 4008260:	00001b06 	br	40082d0 <_malloc_r+0x2a4>
 4008264:	04400404 	movi	r17,16
 4008268:	89402536 	bltu	r17,r5,4008300 <_malloc_r+0x2d4>
 400826c:	40101900 	call	4010190 <__malloc_lock>
 4008270:	00800184 	movi	r2,6
 4008274:	01000084 	movi	r4,2
 4008278:	04c10074 	movhi	r19,1025
 400827c:	1085883a 	add	r2,r2,r2
 4008280:	9ccc4e04 	addi	r19,r19,12600
 4008284:	1085883a 	add	r2,r2,r2
 4008288:	9885883a 	add	r2,r19,r2
 400828c:	14000117 	ldw	r16,4(r2)
 4008290:	10fffe04 	addi	r3,r2,-8
 4008294:	80c0d926 	beq	r16,r3,40085fc <_malloc_r+0x5d0>
 4008298:	80c00117 	ldw	r3,4(r16)
 400829c:	81000317 	ldw	r4,12(r16)
 40082a0:	00bfff04 	movi	r2,-4
 40082a4:	1884703a 	and	r2,r3,r2
 40082a8:	81400217 	ldw	r5,8(r16)
 40082ac:	8085883a 	add	r2,r16,r2
 40082b0:	10c00117 	ldw	r3,4(r2)
 40082b4:	29000315 	stw	r4,12(r5)
 40082b8:	21400215 	stw	r5,8(r4)
 40082bc:	18c00054 	ori	r3,r3,1
 40082c0:	10c00115 	stw	r3,4(r2)
 40082c4:	9009883a 	mov	r4,r18
 40082c8:	40101b40 	call	40101b4 <__malloc_unlock>
 40082cc:	80800204 	addi	r2,r16,8
 40082d0:	dfc00a17 	ldw	ra,40(sp)
 40082d4:	df000917 	ldw	fp,36(sp)
 40082d8:	ddc00817 	ldw	r23,32(sp)
 40082dc:	dd800717 	ldw	r22,28(sp)
 40082e0:	dd400617 	ldw	r21,24(sp)
 40082e4:	dd000517 	ldw	r20,20(sp)
 40082e8:	dcc00417 	ldw	r19,16(sp)
 40082ec:	dc800317 	ldw	r18,12(sp)
 40082f0:	dc400217 	ldw	r17,8(sp)
 40082f4:	dc000117 	ldw	r16,4(sp)
 40082f8:	dec00b04 	addi	sp,sp,44
 40082fc:	f800283a 	ret
 4008300:	00800304 	movi	r2,12
 4008304:	90800015 	stw	r2,0(r18)
 4008308:	0005883a 	mov	r2,zero
 400830c:	003ff006 	br	40082d0 <__alt_data_end+0xfc0082d0>
 4008310:	01002004 	movi	r4,128
 4008314:	02001004 	movi	r8,64
 4008318:	01c00fc4 	movi	r7,63
 400831c:	003f6106 	br	40080a4 <__alt_data_end+0xfc0080a4>
 4008320:	4009883a 	mov	r4,r8
 4008324:	003f7506 	br	40080fc <__alt_data_end+0xfc0080fc>
 4008328:	81000317 	ldw	r4,12(r16)
 400832c:	003fde06 	br	40082a8 <__alt_data_end+0xfc0082a8>
 4008330:	81c5883a 	add	r2,r16,r7
 4008334:	11400117 	ldw	r5,4(r2)
 4008338:	9009883a 	mov	r4,r18
 400833c:	29400054 	ori	r5,r5,1
 4008340:	11400115 	stw	r5,4(r2)
 4008344:	40101b40 	call	40101b4 <__malloc_unlock>
 4008348:	80800204 	addi	r2,r16,8
 400834c:	003fe006 	br	40082d0 <__alt_data_end+0xfc0082d0>
 4008350:	9c000217 	ldw	r16,8(r19)
 4008354:	00bfff04 	movi	r2,-4
 4008358:	85800117 	ldw	r22,4(r16)
 400835c:	b0ac703a 	and	r22,r22,r2
 4008360:	b4400336 	bltu	r22,r17,4008370 <_malloc_r+0x344>
 4008364:	b445c83a 	sub	r2,r22,r17
 4008368:	00c003c4 	movi	r3,15
 400836c:	18805d16 	blt	r3,r2,40084e4 <_malloc_r+0x4b8>
 4008370:	05c10074 	movhi	r23,1025
 4008374:	00810074 	movhi	r2,1025
 4008378:	1098bc04 	addi	r2,r2,25328
 400837c:	bdd1d904 	addi	r23,r23,18276
 4008380:	15400017 	ldw	r21,0(r2)
 4008384:	b8c00017 	ldw	r3,0(r23)
 4008388:	00bfffc4 	movi	r2,-1
 400838c:	858d883a 	add	r6,r16,r22
 4008390:	8d6b883a 	add	r21,r17,r21
 4008394:	1880ea26 	beq	r3,r2,4008740 <_malloc_r+0x714>
 4008398:	ad4403c4 	addi	r21,r21,4111
 400839c:	00bc0004 	movi	r2,-4096
 40083a0:	a8aa703a 	and	r21,r21,r2
 40083a4:	a80b883a 	mov	r5,r21
 40083a8:	9009883a 	mov	r4,r18
 40083ac:	d9800015 	stw	r6,0(sp)
 40083b0:	400a4e00 	call	400a4e0 <_sbrk_r>
 40083b4:	1029883a 	mov	r20,r2
 40083b8:	00bfffc4 	movi	r2,-1
 40083bc:	d9800017 	ldw	r6,0(sp)
 40083c0:	a080e826 	beq	r20,r2,4008764 <_malloc_r+0x738>
 40083c4:	a180a636 	bltu	r20,r6,4008660 <_malloc_r+0x634>
 40083c8:	07010074 	movhi	fp,1025
 40083cc:	e718cf04 	addi	fp,fp,25404
 40083d0:	e0800017 	ldw	r2,0(fp)
 40083d4:	a887883a 	add	r3,r21,r2
 40083d8:	e0c00015 	stw	r3,0(fp)
 40083dc:	3500e626 	beq	r6,r20,4008778 <_malloc_r+0x74c>
 40083e0:	b9000017 	ldw	r4,0(r23)
 40083e4:	00bfffc4 	movi	r2,-1
 40083e8:	2080ee26 	beq	r4,r2,40087a4 <_malloc_r+0x778>
 40083ec:	a185c83a 	sub	r2,r20,r6
 40083f0:	10c5883a 	add	r2,r2,r3
 40083f4:	e0800015 	stw	r2,0(fp)
 40083f8:	a0c001cc 	andi	r3,r20,7
 40083fc:	1800bc26 	beq	r3,zero,40086f0 <_malloc_r+0x6c4>
 4008400:	a0e9c83a 	sub	r20,r20,r3
 4008404:	00840204 	movi	r2,4104
 4008408:	a5000204 	addi	r20,r20,8
 400840c:	10c7c83a 	sub	r3,r2,r3
 4008410:	a545883a 	add	r2,r20,r21
 4008414:	1083ffcc 	andi	r2,r2,4095
 4008418:	18abc83a 	sub	r21,r3,r2
 400841c:	a80b883a 	mov	r5,r21
 4008420:	9009883a 	mov	r4,r18
 4008424:	400a4e00 	call	400a4e0 <_sbrk_r>
 4008428:	00ffffc4 	movi	r3,-1
 400842c:	10c0e126 	beq	r2,r3,40087b4 <_malloc_r+0x788>
 4008430:	1505c83a 	sub	r2,r2,r20
 4008434:	1545883a 	add	r2,r2,r21
 4008438:	10800054 	ori	r2,r2,1
 400843c:	e0c00017 	ldw	r3,0(fp)
 4008440:	9d000215 	stw	r20,8(r19)
 4008444:	a0800115 	stw	r2,4(r20)
 4008448:	a8c7883a 	add	r3,r21,r3
 400844c:	e0c00015 	stw	r3,0(fp)
 4008450:	84c00e26 	beq	r16,r19,400848c <_malloc_r+0x460>
 4008454:	018003c4 	movi	r6,15
 4008458:	3580a72e 	bgeu	r6,r22,40086f8 <_malloc_r+0x6cc>
 400845c:	81400117 	ldw	r5,4(r16)
 4008460:	013ffe04 	movi	r4,-8
 4008464:	b0bffd04 	addi	r2,r22,-12
 4008468:	1104703a 	and	r2,r2,r4
 400846c:	2900004c 	andi	r4,r5,1
 4008470:	2088b03a 	or	r4,r4,r2
 4008474:	81000115 	stw	r4,4(r16)
 4008478:	01400144 	movi	r5,5
 400847c:	8089883a 	add	r4,r16,r2
 4008480:	21400115 	stw	r5,4(r4)
 4008484:	21400215 	stw	r5,8(r4)
 4008488:	3080cd36 	bltu	r6,r2,40087c0 <_malloc_r+0x794>
 400848c:	00810074 	movhi	r2,1025
 4008490:	1098bb04 	addi	r2,r2,25324
 4008494:	11000017 	ldw	r4,0(r2)
 4008498:	20c0012e 	bgeu	r4,r3,40084a0 <_malloc_r+0x474>
 400849c:	10c00015 	stw	r3,0(r2)
 40084a0:	00810074 	movhi	r2,1025
 40084a4:	1098ba04 	addi	r2,r2,25320
 40084a8:	11000017 	ldw	r4,0(r2)
 40084ac:	9c000217 	ldw	r16,8(r19)
 40084b0:	20c0012e 	bgeu	r4,r3,40084b8 <_malloc_r+0x48c>
 40084b4:	10c00015 	stw	r3,0(r2)
 40084b8:	80c00117 	ldw	r3,4(r16)
 40084bc:	00bfff04 	movi	r2,-4
 40084c0:	1886703a 	and	r3,r3,r2
 40084c4:	1c45c83a 	sub	r2,r3,r17
 40084c8:	1c400236 	bltu	r3,r17,40084d4 <_malloc_r+0x4a8>
 40084cc:	00c003c4 	movi	r3,15
 40084d0:	18800416 	blt	r3,r2,40084e4 <_malloc_r+0x4b8>
 40084d4:	9009883a 	mov	r4,r18
 40084d8:	40101b40 	call	40101b4 <__malloc_unlock>
 40084dc:	0005883a 	mov	r2,zero
 40084e0:	003f7b06 	br	40082d0 <__alt_data_end+0xfc0082d0>
 40084e4:	88c00054 	ori	r3,r17,1
 40084e8:	80c00115 	stw	r3,4(r16)
 40084ec:	8463883a 	add	r17,r16,r17
 40084f0:	10800054 	ori	r2,r2,1
 40084f4:	9c400215 	stw	r17,8(r19)
 40084f8:	88800115 	stw	r2,4(r17)
 40084fc:	9009883a 	mov	r4,r18
 4008500:	40101b40 	call	40101b4 <__malloc_unlock>
 4008504:	80800204 	addi	r2,r16,8
 4008508:	003f7106 	br	40082d0 <__alt_data_end+0xfc0082d0>
 400850c:	00c00504 	movi	r3,20
 4008510:	18804a2e 	bgeu	r3,r2,400863c <_malloc_r+0x610>
 4008514:	00c01504 	movi	r3,84
 4008518:	18806e36 	bltu	r3,r2,40086d4 <_malloc_r+0x6a8>
 400851c:	8804d33a 	srli	r2,r17,12
 4008520:	12001bc4 	addi	r8,r2,111
 4008524:	11c01b84 	addi	r7,r2,110
 4008528:	4209883a 	add	r4,r8,r8
 400852c:	003edd06 	br	40080a4 <__alt_data_end+0xfc0080a4>
 4008530:	3804d27a 	srli	r2,r7,9
 4008534:	00c00104 	movi	r3,4
 4008538:	1880442e 	bgeu	r3,r2,400864c <_malloc_r+0x620>
 400853c:	00c00504 	movi	r3,20
 4008540:	18808136 	bltu	r3,r2,4008748 <_malloc_r+0x71c>
 4008544:	11401704 	addi	r5,r2,92
 4008548:	10c016c4 	addi	r3,r2,91
 400854c:	294b883a 	add	r5,r5,r5
 4008550:	294b883a 	add	r5,r5,r5
 4008554:	294b883a 	add	r5,r5,r5
 4008558:	994b883a 	add	r5,r19,r5
 400855c:	28800017 	ldw	r2,0(r5)
 4008560:	01810074 	movhi	r6,1025
 4008564:	297ffe04 	addi	r5,r5,-8
 4008568:	318c4e04 	addi	r6,r6,12600
 400856c:	28806526 	beq	r5,r2,4008704 <_malloc_r+0x6d8>
 4008570:	01bfff04 	movi	r6,-4
 4008574:	10c00117 	ldw	r3,4(r2)
 4008578:	1986703a 	and	r3,r3,r6
 400857c:	38c0022e 	bgeu	r7,r3,4008588 <_malloc_r+0x55c>
 4008580:	10800217 	ldw	r2,8(r2)
 4008584:	28bffb1e 	bne	r5,r2,4008574 <__alt_data_end+0xfc008574>
 4008588:	11400317 	ldw	r5,12(r2)
 400858c:	98c00117 	ldw	r3,4(r19)
 4008590:	81400315 	stw	r5,12(r16)
 4008594:	80800215 	stw	r2,8(r16)
 4008598:	2c000215 	stw	r16,8(r5)
 400859c:	14000315 	stw	r16,12(r2)
 40085a0:	003ef806 	br	4008184 <__alt_data_end+0xfc008184>
 40085a4:	88c00054 	ori	r3,r17,1
 40085a8:	80c00115 	stw	r3,4(r16)
 40085ac:	8463883a 	add	r17,r16,r17
 40085b0:	34400515 	stw	r17,20(r6)
 40085b4:	34400415 	stw	r17,16(r6)
 40085b8:	10c00054 	ori	r3,r2,1
 40085bc:	8a000315 	stw	r8,12(r17)
 40085c0:	8a000215 	stw	r8,8(r17)
 40085c4:	88c00115 	stw	r3,4(r17)
 40085c8:	88a3883a 	add	r17,r17,r2
 40085cc:	88800015 	stw	r2,0(r17)
 40085d0:	9009883a 	mov	r4,r18
 40085d4:	40101b40 	call	40101b4 <__malloc_unlock>
 40085d8:	80800204 	addi	r2,r16,8
 40085dc:	003f3c06 	br	40082d0 <__alt_data_end+0xfc0082d0>
 40085e0:	30c00117 	ldw	r3,4(r6)
 40085e4:	003ee706 	br	4008184 <__alt_data_end+0xfc008184>
 40085e8:	5ac00044 	addi	r11,r11,1
 40085ec:	588000cc 	andi	r2,r11,3
 40085f0:	31800204 	addi	r6,r6,8
 40085f4:	103efd1e 	bne	r2,zero,40081ec <__alt_data_end+0xfc0081ec>
 40085f8:	00002406 	br	400868c <_malloc_r+0x660>
 40085fc:	14000317 	ldw	r16,12(r2)
 4008600:	143f251e 	bne	r2,r16,4008298 <__alt_data_end+0xfc008298>
 4008604:	21000084 	addi	r4,r4,2
 4008608:	003ebc06 	br	40080fc <__alt_data_end+0xfc0080fc>
 400860c:	8085883a 	add	r2,r16,r2
 4008610:	10c00117 	ldw	r3,4(r2)
 4008614:	81000317 	ldw	r4,12(r16)
 4008618:	81400217 	ldw	r5,8(r16)
 400861c:	18c00054 	ori	r3,r3,1
 4008620:	10c00115 	stw	r3,4(r2)
 4008624:	29000315 	stw	r4,12(r5)
 4008628:	21400215 	stw	r5,8(r4)
 400862c:	9009883a 	mov	r4,r18
 4008630:	40101b40 	call	40101b4 <__malloc_unlock>
 4008634:	80800204 	addi	r2,r16,8
 4008638:	003f2506 	br	40082d0 <__alt_data_end+0xfc0082d0>
 400863c:	12001704 	addi	r8,r2,92
 4008640:	11c016c4 	addi	r7,r2,91
 4008644:	4209883a 	add	r4,r8,r8
 4008648:	003e9606 	br	40080a4 <__alt_data_end+0xfc0080a4>
 400864c:	3804d1ba 	srli	r2,r7,6
 4008650:	11400e44 	addi	r5,r2,57
 4008654:	10c00e04 	addi	r3,r2,56
 4008658:	294b883a 	add	r5,r5,r5
 400865c:	003fbc06 	br	4008550 <__alt_data_end+0xfc008550>
 4008660:	84ff5926 	beq	r16,r19,40083c8 <__alt_data_end+0xfc0083c8>
 4008664:	00810074 	movhi	r2,1025
 4008668:	108c4e04 	addi	r2,r2,12600
 400866c:	14000217 	ldw	r16,8(r2)
 4008670:	00bfff04 	movi	r2,-4
 4008674:	80c00117 	ldw	r3,4(r16)
 4008678:	1886703a 	and	r3,r3,r2
 400867c:	003f9106 	br	40084c4 <__alt_data_end+0xfc0084c4>
 4008680:	60800217 	ldw	r2,8(r12)
 4008684:	213fffc4 	addi	r4,r4,-1
 4008688:	1300651e 	bne	r2,r12,4008820 <_malloc_r+0x7f4>
 400868c:	208000cc 	andi	r2,r4,3
 4008690:	633ffe04 	addi	r12,r12,-8
 4008694:	103ffa1e 	bne	r2,zero,4008680 <__alt_data_end+0xfc008680>
 4008698:	98800117 	ldw	r2,4(r19)
 400869c:	0146303a 	nor	r3,zero,r5
 40086a0:	1884703a 	and	r2,r3,r2
 40086a4:	98800115 	stw	r2,4(r19)
 40086a8:	294b883a 	add	r5,r5,r5
 40086ac:	117f2836 	bltu	r2,r5,4008350 <__alt_data_end+0xfc008350>
 40086b0:	283f2726 	beq	r5,zero,4008350 <__alt_data_end+0xfc008350>
 40086b4:	2886703a 	and	r3,r5,r2
 40086b8:	5809883a 	mov	r4,r11
 40086bc:	183ec31e 	bne	r3,zero,40081cc <__alt_data_end+0xfc0081cc>
 40086c0:	294b883a 	add	r5,r5,r5
 40086c4:	2886703a 	and	r3,r5,r2
 40086c8:	21000104 	addi	r4,r4,4
 40086cc:	183ffc26 	beq	r3,zero,40086c0 <__alt_data_end+0xfc0086c0>
 40086d0:	003ebe06 	br	40081cc <__alt_data_end+0xfc0081cc>
 40086d4:	00c05504 	movi	r3,340
 40086d8:	18801236 	bltu	r3,r2,4008724 <_malloc_r+0x6f8>
 40086dc:	8804d3fa 	srli	r2,r17,15
 40086e0:	12001e04 	addi	r8,r2,120
 40086e4:	11c01dc4 	addi	r7,r2,119
 40086e8:	4209883a 	add	r4,r8,r8
 40086ec:	003e6d06 	br	40080a4 <__alt_data_end+0xfc0080a4>
 40086f0:	00c40004 	movi	r3,4096
 40086f4:	003f4606 	br	4008410 <__alt_data_end+0xfc008410>
 40086f8:	00800044 	movi	r2,1
 40086fc:	a0800115 	stw	r2,4(r20)
 4008700:	003f7406 	br	40084d4 <__alt_data_end+0xfc0084d4>
 4008704:	1805d0ba 	srai	r2,r3,2
 4008708:	01c00044 	movi	r7,1
 400870c:	30c00117 	ldw	r3,4(r6)
 4008710:	388e983a 	sll	r7,r7,r2
 4008714:	2805883a 	mov	r2,r5
 4008718:	38c6b03a 	or	r3,r7,r3
 400871c:	30c00115 	stw	r3,4(r6)
 4008720:	003f9b06 	br	4008590 <__alt_data_end+0xfc008590>
 4008724:	00c15504 	movi	r3,1364
 4008728:	18801a36 	bltu	r3,r2,4008794 <_malloc_r+0x768>
 400872c:	8804d4ba 	srli	r2,r17,18
 4008730:	12001f44 	addi	r8,r2,125
 4008734:	11c01f04 	addi	r7,r2,124
 4008738:	4209883a 	add	r4,r8,r8
 400873c:	003e5906 	br	40080a4 <__alt_data_end+0xfc0080a4>
 4008740:	ad400404 	addi	r21,r21,16
 4008744:	003f1706 	br	40083a4 <__alt_data_end+0xfc0083a4>
 4008748:	00c01504 	movi	r3,84
 400874c:	18802336 	bltu	r3,r2,40087dc <_malloc_r+0x7b0>
 4008750:	3804d33a 	srli	r2,r7,12
 4008754:	11401bc4 	addi	r5,r2,111
 4008758:	10c01b84 	addi	r3,r2,110
 400875c:	294b883a 	add	r5,r5,r5
 4008760:	003f7b06 	br	4008550 <__alt_data_end+0xfc008550>
 4008764:	9c000217 	ldw	r16,8(r19)
 4008768:	00bfff04 	movi	r2,-4
 400876c:	80c00117 	ldw	r3,4(r16)
 4008770:	1886703a 	and	r3,r3,r2
 4008774:	003f5306 	br	40084c4 <__alt_data_end+0xfc0084c4>
 4008778:	3083ffcc 	andi	r2,r6,4095
 400877c:	103f181e 	bne	r2,zero,40083e0 <__alt_data_end+0xfc0083e0>
 4008780:	99000217 	ldw	r4,8(r19)
 4008784:	b545883a 	add	r2,r22,r21
 4008788:	10800054 	ori	r2,r2,1
 400878c:	20800115 	stw	r2,4(r4)
 4008790:	003f3e06 	br	400848c <__alt_data_end+0xfc00848c>
 4008794:	01003f84 	movi	r4,254
 4008798:	02001fc4 	movi	r8,127
 400879c:	01c01f84 	movi	r7,126
 40087a0:	003e4006 	br	40080a4 <__alt_data_end+0xfc0080a4>
 40087a4:	00810074 	movhi	r2,1025
 40087a8:	1091d904 	addi	r2,r2,18276
 40087ac:	15000015 	stw	r20,0(r2)
 40087b0:	003f1106 	br	40083f8 <__alt_data_end+0xfc0083f8>
 40087b4:	00800044 	movi	r2,1
 40087b8:	002b883a 	mov	r21,zero
 40087bc:	003f1f06 	br	400843c <__alt_data_end+0xfc00843c>
 40087c0:	81400204 	addi	r5,r16,8
 40087c4:	9009883a 	mov	r4,r18
 40087c8:	40074340 	call	4007434 <_free_r>
 40087cc:	00810074 	movhi	r2,1025
 40087d0:	1098cf04 	addi	r2,r2,25404
 40087d4:	10c00017 	ldw	r3,0(r2)
 40087d8:	003f2c06 	br	400848c <__alt_data_end+0xfc00848c>
 40087dc:	00c05504 	movi	r3,340
 40087e0:	18800536 	bltu	r3,r2,40087f8 <_malloc_r+0x7cc>
 40087e4:	3804d3fa 	srli	r2,r7,15
 40087e8:	11401e04 	addi	r5,r2,120
 40087ec:	10c01dc4 	addi	r3,r2,119
 40087f0:	294b883a 	add	r5,r5,r5
 40087f4:	003f5606 	br	4008550 <__alt_data_end+0xfc008550>
 40087f8:	00c15504 	movi	r3,1364
 40087fc:	18800536 	bltu	r3,r2,4008814 <_malloc_r+0x7e8>
 4008800:	3804d4ba 	srli	r2,r7,18
 4008804:	11401f44 	addi	r5,r2,125
 4008808:	10c01f04 	addi	r3,r2,124
 400880c:	294b883a 	add	r5,r5,r5
 4008810:	003f4f06 	br	4008550 <__alt_data_end+0xfc008550>
 4008814:	01403f84 	movi	r5,254
 4008818:	00c01f84 	movi	r3,126
 400881c:	003f4c06 	br	4008550 <__alt_data_end+0xfc008550>
 4008820:	98800117 	ldw	r2,4(r19)
 4008824:	003fa006 	br	40086a8 <__alt_data_end+0xfc0086a8>
 4008828:	8808d0fa 	srli	r4,r17,3
 400882c:	20800044 	addi	r2,r4,1
 4008830:	1085883a 	add	r2,r2,r2
 4008834:	003e9006 	br	4008278 <__alt_data_end+0xfc008278>

04008838 <memchr>:
 4008838:	208000cc 	andi	r2,r4,3
 400883c:	280f883a 	mov	r7,r5
 4008840:	10003426 	beq	r2,zero,4008914 <memchr+0xdc>
 4008844:	30bfffc4 	addi	r2,r6,-1
 4008848:	30001a26 	beq	r6,zero,40088b4 <memchr+0x7c>
 400884c:	20c00003 	ldbu	r3,0(r4)
 4008850:	29803fcc 	andi	r6,r5,255
 4008854:	30c0051e 	bne	r6,r3,400886c <memchr+0x34>
 4008858:	00001806 	br	40088bc <memchr+0x84>
 400885c:	10001526 	beq	r2,zero,40088b4 <memchr+0x7c>
 4008860:	20c00003 	ldbu	r3,0(r4)
 4008864:	10bfffc4 	addi	r2,r2,-1
 4008868:	30c01426 	beq	r6,r3,40088bc <memchr+0x84>
 400886c:	21000044 	addi	r4,r4,1
 4008870:	20c000cc 	andi	r3,r4,3
 4008874:	183ff91e 	bne	r3,zero,400885c <__alt_data_end+0xfc00885c>
 4008878:	020000c4 	movi	r8,3
 400887c:	40801136 	bltu	r8,r2,40088c4 <memchr+0x8c>
 4008880:	10000c26 	beq	r2,zero,40088b4 <memchr+0x7c>
 4008884:	20c00003 	ldbu	r3,0(r4)
 4008888:	29403fcc 	andi	r5,r5,255
 400888c:	28c00b26 	beq	r5,r3,40088bc <memchr+0x84>
 4008890:	20c00044 	addi	r3,r4,1
 4008894:	39803fcc 	andi	r6,r7,255
 4008898:	2089883a 	add	r4,r4,r2
 400889c:	00000306 	br	40088ac <memchr+0x74>
 40088a0:	18c00044 	addi	r3,r3,1
 40088a4:	197fffc3 	ldbu	r5,-1(r3)
 40088a8:	31400526 	beq	r6,r5,40088c0 <memchr+0x88>
 40088ac:	1805883a 	mov	r2,r3
 40088b0:	20fffb1e 	bne	r4,r3,40088a0 <__alt_data_end+0xfc0088a0>
 40088b4:	0005883a 	mov	r2,zero
 40088b8:	f800283a 	ret
 40088bc:	2005883a 	mov	r2,r4
 40088c0:	f800283a 	ret
 40088c4:	28c03fcc 	andi	r3,r5,255
 40088c8:	1812923a 	slli	r9,r3,8
 40088cc:	02ffbff4 	movhi	r11,65279
 40088d0:	02a02074 	movhi	r10,32897
 40088d4:	48d2b03a 	or	r9,r9,r3
 40088d8:	4806943a 	slli	r3,r9,16
 40088dc:	5affbfc4 	addi	r11,r11,-257
 40088e0:	52a02004 	addi	r10,r10,-32640
 40088e4:	48d2b03a 	or	r9,r9,r3
 40088e8:	20c00017 	ldw	r3,0(r4)
 40088ec:	48c6f03a 	xor	r3,r9,r3
 40088f0:	1acd883a 	add	r6,r3,r11
 40088f4:	00c6303a 	nor	r3,zero,r3
 40088f8:	30c6703a 	and	r3,r6,r3
 40088fc:	1a86703a 	and	r3,r3,r10
 4008900:	183fe01e 	bne	r3,zero,4008884 <__alt_data_end+0xfc008884>
 4008904:	10bfff04 	addi	r2,r2,-4
 4008908:	21000104 	addi	r4,r4,4
 400890c:	40bff636 	bltu	r8,r2,40088e8 <__alt_data_end+0xfc0088e8>
 4008910:	003fdb06 	br	4008880 <__alt_data_end+0xfc008880>
 4008914:	3005883a 	mov	r2,r6
 4008918:	003fd706 	br	4008878 <__alt_data_end+0xfc008878>

0400891c <memcpy>:
 400891c:	defffd04 	addi	sp,sp,-12
 4008920:	dfc00215 	stw	ra,8(sp)
 4008924:	dc400115 	stw	r17,4(sp)
 4008928:	dc000015 	stw	r16,0(sp)
 400892c:	00c003c4 	movi	r3,15
 4008930:	2005883a 	mov	r2,r4
 4008934:	1980452e 	bgeu	r3,r6,4008a4c <memcpy+0x130>
 4008938:	2906b03a 	or	r3,r5,r4
 400893c:	18c000cc 	andi	r3,r3,3
 4008940:	1800441e 	bne	r3,zero,4008a54 <memcpy+0x138>
 4008944:	347ffc04 	addi	r17,r6,-16
 4008948:	8822d13a 	srli	r17,r17,4
 400894c:	28c00104 	addi	r3,r5,4
 4008950:	23400104 	addi	r13,r4,4
 4008954:	8820913a 	slli	r16,r17,4
 4008958:	2b000204 	addi	r12,r5,8
 400895c:	22c00204 	addi	r11,r4,8
 4008960:	84000504 	addi	r16,r16,20
 4008964:	2a800304 	addi	r10,r5,12
 4008968:	22400304 	addi	r9,r4,12
 400896c:	2c21883a 	add	r16,r5,r16
 4008970:	2811883a 	mov	r8,r5
 4008974:	200f883a 	mov	r7,r4
 4008978:	41000017 	ldw	r4,0(r8)
 400897c:	1fc00017 	ldw	ra,0(r3)
 4008980:	63c00017 	ldw	r15,0(r12)
 4008984:	39000015 	stw	r4,0(r7)
 4008988:	53800017 	ldw	r14,0(r10)
 400898c:	6fc00015 	stw	ra,0(r13)
 4008990:	5bc00015 	stw	r15,0(r11)
 4008994:	4b800015 	stw	r14,0(r9)
 4008998:	18c00404 	addi	r3,r3,16
 400899c:	39c00404 	addi	r7,r7,16
 40089a0:	42000404 	addi	r8,r8,16
 40089a4:	6b400404 	addi	r13,r13,16
 40089a8:	63000404 	addi	r12,r12,16
 40089ac:	5ac00404 	addi	r11,r11,16
 40089b0:	52800404 	addi	r10,r10,16
 40089b4:	4a400404 	addi	r9,r9,16
 40089b8:	1c3fef1e 	bne	r3,r16,4008978 <__alt_data_end+0xfc008978>
 40089bc:	89c00044 	addi	r7,r17,1
 40089c0:	380e913a 	slli	r7,r7,4
 40089c4:	310003cc 	andi	r4,r6,15
 40089c8:	02c000c4 	movi	r11,3
 40089cc:	11c7883a 	add	r3,r2,r7
 40089d0:	29cb883a 	add	r5,r5,r7
 40089d4:	5900212e 	bgeu	r11,r4,4008a5c <memcpy+0x140>
 40089d8:	1813883a 	mov	r9,r3
 40089dc:	2811883a 	mov	r8,r5
 40089e0:	200f883a 	mov	r7,r4
 40089e4:	42800017 	ldw	r10,0(r8)
 40089e8:	4a400104 	addi	r9,r9,4
 40089ec:	39ffff04 	addi	r7,r7,-4
 40089f0:	4abfff15 	stw	r10,-4(r9)
 40089f4:	42000104 	addi	r8,r8,4
 40089f8:	59fffa36 	bltu	r11,r7,40089e4 <__alt_data_end+0xfc0089e4>
 40089fc:	213fff04 	addi	r4,r4,-4
 4008a00:	2008d0ba 	srli	r4,r4,2
 4008a04:	318000cc 	andi	r6,r6,3
 4008a08:	21000044 	addi	r4,r4,1
 4008a0c:	2109883a 	add	r4,r4,r4
 4008a10:	2109883a 	add	r4,r4,r4
 4008a14:	1907883a 	add	r3,r3,r4
 4008a18:	290b883a 	add	r5,r5,r4
 4008a1c:	30000626 	beq	r6,zero,4008a38 <memcpy+0x11c>
 4008a20:	198d883a 	add	r6,r3,r6
 4008a24:	29c00003 	ldbu	r7,0(r5)
 4008a28:	18c00044 	addi	r3,r3,1
 4008a2c:	29400044 	addi	r5,r5,1
 4008a30:	19ffffc5 	stb	r7,-1(r3)
 4008a34:	19bffb1e 	bne	r3,r6,4008a24 <__alt_data_end+0xfc008a24>
 4008a38:	dfc00217 	ldw	ra,8(sp)
 4008a3c:	dc400117 	ldw	r17,4(sp)
 4008a40:	dc000017 	ldw	r16,0(sp)
 4008a44:	dec00304 	addi	sp,sp,12
 4008a48:	f800283a 	ret
 4008a4c:	2007883a 	mov	r3,r4
 4008a50:	003ff206 	br	4008a1c <__alt_data_end+0xfc008a1c>
 4008a54:	2007883a 	mov	r3,r4
 4008a58:	003ff106 	br	4008a20 <__alt_data_end+0xfc008a20>
 4008a5c:	200d883a 	mov	r6,r4
 4008a60:	003fee06 	br	4008a1c <__alt_data_end+0xfc008a1c>

04008a64 <memmove>:
 4008a64:	2005883a 	mov	r2,r4
 4008a68:	29000b2e 	bgeu	r5,r4,4008a98 <memmove+0x34>
 4008a6c:	298f883a 	add	r7,r5,r6
 4008a70:	21c0092e 	bgeu	r4,r7,4008a98 <memmove+0x34>
 4008a74:	2187883a 	add	r3,r4,r6
 4008a78:	198bc83a 	sub	r5,r3,r6
 4008a7c:	30004826 	beq	r6,zero,4008ba0 <memmove+0x13c>
 4008a80:	39ffffc4 	addi	r7,r7,-1
 4008a84:	39000003 	ldbu	r4,0(r7)
 4008a88:	18ffffc4 	addi	r3,r3,-1
 4008a8c:	19000005 	stb	r4,0(r3)
 4008a90:	28fffb1e 	bne	r5,r3,4008a80 <__alt_data_end+0xfc008a80>
 4008a94:	f800283a 	ret
 4008a98:	00c003c4 	movi	r3,15
 4008a9c:	1980412e 	bgeu	r3,r6,4008ba4 <memmove+0x140>
 4008aa0:	2886b03a 	or	r3,r5,r2
 4008aa4:	18c000cc 	andi	r3,r3,3
 4008aa8:	1800401e 	bne	r3,zero,4008bac <memmove+0x148>
 4008aac:	33fffc04 	addi	r15,r6,-16
 4008ab0:	781ed13a 	srli	r15,r15,4
 4008ab4:	28c00104 	addi	r3,r5,4
 4008ab8:	13400104 	addi	r13,r2,4
 4008abc:	781c913a 	slli	r14,r15,4
 4008ac0:	2b000204 	addi	r12,r5,8
 4008ac4:	12c00204 	addi	r11,r2,8
 4008ac8:	73800504 	addi	r14,r14,20
 4008acc:	2a800304 	addi	r10,r5,12
 4008ad0:	12400304 	addi	r9,r2,12
 4008ad4:	2b9d883a 	add	r14,r5,r14
 4008ad8:	2811883a 	mov	r8,r5
 4008adc:	100f883a 	mov	r7,r2
 4008ae0:	41000017 	ldw	r4,0(r8)
 4008ae4:	39c00404 	addi	r7,r7,16
 4008ae8:	18c00404 	addi	r3,r3,16
 4008aec:	393ffc15 	stw	r4,-16(r7)
 4008af0:	193ffc17 	ldw	r4,-16(r3)
 4008af4:	6b400404 	addi	r13,r13,16
 4008af8:	5ac00404 	addi	r11,r11,16
 4008afc:	693ffc15 	stw	r4,-16(r13)
 4008b00:	61000017 	ldw	r4,0(r12)
 4008b04:	4a400404 	addi	r9,r9,16
 4008b08:	42000404 	addi	r8,r8,16
 4008b0c:	593ffc15 	stw	r4,-16(r11)
 4008b10:	51000017 	ldw	r4,0(r10)
 4008b14:	63000404 	addi	r12,r12,16
 4008b18:	52800404 	addi	r10,r10,16
 4008b1c:	493ffc15 	stw	r4,-16(r9)
 4008b20:	1bbfef1e 	bne	r3,r14,4008ae0 <__alt_data_end+0xfc008ae0>
 4008b24:	79000044 	addi	r4,r15,1
 4008b28:	2008913a 	slli	r4,r4,4
 4008b2c:	328003cc 	andi	r10,r6,15
 4008b30:	02c000c4 	movi	r11,3
 4008b34:	1107883a 	add	r3,r2,r4
 4008b38:	290b883a 	add	r5,r5,r4
 4008b3c:	5a801e2e 	bgeu	r11,r10,4008bb8 <memmove+0x154>
 4008b40:	1813883a 	mov	r9,r3
 4008b44:	2811883a 	mov	r8,r5
 4008b48:	500f883a 	mov	r7,r10
 4008b4c:	41000017 	ldw	r4,0(r8)
 4008b50:	4a400104 	addi	r9,r9,4
 4008b54:	39ffff04 	addi	r7,r7,-4
 4008b58:	493fff15 	stw	r4,-4(r9)
 4008b5c:	42000104 	addi	r8,r8,4
 4008b60:	59fffa36 	bltu	r11,r7,4008b4c <__alt_data_end+0xfc008b4c>
 4008b64:	513fff04 	addi	r4,r10,-4
 4008b68:	2008d0ba 	srli	r4,r4,2
 4008b6c:	318000cc 	andi	r6,r6,3
 4008b70:	21000044 	addi	r4,r4,1
 4008b74:	2109883a 	add	r4,r4,r4
 4008b78:	2109883a 	add	r4,r4,r4
 4008b7c:	1907883a 	add	r3,r3,r4
 4008b80:	290b883a 	add	r5,r5,r4
 4008b84:	30000b26 	beq	r6,zero,4008bb4 <memmove+0x150>
 4008b88:	198d883a 	add	r6,r3,r6
 4008b8c:	29c00003 	ldbu	r7,0(r5)
 4008b90:	18c00044 	addi	r3,r3,1
 4008b94:	29400044 	addi	r5,r5,1
 4008b98:	19ffffc5 	stb	r7,-1(r3)
 4008b9c:	19bffb1e 	bne	r3,r6,4008b8c <__alt_data_end+0xfc008b8c>
 4008ba0:	f800283a 	ret
 4008ba4:	1007883a 	mov	r3,r2
 4008ba8:	003ff606 	br	4008b84 <__alt_data_end+0xfc008b84>
 4008bac:	1007883a 	mov	r3,r2
 4008bb0:	003ff506 	br	4008b88 <__alt_data_end+0xfc008b88>
 4008bb4:	f800283a 	ret
 4008bb8:	500d883a 	mov	r6,r10
 4008bbc:	003ff106 	br	4008b84 <__alt_data_end+0xfc008b84>

04008bc0 <memset>:
 4008bc0:	20c000cc 	andi	r3,r4,3
 4008bc4:	2005883a 	mov	r2,r4
 4008bc8:	18004426 	beq	r3,zero,4008cdc <memset+0x11c>
 4008bcc:	31ffffc4 	addi	r7,r6,-1
 4008bd0:	30004026 	beq	r6,zero,4008cd4 <memset+0x114>
 4008bd4:	2813883a 	mov	r9,r5
 4008bd8:	200d883a 	mov	r6,r4
 4008bdc:	2007883a 	mov	r3,r4
 4008be0:	00000406 	br	4008bf4 <memset+0x34>
 4008be4:	3a3fffc4 	addi	r8,r7,-1
 4008be8:	31800044 	addi	r6,r6,1
 4008bec:	38003926 	beq	r7,zero,4008cd4 <memset+0x114>
 4008bf0:	400f883a 	mov	r7,r8
 4008bf4:	18c00044 	addi	r3,r3,1
 4008bf8:	32400005 	stb	r9,0(r6)
 4008bfc:	1a0000cc 	andi	r8,r3,3
 4008c00:	403ff81e 	bne	r8,zero,4008be4 <__alt_data_end+0xfc008be4>
 4008c04:	010000c4 	movi	r4,3
 4008c08:	21c02d2e 	bgeu	r4,r7,4008cc0 <memset+0x100>
 4008c0c:	29003fcc 	andi	r4,r5,255
 4008c10:	200c923a 	slli	r6,r4,8
 4008c14:	3108b03a 	or	r4,r6,r4
 4008c18:	200c943a 	slli	r6,r4,16
 4008c1c:	218cb03a 	or	r6,r4,r6
 4008c20:	010003c4 	movi	r4,15
 4008c24:	21c0182e 	bgeu	r4,r7,4008c88 <memset+0xc8>
 4008c28:	3b3ffc04 	addi	r12,r7,-16
 4008c2c:	6018d13a 	srli	r12,r12,4
 4008c30:	1a000104 	addi	r8,r3,4
 4008c34:	1ac00204 	addi	r11,r3,8
 4008c38:	6008913a 	slli	r4,r12,4
 4008c3c:	1a800304 	addi	r10,r3,12
 4008c40:	1813883a 	mov	r9,r3
 4008c44:	21000504 	addi	r4,r4,20
 4008c48:	1909883a 	add	r4,r3,r4
 4008c4c:	49800015 	stw	r6,0(r9)
 4008c50:	41800015 	stw	r6,0(r8)
 4008c54:	59800015 	stw	r6,0(r11)
 4008c58:	51800015 	stw	r6,0(r10)
 4008c5c:	42000404 	addi	r8,r8,16
 4008c60:	4a400404 	addi	r9,r9,16
 4008c64:	5ac00404 	addi	r11,r11,16
 4008c68:	52800404 	addi	r10,r10,16
 4008c6c:	413ff71e 	bne	r8,r4,4008c4c <__alt_data_end+0xfc008c4c>
 4008c70:	63000044 	addi	r12,r12,1
 4008c74:	6018913a 	slli	r12,r12,4
 4008c78:	39c003cc 	andi	r7,r7,15
 4008c7c:	010000c4 	movi	r4,3
 4008c80:	1b07883a 	add	r3,r3,r12
 4008c84:	21c00e2e 	bgeu	r4,r7,4008cc0 <memset+0x100>
 4008c88:	1813883a 	mov	r9,r3
 4008c8c:	3811883a 	mov	r8,r7
 4008c90:	010000c4 	movi	r4,3
 4008c94:	49800015 	stw	r6,0(r9)
 4008c98:	423fff04 	addi	r8,r8,-4
 4008c9c:	4a400104 	addi	r9,r9,4
 4008ca0:	223ffc36 	bltu	r4,r8,4008c94 <__alt_data_end+0xfc008c94>
 4008ca4:	393fff04 	addi	r4,r7,-4
 4008ca8:	2008d0ba 	srli	r4,r4,2
 4008cac:	39c000cc 	andi	r7,r7,3
 4008cb0:	21000044 	addi	r4,r4,1
 4008cb4:	2109883a 	add	r4,r4,r4
 4008cb8:	2109883a 	add	r4,r4,r4
 4008cbc:	1907883a 	add	r3,r3,r4
 4008cc0:	38000526 	beq	r7,zero,4008cd8 <memset+0x118>
 4008cc4:	19cf883a 	add	r7,r3,r7
 4008cc8:	19400005 	stb	r5,0(r3)
 4008ccc:	18c00044 	addi	r3,r3,1
 4008cd0:	38fffd1e 	bne	r7,r3,4008cc8 <__alt_data_end+0xfc008cc8>
 4008cd4:	f800283a 	ret
 4008cd8:	f800283a 	ret
 4008cdc:	2007883a 	mov	r3,r4
 4008ce0:	300f883a 	mov	r7,r6
 4008ce4:	003fc706 	br	4008c04 <__alt_data_end+0xfc008c04>

04008ce8 <_Balloc>:
 4008ce8:	20801317 	ldw	r2,76(r4)
 4008cec:	defffc04 	addi	sp,sp,-16
 4008cf0:	dc400115 	stw	r17,4(sp)
 4008cf4:	dc000015 	stw	r16,0(sp)
 4008cf8:	dfc00315 	stw	ra,12(sp)
 4008cfc:	dc800215 	stw	r18,8(sp)
 4008d00:	2023883a 	mov	r17,r4
 4008d04:	2821883a 	mov	r16,r5
 4008d08:	10000f26 	beq	r2,zero,4008d48 <_Balloc+0x60>
 4008d0c:	8407883a 	add	r3,r16,r16
 4008d10:	18c7883a 	add	r3,r3,r3
 4008d14:	10c7883a 	add	r3,r2,r3
 4008d18:	18800017 	ldw	r2,0(r3)
 4008d1c:	10001126 	beq	r2,zero,4008d64 <_Balloc+0x7c>
 4008d20:	11000017 	ldw	r4,0(r2)
 4008d24:	19000015 	stw	r4,0(r3)
 4008d28:	10000415 	stw	zero,16(r2)
 4008d2c:	10000315 	stw	zero,12(r2)
 4008d30:	dfc00317 	ldw	ra,12(sp)
 4008d34:	dc800217 	ldw	r18,8(sp)
 4008d38:	dc400117 	ldw	r17,4(sp)
 4008d3c:	dc000017 	ldw	r16,0(sp)
 4008d40:	dec00404 	addi	sp,sp,16
 4008d44:	f800283a 	ret
 4008d48:	01800844 	movi	r6,33
 4008d4c:	01400104 	movi	r5,4
 4008d50:	400c0500 	call	400c050 <_calloc_r>
 4008d54:	88801315 	stw	r2,76(r17)
 4008d58:	103fec1e 	bne	r2,zero,4008d0c <__alt_data_end+0xfc008d0c>
 4008d5c:	0005883a 	mov	r2,zero
 4008d60:	003ff306 	br	4008d30 <__alt_data_end+0xfc008d30>
 4008d64:	01400044 	movi	r5,1
 4008d68:	2c24983a 	sll	r18,r5,r16
 4008d6c:	8809883a 	mov	r4,r17
 4008d70:	91800144 	addi	r6,r18,5
 4008d74:	318d883a 	add	r6,r6,r6
 4008d78:	318d883a 	add	r6,r6,r6
 4008d7c:	400c0500 	call	400c050 <_calloc_r>
 4008d80:	103ff626 	beq	r2,zero,4008d5c <__alt_data_end+0xfc008d5c>
 4008d84:	14000115 	stw	r16,4(r2)
 4008d88:	14800215 	stw	r18,8(r2)
 4008d8c:	003fe606 	br	4008d28 <__alt_data_end+0xfc008d28>

04008d90 <_Bfree>:
 4008d90:	28000826 	beq	r5,zero,4008db4 <_Bfree+0x24>
 4008d94:	28c00117 	ldw	r3,4(r5)
 4008d98:	20801317 	ldw	r2,76(r4)
 4008d9c:	18c7883a 	add	r3,r3,r3
 4008da0:	18c7883a 	add	r3,r3,r3
 4008da4:	10c5883a 	add	r2,r2,r3
 4008da8:	10c00017 	ldw	r3,0(r2)
 4008dac:	28c00015 	stw	r3,0(r5)
 4008db0:	11400015 	stw	r5,0(r2)
 4008db4:	f800283a 	ret

04008db8 <__multadd>:
 4008db8:	defff704 	addi	sp,sp,-36
 4008dbc:	dc800215 	stw	r18,8(sp)
 4008dc0:	2c800417 	ldw	r18,16(r5)
 4008dc4:	dd800615 	stw	r22,24(sp)
 4008dc8:	dd400515 	stw	r21,20(sp)
 4008dcc:	dd000415 	stw	r20,16(sp)
 4008dd0:	dcc00315 	stw	r19,12(sp)
 4008dd4:	dc400115 	stw	r17,4(sp)
 4008dd8:	dc000015 	stw	r16,0(sp)
 4008ddc:	dfc00815 	stw	ra,32(sp)
 4008de0:	ddc00715 	stw	r23,28(sp)
 4008de4:	2827883a 	mov	r19,r5
 4008de8:	2029883a 	mov	r20,r4
 4008dec:	3023883a 	mov	r17,r6
 4008df0:	3821883a 	mov	r16,r7
 4008df4:	2d400504 	addi	r21,r5,20
 4008df8:	002d883a 	mov	r22,zero
 4008dfc:	adc00017 	ldw	r23,0(r21)
 4008e00:	880b883a 	mov	r5,r17
 4008e04:	ad400104 	addi	r21,r21,4
 4008e08:	b93fffcc 	andi	r4,r23,65535
 4008e0c:	4002ce00 	call	4002ce0 <__mulsi3>
 4008e10:	b808d43a 	srli	r4,r23,16
 4008e14:	880b883a 	mov	r5,r17
 4008e18:	1421883a 	add	r16,r2,r16
 4008e1c:	4002ce00 	call	4002ce0 <__mulsi3>
 4008e20:	800ed43a 	srli	r7,r16,16
 4008e24:	80ffffcc 	andi	r3,r16,65535
 4008e28:	b5800044 	addi	r22,r22,1
 4008e2c:	11c5883a 	add	r2,r2,r7
 4008e30:	100e943a 	slli	r7,r2,16
 4008e34:	1020d43a 	srli	r16,r2,16
 4008e38:	38c7883a 	add	r3,r7,r3
 4008e3c:	a8ffff15 	stw	r3,-4(r21)
 4008e40:	b4bfee16 	blt	r22,r18,4008dfc <__alt_data_end+0xfc008dfc>
 4008e44:	80000926 	beq	r16,zero,4008e6c <__multadd+0xb4>
 4008e48:	98800217 	ldw	r2,8(r19)
 4008e4c:	9080130e 	bge	r18,r2,4008e9c <__multadd+0xe4>
 4008e50:	90800144 	addi	r2,r18,5
 4008e54:	1085883a 	add	r2,r2,r2
 4008e58:	1085883a 	add	r2,r2,r2
 4008e5c:	9885883a 	add	r2,r19,r2
 4008e60:	14000015 	stw	r16,0(r2)
 4008e64:	94800044 	addi	r18,r18,1
 4008e68:	9c800415 	stw	r18,16(r19)
 4008e6c:	9805883a 	mov	r2,r19
 4008e70:	dfc00817 	ldw	ra,32(sp)
 4008e74:	ddc00717 	ldw	r23,28(sp)
 4008e78:	dd800617 	ldw	r22,24(sp)
 4008e7c:	dd400517 	ldw	r21,20(sp)
 4008e80:	dd000417 	ldw	r20,16(sp)
 4008e84:	dcc00317 	ldw	r19,12(sp)
 4008e88:	dc800217 	ldw	r18,8(sp)
 4008e8c:	dc400117 	ldw	r17,4(sp)
 4008e90:	dc000017 	ldw	r16,0(sp)
 4008e94:	dec00904 	addi	sp,sp,36
 4008e98:	f800283a 	ret
 4008e9c:	99400117 	ldw	r5,4(r19)
 4008ea0:	a009883a 	mov	r4,r20
 4008ea4:	29400044 	addi	r5,r5,1
 4008ea8:	4008ce80 	call	4008ce8 <_Balloc>
 4008eac:	99800417 	ldw	r6,16(r19)
 4008eb0:	99400304 	addi	r5,r19,12
 4008eb4:	11000304 	addi	r4,r2,12
 4008eb8:	31800084 	addi	r6,r6,2
 4008ebc:	318d883a 	add	r6,r6,r6
 4008ec0:	318d883a 	add	r6,r6,r6
 4008ec4:	1023883a 	mov	r17,r2
 4008ec8:	400891c0 	call	400891c <memcpy>
 4008ecc:	98000a26 	beq	r19,zero,4008ef8 <__multadd+0x140>
 4008ed0:	98c00117 	ldw	r3,4(r19)
 4008ed4:	a0801317 	ldw	r2,76(r20)
 4008ed8:	18c7883a 	add	r3,r3,r3
 4008edc:	18c7883a 	add	r3,r3,r3
 4008ee0:	10c5883a 	add	r2,r2,r3
 4008ee4:	10c00017 	ldw	r3,0(r2)
 4008ee8:	98c00015 	stw	r3,0(r19)
 4008eec:	14c00015 	stw	r19,0(r2)
 4008ef0:	8827883a 	mov	r19,r17
 4008ef4:	003fd606 	br	4008e50 <__alt_data_end+0xfc008e50>
 4008ef8:	8827883a 	mov	r19,r17
 4008efc:	003fd406 	br	4008e50 <__alt_data_end+0xfc008e50>

04008f00 <__s2b>:
 4008f00:	defff904 	addi	sp,sp,-28
 4008f04:	dc400115 	stw	r17,4(sp)
 4008f08:	dc000015 	stw	r16,0(sp)
 4008f0c:	2023883a 	mov	r17,r4
 4008f10:	2821883a 	mov	r16,r5
 4008f14:	39000204 	addi	r4,r7,8
 4008f18:	01400244 	movi	r5,9
 4008f1c:	dcc00315 	stw	r19,12(sp)
 4008f20:	dc800215 	stw	r18,8(sp)
 4008f24:	dfc00615 	stw	ra,24(sp)
 4008f28:	dd400515 	stw	r21,20(sp)
 4008f2c:	dd000415 	stw	r20,16(sp)
 4008f30:	3825883a 	mov	r18,r7
 4008f34:	3027883a 	mov	r19,r6
 4008f38:	4002b2c0 	call	4002b2c <__divsi3>
 4008f3c:	00c00044 	movi	r3,1
 4008f40:	000b883a 	mov	r5,zero
 4008f44:	1880030e 	bge	r3,r2,4008f54 <__s2b+0x54>
 4008f48:	18c7883a 	add	r3,r3,r3
 4008f4c:	29400044 	addi	r5,r5,1
 4008f50:	18bffd16 	blt	r3,r2,4008f48 <__alt_data_end+0xfc008f48>
 4008f54:	8809883a 	mov	r4,r17
 4008f58:	4008ce80 	call	4008ce8 <_Balloc>
 4008f5c:	d8c00717 	ldw	r3,28(sp)
 4008f60:	10c00515 	stw	r3,20(r2)
 4008f64:	00c00044 	movi	r3,1
 4008f68:	10c00415 	stw	r3,16(r2)
 4008f6c:	00c00244 	movi	r3,9
 4008f70:	1cc0210e 	bge	r3,r19,4008ff8 <__s2b+0xf8>
 4008f74:	80eb883a 	add	r21,r16,r3
 4008f78:	a829883a 	mov	r20,r21
 4008f7c:	84e1883a 	add	r16,r16,r19
 4008f80:	a1c00007 	ldb	r7,0(r20)
 4008f84:	01800284 	movi	r6,10
 4008f88:	a5000044 	addi	r20,r20,1
 4008f8c:	100b883a 	mov	r5,r2
 4008f90:	39fff404 	addi	r7,r7,-48
 4008f94:	8809883a 	mov	r4,r17
 4008f98:	4008db80 	call	4008db8 <__multadd>
 4008f9c:	a43ff81e 	bne	r20,r16,4008f80 <__alt_data_end+0xfc008f80>
 4008fa0:	ace1883a 	add	r16,r21,r19
 4008fa4:	843ffe04 	addi	r16,r16,-8
 4008fa8:	9c800a0e 	bge	r19,r18,4008fd4 <__s2b+0xd4>
 4008fac:	94e5c83a 	sub	r18,r18,r19
 4008fb0:	84a5883a 	add	r18,r16,r18
 4008fb4:	81c00007 	ldb	r7,0(r16)
 4008fb8:	01800284 	movi	r6,10
 4008fbc:	84000044 	addi	r16,r16,1
 4008fc0:	100b883a 	mov	r5,r2
 4008fc4:	39fff404 	addi	r7,r7,-48
 4008fc8:	8809883a 	mov	r4,r17
 4008fcc:	4008db80 	call	4008db8 <__multadd>
 4008fd0:	84bff81e 	bne	r16,r18,4008fb4 <__alt_data_end+0xfc008fb4>
 4008fd4:	dfc00617 	ldw	ra,24(sp)
 4008fd8:	dd400517 	ldw	r21,20(sp)
 4008fdc:	dd000417 	ldw	r20,16(sp)
 4008fe0:	dcc00317 	ldw	r19,12(sp)
 4008fe4:	dc800217 	ldw	r18,8(sp)
 4008fe8:	dc400117 	ldw	r17,4(sp)
 4008fec:	dc000017 	ldw	r16,0(sp)
 4008ff0:	dec00704 	addi	sp,sp,28
 4008ff4:	f800283a 	ret
 4008ff8:	84000284 	addi	r16,r16,10
 4008ffc:	1827883a 	mov	r19,r3
 4009000:	003fe906 	br	4008fa8 <__alt_data_end+0xfc008fa8>

04009004 <__hi0bits>:
 4009004:	20bfffec 	andhi	r2,r4,65535
 4009008:	1000141e 	bne	r2,zero,400905c <__hi0bits+0x58>
 400900c:	2008943a 	slli	r4,r4,16
 4009010:	00800404 	movi	r2,16
 4009014:	20ffc02c 	andhi	r3,r4,65280
 4009018:	1800021e 	bne	r3,zero,4009024 <__hi0bits+0x20>
 400901c:	2008923a 	slli	r4,r4,8
 4009020:	10800204 	addi	r2,r2,8
 4009024:	20fc002c 	andhi	r3,r4,61440
 4009028:	1800021e 	bne	r3,zero,4009034 <__hi0bits+0x30>
 400902c:	2008913a 	slli	r4,r4,4
 4009030:	10800104 	addi	r2,r2,4
 4009034:	20f0002c 	andhi	r3,r4,49152
 4009038:	1800031e 	bne	r3,zero,4009048 <__hi0bits+0x44>
 400903c:	2109883a 	add	r4,r4,r4
 4009040:	10800084 	addi	r2,r2,2
 4009044:	2109883a 	add	r4,r4,r4
 4009048:	20000316 	blt	r4,zero,4009058 <__hi0bits+0x54>
 400904c:	2110002c 	andhi	r4,r4,16384
 4009050:	2000041e 	bne	r4,zero,4009064 <__hi0bits+0x60>
 4009054:	00800804 	movi	r2,32
 4009058:	f800283a 	ret
 400905c:	0005883a 	mov	r2,zero
 4009060:	003fec06 	br	4009014 <__alt_data_end+0xfc009014>
 4009064:	10800044 	addi	r2,r2,1
 4009068:	f800283a 	ret

0400906c <__lo0bits>:
 400906c:	20c00017 	ldw	r3,0(r4)
 4009070:	188001cc 	andi	r2,r3,7
 4009074:	10000826 	beq	r2,zero,4009098 <__lo0bits+0x2c>
 4009078:	1880004c 	andi	r2,r3,1
 400907c:	1000211e 	bne	r2,zero,4009104 <__lo0bits+0x98>
 4009080:	1880008c 	andi	r2,r3,2
 4009084:	1000211e 	bne	r2,zero,400910c <__lo0bits+0xa0>
 4009088:	1806d0ba 	srli	r3,r3,2
 400908c:	00800084 	movi	r2,2
 4009090:	20c00015 	stw	r3,0(r4)
 4009094:	f800283a 	ret
 4009098:	18bfffcc 	andi	r2,r3,65535
 400909c:	10001326 	beq	r2,zero,40090ec <__lo0bits+0x80>
 40090a0:	0005883a 	mov	r2,zero
 40090a4:	19403fcc 	andi	r5,r3,255
 40090a8:	2800021e 	bne	r5,zero,40090b4 <__lo0bits+0x48>
 40090ac:	1806d23a 	srli	r3,r3,8
 40090b0:	10800204 	addi	r2,r2,8
 40090b4:	194003cc 	andi	r5,r3,15
 40090b8:	2800021e 	bne	r5,zero,40090c4 <__lo0bits+0x58>
 40090bc:	1806d13a 	srli	r3,r3,4
 40090c0:	10800104 	addi	r2,r2,4
 40090c4:	194000cc 	andi	r5,r3,3
 40090c8:	2800021e 	bne	r5,zero,40090d4 <__lo0bits+0x68>
 40090cc:	1806d0ba 	srli	r3,r3,2
 40090d0:	10800084 	addi	r2,r2,2
 40090d4:	1940004c 	andi	r5,r3,1
 40090d8:	2800081e 	bne	r5,zero,40090fc <__lo0bits+0x90>
 40090dc:	1806d07a 	srli	r3,r3,1
 40090e0:	1800051e 	bne	r3,zero,40090f8 <__lo0bits+0x8c>
 40090e4:	00800804 	movi	r2,32
 40090e8:	f800283a 	ret
 40090ec:	1806d43a 	srli	r3,r3,16
 40090f0:	00800404 	movi	r2,16
 40090f4:	003feb06 	br	40090a4 <__alt_data_end+0xfc0090a4>
 40090f8:	10800044 	addi	r2,r2,1
 40090fc:	20c00015 	stw	r3,0(r4)
 4009100:	f800283a 	ret
 4009104:	0005883a 	mov	r2,zero
 4009108:	f800283a 	ret
 400910c:	1806d07a 	srli	r3,r3,1
 4009110:	00800044 	movi	r2,1
 4009114:	20c00015 	stw	r3,0(r4)
 4009118:	f800283a 	ret

0400911c <__i2b>:
 400911c:	defffd04 	addi	sp,sp,-12
 4009120:	dc000015 	stw	r16,0(sp)
 4009124:	04000044 	movi	r16,1
 4009128:	dc400115 	stw	r17,4(sp)
 400912c:	2823883a 	mov	r17,r5
 4009130:	800b883a 	mov	r5,r16
 4009134:	dfc00215 	stw	ra,8(sp)
 4009138:	4008ce80 	call	4008ce8 <_Balloc>
 400913c:	14400515 	stw	r17,20(r2)
 4009140:	14000415 	stw	r16,16(r2)
 4009144:	dfc00217 	ldw	ra,8(sp)
 4009148:	dc400117 	ldw	r17,4(sp)
 400914c:	dc000017 	ldw	r16,0(sp)
 4009150:	dec00304 	addi	sp,sp,12
 4009154:	f800283a 	ret

04009158 <__multiply>:
 4009158:	deffef04 	addi	sp,sp,-68
 400915c:	dc400815 	stw	r17,32(sp)
 4009160:	dc000715 	stw	r16,28(sp)
 4009164:	34400417 	ldw	r17,16(r6)
 4009168:	2c000417 	ldw	r16,16(r5)
 400916c:	dd800d15 	stw	r22,52(sp)
 4009170:	dc800915 	stw	r18,36(sp)
 4009174:	dfc01015 	stw	ra,64(sp)
 4009178:	df000f15 	stw	fp,60(sp)
 400917c:	ddc00e15 	stw	r23,56(sp)
 4009180:	dd400c15 	stw	r21,48(sp)
 4009184:	dd000b15 	stw	r20,44(sp)
 4009188:	dcc00a15 	stw	r19,40(sp)
 400918c:	2825883a 	mov	r18,r5
 4009190:	302d883a 	mov	r22,r6
 4009194:	8440050e 	bge	r16,r17,40091ac <__multiply+0x54>
 4009198:	8007883a 	mov	r3,r16
 400919c:	3025883a 	mov	r18,r6
 40091a0:	8821883a 	mov	r16,r17
 40091a4:	282d883a 	mov	r22,r5
 40091a8:	1823883a 	mov	r17,r3
 40091ac:	90800217 	ldw	r2,8(r18)
 40091b0:	8447883a 	add	r3,r16,r17
 40091b4:	d8c00215 	stw	r3,8(sp)
 40091b8:	91400117 	ldw	r5,4(r18)
 40091bc:	10c0010e 	bge	r2,r3,40091c4 <__multiply+0x6c>
 40091c0:	29400044 	addi	r5,r5,1
 40091c4:	4008ce80 	call	4008ce8 <_Balloc>
 40091c8:	d8c00217 	ldw	r3,8(sp)
 40091cc:	d8800615 	stw	r2,24(sp)
 40091d0:	18eb883a 	add	r21,r3,r3
 40091d4:	ad6b883a 	add	r21,r21,r21
 40091d8:	10c00504 	addi	r3,r2,20
 40091dc:	1d6b883a 	add	r21,r3,r21
 40091e0:	d8c00115 	stw	r3,4(sp)
 40091e4:	dd400315 	stw	r21,12(sp)
 40091e8:	1805883a 	mov	r2,r3
 40091ec:	1d40042e 	bgeu	r3,r21,4009200 <__multiply+0xa8>
 40091f0:	d8c00317 	ldw	r3,12(sp)
 40091f4:	10000015 	stw	zero,0(r2)
 40091f8:	10800104 	addi	r2,r2,4
 40091fc:	10fffc36 	bltu	r2,r3,40091f0 <__alt_data_end+0xfc0091f0>
 4009200:	8c63883a 	add	r17,r17,r17
 4009204:	b5800504 	addi	r22,r22,20
 4009208:	8c63883a 	add	r17,r17,r17
 400920c:	94800504 	addi	r18,r18,20
 4009210:	8421883a 	add	r16,r16,r16
 4009214:	b463883a 	add	r17,r22,r17
 4009218:	8421883a 	add	r16,r16,r16
 400921c:	dd800015 	stw	r22,0(sp)
 4009220:	dc800415 	stw	r18,16(sp)
 4009224:	dc400515 	stw	r17,20(sp)
 4009228:	9429883a 	add	r20,r18,r16
 400922c:	b4404f2e 	bgeu	r22,r17,400936c <__multiply+0x214>
 4009230:	d8c00017 	ldw	r3,0(sp)
 4009234:	1c800017 	ldw	r18,0(r3)
 4009238:	947fffcc 	andi	r17,r18,65535
 400923c:	88001e26 	beq	r17,zero,40092b8 <__multiply+0x160>
 4009240:	dd800117 	ldw	r22,4(sp)
 4009244:	dd400417 	ldw	r21,16(sp)
 4009248:	0027883a 	mov	r19,zero
 400924c:	ac800017 	ldw	r18,0(r21)
 4009250:	b4000017 	ldw	r16,0(r22)
 4009254:	880b883a 	mov	r5,r17
 4009258:	913fffcc 	andi	r4,r18,65535
 400925c:	4002ce00 	call	4002ce0 <__mulsi3>
 4009260:	9008d43a 	srli	r4,r18,16
 4009264:	84bfffcc 	andi	r18,r16,65535
 4009268:	1485883a 	add	r2,r2,r18
 400926c:	14e5883a 	add	r18,r2,r19
 4009270:	8020d43a 	srli	r16,r16,16
 4009274:	9026d43a 	srli	r19,r18,16
 4009278:	880b883a 	mov	r5,r17
 400927c:	4002ce00 	call	4002ce0 <__mulsi3>
 4009280:	1405883a 	add	r2,r2,r16
 4009284:	14e1883a 	add	r16,r2,r19
 4009288:	90ffffcc 	andi	r3,r18,65535
 400928c:	8024943a 	slli	r18,r16,16
 4009290:	ad400104 	addi	r21,r21,4
 4009294:	b005883a 	mov	r2,r22
 4009298:	90c6b03a 	or	r3,r18,r3
 400929c:	b0c00015 	stw	r3,0(r22)
 40092a0:	8026d43a 	srli	r19,r16,16
 40092a4:	b5800104 	addi	r22,r22,4
 40092a8:	ad3fe836 	bltu	r21,r20,400924c <__alt_data_end+0xfc00924c>
 40092ac:	d8c00017 	ldw	r3,0(sp)
 40092b0:	14c00115 	stw	r19,4(r2)
 40092b4:	1c800017 	ldw	r18,0(r3)
 40092b8:	9024d43a 	srli	r18,r18,16
 40092bc:	90002226 	beq	r18,zero,4009348 <__multiply+0x1f0>
 40092c0:	d8c00117 	ldw	r3,4(sp)
 40092c4:	dd800417 	ldw	r22,16(sp)
 40092c8:	002f883a 	mov	r23,zero
 40092cc:	1f000017 	ldw	fp,0(r3)
 40092d0:	1823883a 	mov	r17,r3
 40092d4:	182b883a 	mov	r21,r3
 40092d8:	e021883a 	mov	r16,fp
 40092dc:	00000106 	br	40092e4 <__multiply+0x18c>
 40092e0:	982b883a 	mov	r21,r19
 40092e4:	b100000b 	ldhu	r4,0(r22)
 40092e8:	8020d43a 	srli	r16,r16,16
 40092ec:	900b883a 	mov	r5,r18
 40092f0:	4002ce00 	call	4002ce0 <__mulsi3>
 40092f4:	1405883a 	add	r2,r2,r16
 40092f8:	15ef883a 	add	r23,r2,r23
 40092fc:	b804943a 	slli	r2,r23,16
 4009300:	e0ffffcc 	andi	r3,fp,65535
 4009304:	8c400104 	addi	r17,r17,4
 4009308:	10c6b03a 	or	r3,r2,r3
 400930c:	88ffff15 	stw	r3,-4(r17)
 4009310:	b5800104 	addi	r22,r22,4
 4009314:	b13fff17 	ldw	r4,-4(r22)
 4009318:	acc00104 	addi	r19,r21,4
 400931c:	900b883a 	mov	r5,r18
 4009320:	2008d43a 	srli	r4,r4,16
 4009324:	9c000017 	ldw	r16,0(r19)
 4009328:	4002ce00 	call	4002ce0 <__mulsi3>
 400932c:	b806d43a 	srli	r3,r23,16
 4009330:	813fffcc 	andi	r4,r16,65535
 4009334:	1105883a 	add	r2,r2,r4
 4009338:	10f9883a 	add	fp,r2,r3
 400933c:	e02ed43a 	srli	r23,fp,16
 4009340:	b53fe736 	bltu	r22,r20,40092e0 <__alt_data_end+0xfc0092e0>
 4009344:	af000115 	stw	fp,4(r21)
 4009348:	d8c00017 	ldw	r3,0(sp)
 400934c:	d9000517 	ldw	r4,20(sp)
 4009350:	18c00104 	addi	r3,r3,4
 4009354:	d8c00015 	stw	r3,0(sp)
 4009358:	d8c00117 	ldw	r3,4(sp)
 400935c:	18c00104 	addi	r3,r3,4
 4009360:	d8c00115 	stw	r3,4(sp)
 4009364:	d8c00017 	ldw	r3,0(sp)
 4009368:	193fb136 	bltu	r3,r4,4009230 <__alt_data_end+0xfc009230>
 400936c:	d8c00217 	ldw	r3,8(sp)
 4009370:	00c00c0e 	bge	zero,r3,40093a4 <__multiply+0x24c>
 4009374:	d8c00317 	ldw	r3,12(sp)
 4009378:	18bfff17 	ldw	r2,-4(r3)
 400937c:	1d7fff04 	addi	r21,r3,-4
 4009380:	10000326 	beq	r2,zero,4009390 <__multiply+0x238>
 4009384:	00000706 	br	40093a4 <__multiply+0x24c>
 4009388:	a8800017 	ldw	r2,0(r21)
 400938c:	1000051e 	bne	r2,zero,40093a4 <__multiply+0x24c>
 4009390:	d8c00217 	ldw	r3,8(sp)
 4009394:	ad7fff04 	addi	r21,r21,-4
 4009398:	18ffffc4 	addi	r3,r3,-1
 400939c:	d8c00215 	stw	r3,8(sp)
 40093a0:	183ff91e 	bne	r3,zero,4009388 <__alt_data_end+0xfc009388>
 40093a4:	d8c00617 	ldw	r3,24(sp)
 40093a8:	d9000217 	ldw	r4,8(sp)
 40093ac:	1805883a 	mov	r2,r3
 40093b0:	19000415 	stw	r4,16(r3)
 40093b4:	dfc01017 	ldw	ra,64(sp)
 40093b8:	df000f17 	ldw	fp,60(sp)
 40093bc:	ddc00e17 	ldw	r23,56(sp)
 40093c0:	dd800d17 	ldw	r22,52(sp)
 40093c4:	dd400c17 	ldw	r21,48(sp)
 40093c8:	dd000b17 	ldw	r20,44(sp)
 40093cc:	dcc00a17 	ldw	r19,40(sp)
 40093d0:	dc800917 	ldw	r18,36(sp)
 40093d4:	dc400817 	ldw	r17,32(sp)
 40093d8:	dc000717 	ldw	r16,28(sp)
 40093dc:	dec01104 	addi	sp,sp,68
 40093e0:	f800283a 	ret

040093e4 <__pow5mult>:
 40093e4:	defffa04 	addi	sp,sp,-24
 40093e8:	dcc00315 	stw	r19,12(sp)
 40093ec:	dc000015 	stw	r16,0(sp)
 40093f0:	dfc00515 	stw	ra,20(sp)
 40093f4:	dd000415 	stw	r20,16(sp)
 40093f8:	dc800215 	stw	r18,8(sp)
 40093fc:	dc400115 	stw	r17,4(sp)
 4009400:	308000cc 	andi	r2,r6,3
 4009404:	3021883a 	mov	r16,r6
 4009408:	2027883a 	mov	r19,r4
 400940c:	10002f1e 	bne	r2,zero,40094cc <__pow5mult+0xe8>
 4009410:	2825883a 	mov	r18,r5
 4009414:	8021d0ba 	srai	r16,r16,2
 4009418:	80001a26 	beq	r16,zero,4009484 <__pow5mult+0xa0>
 400941c:	9c401217 	ldw	r17,72(r19)
 4009420:	8800061e 	bne	r17,zero,400943c <__pow5mult+0x58>
 4009424:	00003406 	br	40094f8 <__pow5mult+0x114>
 4009428:	8021d07a 	srai	r16,r16,1
 400942c:	80001526 	beq	r16,zero,4009484 <__pow5mult+0xa0>
 4009430:	88800017 	ldw	r2,0(r17)
 4009434:	10001c26 	beq	r2,zero,40094a8 <__pow5mult+0xc4>
 4009438:	1023883a 	mov	r17,r2
 400943c:	8080004c 	andi	r2,r16,1
 4009440:	103ff926 	beq	r2,zero,4009428 <__alt_data_end+0xfc009428>
 4009444:	880d883a 	mov	r6,r17
 4009448:	900b883a 	mov	r5,r18
 400944c:	9809883a 	mov	r4,r19
 4009450:	40091580 	call	4009158 <__multiply>
 4009454:	90001b26 	beq	r18,zero,40094c4 <__pow5mult+0xe0>
 4009458:	91000117 	ldw	r4,4(r18)
 400945c:	98c01317 	ldw	r3,76(r19)
 4009460:	8021d07a 	srai	r16,r16,1
 4009464:	2109883a 	add	r4,r4,r4
 4009468:	2109883a 	add	r4,r4,r4
 400946c:	1907883a 	add	r3,r3,r4
 4009470:	19000017 	ldw	r4,0(r3)
 4009474:	91000015 	stw	r4,0(r18)
 4009478:	1c800015 	stw	r18,0(r3)
 400947c:	1025883a 	mov	r18,r2
 4009480:	803feb1e 	bne	r16,zero,4009430 <__alt_data_end+0xfc009430>
 4009484:	9005883a 	mov	r2,r18
 4009488:	dfc00517 	ldw	ra,20(sp)
 400948c:	dd000417 	ldw	r20,16(sp)
 4009490:	dcc00317 	ldw	r19,12(sp)
 4009494:	dc800217 	ldw	r18,8(sp)
 4009498:	dc400117 	ldw	r17,4(sp)
 400949c:	dc000017 	ldw	r16,0(sp)
 40094a0:	dec00604 	addi	sp,sp,24
 40094a4:	f800283a 	ret
 40094a8:	880d883a 	mov	r6,r17
 40094ac:	880b883a 	mov	r5,r17
 40094b0:	9809883a 	mov	r4,r19
 40094b4:	40091580 	call	4009158 <__multiply>
 40094b8:	88800015 	stw	r2,0(r17)
 40094bc:	10000015 	stw	zero,0(r2)
 40094c0:	003fdd06 	br	4009438 <__alt_data_end+0xfc009438>
 40094c4:	1025883a 	mov	r18,r2
 40094c8:	003fd706 	br	4009428 <__alt_data_end+0xfc009428>
 40094cc:	10bfffc4 	addi	r2,r2,-1
 40094d0:	1085883a 	add	r2,r2,r2
 40094d4:	00c10074 	movhi	r3,1025
 40094d8:	18ca7d04 	addi	r3,r3,10740
 40094dc:	1085883a 	add	r2,r2,r2
 40094e0:	1885883a 	add	r2,r3,r2
 40094e4:	11800017 	ldw	r6,0(r2)
 40094e8:	000f883a 	mov	r7,zero
 40094ec:	4008db80 	call	4008db8 <__multadd>
 40094f0:	1025883a 	mov	r18,r2
 40094f4:	003fc706 	br	4009414 <__alt_data_end+0xfc009414>
 40094f8:	05000044 	movi	r20,1
 40094fc:	a00b883a 	mov	r5,r20
 4009500:	9809883a 	mov	r4,r19
 4009504:	4008ce80 	call	4008ce8 <_Balloc>
 4009508:	1023883a 	mov	r17,r2
 400950c:	00809c44 	movi	r2,625
 4009510:	88800515 	stw	r2,20(r17)
 4009514:	8d000415 	stw	r20,16(r17)
 4009518:	9c401215 	stw	r17,72(r19)
 400951c:	88000015 	stw	zero,0(r17)
 4009520:	003fc606 	br	400943c <__alt_data_end+0xfc00943c>

04009524 <__lshift>:
 4009524:	defff904 	addi	sp,sp,-28
 4009528:	dd400515 	stw	r21,20(sp)
 400952c:	dcc00315 	stw	r19,12(sp)
 4009530:	302bd17a 	srai	r21,r6,5
 4009534:	2cc00417 	ldw	r19,16(r5)
 4009538:	28800217 	ldw	r2,8(r5)
 400953c:	dd000415 	stw	r20,16(sp)
 4009540:	ace7883a 	add	r19,r21,r19
 4009544:	dc800215 	stw	r18,8(sp)
 4009548:	dc400115 	stw	r17,4(sp)
 400954c:	dc000015 	stw	r16,0(sp)
 4009550:	dfc00615 	stw	ra,24(sp)
 4009554:	9c000044 	addi	r16,r19,1
 4009558:	2823883a 	mov	r17,r5
 400955c:	3029883a 	mov	r20,r6
 4009560:	2025883a 	mov	r18,r4
 4009564:	29400117 	ldw	r5,4(r5)
 4009568:	1400030e 	bge	r2,r16,4009578 <__lshift+0x54>
 400956c:	1085883a 	add	r2,r2,r2
 4009570:	29400044 	addi	r5,r5,1
 4009574:	143ffd16 	blt	r2,r16,400956c <__alt_data_end+0xfc00956c>
 4009578:	9009883a 	mov	r4,r18
 400957c:	4008ce80 	call	4008ce8 <_Balloc>
 4009580:	10c00504 	addi	r3,r2,20
 4009584:	0540070e 	bge	zero,r21,40095a4 <__lshift+0x80>
 4009588:	ad6b883a 	add	r21,r21,r21
 400958c:	ad6b883a 	add	r21,r21,r21
 4009590:	1809883a 	mov	r4,r3
 4009594:	1d47883a 	add	r3,r3,r21
 4009598:	20000015 	stw	zero,0(r4)
 400959c:	21000104 	addi	r4,r4,4
 40095a0:	193ffd1e 	bne	r3,r4,4009598 <__alt_data_end+0xfc009598>
 40095a4:	8a000417 	ldw	r8,16(r17)
 40095a8:	89000504 	addi	r4,r17,20
 40095ac:	a18007cc 	andi	r6,r20,31
 40095b0:	4211883a 	add	r8,r8,r8
 40095b4:	4211883a 	add	r8,r8,r8
 40095b8:	2211883a 	add	r8,r4,r8
 40095bc:	30002326 	beq	r6,zero,400964c <__lshift+0x128>
 40095c0:	02400804 	movi	r9,32
 40095c4:	4993c83a 	sub	r9,r9,r6
 40095c8:	000b883a 	mov	r5,zero
 40095cc:	21c00017 	ldw	r7,0(r4)
 40095d0:	1815883a 	mov	r10,r3
 40095d4:	18c00104 	addi	r3,r3,4
 40095d8:	398e983a 	sll	r7,r7,r6
 40095dc:	21000104 	addi	r4,r4,4
 40095e0:	394ab03a 	or	r5,r7,r5
 40095e4:	197fff15 	stw	r5,-4(r3)
 40095e8:	217fff17 	ldw	r5,-4(r4)
 40095ec:	2a4ad83a 	srl	r5,r5,r9
 40095f0:	223ff636 	bltu	r4,r8,40095cc <__alt_data_end+0xfc0095cc>
 40095f4:	51400115 	stw	r5,4(r10)
 40095f8:	28001a1e 	bne	r5,zero,4009664 <__lshift+0x140>
 40095fc:	843fffc4 	addi	r16,r16,-1
 4009600:	14000415 	stw	r16,16(r2)
 4009604:	88000826 	beq	r17,zero,4009628 <__lshift+0x104>
 4009608:	89000117 	ldw	r4,4(r17)
 400960c:	90c01317 	ldw	r3,76(r18)
 4009610:	2109883a 	add	r4,r4,r4
 4009614:	2109883a 	add	r4,r4,r4
 4009618:	1907883a 	add	r3,r3,r4
 400961c:	19000017 	ldw	r4,0(r3)
 4009620:	89000015 	stw	r4,0(r17)
 4009624:	1c400015 	stw	r17,0(r3)
 4009628:	dfc00617 	ldw	ra,24(sp)
 400962c:	dd400517 	ldw	r21,20(sp)
 4009630:	dd000417 	ldw	r20,16(sp)
 4009634:	dcc00317 	ldw	r19,12(sp)
 4009638:	dc800217 	ldw	r18,8(sp)
 400963c:	dc400117 	ldw	r17,4(sp)
 4009640:	dc000017 	ldw	r16,0(sp)
 4009644:	dec00704 	addi	sp,sp,28
 4009648:	f800283a 	ret
 400964c:	21400017 	ldw	r5,0(r4)
 4009650:	18c00104 	addi	r3,r3,4
 4009654:	21000104 	addi	r4,r4,4
 4009658:	197fff15 	stw	r5,-4(r3)
 400965c:	223ffb36 	bltu	r4,r8,400964c <__alt_data_end+0xfc00964c>
 4009660:	003fe606 	br	40095fc <__alt_data_end+0xfc0095fc>
 4009664:	9c000084 	addi	r16,r19,2
 4009668:	003fe406 	br	40095fc <__alt_data_end+0xfc0095fc>

0400966c <__mcmp>:
 400966c:	20800417 	ldw	r2,16(r4)
 4009670:	28c00417 	ldw	r3,16(r5)
 4009674:	10c5c83a 	sub	r2,r2,r3
 4009678:	1000111e 	bne	r2,zero,40096c0 <__mcmp+0x54>
 400967c:	18c7883a 	add	r3,r3,r3
 4009680:	18c7883a 	add	r3,r3,r3
 4009684:	21000504 	addi	r4,r4,20
 4009688:	29400504 	addi	r5,r5,20
 400968c:	20c5883a 	add	r2,r4,r3
 4009690:	28cb883a 	add	r5,r5,r3
 4009694:	00000106 	br	400969c <__mcmp+0x30>
 4009698:	20800a2e 	bgeu	r4,r2,40096c4 <__mcmp+0x58>
 400969c:	10bfff04 	addi	r2,r2,-4
 40096a0:	297fff04 	addi	r5,r5,-4
 40096a4:	11800017 	ldw	r6,0(r2)
 40096a8:	28c00017 	ldw	r3,0(r5)
 40096ac:	30fffa26 	beq	r6,r3,4009698 <__alt_data_end+0xfc009698>
 40096b0:	30c00236 	bltu	r6,r3,40096bc <__mcmp+0x50>
 40096b4:	00800044 	movi	r2,1
 40096b8:	f800283a 	ret
 40096bc:	00bfffc4 	movi	r2,-1
 40096c0:	f800283a 	ret
 40096c4:	0005883a 	mov	r2,zero
 40096c8:	f800283a 	ret

040096cc <__mdiff>:
 40096cc:	28c00417 	ldw	r3,16(r5)
 40096d0:	30800417 	ldw	r2,16(r6)
 40096d4:	defffa04 	addi	sp,sp,-24
 40096d8:	dcc00315 	stw	r19,12(sp)
 40096dc:	dc800215 	stw	r18,8(sp)
 40096e0:	dfc00515 	stw	ra,20(sp)
 40096e4:	dd000415 	stw	r20,16(sp)
 40096e8:	dc400115 	stw	r17,4(sp)
 40096ec:	dc000015 	stw	r16,0(sp)
 40096f0:	1887c83a 	sub	r3,r3,r2
 40096f4:	2825883a 	mov	r18,r5
 40096f8:	3027883a 	mov	r19,r6
 40096fc:	1800141e 	bne	r3,zero,4009750 <__mdiff+0x84>
 4009700:	1085883a 	add	r2,r2,r2
 4009704:	1085883a 	add	r2,r2,r2
 4009708:	2a000504 	addi	r8,r5,20
 400970c:	34000504 	addi	r16,r6,20
 4009710:	4087883a 	add	r3,r8,r2
 4009714:	8085883a 	add	r2,r16,r2
 4009718:	00000106 	br	4009720 <__mdiff+0x54>
 400971c:	40c0592e 	bgeu	r8,r3,4009884 <__mdiff+0x1b8>
 4009720:	18ffff04 	addi	r3,r3,-4
 4009724:	10bfff04 	addi	r2,r2,-4
 4009728:	19c00017 	ldw	r7,0(r3)
 400972c:	11400017 	ldw	r5,0(r2)
 4009730:	397ffa26 	beq	r7,r5,400971c <__alt_data_end+0xfc00971c>
 4009734:	3940592e 	bgeu	r7,r5,400989c <__mdiff+0x1d0>
 4009738:	9005883a 	mov	r2,r18
 400973c:	4023883a 	mov	r17,r8
 4009740:	9825883a 	mov	r18,r19
 4009744:	05000044 	movi	r20,1
 4009748:	1027883a 	mov	r19,r2
 400974c:	00000406 	br	4009760 <__mdiff+0x94>
 4009750:	18005616 	blt	r3,zero,40098ac <__mdiff+0x1e0>
 4009754:	34400504 	addi	r17,r6,20
 4009758:	2c000504 	addi	r16,r5,20
 400975c:	0029883a 	mov	r20,zero
 4009760:	91400117 	ldw	r5,4(r18)
 4009764:	4008ce80 	call	4008ce8 <_Balloc>
 4009768:	92400417 	ldw	r9,16(r18)
 400976c:	9b000417 	ldw	r12,16(r19)
 4009770:	12c00504 	addi	r11,r2,20
 4009774:	4a51883a 	add	r8,r9,r9
 4009778:	6319883a 	add	r12,r12,r12
 400977c:	4211883a 	add	r8,r8,r8
 4009780:	6319883a 	add	r12,r12,r12
 4009784:	15000315 	stw	r20,12(r2)
 4009788:	8211883a 	add	r8,r16,r8
 400978c:	8b19883a 	add	r12,r17,r12
 4009790:	0007883a 	mov	r3,zero
 4009794:	81400017 	ldw	r5,0(r16)
 4009798:	89c00017 	ldw	r7,0(r17)
 400979c:	59800104 	addi	r6,r11,4
 40097a0:	293fffcc 	andi	r4,r5,65535
 40097a4:	20c7883a 	add	r3,r4,r3
 40097a8:	393fffcc 	andi	r4,r7,65535
 40097ac:	1909c83a 	sub	r4,r3,r4
 40097b0:	280ad43a 	srli	r5,r5,16
 40097b4:	380ed43a 	srli	r7,r7,16
 40097b8:	2007d43a 	srai	r3,r4,16
 40097bc:	213fffcc 	andi	r4,r4,65535
 40097c0:	29cbc83a 	sub	r5,r5,r7
 40097c4:	28c7883a 	add	r3,r5,r3
 40097c8:	180a943a 	slli	r5,r3,16
 40097cc:	8c400104 	addi	r17,r17,4
 40097d0:	84000104 	addi	r16,r16,4
 40097d4:	2908b03a 	or	r4,r5,r4
 40097d8:	59000015 	stw	r4,0(r11)
 40097dc:	1807d43a 	srai	r3,r3,16
 40097e0:	3015883a 	mov	r10,r6
 40097e4:	3017883a 	mov	r11,r6
 40097e8:	8b3fea36 	bltu	r17,r12,4009794 <__alt_data_end+0xfc009794>
 40097ec:	8200162e 	bgeu	r16,r8,4009848 <__mdiff+0x17c>
 40097f0:	8017883a 	mov	r11,r16
 40097f4:	59400017 	ldw	r5,0(r11)
 40097f8:	31800104 	addi	r6,r6,4
 40097fc:	5ac00104 	addi	r11,r11,4
 4009800:	293fffcc 	andi	r4,r5,65535
 4009804:	20c7883a 	add	r3,r4,r3
 4009808:	280ed43a 	srli	r7,r5,16
 400980c:	180bd43a 	srai	r5,r3,16
 4009810:	193fffcc 	andi	r4,r3,65535
 4009814:	3947883a 	add	r3,r7,r5
 4009818:	180a943a 	slli	r5,r3,16
 400981c:	1807d43a 	srai	r3,r3,16
 4009820:	2908b03a 	or	r4,r5,r4
 4009824:	313fff15 	stw	r4,-4(r6)
 4009828:	5a3ff236 	bltu	r11,r8,40097f4 <__alt_data_end+0xfc0097f4>
 400982c:	0406303a 	nor	r3,zero,r16
 4009830:	1a07883a 	add	r3,r3,r8
 4009834:	1806d0ba 	srli	r3,r3,2
 4009838:	18c00044 	addi	r3,r3,1
 400983c:	18c7883a 	add	r3,r3,r3
 4009840:	18c7883a 	add	r3,r3,r3
 4009844:	50d5883a 	add	r10,r10,r3
 4009848:	50ffff04 	addi	r3,r10,-4
 400984c:	2000041e 	bne	r4,zero,4009860 <__mdiff+0x194>
 4009850:	18ffff04 	addi	r3,r3,-4
 4009854:	19000017 	ldw	r4,0(r3)
 4009858:	4a7fffc4 	addi	r9,r9,-1
 400985c:	203ffc26 	beq	r4,zero,4009850 <__alt_data_end+0xfc009850>
 4009860:	12400415 	stw	r9,16(r2)
 4009864:	dfc00517 	ldw	ra,20(sp)
 4009868:	dd000417 	ldw	r20,16(sp)
 400986c:	dcc00317 	ldw	r19,12(sp)
 4009870:	dc800217 	ldw	r18,8(sp)
 4009874:	dc400117 	ldw	r17,4(sp)
 4009878:	dc000017 	ldw	r16,0(sp)
 400987c:	dec00604 	addi	sp,sp,24
 4009880:	f800283a 	ret
 4009884:	000b883a 	mov	r5,zero
 4009888:	4008ce80 	call	4008ce8 <_Balloc>
 400988c:	00c00044 	movi	r3,1
 4009890:	10c00415 	stw	r3,16(r2)
 4009894:	10000515 	stw	zero,20(r2)
 4009898:	003ff206 	br	4009864 <__alt_data_end+0xfc009864>
 400989c:	8023883a 	mov	r17,r16
 40098a0:	0029883a 	mov	r20,zero
 40098a4:	4021883a 	mov	r16,r8
 40098a8:	003fad06 	br	4009760 <__alt_data_end+0xfc009760>
 40098ac:	9005883a 	mov	r2,r18
 40098b0:	94400504 	addi	r17,r18,20
 40098b4:	9c000504 	addi	r16,r19,20
 40098b8:	9825883a 	mov	r18,r19
 40098bc:	05000044 	movi	r20,1
 40098c0:	1027883a 	mov	r19,r2
 40098c4:	003fa606 	br	4009760 <__alt_data_end+0xfc009760>

040098c8 <__ulp>:
 40098c8:	295ffc2c 	andhi	r5,r5,32752
 40098cc:	00bf3034 	movhi	r2,64704
 40098d0:	2887883a 	add	r3,r5,r2
 40098d4:	00c0020e 	bge	zero,r3,40098e0 <__ulp+0x18>
 40098d8:	0005883a 	mov	r2,zero
 40098dc:	f800283a 	ret
 40098e0:	00c7c83a 	sub	r3,zero,r3
 40098e4:	1807d53a 	srai	r3,r3,20
 40098e8:	008004c4 	movi	r2,19
 40098ec:	10c00b0e 	bge	r2,r3,400991c <__ulp+0x54>
 40098f0:	18bffb04 	addi	r2,r3,-20
 40098f4:	01000784 	movi	r4,30
 40098f8:	0007883a 	mov	r3,zero
 40098fc:	20800516 	blt	r4,r2,4009914 <__ulp+0x4c>
 4009900:	010007c4 	movi	r4,31
 4009904:	2089c83a 	sub	r4,r4,r2
 4009908:	00800044 	movi	r2,1
 400990c:	1104983a 	sll	r2,r2,r4
 4009910:	f800283a 	ret
 4009914:	00800044 	movi	r2,1
 4009918:	f800283a 	ret
 400991c:	01400234 	movhi	r5,8
 4009920:	28c7d83a 	sra	r3,r5,r3
 4009924:	0005883a 	mov	r2,zero
 4009928:	f800283a 	ret

0400992c <__b2d>:
 400992c:	defffa04 	addi	sp,sp,-24
 4009930:	dc000015 	stw	r16,0(sp)
 4009934:	24000417 	ldw	r16,16(r4)
 4009938:	dc400115 	stw	r17,4(sp)
 400993c:	24400504 	addi	r17,r4,20
 4009940:	8421883a 	add	r16,r16,r16
 4009944:	8421883a 	add	r16,r16,r16
 4009948:	8c21883a 	add	r16,r17,r16
 400994c:	dc800215 	stw	r18,8(sp)
 4009950:	84bfff17 	ldw	r18,-4(r16)
 4009954:	dd000415 	stw	r20,16(sp)
 4009958:	dcc00315 	stw	r19,12(sp)
 400995c:	9009883a 	mov	r4,r18
 4009960:	2829883a 	mov	r20,r5
 4009964:	dfc00515 	stw	ra,20(sp)
 4009968:	40090040 	call	4009004 <__hi0bits>
 400996c:	00c00804 	movi	r3,32
 4009970:	1889c83a 	sub	r4,r3,r2
 4009974:	a1000015 	stw	r4,0(r20)
 4009978:	01000284 	movi	r4,10
 400997c:	84ffff04 	addi	r19,r16,-4
 4009980:	20801216 	blt	r4,r2,40099cc <__b2d+0xa0>
 4009984:	018002c4 	movi	r6,11
 4009988:	308dc83a 	sub	r6,r6,r2
 400998c:	9186d83a 	srl	r3,r18,r6
 4009990:	18cffc34 	orhi	r3,r3,16368
 4009994:	8cc0212e 	bgeu	r17,r19,4009a1c <__b2d+0xf0>
 4009998:	813ffe17 	ldw	r4,-8(r16)
 400999c:	218cd83a 	srl	r6,r4,r6
 40099a0:	10800544 	addi	r2,r2,21
 40099a4:	9084983a 	sll	r2,r18,r2
 40099a8:	1184b03a 	or	r2,r2,r6
 40099ac:	dfc00517 	ldw	ra,20(sp)
 40099b0:	dd000417 	ldw	r20,16(sp)
 40099b4:	dcc00317 	ldw	r19,12(sp)
 40099b8:	dc800217 	ldw	r18,8(sp)
 40099bc:	dc400117 	ldw	r17,4(sp)
 40099c0:	dc000017 	ldw	r16,0(sp)
 40099c4:	dec00604 	addi	sp,sp,24
 40099c8:	f800283a 	ret
 40099cc:	8cc00f2e 	bgeu	r17,r19,4009a0c <__b2d+0xe0>
 40099d0:	117ffd44 	addi	r5,r2,-11
 40099d4:	80bffe17 	ldw	r2,-8(r16)
 40099d8:	28000e26 	beq	r5,zero,4009a14 <__b2d+0xe8>
 40099dc:	1949c83a 	sub	r4,r3,r5
 40099e0:	9164983a 	sll	r18,r18,r5
 40099e4:	1106d83a 	srl	r3,r2,r4
 40099e8:	81bffe04 	addi	r6,r16,-8
 40099ec:	948ffc34 	orhi	r18,r18,16368
 40099f0:	90c6b03a 	or	r3,r18,r3
 40099f4:	89800e2e 	bgeu	r17,r6,4009a30 <__b2d+0x104>
 40099f8:	81bffd17 	ldw	r6,-12(r16)
 40099fc:	1144983a 	sll	r2,r2,r5
 4009a00:	310ad83a 	srl	r5,r6,r4
 4009a04:	2884b03a 	or	r2,r5,r2
 4009a08:	003fe806 	br	40099ac <__alt_data_end+0xfc0099ac>
 4009a0c:	10bffd44 	addi	r2,r2,-11
 4009a10:	1000041e 	bne	r2,zero,4009a24 <__b2d+0xf8>
 4009a14:	90cffc34 	orhi	r3,r18,16368
 4009a18:	003fe406 	br	40099ac <__alt_data_end+0xfc0099ac>
 4009a1c:	000d883a 	mov	r6,zero
 4009a20:	003fdf06 	br	40099a0 <__alt_data_end+0xfc0099a0>
 4009a24:	90a4983a 	sll	r18,r18,r2
 4009a28:	0005883a 	mov	r2,zero
 4009a2c:	003ff906 	br	4009a14 <__alt_data_end+0xfc009a14>
 4009a30:	1144983a 	sll	r2,r2,r5
 4009a34:	003fdd06 	br	40099ac <__alt_data_end+0xfc0099ac>

04009a38 <__d2b>:
 4009a38:	defff804 	addi	sp,sp,-32
 4009a3c:	dc000215 	stw	r16,8(sp)
 4009a40:	3021883a 	mov	r16,r6
 4009a44:	dc400315 	stw	r17,12(sp)
 4009a48:	8022907a 	slli	r17,r16,1
 4009a4c:	dd000615 	stw	r20,24(sp)
 4009a50:	2829883a 	mov	r20,r5
 4009a54:	01400044 	movi	r5,1
 4009a58:	dcc00515 	stw	r19,20(sp)
 4009a5c:	dc800415 	stw	r18,16(sp)
 4009a60:	dfc00715 	stw	ra,28(sp)
 4009a64:	3825883a 	mov	r18,r7
 4009a68:	8822d57a 	srli	r17,r17,21
 4009a6c:	4008ce80 	call	4008ce8 <_Balloc>
 4009a70:	1027883a 	mov	r19,r2
 4009a74:	00800434 	movhi	r2,16
 4009a78:	10bfffc4 	addi	r2,r2,-1
 4009a7c:	808c703a 	and	r6,r16,r2
 4009a80:	88000126 	beq	r17,zero,4009a88 <__d2b+0x50>
 4009a84:	31800434 	orhi	r6,r6,16
 4009a88:	d9800015 	stw	r6,0(sp)
 4009a8c:	a0002426 	beq	r20,zero,4009b20 <__d2b+0xe8>
 4009a90:	d9000104 	addi	r4,sp,4
 4009a94:	dd000115 	stw	r20,4(sp)
 4009a98:	400906c0 	call	400906c <__lo0bits>
 4009a9c:	d8c00017 	ldw	r3,0(sp)
 4009aa0:	10002f1e 	bne	r2,zero,4009b60 <__d2b+0x128>
 4009aa4:	d9000117 	ldw	r4,4(sp)
 4009aa8:	99000515 	stw	r4,20(r19)
 4009aac:	1821003a 	cmpeq	r16,r3,zero
 4009ab0:	01000084 	movi	r4,2
 4009ab4:	2421c83a 	sub	r16,r4,r16
 4009ab8:	98c00615 	stw	r3,24(r19)
 4009abc:	9c000415 	stw	r16,16(r19)
 4009ac0:	88001f1e 	bne	r17,zero,4009b40 <__d2b+0x108>
 4009ac4:	10bef384 	addi	r2,r2,-1074
 4009ac8:	90800015 	stw	r2,0(r18)
 4009acc:	00900034 	movhi	r2,16384
 4009ad0:	10bfffc4 	addi	r2,r2,-1
 4009ad4:	8085883a 	add	r2,r16,r2
 4009ad8:	1085883a 	add	r2,r2,r2
 4009adc:	1085883a 	add	r2,r2,r2
 4009ae0:	9885883a 	add	r2,r19,r2
 4009ae4:	11000517 	ldw	r4,20(r2)
 4009ae8:	8020917a 	slli	r16,r16,5
 4009aec:	40090040 	call	4009004 <__hi0bits>
 4009af0:	d8c00817 	ldw	r3,32(sp)
 4009af4:	8085c83a 	sub	r2,r16,r2
 4009af8:	18800015 	stw	r2,0(r3)
 4009afc:	9805883a 	mov	r2,r19
 4009b00:	dfc00717 	ldw	ra,28(sp)
 4009b04:	dd000617 	ldw	r20,24(sp)
 4009b08:	dcc00517 	ldw	r19,20(sp)
 4009b0c:	dc800417 	ldw	r18,16(sp)
 4009b10:	dc400317 	ldw	r17,12(sp)
 4009b14:	dc000217 	ldw	r16,8(sp)
 4009b18:	dec00804 	addi	sp,sp,32
 4009b1c:	f800283a 	ret
 4009b20:	d809883a 	mov	r4,sp
 4009b24:	400906c0 	call	400906c <__lo0bits>
 4009b28:	d8c00017 	ldw	r3,0(sp)
 4009b2c:	04000044 	movi	r16,1
 4009b30:	9c000415 	stw	r16,16(r19)
 4009b34:	98c00515 	stw	r3,20(r19)
 4009b38:	10800804 	addi	r2,r2,32
 4009b3c:	883fe126 	beq	r17,zero,4009ac4 <__alt_data_end+0xfc009ac4>
 4009b40:	00c00d44 	movi	r3,53
 4009b44:	8c7ef344 	addi	r17,r17,-1075
 4009b48:	88a3883a 	add	r17,r17,r2
 4009b4c:	1885c83a 	sub	r2,r3,r2
 4009b50:	d8c00817 	ldw	r3,32(sp)
 4009b54:	94400015 	stw	r17,0(r18)
 4009b58:	18800015 	stw	r2,0(r3)
 4009b5c:	003fe706 	br	4009afc <__alt_data_end+0xfc009afc>
 4009b60:	01000804 	movi	r4,32
 4009b64:	2089c83a 	sub	r4,r4,r2
 4009b68:	1908983a 	sll	r4,r3,r4
 4009b6c:	d9400117 	ldw	r5,4(sp)
 4009b70:	1886d83a 	srl	r3,r3,r2
 4009b74:	2148b03a 	or	r4,r4,r5
 4009b78:	99000515 	stw	r4,20(r19)
 4009b7c:	d8c00015 	stw	r3,0(sp)
 4009b80:	003fca06 	br	4009aac <__alt_data_end+0xfc009aac>

04009b84 <__ratio>:
 4009b84:	defff904 	addi	sp,sp,-28
 4009b88:	dc400315 	stw	r17,12(sp)
 4009b8c:	2823883a 	mov	r17,r5
 4009b90:	d9400104 	addi	r5,sp,4
 4009b94:	dfc00615 	stw	ra,24(sp)
 4009b98:	dcc00515 	stw	r19,20(sp)
 4009b9c:	dc800415 	stw	r18,16(sp)
 4009ba0:	2027883a 	mov	r19,r4
 4009ba4:	dc000215 	stw	r16,8(sp)
 4009ba8:	400992c0 	call	400992c <__b2d>
 4009bac:	d80b883a 	mov	r5,sp
 4009bb0:	8809883a 	mov	r4,r17
 4009bb4:	1025883a 	mov	r18,r2
 4009bb8:	1821883a 	mov	r16,r3
 4009bbc:	400992c0 	call	400992c <__b2d>
 4009bc0:	8a000417 	ldw	r8,16(r17)
 4009bc4:	99000417 	ldw	r4,16(r19)
 4009bc8:	d9400117 	ldw	r5,4(sp)
 4009bcc:	2209c83a 	sub	r4,r4,r8
 4009bd0:	2010917a 	slli	r8,r4,5
 4009bd4:	d9000017 	ldw	r4,0(sp)
 4009bd8:	2909c83a 	sub	r4,r5,r4
 4009bdc:	4109883a 	add	r4,r8,r4
 4009be0:	01000e0e 	bge	zero,r4,4009c1c <__ratio+0x98>
 4009be4:	2008953a 	slli	r4,r4,20
 4009be8:	2421883a 	add	r16,r4,r16
 4009bec:	100d883a 	mov	r6,r2
 4009bf0:	180f883a 	mov	r7,r3
 4009bf4:	9009883a 	mov	r4,r18
 4009bf8:	800b883a 	mov	r5,r16
 4009bfc:	400dbfc0 	call	400dbfc <__divdf3>
 4009c00:	dfc00617 	ldw	ra,24(sp)
 4009c04:	dcc00517 	ldw	r19,20(sp)
 4009c08:	dc800417 	ldw	r18,16(sp)
 4009c0c:	dc400317 	ldw	r17,12(sp)
 4009c10:	dc000217 	ldw	r16,8(sp)
 4009c14:	dec00704 	addi	sp,sp,28
 4009c18:	f800283a 	ret
 4009c1c:	2008953a 	slli	r4,r4,20
 4009c20:	1907c83a 	sub	r3,r3,r4
 4009c24:	003ff106 	br	4009bec <__alt_data_end+0xfc009bec>

04009c28 <_mprec_log10>:
 4009c28:	defffe04 	addi	sp,sp,-8
 4009c2c:	dc000015 	stw	r16,0(sp)
 4009c30:	dfc00115 	stw	ra,4(sp)
 4009c34:	008005c4 	movi	r2,23
 4009c38:	2021883a 	mov	r16,r4
 4009c3c:	11000d0e 	bge	r2,r4,4009c74 <_mprec_log10+0x4c>
 4009c40:	0005883a 	mov	r2,zero
 4009c44:	00cffc34 	movhi	r3,16368
 4009c48:	843fffc4 	addi	r16,r16,-1
 4009c4c:	000d883a 	mov	r6,zero
 4009c50:	01d00934 	movhi	r7,16420
 4009c54:	1009883a 	mov	r4,r2
 4009c58:	180b883a 	mov	r5,r3
 4009c5c:	400e8240 	call	400e824 <__muldf3>
 4009c60:	803ff91e 	bne	r16,zero,4009c48 <__alt_data_end+0xfc009c48>
 4009c64:	dfc00117 	ldw	ra,4(sp)
 4009c68:	dc000017 	ldw	r16,0(sp)
 4009c6c:	dec00204 	addi	sp,sp,8
 4009c70:	f800283a 	ret
 4009c74:	202090fa 	slli	r16,r4,3
 4009c78:	00810074 	movhi	r2,1025
 4009c7c:	108a9404 	addi	r2,r2,10832
 4009c80:	1421883a 	add	r16,r2,r16
 4009c84:	80800017 	ldw	r2,0(r16)
 4009c88:	80c00117 	ldw	r3,4(r16)
 4009c8c:	dfc00117 	ldw	ra,4(sp)
 4009c90:	dc000017 	ldw	r16,0(sp)
 4009c94:	dec00204 	addi	sp,sp,8
 4009c98:	f800283a 	ret

04009c9c <__copybits>:
 4009c9c:	297fffc4 	addi	r5,r5,-1
 4009ca0:	280fd17a 	srai	r7,r5,5
 4009ca4:	30c00417 	ldw	r3,16(r6)
 4009ca8:	30800504 	addi	r2,r6,20
 4009cac:	39c00044 	addi	r7,r7,1
 4009cb0:	18c7883a 	add	r3,r3,r3
 4009cb4:	39cf883a 	add	r7,r7,r7
 4009cb8:	18c7883a 	add	r3,r3,r3
 4009cbc:	39cf883a 	add	r7,r7,r7
 4009cc0:	10c7883a 	add	r3,r2,r3
 4009cc4:	21cf883a 	add	r7,r4,r7
 4009cc8:	10c00d2e 	bgeu	r2,r3,4009d00 <__copybits+0x64>
 4009ccc:	200b883a 	mov	r5,r4
 4009cd0:	12000017 	ldw	r8,0(r2)
 4009cd4:	29400104 	addi	r5,r5,4
 4009cd8:	10800104 	addi	r2,r2,4
 4009cdc:	2a3fff15 	stw	r8,-4(r5)
 4009ce0:	10fffb36 	bltu	r2,r3,4009cd0 <__alt_data_end+0xfc009cd0>
 4009ce4:	1985c83a 	sub	r2,r3,r6
 4009ce8:	10bffac4 	addi	r2,r2,-21
 4009cec:	1004d0ba 	srli	r2,r2,2
 4009cf0:	10800044 	addi	r2,r2,1
 4009cf4:	1085883a 	add	r2,r2,r2
 4009cf8:	1085883a 	add	r2,r2,r2
 4009cfc:	2089883a 	add	r4,r4,r2
 4009d00:	21c0032e 	bgeu	r4,r7,4009d10 <__copybits+0x74>
 4009d04:	20000015 	stw	zero,0(r4)
 4009d08:	21000104 	addi	r4,r4,4
 4009d0c:	21fffd36 	bltu	r4,r7,4009d04 <__alt_data_end+0xfc009d04>
 4009d10:	f800283a 	ret

04009d14 <__any_on>:
 4009d14:	20c00417 	ldw	r3,16(r4)
 4009d18:	2805d17a 	srai	r2,r5,5
 4009d1c:	21000504 	addi	r4,r4,20
 4009d20:	18800d0e 	bge	r3,r2,4009d58 <__any_on+0x44>
 4009d24:	18c7883a 	add	r3,r3,r3
 4009d28:	18c7883a 	add	r3,r3,r3
 4009d2c:	20c7883a 	add	r3,r4,r3
 4009d30:	20c0192e 	bgeu	r4,r3,4009d98 <__any_on+0x84>
 4009d34:	18bfff17 	ldw	r2,-4(r3)
 4009d38:	18ffff04 	addi	r3,r3,-4
 4009d3c:	1000041e 	bne	r2,zero,4009d50 <__any_on+0x3c>
 4009d40:	20c0142e 	bgeu	r4,r3,4009d94 <__any_on+0x80>
 4009d44:	18ffff04 	addi	r3,r3,-4
 4009d48:	19400017 	ldw	r5,0(r3)
 4009d4c:	283ffc26 	beq	r5,zero,4009d40 <__alt_data_end+0xfc009d40>
 4009d50:	00800044 	movi	r2,1
 4009d54:	f800283a 	ret
 4009d58:	10c00a0e 	bge	r2,r3,4009d84 <__any_on+0x70>
 4009d5c:	1085883a 	add	r2,r2,r2
 4009d60:	1085883a 	add	r2,r2,r2
 4009d64:	294007cc 	andi	r5,r5,31
 4009d68:	2087883a 	add	r3,r4,r2
 4009d6c:	283ff026 	beq	r5,zero,4009d30 <__alt_data_end+0xfc009d30>
 4009d70:	19800017 	ldw	r6,0(r3)
 4009d74:	3144d83a 	srl	r2,r6,r5
 4009d78:	114a983a 	sll	r5,r2,r5
 4009d7c:	317ff41e 	bne	r6,r5,4009d50 <__alt_data_end+0xfc009d50>
 4009d80:	003feb06 	br	4009d30 <__alt_data_end+0xfc009d30>
 4009d84:	1085883a 	add	r2,r2,r2
 4009d88:	1085883a 	add	r2,r2,r2
 4009d8c:	2087883a 	add	r3,r4,r2
 4009d90:	003fe706 	br	4009d30 <__alt_data_end+0xfc009d30>
 4009d94:	f800283a 	ret
 4009d98:	0005883a 	mov	r2,zero
 4009d9c:	f800283a 	ret

04009da0 <_putc_r>:
 4009da0:	defffc04 	addi	sp,sp,-16
 4009da4:	dc000215 	stw	r16,8(sp)
 4009da8:	dfc00315 	stw	ra,12(sp)
 4009dac:	2021883a 	mov	r16,r4
 4009db0:	20000226 	beq	r4,zero,4009dbc <_putc_r+0x1c>
 4009db4:	20800e17 	ldw	r2,56(r4)
 4009db8:	10001b26 	beq	r2,zero,4009e28 <_putc_r+0x88>
 4009dbc:	30800217 	ldw	r2,8(r6)
 4009dc0:	10bfffc4 	addi	r2,r2,-1
 4009dc4:	30800215 	stw	r2,8(r6)
 4009dc8:	10000a16 	blt	r2,zero,4009df4 <_putc_r+0x54>
 4009dcc:	30800017 	ldw	r2,0(r6)
 4009dd0:	11400005 	stb	r5,0(r2)
 4009dd4:	30800017 	ldw	r2,0(r6)
 4009dd8:	10c00044 	addi	r3,r2,1
 4009ddc:	30c00015 	stw	r3,0(r6)
 4009de0:	10800003 	ldbu	r2,0(r2)
 4009de4:	dfc00317 	ldw	ra,12(sp)
 4009de8:	dc000217 	ldw	r16,8(sp)
 4009dec:	dec00404 	addi	sp,sp,16
 4009df0:	f800283a 	ret
 4009df4:	30c00617 	ldw	r3,24(r6)
 4009df8:	10c00616 	blt	r2,r3,4009e14 <_putc_r+0x74>
 4009dfc:	30800017 	ldw	r2,0(r6)
 4009e00:	00c00284 	movi	r3,10
 4009e04:	11400005 	stb	r5,0(r2)
 4009e08:	30800017 	ldw	r2,0(r6)
 4009e0c:	11400003 	ldbu	r5,0(r2)
 4009e10:	28fff11e 	bne	r5,r3,4009dd8 <__alt_data_end+0xfc009dd8>
 4009e14:	8009883a 	mov	r4,r16
 4009e18:	dfc00317 	ldw	ra,12(sp)
 4009e1c:	dc000217 	ldw	r16,8(sp)
 4009e20:	dec00404 	addi	sp,sp,16
 4009e24:	400be441 	jmpi	400be44 <__swbuf_r>
 4009e28:	d9400015 	stw	r5,0(sp)
 4009e2c:	d9800115 	stw	r6,4(sp)
 4009e30:	40072c00 	call	40072c0 <__sinit>
 4009e34:	d9800117 	ldw	r6,4(sp)
 4009e38:	d9400017 	ldw	r5,0(sp)
 4009e3c:	003fdf06 	br	4009dbc <__alt_data_end+0xfc009dbc>

04009e40 <putc>:
 4009e40:	00810074 	movhi	r2,1025
 4009e44:	defffc04 	addi	sp,sp,-16
 4009e48:	1091d704 	addi	r2,r2,18268
 4009e4c:	dc000115 	stw	r16,4(sp)
 4009e50:	14000017 	ldw	r16,0(r2)
 4009e54:	dc400215 	stw	r17,8(sp)
 4009e58:	dfc00315 	stw	ra,12(sp)
 4009e5c:	2023883a 	mov	r17,r4
 4009e60:	80000226 	beq	r16,zero,4009e6c <putc+0x2c>
 4009e64:	80800e17 	ldw	r2,56(r16)
 4009e68:	10001a26 	beq	r2,zero,4009ed4 <putc+0x94>
 4009e6c:	28800217 	ldw	r2,8(r5)
 4009e70:	10bfffc4 	addi	r2,r2,-1
 4009e74:	28800215 	stw	r2,8(r5)
 4009e78:	10000b16 	blt	r2,zero,4009ea8 <putc+0x68>
 4009e7c:	28800017 	ldw	r2,0(r5)
 4009e80:	14400005 	stb	r17,0(r2)
 4009e84:	28800017 	ldw	r2,0(r5)
 4009e88:	10c00044 	addi	r3,r2,1
 4009e8c:	28c00015 	stw	r3,0(r5)
 4009e90:	10800003 	ldbu	r2,0(r2)
 4009e94:	dfc00317 	ldw	ra,12(sp)
 4009e98:	dc400217 	ldw	r17,8(sp)
 4009e9c:	dc000117 	ldw	r16,4(sp)
 4009ea0:	dec00404 	addi	sp,sp,16
 4009ea4:	f800283a 	ret
 4009ea8:	28c00617 	ldw	r3,24(r5)
 4009eac:	10c00e16 	blt	r2,r3,4009ee8 <putc+0xa8>
 4009eb0:	28800017 	ldw	r2,0(r5)
 4009eb4:	01000284 	movi	r4,10
 4009eb8:	14400005 	stb	r17,0(r2)
 4009ebc:	28800017 	ldw	r2,0(r5)
 4009ec0:	10c00003 	ldbu	r3,0(r2)
 4009ec4:	193ff01e 	bne	r3,r4,4009e88 <__alt_data_end+0xfc009e88>
 4009ec8:	280d883a 	mov	r6,r5
 4009ecc:	180b883a 	mov	r5,r3
 4009ed0:	00000706 	br	4009ef0 <putc+0xb0>
 4009ed4:	8009883a 	mov	r4,r16
 4009ed8:	d9400015 	stw	r5,0(sp)
 4009edc:	40072c00 	call	40072c0 <__sinit>
 4009ee0:	d9400017 	ldw	r5,0(sp)
 4009ee4:	003fe106 	br	4009e6c <__alt_data_end+0xfc009e6c>
 4009ee8:	280d883a 	mov	r6,r5
 4009eec:	880b883a 	mov	r5,r17
 4009ef0:	8009883a 	mov	r4,r16
 4009ef4:	dfc00317 	ldw	ra,12(sp)
 4009ef8:	dc400217 	ldw	r17,8(sp)
 4009efc:	dc000117 	ldw	r16,4(sp)
 4009f00:	dec00404 	addi	sp,sp,16
 4009f04:	400be441 	jmpi	400be44 <__swbuf_r>

04009f08 <_realloc_r>:
 4009f08:	defff604 	addi	sp,sp,-40
 4009f0c:	dc800215 	stw	r18,8(sp)
 4009f10:	dfc00915 	stw	ra,36(sp)
 4009f14:	df000815 	stw	fp,32(sp)
 4009f18:	ddc00715 	stw	r23,28(sp)
 4009f1c:	dd800615 	stw	r22,24(sp)
 4009f20:	dd400515 	stw	r21,20(sp)
 4009f24:	dd000415 	stw	r20,16(sp)
 4009f28:	dcc00315 	stw	r19,12(sp)
 4009f2c:	dc400115 	stw	r17,4(sp)
 4009f30:	dc000015 	stw	r16,0(sp)
 4009f34:	3025883a 	mov	r18,r6
 4009f38:	2800b726 	beq	r5,zero,400a218 <_realloc_r+0x310>
 4009f3c:	282b883a 	mov	r21,r5
 4009f40:	2029883a 	mov	r20,r4
 4009f44:	40101900 	call	4010190 <__malloc_lock>
 4009f48:	a8bfff17 	ldw	r2,-4(r21)
 4009f4c:	043fff04 	movi	r16,-4
 4009f50:	90c002c4 	addi	r3,r18,11
 4009f54:	01000584 	movi	r4,22
 4009f58:	acfffe04 	addi	r19,r21,-8
 4009f5c:	1420703a 	and	r16,r2,r16
 4009f60:	20c0332e 	bgeu	r4,r3,400a030 <_realloc_r+0x128>
 4009f64:	047ffe04 	movi	r17,-8
 4009f68:	1c62703a 	and	r17,r3,r17
 4009f6c:	8807883a 	mov	r3,r17
 4009f70:	88005816 	blt	r17,zero,400a0d4 <_realloc_r+0x1cc>
 4009f74:	8c805736 	bltu	r17,r18,400a0d4 <_realloc_r+0x1cc>
 4009f78:	80c0300e 	bge	r16,r3,400a03c <_realloc_r+0x134>
 4009f7c:	07010074 	movhi	fp,1025
 4009f80:	e70c4e04 	addi	fp,fp,12600
 4009f84:	e1c00217 	ldw	r7,8(fp)
 4009f88:	9c09883a 	add	r4,r19,r16
 4009f8c:	22000117 	ldw	r8,4(r4)
 4009f90:	21c06326 	beq	r4,r7,400a120 <_realloc_r+0x218>
 4009f94:	017fff84 	movi	r5,-2
 4009f98:	414a703a 	and	r5,r8,r5
 4009f9c:	214b883a 	add	r5,r4,r5
 4009fa0:	29800117 	ldw	r6,4(r5)
 4009fa4:	3180004c 	andi	r6,r6,1
 4009fa8:	30003f26 	beq	r6,zero,400a0a8 <_realloc_r+0x1a0>
 4009fac:	1080004c 	andi	r2,r2,1
 4009fb0:	10008326 	beq	r2,zero,400a1c0 <_realloc_r+0x2b8>
 4009fb4:	900b883a 	mov	r5,r18
 4009fb8:	a009883a 	mov	r4,r20
 4009fbc:	400802c0 	call	400802c <_malloc_r>
 4009fc0:	1025883a 	mov	r18,r2
 4009fc4:	10011e26 	beq	r2,zero,400a440 <_realloc_r+0x538>
 4009fc8:	a93fff17 	ldw	r4,-4(r21)
 4009fcc:	10fffe04 	addi	r3,r2,-8
 4009fd0:	00bfff84 	movi	r2,-2
 4009fd4:	2084703a 	and	r2,r4,r2
 4009fd8:	9885883a 	add	r2,r19,r2
 4009fdc:	1880ee26 	beq	r3,r2,400a398 <_realloc_r+0x490>
 4009fe0:	81bfff04 	addi	r6,r16,-4
 4009fe4:	00800904 	movi	r2,36
 4009fe8:	1180b836 	bltu	r2,r6,400a2cc <_realloc_r+0x3c4>
 4009fec:	00c004c4 	movi	r3,19
 4009ff0:	19809636 	bltu	r3,r6,400a24c <_realloc_r+0x344>
 4009ff4:	9005883a 	mov	r2,r18
 4009ff8:	a807883a 	mov	r3,r21
 4009ffc:	19000017 	ldw	r4,0(r3)
 400a000:	11000015 	stw	r4,0(r2)
 400a004:	19000117 	ldw	r4,4(r3)
 400a008:	11000115 	stw	r4,4(r2)
 400a00c:	18c00217 	ldw	r3,8(r3)
 400a010:	10c00215 	stw	r3,8(r2)
 400a014:	a80b883a 	mov	r5,r21
 400a018:	a009883a 	mov	r4,r20
 400a01c:	40074340 	call	4007434 <_free_r>
 400a020:	a009883a 	mov	r4,r20
 400a024:	40101b40 	call	40101b4 <__malloc_unlock>
 400a028:	9005883a 	mov	r2,r18
 400a02c:	00001206 	br	400a078 <_realloc_r+0x170>
 400a030:	00c00404 	movi	r3,16
 400a034:	1823883a 	mov	r17,r3
 400a038:	003fce06 	br	4009f74 <__alt_data_end+0xfc009f74>
 400a03c:	a825883a 	mov	r18,r21
 400a040:	8445c83a 	sub	r2,r16,r17
 400a044:	00c003c4 	movi	r3,15
 400a048:	18802636 	bltu	r3,r2,400a0e4 <_realloc_r+0x1dc>
 400a04c:	99800117 	ldw	r6,4(r19)
 400a050:	9c07883a 	add	r3,r19,r16
 400a054:	3180004c 	andi	r6,r6,1
 400a058:	3420b03a 	or	r16,r6,r16
 400a05c:	9c000115 	stw	r16,4(r19)
 400a060:	18800117 	ldw	r2,4(r3)
 400a064:	10800054 	ori	r2,r2,1
 400a068:	18800115 	stw	r2,4(r3)
 400a06c:	a009883a 	mov	r4,r20
 400a070:	40101b40 	call	40101b4 <__malloc_unlock>
 400a074:	9005883a 	mov	r2,r18
 400a078:	dfc00917 	ldw	ra,36(sp)
 400a07c:	df000817 	ldw	fp,32(sp)
 400a080:	ddc00717 	ldw	r23,28(sp)
 400a084:	dd800617 	ldw	r22,24(sp)
 400a088:	dd400517 	ldw	r21,20(sp)
 400a08c:	dd000417 	ldw	r20,16(sp)
 400a090:	dcc00317 	ldw	r19,12(sp)
 400a094:	dc800217 	ldw	r18,8(sp)
 400a098:	dc400117 	ldw	r17,4(sp)
 400a09c:	dc000017 	ldw	r16,0(sp)
 400a0a0:	dec00a04 	addi	sp,sp,40
 400a0a4:	f800283a 	ret
 400a0a8:	017fff04 	movi	r5,-4
 400a0ac:	414a703a 	and	r5,r8,r5
 400a0b0:	814d883a 	add	r6,r16,r5
 400a0b4:	30c01f16 	blt	r6,r3,400a134 <_realloc_r+0x22c>
 400a0b8:	20800317 	ldw	r2,12(r4)
 400a0bc:	20c00217 	ldw	r3,8(r4)
 400a0c0:	a825883a 	mov	r18,r21
 400a0c4:	3021883a 	mov	r16,r6
 400a0c8:	18800315 	stw	r2,12(r3)
 400a0cc:	10c00215 	stw	r3,8(r2)
 400a0d0:	003fdb06 	br	400a040 <__alt_data_end+0xfc00a040>
 400a0d4:	00800304 	movi	r2,12
 400a0d8:	a0800015 	stw	r2,0(r20)
 400a0dc:	0005883a 	mov	r2,zero
 400a0e0:	003fe506 	br	400a078 <__alt_data_end+0xfc00a078>
 400a0e4:	98c00117 	ldw	r3,4(r19)
 400a0e8:	9c4b883a 	add	r5,r19,r17
 400a0ec:	11000054 	ori	r4,r2,1
 400a0f0:	18c0004c 	andi	r3,r3,1
 400a0f4:	1c62b03a 	or	r17,r3,r17
 400a0f8:	9c400115 	stw	r17,4(r19)
 400a0fc:	29000115 	stw	r4,4(r5)
 400a100:	2885883a 	add	r2,r5,r2
 400a104:	10c00117 	ldw	r3,4(r2)
 400a108:	29400204 	addi	r5,r5,8
 400a10c:	a009883a 	mov	r4,r20
 400a110:	18c00054 	ori	r3,r3,1
 400a114:	10c00115 	stw	r3,4(r2)
 400a118:	40074340 	call	4007434 <_free_r>
 400a11c:	003fd306 	br	400a06c <__alt_data_end+0xfc00a06c>
 400a120:	017fff04 	movi	r5,-4
 400a124:	414a703a 	and	r5,r8,r5
 400a128:	89800404 	addi	r6,r17,16
 400a12c:	8151883a 	add	r8,r16,r5
 400a130:	4180590e 	bge	r8,r6,400a298 <_realloc_r+0x390>
 400a134:	1080004c 	andi	r2,r2,1
 400a138:	103f9e1e 	bne	r2,zero,4009fb4 <__alt_data_end+0xfc009fb4>
 400a13c:	adbffe17 	ldw	r22,-8(r21)
 400a140:	00bfff04 	movi	r2,-4
 400a144:	9dadc83a 	sub	r22,r19,r22
 400a148:	b1800117 	ldw	r6,4(r22)
 400a14c:	3084703a 	and	r2,r6,r2
 400a150:	20002026 	beq	r4,zero,400a1d4 <_realloc_r+0x2cc>
 400a154:	80af883a 	add	r23,r16,r2
 400a158:	b96f883a 	add	r23,r23,r5
 400a15c:	21c05f26 	beq	r4,r7,400a2dc <_realloc_r+0x3d4>
 400a160:	b8c01c16 	blt	r23,r3,400a1d4 <_realloc_r+0x2cc>
 400a164:	20800317 	ldw	r2,12(r4)
 400a168:	20c00217 	ldw	r3,8(r4)
 400a16c:	81bfff04 	addi	r6,r16,-4
 400a170:	01000904 	movi	r4,36
 400a174:	18800315 	stw	r2,12(r3)
 400a178:	10c00215 	stw	r3,8(r2)
 400a17c:	b0c00217 	ldw	r3,8(r22)
 400a180:	b0800317 	ldw	r2,12(r22)
 400a184:	b4800204 	addi	r18,r22,8
 400a188:	18800315 	stw	r2,12(r3)
 400a18c:	10c00215 	stw	r3,8(r2)
 400a190:	21801b36 	bltu	r4,r6,400a200 <_realloc_r+0x2f8>
 400a194:	008004c4 	movi	r2,19
 400a198:	1180352e 	bgeu	r2,r6,400a270 <_realloc_r+0x368>
 400a19c:	a8800017 	ldw	r2,0(r21)
 400a1a0:	b0800215 	stw	r2,8(r22)
 400a1a4:	a8800117 	ldw	r2,4(r21)
 400a1a8:	b0800315 	stw	r2,12(r22)
 400a1ac:	008006c4 	movi	r2,27
 400a1b0:	11807f36 	bltu	r2,r6,400a3b0 <_realloc_r+0x4a8>
 400a1b4:	b0800404 	addi	r2,r22,16
 400a1b8:	ad400204 	addi	r21,r21,8
 400a1bc:	00002d06 	br	400a274 <_realloc_r+0x36c>
 400a1c0:	adbffe17 	ldw	r22,-8(r21)
 400a1c4:	00bfff04 	movi	r2,-4
 400a1c8:	9dadc83a 	sub	r22,r19,r22
 400a1cc:	b1000117 	ldw	r4,4(r22)
 400a1d0:	2084703a 	and	r2,r4,r2
 400a1d4:	b03f7726 	beq	r22,zero,4009fb4 <__alt_data_end+0xfc009fb4>
 400a1d8:	80af883a 	add	r23,r16,r2
 400a1dc:	b8ff7516 	blt	r23,r3,4009fb4 <__alt_data_end+0xfc009fb4>
 400a1e0:	b0800317 	ldw	r2,12(r22)
 400a1e4:	b0c00217 	ldw	r3,8(r22)
 400a1e8:	81bfff04 	addi	r6,r16,-4
 400a1ec:	01000904 	movi	r4,36
 400a1f0:	18800315 	stw	r2,12(r3)
 400a1f4:	10c00215 	stw	r3,8(r2)
 400a1f8:	b4800204 	addi	r18,r22,8
 400a1fc:	21bfe52e 	bgeu	r4,r6,400a194 <__alt_data_end+0xfc00a194>
 400a200:	a80b883a 	mov	r5,r21
 400a204:	9009883a 	mov	r4,r18
 400a208:	4008a640 	call	4008a64 <memmove>
 400a20c:	b821883a 	mov	r16,r23
 400a210:	b027883a 	mov	r19,r22
 400a214:	003f8a06 	br	400a040 <__alt_data_end+0xfc00a040>
 400a218:	300b883a 	mov	r5,r6
 400a21c:	dfc00917 	ldw	ra,36(sp)
 400a220:	df000817 	ldw	fp,32(sp)
 400a224:	ddc00717 	ldw	r23,28(sp)
 400a228:	dd800617 	ldw	r22,24(sp)
 400a22c:	dd400517 	ldw	r21,20(sp)
 400a230:	dd000417 	ldw	r20,16(sp)
 400a234:	dcc00317 	ldw	r19,12(sp)
 400a238:	dc800217 	ldw	r18,8(sp)
 400a23c:	dc400117 	ldw	r17,4(sp)
 400a240:	dc000017 	ldw	r16,0(sp)
 400a244:	dec00a04 	addi	sp,sp,40
 400a248:	400802c1 	jmpi	400802c <_malloc_r>
 400a24c:	a8c00017 	ldw	r3,0(r21)
 400a250:	90c00015 	stw	r3,0(r18)
 400a254:	a8c00117 	ldw	r3,4(r21)
 400a258:	90c00115 	stw	r3,4(r18)
 400a25c:	00c006c4 	movi	r3,27
 400a260:	19804536 	bltu	r3,r6,400a378 <_realloc_r+0x470>
 400a264:	90800204 	addi	r2,r18,8
 400a268:	a8c00204 	addi	r3,r21,8
 400a26c:	003f6306 	br	4009ffc <__alt_data_end+0xfc009ffc>
 400a270:	9005883a 	mov	r2,r18
 400a274:	a8c00017 	ldw	r3,0(r21)
 400a278:	b821883a 	mov	r16,r23
 400a27c:	b027883a 	mov	r19,r22
 400a280:	10c00015 	stw	r3,0(r2)
 400a284:	a8c00117 	ldw	r3,4(r21)
 400a288:	10c00115 	stw	r3,4(r2)
 400a28c:	a8c00217 	ldw	r3,8(r21)
 400a290:	10c00215 	stw	r3,8(r2)
 400a294:	003f6a06 	br	400a040 <__alt_data_end+0xfc00a040>
 400a298:	9c67883a 	add	r19,r19,r17
 400a29c:	4445c83a 	sub	r2,r8,r17
 400a2a0:	e4c00215 	stw	r19,8(fp)
 400a2a4:	10800054 	ori	r2,r2,1
 400a2a8:	98800115 	stw	r2,4(r19)
 400a2ac:	a8bfff17 	ldw	r2,-4(r21)
 400a2b0:	a009883a 	mov	r4,r20
 400a2b4:	1080004c 	andi	r2,r2,1
 400a2b8:	1462b03a 	or	r17,r2,r17
 400a2bc:	ac7fff15 	stw	r17,-4(r21)
 400a2c0:	40101b40 	call	40101b4 <__malloc_unlock>
 400a2c4:	a805883a 	mov	r2,r21
 400a2c8:	003f6b06 	br	400a078 <__alt_data_end+0xfc00a078>
 400a2cc:	a80b883a 	mov	r5,r21
 400a2d0:	9009883a 	mov	r4,r18
 400a2d4:	4008a640 	call	4008a64 <memmove>
 400a2d8:	003f4e06 	br	400a014 <__alt_data_end+0xfc00a014>
 400a2dc:	89000404 	addi	r4,r17,16
 400a2e0:	b93fbc16 	blt	r23,r4,400a1d4 <__alt_data_end+0xfc00a1d4>
 400a2e4:	b0800317 	ldw	r2,12(r22)
 400a2e8:	b0c00217 	ldw	r3,8(r22)
 400a2ec:	81bfff04 	addi	r6,r16,-4
 400a2f0:	01000904 	movi	r4,36
 400a2f4:	18800315 	stw	r2,12(r3)
 400a2f8:	10c00215 	stw	r3,8(r2)
 400a2fc:	b4800204 	addi	r18,r22,8
 400a300:	21804336 	bltu	r4,r6,400a410 <_realloc_r+0x508>
 400a304:	008004c4 	movi	r2,19
 400a308:	11803f2e 	bgeu	r2,r6,400a408 <_realloc_r+0x500>
 400a30c:	a8800017 	ldw	r2,0(r21)
 400a310:	b0800215 	stw	r2,8(r22)
 400a314:	a8800117 	ldw	r2,4(r21)
 400a318:	b0800315 	stw	r2,12(r22)
 400a31c:	008006c4 	movi	r2,27
 400a320:	11803f36 	bltu	r2,r6,400a420 <_realloc_r+0x518>
 400a324:	b0800404 	addi	r2,r22,16
 400a328:	ad400204 	addi	r21,r21,8
 400a32c:	a8c00017 	ldw	r3,0(r21)
 400a330:	10c00015 	stw	r3,0(r2)
 400a334:	a8c00117 	ldw	r3,4(r21)
 400a338:	10c00115 	stw	r3,4(r2)
 400a33c:	a8c00217 	ldw	r3,8(r21)
 400a340:	10c00215 	stw	r3,8(r2)
 400a344:	b447883a 	add	r3,r22,r17
 400a348:	bc45c83a 	sub	r2,r23,r17
 400a34c:	e0c00215 	stw	r3,8(fp)
 400a350:	10800054 	ori	r2,r2,1
 400a354:	18800115 	stw	r2,4(r3)
 400a358:	b0800117 	ldw	r2,4(r22)
 400a35c:	a009883a 	mov	r4,r20
 400a360:	1080004c 	andi	r2,r2,1
 400a364:	1462b03a 	or	r17,r2,r17
 400a368:	b4400115 	stw	r17,4(r22)
 400a36c:	40101b40 	call	40101b4 <__malloc_unlock>
 400a370:	9005883a 	mov	r2,r18
 400a374:	003f4006 	br	400a078 <__alt_data_end+0xfc00a078>
 400a378:	a8c00217 	ldw	r3,8(r21)
 400a37c:	90c00215 	stw	r3,8(r18)
 400a380:	a8c00317 	ldw	r3,12(r21)
 400a384:	90c00315 	stw	r3,12(r18)
 400a388:	30801126 	beq	r6,r2,400a3d0 <_realloc_r+0x4c8>
 400a38c:	90800404 	addi	r2,r18,16
 400a390:	a8c00404 	addi	r3,r21,16
 400a394:	003f1906 	br	4009ffc <__alt_data_end+0xfc009ffc>
 400a398:	90ffff17 	ldw	r3,-4(r18)
 400a39c:	00bfff04 	movi	r2,-4
 400a3a0:	a825883a 	mov	r18,r21
 400a3a4:	1884703a 	and	r2,r3,r2
 400a3a8:	80a1883a 	add	r16,r16,r2
 400a3ac:	003f2406 	br	400a040 <__alt_data_end+0xfc00a040>
 400a3b0:	a8800217 	ldw	r2,8(r21)
 400a3b4:	b0800415 	stw	r2,16(r22)
 400a3b8:	a8800317 	ldw	r2,12(r21)
 400a3bc:	b0800515 	stw	r2,20(r22)
 400a3c0:	31000a26 	beq	r6,r4,400a3ec <_realloc_r+0x4e4>
 400a3c4:	b0800604 	addi	r2,r22,24
 400a3c8:	ad400404 	addi	r21,r21,16
 400a3cc:	003fa906 	br	400a274 <__alt_data_end+0xfc00a274>
 400a3d0:	a9000417 	ldw	r4,16(r21)
 400a3d4:	90800604 	addi	r2,r18,24
 400a3d8:	a8c00604 	addi	r3,r21,24
 400a3dc:	91000415 	stw	r4,16(r18)
 400a3e0:	a9000517 	ldw	r4,20(r21)
 400a3e4:	91000515 	stw	r4,20(r18)
 400a3e8:	003f0406 	br	4009ffc <__alt_data_end+0xfc009ffc>
 400a3ec:	a8c00417 	ldw	r3,16(r21)
 400a3f0:	ad400604 	addi	r21,r21,24
 400a3f4:	b0800804 	addi	r2,r22,32
 400a3f8:	b0c00615 	stw	r3,24(r22)
 400a3fc:	a8ffff17 	ldw	r3,-4(r21)
 400a400:	b0c00715 	stw	r3,28(r22)
 400a404:	003f9b06 	br	400a274 <__alt_data_end+0xfc00a274>
 400a408:	9005883a 	mov	r2,r18
 400a40c:	003fc706 	br	400a32c <__alt_data_end+0xfc00a32c>
 400a410:	a80b883a 	mov	r5,r21
 400a414:	9009883a 	mov	r4,r18
 400a418:	4008a640 	call	4008a64 <memmove>
 400a41c:	003fc906 	br	400a344 <__alt_data_end+0xfc00a344>
 400a420:	a8800217 	ldw	r2,8(r21)
 400a424:	b0800415 	stw	r2,16(r22)
 400a428:	a8800317 	ldw	r2,12(r21)
 400a42c:	b0800515 	stw	r2,20(r22)
 400a430:	31000726 	beq	r6,r4,400a450 <_realloc_r+0x548>
 400a434:	b0800604 	addi	r2,r22,24
 400a438:	ad400404 	addi	r21,r21,16
 400a43c:	003fbb06 	br	400a32c <__alt_data_end+0xfc00a32c>
 400a440:	a009883a 	mov	r4,r20
 400a444:	40101b40 	call	40101b4 <__malloc_unlock>
 400a448:	0005883a 	mov	r2,zero
 400a44c:	003f0a06 	br	400a078 <__alt_data_end+0xfc00a078>
 400a450:	a8c00417 	ldw	r3,16(r21)
 400a454:	ad400604 	addi	r21,r21,24
 400a458:	b0800804 	addi	r2,r22,32
 400a45c:	b0c00615 	stw	r3,24(r22)
 400a460:	a8ffff17 	ldw	r3,-4(r21)
 400a464:	b0c00715 	stw	r3,28(r22)
 400a468:	003fb006 	br	400a32c <__alt_data_end+0xfc00a32c>

0400a46c <__fpclassifyd>:
 400a46c:	00a00034 	movhi	r2,32768
 400a470:	10bfffc4 	addi	r2,r2,-1
 400a474:	2884703a 	and	r2,r5,r2
 400a478:	10000726 	beq	r2,zero,400a498 <__fpclassifyd+0x2c>
 400a47c:	00fffc34 	movhi	r3,65520
 400a480:	019ff834 	movhi	r6,32736
 400a484:	28c7883a 	add	r3,r5,r3
 400a488:	31bfffc4 	addi	r6,r6,-1
 400a48c:	30c00536 	bltu	r6,r3,400a4a4 <__fpclassifyd+0x38>
 400a490:	00800104 	movi	r2,4
 400a494:	f800283a 	ret
 400a498:	2000021e 	bne	r4,zero,400a4a4 <__fpclassifyd+0x38>
 400a49c:	00800084 	movi	r2,2
 400a4a0:	f800283a 	ret
 400a4a4:	00dffc34 	movhi	r3,32752
 400a4a8:	019ff834 	movhi	r6,32736
 400a4ac:	28cb883a 	add	r5,r5,r3
 400a4b0:	31bfffc4 	addi	r6,r6,-1
 400a4b4:	317ff62e 	bgeu	r6,r5,400a490 <__alt_data_end+0xfc00a490>
 400a4b8:	01400434 	movhi	r5,16
 400a4bc:	297fffc4 	addi	r5,r5,-1
 400a4c0:	28800236 	bltu	r5,r2,400a4cc <__fpclassifyd+0x60>
 400a4c4:	008000c4 	movi	r2,3
 400a4c8:	f800283a 	ret
 400a4cc:	10c00226 	beq	r2,r3,400a4d8 <__fpclassifyd+0x6c>
 400a4d0:	0005883a 	mov	r2,zero
 400a4d4:	f800283a 	ret
 400a4d8:	2005003a 	cmpeq	r2,r4,zero
 400a4dc:	f800283a 	ret

0400a4e0 <_sbrk_r>:
 400a4e0:	defffd04 	addi	sp,sp,-12
 400a4e4:	dc000015 	stw	r16,0(sp)
 400a4e8:	04010074 	movhi	r16,1025
 400a4ec:	dc400115 	stw	r17,4(sp)
 400a4f0:	8418bd04 	addi	r16,r16,25332
 400a4f4:	2023883a 	mov	r17,r4
 400a4f8:	2809883a 	mov	r4,r5
 400a4fc:	dfc00215 	stw	ra,8(sp)
 400a500:	80000015 	stw	zero,0(r16)
 400a504:	401039c0 	call	401039c <sbrk>
 400a508:	00ffffc4 	movi	r3,-1
 400a50c:	10c00526 	beq	r2,r3,400a524 <_sbrk_r+0x44>
 400a510:	dfc00217 	ldw	ra,8(sp)
 400a514:	dc400117 	ldw	r17,4(sp)
 400a518:	dc000017 	ldw	r16,0(sp)
 400a51c:	dec00304 	addi	sp,sp,12
 400a520:	f800283a 	ret
 400a524:	80c00017 	ldw	r3,0(r16)
 400a528:	183ff926 	beq	r3,zero,400a510 <__alt_data_end+0xfc00a510>
 400a52c:	88c00015 	stw	r3,0(r17)
 400a530:	003ff706 	br	400a510 <__alt_data_end+0xfc00a510>

0400a534 <__sread>:
 400a534:	defffe04 	addi	sp,sp,-8
 400a538:	dc000015 	stw	r16,0(sp)
 400a53c:	2821883a 	mov	r16,r5
 400a540:	2940038f 	ldh	r5,14(r5)
 400a544:	dfc00115 	stw	ra,4(sp)
 400a548:	400c5480 	call	400c548 <_read_r>
 400a54c:	10000716 	blt	r2,zero,400a56c <__sread+0x38>
 400a550:	80c01417 	ldw	r3,80(r16)
 400a554:	1887883a 	add	r3,r3,r2
 400a558:	80c01415 	stw	r3,80(r16)
 400a55c:	dfc00117 	ldw	ra,4(sp)
 400a560:	dc000017 	ldw	r16,0(sp)
 400a564:	dec00204 	addi	sp,sp,8
 400a568:	f800283a 	ret
 400a56c:	80c0030b 	ldhu	r3,12(r16)
 400a570:	18fbffcc 	andi	r3,r3,61439
 400a574:	80c0030d 	sth	r3,12(r16)
 400a578:	dfc00117 	ldw	ra,4(sp)
 400a57c:	dc000017 	ldw	r16,0(sp)
 400a580:	dec00204 	addi	sp,sp,8
 400a584:	f800283a 	ret

0400a588 <__seofread>:
 400a588:	0005883a 	mov	r2,zero
 400a58c:	f800283a 	ret

0400a590 <__swrite>:
 400a590:	2880030b 	ldhu	r2,12(r5)
 400a594:	defffb04 	addi	sp,sp,-20
 400a598:	dcc00315 	stw	r19,12(sp)
 400a59c:	dc800215 	stw	r18,8(sp)
 400a5a0:	dc400115 	stw	r17,4(sp)
 400a5a4:	dc000015 	stw	r16,0(sp)
 400a5a8:	dfc00415 	stw	ra,16(sp)
 400a5ac:	10c0400c 	andi	r3,r2,256
 400a5b0:	2821883a 	mov	r16,r5
 400a5b4:	2023883a 	mov	r17,r4
 400a5b8:	3025883a 	mov	r18,r6
 400a5bc:	3827883a 	mov	r19,r7
 400a5c0:	18000526 	beq	r3,zero,400a5d8 <__swrite+0x48>
 400a5c4:	2940038f 	ldh	r5,14(r5)
 400a5c8:	01c00084 	movi	r7,2
 400a5cc:	000d883a 	mov	r6,zero
 400a5d0:	400c4e80 	call	400c4e8 <_lseek_r>
 400a5d4:	8080030b 	ldhu	r2,12(r16)
 400a5d8:	8140038f 	ldh	r5,14(r16)
 400a5dc:	10bbffcc 	andi	r2,r2,61439
 400a5e0:	980f883a 	mov	r7,r19
 400a5e4:	900d883a 	mov	r6,r18
 400a5e8:	8809883a 	mov	r4,r17
 400a5ec:	8080030d 	sth	r2,12(r16)
 400a5f0:	dfc00417 	ldw	ra,16(sp)
 400a5f4:	dcc00317 	ldw	r19,12(sp)
 400a5f8:	dc800217 	ldw	r18,8(sp)
 400a5fc:	dc400117 	ldw	r17,4(sp)
 400a600:	dc000017 	ldw	r16,0(sp)
 400a604:	dec00504 	addi	sp,sp,20
 400a608:	400bf9c1 	jmpi	400bf9c <_write_r>

0400a60c <__sseek>:
 400a60c:	defffe04 	addi	sp,sp,-8
 400a610:	dc000015 	stw	r16,0(sp)
 400a614:	2821883a 	mov	r16,r5
 400a618:	2940038f 	ldh	r5,14(r5)
 400a61c:	dfc00115 	stw	ra,4(sp)
 400a620:	400c4e80 	call	400c4e8 <_lseek_r>
 400a624:	00ffffc4 	movi	r3,-1
 400a628:	10c00826 	beq	r2,r3,400a64c <__sseek+0x40>
 400a62c:	80c0030b 	ldhu	r3,12(r16)
 400a630:	80801415 	stw	r2,80(r16)
 400a634:	18c40014 	ori	r3,r3,4096
 400a638:	80c0030d 	sth	r3,12(r16)
 400a63c:	dfc00117 	ldw	ra,4(sp)
 400a640:	dc000017 	ldw	r16,0(sp)
 400a644:	dec00204 	addi	sp,sp,8
 400a648:	f800283a 	ret
 400a64c:	80c0030b 	ldhu	r3,12(r16)
 400a650:	18fbffcc 	andi	r3,r3,61439
 400a654:	80c0030d 	sth	r3,12(r16)
 400a658:	dfc00117 	ldw	ra,4(sp)
 400a65c:	dc000017 	ldw	r16,0(sp)
 400a660:	dec00204 	addi	sp,sp,8
 400a664:	f800283a 	ret

0400a668 <__sclose>:
 400a668:	2940038f 	ldh	r5,14(r5)
 400a66c:	400bffc1 	jmpi	400bffc <_close_r>

0400a670 <strcmp>:
 400a670:	2144b03a 	or	r2,r4,r5
 400a674:	108000cc 	andi	r2,r2,3
 400a678:	1000171e 	bne	r2,zero,400a6d8 <strcmp+0x68>
 400a67c:	20800017 	ldw	r2,0(r4)
 400a680:	28c00017 	ldw	r3,0(r5)
 400a684:	10c0141e 	bne	r2,r3,400a6d8 <strcmp+0x68>
 400a688:	027fbff4 	movhi	r9,65279
 400a68c:	4a7fbfc4 	addi	r9,r9,-257
 400a690:	0086303a 	nor	r3,zero,r2
 400a694:	02202074 	movhi	r8,32897
 400a698:	1245883a 	add	r2,r2,r9
 400a69c:	42202004 	addi	r8,r8,-32640
 400a6a0:	10c4703a 	and	r2,r2,r3
 400a6a4:	1204703a 	and	r2,r2,r8
 400a6a8:	10000226 	beq	r2,zero,400a6b4 <strcmp+0x44>
 400a6ac:	00002306 	br	400a73c <strcmp+0xcc>
 400a6b0:	1000221e 	bne	r2,zero,400a73c <strcmp+0xcc>
 400a6b4:	21000104 	addi	r4,r4,4
 400a6b8:	20c00017 	ldw	r3,0(r4)
 400a6bc:	29400104 	addi	r5,r5,4
 400a6c0:	29800017 	ldw	r6,0(r5)
 400a6c4:	1a4f883a 	add	r7,r3,r9
 400a6c8:	00c4303a 	nor	r2,zero,r3
 400a6cc:	3884703a 	and	r2,r7,r2
 400a6d0:	1204703a 	and	r2,r2,r8
 400a6d4:	19bff626 	beq	r3,r6,400a6b0 <__alt_data_end+0xfc00a6b0>
 400a6d8:	20800003 	ldbu	r2,0(r4)
 400a6dc:	10c03fcc 	andi	r3,r2,255
 400a6e0:	18c0201c 	xori	r3,r3,128
 400a6e4:	18ffe004 	addi	r3,r3,-128
 400a6e8:	18000c26 	beq	r3,zero,400a71c <strcmp+0xac>
 400a6ec:	29800007 	ldb	r6,0(r5)
 400a6f0:	19800326 	beq	r3,r6,400a700 <strcmp+0x90>
 400a6f4:	00001306 	br	400a744 <strcmp+0xd4>
 400a6f8:	29800007 	ldb	r6,0(r5)
 400a6fc:	11800b1e 	bne	r2,r6,400a72c <strcmp+0xbc>
 400a700:	21000044 	addi	r4,r4,1
 400a704:	20c00003 	ldbu	r3,0(r4)
 400a708:	29400044 	addi	r5,r5,1
 400a70c:	18803fcc 	andi	r2,r3,255
 400a710:	1080201c 	xori	r2,r2,128
 400a714:	10bfe004 	addi	r2,r2,-128
 400a718:	103ff71e 	bne	r2,zero,400a6f8 <__alt_data_end+0xfc00a6f8>
 400a71c:	0007883a 	mov	r3,zero
 400a720:	28800003 	ldbu	r2,0(r5)
 400a724:	1885c83a 	sub	r2,r3,r2
 400a728:	f800283a 	ret
 400a72c:	28800003 	ldbu	r2,0(r5)
 400a730:	18c03fcc 	andi	r3,r3,255
 400a734:	1885c83a 	sub	r2,r3,r2
 400a738:	f800283a 	ret
 400a73c:	0005883a 	mov	r2,zero
 400a740:	f800283a 	ret
 400a744:	10c03fcc 	andi	r3,r2,255
 400a748:	003ff506 	br	400a720 <__alt_data_end+0xfc00a720>

0400a74c <__sprint_r.part.0>:
 400a74c:	28801917 	ldw	r2,100(r5)
 400a750:	defff604 	addi	sp,sp,-40
 400a754:	dd400515 	stw	r21,20(sp)
 400a758:	dfc00915 	stw	ra,36(sp)
 400a75c:	df000815 	stw	fp,32(sp)
 400a760:	ddc00715 	stw	r23,28(sp)
 400a764:	dd800615 	stw	r22,24(sp)
 400a768:	dd000415 	stw	r20,16(sp)
 400a76c:	dcc00315 	stw	r19,12(sp)
 400a770:	dc800215 	stw	r18,8(sp)
 400a774:	dc400115 	stw	r17,4(sp)
 400a778:	dc000015 	stw	r16,0(sp)
 400a77c:	1088000c 	andi	r2,r2,8192
 400a780:	302b883a 	mov	r21,r6
 400a784:	10002e26 	beq	r2,zero,400a840 <__sprint_r.part.0+0xf4>
 400a788:	30800217 	ldw	r2,8(r6)
 400a78c:	35800017 	ldw	r22,0(r6)
 400a790:	10002926 	beq	r2,zero,400a838 <__sprint_r.part.0+0xec>
 400a794:	2827883a 	mov	r19,r5
 400a798:	2029883a 	mov	r20,r4
 400a79c:	b5c00104 	addi	r23,r22,4
 400a7a0:	04bfffc4 	movi	r18,-1
 400a7a4:	bc400017 	ldw	r17,0(r23)
 400a7a8:	b4000017 	ldw	r16,0(r22)
 400a7ac:	0039883a 	mov	fp,zero
 400a7b0:	8822d0ba 	srli	r17,r17,2
 400a7b4:	8800031e 	bne	r17,zero,400a7c4 <__sprint_r.part.0+0x78>
 400a7b8:	00001806 	br	400a81c <__sprint_r.part.0+0xd0>
 400a7bc:	84000104 	addi	r16,r16,4
 400a7c0:	8f001526 	beq	r17,fp,400a818 <__sprint_r.part.0+0xcc>
 400a7c4:	81400017 	ldw	r5,0(r16)
 400a7c8:	980d883a 	mov	r6,r19
 400a7cc:	a009883a 	mov	r4,r20
 400a7d0:	400c3940 	call	400c394 <_fputwc_r>
 400a7d4:	e7000044 	addi	fp,fp,1
 400a7d8:	14bff81e 	bne	r2,r18,400a7bc <__alt_data_end+0xfc00a7bc>
 400a7dc:	9005883a 	mov	r2,r18
 400a7e0:	a8000215 	stw	zero,8(r21)
 400a7e4:	a8000115 	stw	zero,4(r21)
 400a7e8:	dfc00917 	ldw	ra,36(sp)
 400a7ec:	df000817 	ldw	fp,32(sp)
 400a7f0:	ddc00717 	ldw	r23,28(sp)
 400a7f4:	dd800617 	ldw	r22,24(sp)
 400a7f8:	dd400517 	ldw	r21,20(sp)
 400a7fc:	dd000417 	ldw	r20,16(sp)
 400a800:	dcc00317 	ldw	r19,12(sp)
 400a804:	dc800217 	ldw	r18,8(sp)
 400a808:	dc400117 	ldw	r17,4(sp)
 400a80c:	dc000017 	ldw	r16,0(sp)
 400a810:	dec00a04 	addi	sp,sp,40
 400a814:	f800283a 	ret
 400a818:	a8800217 	ldw	r2,8(r21)
 400a81c:	8c63883a 	add	r17,r17,r17
 400a820:	8c63883a 	add	r17,r17,r17
 400a824:	1445c83a 	sub	r2,r2,r17
 400a828:	a8800215 	stw	r2,8(r21)
 400a82c:	b5800204 	addi	r22,r22,8
 400a830:	bdc00204 	addi	r23,r23,8
 400a834:	103fdb1e 	bne	r2,zero,400a7a4 <__alt_data_end+0xfc00a7a4>
 400a838:	0005883a 	mov	r2,zero
 400a83c:	003fe806 	br	400a7e0 <__alt_data_end+0xfc00a7e0>
 400a840:	40077440 	call	4007744 <__sfvwrite_r>
 400a844:	003fe606 	br	400a7e0 <__alt_data_end+0xfc00a7e0>

0400a848 <__sprint_r>:
 400a848:	30c00217 	ldw	r3,8(r6)
 400a84c:	18000126 	beq	r3,zero,400a854 <__sprint_r+0xc>
 400a850:	400a74c1 	jmpi	400a74c <__sprint_r.part.0>
 400a854:	30000115 	stw	zero,4(r6)
 400a858:	0005883a 	mov	r2,zero
 400a85c:	f800283a 	ret

0400a860 <___vfiprintf_internal_r>:
 400a860:	deffca04 	addi	sp,sp,-216
 400a864:	dd403115 	stw	r21,196(sp)
 400a868:	dfc03515 	stw	ra,212(sp)
 400a86c:	df003415 	stw	fp,208(sp)
 400a870:	ddc03315 	stw	r23,204(sp)
 400a874:	dd803215 	stw	r22,200(sp)
 400a878:	dd003015 	stw	r20,192(sp)
 400a87c:	dcc02f15 	stw	r19,188(sp)
 400a880:	dc802e15 	stw	r18,184(sp)
 400a884:	dc402d15 	stw	r17,180(sp)
 400a888:	dc002c15 	stw	r16,176(sp)
 400a88c:	d9002115 	stw	r4,132(sp)
 400a890:	d9402015 	stw	r5,128(sp)
 400a894:	d9c02215 	stw	r7,136(sp)
 400a898:	302b883a 	mov	r21,r6
 400a89c:	20000226 	beq	r4,zero,400a8a8 <___vfiprintf_internal_r+0x48>
 400a8a0:	20800e17 	ldw	r2,56(r4)
 400a8a4:	1000cf26 	beq	r2,zero,400abe4 <___vfiprintf_internal_r+0x384>
 400a8a8:	d8c02017 	ldw	r3,128(sp)
 400a8ac:	1880030b 	ldhu	r2,12(r3)
 400a8b0:	10c8000c 	andi	r3,r2,8192
 400a8b4:	1800071e 	bne	r3,zero,400a8d4 <___vfiprintf_internal_r+0x74>
 400a8b8:	d9402017 	ldw	r5,128(sp)
 400a8bc:	00f7ffc4 	movi	r3,-8193
 400a8c0:	10880014 	ori	r2,r2,8192
 400a8c4:	29001917 	ldw	r4,100(r5)
 400a8c8:	2880030d 	sth	r2,12(r5)
 400a8cc:	20c6703a 	and	r3,r4,r3
 400a8d0:	28c01915 	stw	r3,100(r5)
 400a8d4:	10c0020c 	andi	r3,r2,8
 400a8d8:	1800a526 	beq	r3,zero,400ab70 <___vfiprintf_internal_r+0x310>
 400a8dc:	d9002017 	ldw	r4,128(sp)
 400a8e0:	20c00417 	ldw	r3,16(r4)
 400a8e4:	1800a226 	beq	r3,zero,400ab70 <___vfiprintf_internal_r+0x310>
 400a8e8:	1080068c 	andi	r2,r2,26
 400a8ec:	00c00284 	movi	r3,10
 400a8f0:	10c0a826 	beq	r2,r3,400ab94 <___vfiprintf_internal_r+0x334>
 400a8f4:	d9001a04 	addi	r4,sp,104
 400a8f8:	d94019c4 	addi	r5,sp,103
 400a8fc:	04810074 	movhi	r18,1025
 400a900:	2145c83a 	sub	r2,r4,r5
 400a904:	948ac604 	addi	r18,r18,11032
 400a908:	d9001e15 	stw	r4,120(sp)
 400a90c:	d9401f15 	stw	r5,124(sp)
 400a910:	dec01a15 	stw	sp,104(sp)
 400a914:	d8001c15 	stw	zero,112(sp)
 400a918:	d8001b15 	stw	zero,108(sp)
 400a91c:	d811883a 	mov	r8,sp
 400a920:	d8002615 	stw	zero,152(sp)
 400a924:	d8002415 	stw	zero,144(sp)
 400a928:	d8802815 	stw	r2,160(sp)
 400a92c:	a82d883a 	mov	r22,r21
 400a930:	b0800007 	ldb	r2,0(r22)
 400a934:	10040d26 	beq	r2,zero,400b96c <___vfiprintf_internal_r+0x110c>
 400a938:	00c00944 	movi	r3,37
 400a93c:	b029883a 	mov	r20,r22
 400a940:	10c0021e 	bne	r2,r3,400a94c <___vfiprintf_internal_r+0xec>
 400a944:	00001606 	br	400a9a0 <___vfiprintf_internal_r+0x140>
 400a948:	10c00326 	beq	r2,r3,400a958 <___vfiprintf_internal_r+0xf8>
 400a94c:	a5000044 	addi	r20,r20,1
 400a950:	a0800007 	ldb	r2,0(r20)
 400a954:	103ffc1e 	bne	r2,zero,400a948 <__alt_data_end+0xfc00a948>
 400a958:	a5a1c83a 	sub	r16,r20,r22
 400a95c:	80001026 	beq	r16,zero,400a9a0 <___vfiprintf_internal_r+0x140>
 400a960:	d8c01c17 	ldw	r3,112(sp)
 400a964:	d8801b17 	ldw	r2,108(sp)
 400a968:	45800015 	stw	r22,0(r8)
 400a96c:	80c7883a 	add	r3,r16,r3
 400a970:	10800044 	addi	r2,r2,1
 400a974:	44000115 	stw	r16,4(r8)
 400a978:	d8c01c15 	stw	r3,112(sp)
 400a97c:	d8801b15 	stw	r2,108(sp)
 400a980:	010001c4 	movi	r4,7
 400a984:	2080750e 	bge	r4,r2,400ab5c <___vfiprintf_internal_r+0x2fc>
 400a988:	1803951e 	bne	r3,zero,400b7e0 <___vfiprintf_internal_r+0xf80>
 400a98c:	d8c02417 	ldw	r3,144(sp)
 400a990:	d8001b15 	stw	zero,108(sp)
 400a994:	d811883a 	mov	r8,sp
 400a998:	1c07883a 	add	r3,r3,r16
 400a99c:	d8c02415 	stw	r3,144(sp)
 400a9a0:	a0800007 	ldb	r2,0(r20)
 400a9a4:	1002e026 	beq	r2,zero,400b528 <___vfiprintf_internal_r+0xcc8>
 400a9a8:	a5800044 	addi	r22,r20,1
 400a9ac:	a0c00047 	ldb	r3,1(r20)
 400a9b0:	d8001d85 	stb	zero,118(sp)
 400a9b4:	0027883a 	mov	r19,zero
 400a9b8:	d8002305 	stb	zero,140(sp)
 400a9bc:	043fffc4 	movi	r16,-1
 400a9c0:	d8002515 	stw	zero,148(sp)
 400a9c4:	0023883a 	mov	r17,zero
 400a9c8:	05001604 	movi	r20,88
 400a9cc:	05400244 	movi	r21,9
 400a9d0:	402f883a 	mov	r23,r8
 400a9d4:	b5800044 	addi	r22,r22,1
 400a9d8:	18bff804 	addi	r2,r3,-32
 400a9dc:	a0827736 	bltu	r20,r2,400b3bc <___vfiprintf_internal_r+0xb5c>
 400a9e0:	100490ba 	slli	r2,r2,2
 400a9e4:	01010074 	movhi	r4,1025
 400a9e8:	212a7e04 	addi	r4,r4,-22024
 400a9ec:	1105883a 	add	r2,r2,r4
 400a9f0:	10800017 	ldw	r2,0(r2)
 400a9f4:	1000683a 	jmp	r2
 400a9f8:	0400b0bc 	xorhi	r16,zero,706
 400a9fc:	0400b3bc 	xorhi	r16,zero,718
 400aa00:	0400b3bc 	xorhi	r16,zero,718
 400aa04:	0400b0d8 	cmpnei	r16,zero,707
 400aa08:	0400b3bc 	xorhi	r16,zero,718
 400aa0c:	0400b3bc 	xorhi	r16,zero,718
 400aa10:	0400b3bc 	xorhi	r16,zero,718
 400aa14:	0400b3bc 	xorhi	r16,zero,718
 400aa18:	0400b3bc 	xorhi	r16,zero,718
 400aa1c:	0400b3bc 	xorhi	r16,zero,718
 400aa20:	0400b2e0 	cmpeqi	r16,zero,715
 400aa24:	0400b304 	movi	r16,716
 400aa28:	0400b3bc 	xorhi	r16,zero,718
 400aa2c:	0400abfc 	xorhi	r16,zero,687
 400aa30:	0400b318 	cmpnei	r16,zero,716
 400aa34:	0400b3bc 	xorhi	r16,zero,718
 400aa38:	0400b0e4 	muli	r16,zero,707
 400aa3c:	0400b0f0 	cmpltui	r16,zero,707
 400aa40:	0400b0f0 	cmpltui	r16,zero,707
 400aa44:	0400b0f0 	cmpltui	r16,zero,707
 400aa48:	0400b0f0 	cmpltui	r16,zero,707
 400aa4c:	0400b0f0 	cmpltui	r16,zero,707
 400aa50:	0400b0f0 	cmpltui	r16,zero,707
 400aa54:	0400b0f0 	cmpltui	r16,zero,707
 400aa58:	0400b0f0 	cmpltui	r16,zero,707
 400aa5c:	0400b0f0 	cmpltui	r16,zero,707
 400aa60:	0400b3bc 	xorhi	r16,zero,718
 400aa64:	0400b3bc 	xorhi	r16,zero,718
 400aa68:	0400b3bc 	xorhi	r16,zero,718
 400aa6c:	0400b3bc 	xorhi	r16,zero,718
 400aa70:	0400b3bc 	xorhi	r16,zero,718
 400aa74:	0400b3bc 	xorhi	r16,zero,718
 400aa78:	0400b3bc 	xorhi	r16,zero,718
 400aa7c:	0400b3bc 	xorhi	r16,zero,718
 400aa80:	0400b3bc 	xorhi	r16,zero,718
 400aa84:	0400b3bc 	xorhi	r16,zero,718
 400aa88:	0400b130 	cmpltui	r16,zero,708
 400aa8c:	0400b3bc 	xorhi	r16,zero,718
 400aa90:	0400b3bc 	xorhi	r16,zero,718
 400aa94:	0400b3bc 	xorhi	r16,zero,718
 400aa98:	0400b3bc 	xorhi	r16,zero,718
 400aa9c:	0400b3bc 	xorhi	r16,zero,718
 400aaa0:	0400b3bc 	xorhi	r16,zero,718
 400aaa4:	0400b3bc 	xorhi	r16,zero,718
 400aaa8:	0400b3bc 	xorhi	r16,zero,718
 400aaac:	0400b3bc 	xorhi	r16,zero,718
 400aab0:	0400b3bc 	xorhi	r16,zero,718
 400aab4:	0400b16c 	andhi	r16,zero,709
 400aab8:	0400b3bc 	xorhi	r16,zero,718
 400aabc:	0400b3bc 	xorhi	r16,zero,718
 400aac0:	0400b3bc 	xorhi	r16,zero,718
 400aac4:	0400b3bc 	xorhi	r16,zero,718
 400aac8:	0400b3bc 	xorhi	r16,zero,718
 400aacc:	0400b1c8 	cmpgei	r16,zero,711
 400aad0:	0400b3bc 	xorhi	r16,zero,718
 400aad4:	0400b3bc 	xorhi	r16,zero,718
 400aad8:	0400b23c 	xorhi	r16,zero,712
 400aadc:	0400b3bc 	xorhi	r16,zero,718
 400aae0:	0400b3bc 	xorhi	r16,zero,718
 400aae4:	0400b3bc 	xorhi	r16,zero,718
 400aae8:	0400b3bc 	xorhi	r16,zero,718
 400aaec:	0400b3bc 	xorhi	r16,zero,718
 400aaf0:	0400b3bc 	xorhi	r16,zero,718
 400aaf4:	0400b3bc 	xorhi	r16,zero,718
 400aaf8:	0400b3bc 	xorhi	r16,zero,718
 400aafc:	0400b3bc 	xorhi	r16,zero,718
 400ab00:	0400b3bc 	xorhi	r16,zero,718
 400ab04:	0400afe4 	muli	r16,zero,703
 400ab08:	0400b014 	movui	r16,704
 400ab0c:	0400b3bc 	xorhi	r16,zero,718
 400ab10:	0400b3bc 	xorhi	r16,zero,718
 400ab14:	0400b3bc 	xorhi	r16,zero,718
 400ab18:	0400b364 	muli	r16,zero,717
 400ab1c:	0400b014 	movui	r16,704
 400ab20:	0400b3bc 	xorhi	r16,zero,718
 400ab24:	0400b3bc 	xorhi	r16,zero,718
 400ab28:	0400aebc 	xorhi	r16,zero,698
 400ab2c:	0400b3bc 	xorhi	r16,zero,718
 400ab30:	0400aed0 	cmplti	r16,zero,699
 400ab34:	0400af08 	cmpgei	r16,zero,700
 400ab38:	0400ac08 	cmpgei	r16,zero,688
 400ab3c:	0400aeb0 	cmpltui	r16,zero,698
 400ab40:	0400b3bc 	xorhi	r16,zero,718
 400ab44:	0400b27c 	xorhi	r16,zero,713
 400ab48:	0400b3bc 	xorhi	r16,zero,718
 400ab4c:	0400b2c8 	cmpgei	r16,zero,715
 400ab50:	0400b3bc 	xorhi	r16,zero,718
 400ab54:	0400b3bc 	xorhi	r16,zero,718
 400ab58:	0400af8c 	andi	r16,zero,702
 400ab5c:	42000204 	addi	r8,r8,8
 400ab60:	d8c02417 	ldw	r3,144(sp)
 400ab64:	1c07883a 	add	r3,r3,r16
 400ab68:	d8c02415 	stw	r3,144(sp)
 400ab6c:	003f8c06 	br	400a9a0 <__alt_data_end+0xfc00a9a0>
 400ab70:	d9402017 	ldw	r5,128(sp)
 400ab74:	d9002117 	ldw	r4,132(sp)
 400ab78:	40052b40 	call	40052b4 <__swsetup_r>
 400ab7c:	1003c11e 	bne	r2,zero,400ba84 <___vfiprintf_internal_r+0x1224>
 400ab80:	d9402017 	ldw	r5,128(sp)
 400ab84:	00c00284 	movi	r3,10
 400ab88:	2880030b 	ldhu	r2,12(r5)
 400ab8c:	1080068c 	andi	r2,r2,26
 400ab90:	10ff581e 	bne	r2,r3,400a8f4 <__alt_data_end+0xfc00a8f4>
 400ab94:	d8c02017 	ldw	r3,128(sp)
 400ab98:	1880038f 	ldh	r2,14(r3)
 400ab9c:	103f5516 	blt	r2,zero,400a8f4 <__alt_data_end+0xfc00a8f4>
 400aba0:	d9c02217 	ldw	r7,136(sp)
 400aba4:	d9002117 	ldw	r4,132(sp)
 400aba8:	a80d883a 	mov	r6,r21
 400abac:	180b883a 	mov	r5,r3
 400abb0:	400bd880 	call	400bd88 <__sbprintf>
 400abb4:	dfc03517 	ldw	ra,212(sp)
 400abb8:	df003417 	ldw	fp,208(sp)
 400abbc:	ddc03317 	ldw	r23,204(sp)
 400abc0:	dd803217 	ldw	r22,200(sp)
 400abc4:	dd403117 	ldw	r21,196(sp)
 400abc8:	dd003017 	ldw	r20,192(sp)
 400abcc:	dcc02f17 	ldw	r19,188(sp)
 400abd0:	dc802e17 	ldw	r18,184(sp)
 400abd4:	dc402d17 	ldw	r17,180(sp)
 400abd8:	dc002c17 	ldw	r16,176(sp)
 400abdc:	dec03604 	addi	sp,sp,216
 400abe0:	f800283a 	ret
 400abe4:	40072c00 	call	40072c0 <__sinit>
 400abe8:	003f2f06 	br	400a8a8 <__alt_data_end+0xfc00a8a8>
 400abec:	d8c02517 	ldw	r3,148(sp)
 400abf0:	d8802215 	stw	r2,136(sp)
 400abf4:	00c7c83a 	sub	r3,zero,r3
 400abf8:	d8c02515 	stw	r3,148(sp)
 400abfc:	8c400114 	ori	r17,r17,4
 400ac00:	b0c00007 	ldb	r3,0(r22)
 400ac04:	003f7306 	br	400a9d4 <__alt_data_end+0xfc00a9d4>
 400ac08:	00800c04 	movi	r2,48
 400ac0c:	d9402217 	ldw	r5,136(sp)
 400ac10:	d8801d05 	stb	r2,116(sp)
 400ac14:	00801e04 	movi	r2,120
 400ac18:	d8801d45 	stb	r2,117(sp)
 400ac1c:	d8001d85 	stb	zero,118(sp)
 400ac20:	b811883a 	mov	r8,r23
 400ac24:	28c00104 	addi	r3,r5,4
 400ac28:	2cc00017 	ldw	r19,0(r5)
 400ac2c:	0029883a 	mov	r20,zero
 400ac30:	88800094 	ori	r2,r17,2
 400ac34:	80032516 	blt	r16,zero,400b8cc <___vfiprintf_internal_r+0x106c>
 400ac38:	00bfdfc4 	movi	r2,-129
 400ac3c:	88a2703a 	and	r17,r17,r2
 400ac40:	d8c02215 	stw	r3,136(sp)
 400ac44:	8c400094 	ori	r17,r17,2
 400ac48:	98032a1e 	bne	r19,zero,400b8f4 <___vfiprintf_internal_r+0x1094>
 400ac4c:	00810074 	movhi	r2,1025
 400ac50:	108a6504 	addi	r2,r2,10644
 400ac54:	d8802615 	stw	r2,152(sp)
 400ac58:	002b883a 	mov	r21,zero
 400ac5c:	8001741e 	bne	r16,zero,400b230 <___vfiprintf_internal_r+0x9d0>
 400ac60:	0021883a 	mov	r16,zero
 400ac64:	0029883a 	mov	r20,zero
 400ac68:	ddc01a04 	addi	r23,sp,104
 400ac6c:	8027883a 	mov	r19,r16
 400ac70:	8500010e 	bge	r16,r20,400ac78 <___vfiprintf_internal_r+0x418>
 400ac74:	a027883a 	mov	r19,r20
 400ac78:	ad403fcc 	andi	r21,r21,255
 400ac7c:	ad40201c 	xori	r21,r21,128
 400ac80:	ad7fe004 	addi	r21,r21,-128
 400ac84:	a8000126 	beq	r21,zero,400ac8c <___vfiprintf_internal_r+0x42c>
 400ac88:	9cc00044 	addi	r19,r19,1
 400ac8c:	89c0008c 	andi	r7,r17,2
 400ac90:	38000126 	beq	r7,zero,400ac98 <___vfiprintf_internal_r+0x438>
 400ac94:	9cc00084 	addi	r19,r19,2
 400ac98:	88c0210c 	andi	r3,r17,132
 400ac9c:	1801dd1e 	bne	r3,zero,400b414 <___vfiprintf_internal_r+0xbb4>
 400aca0:	d9402517 	ldw	r5,148(sp)
 400aca4:	2cebc83a 	sub	r21,r5,r19
 400aca8:	0541da0e 	bge	zero,r21,400b414 <___vfiprintf_internal_r+0xbb4>
 400acac:	07000404 	movi	fp,16
 400acb0:	d8801c17 	ldw	r2,112(sp)
 400acb4:	e543be0e 	bge	fp,r21,400bbb0 <___vfiprintf_internal_r+0x1350>
 400acb8:	01410074 	movhi	r5,1025
 400acbc:	294aca04 	addi	r5,r5,11048
 400acc0:	dc002715 	stw	r16,156(sp)
 400acc4:	d9801b17 	ldw	r6,108(sp)
 400acc8:	a821883a 	mov	r16,r21
 400accc:	d9402315 	stw	r5,140(sp)
 400acd0:	028001c4 	movi	r10,7
 400acd4:	d9c02915 	stw	r7,164(sp)
 400acd8:	182b883a 	mov	r21,r3
 400acdc:	00000506 	br	400acf4 <___vfiprintf_internal_r+0x494>
 400ace0:	31000084 	addi	r4,r6,2
 400ace4:	42000204 	addi	r8,r8,8
 400ace8:	180d883a 	mov	r6,r3
 400acec:	843ffc04 	addi	r16,r16,-16
 400acf0:	e4000f0e 	bge	fp,r16,400ad30 <___vfiprintf_internal_r+0x4d0>
 400acf4:	01010074 	movhi	r4,1025
 400acf8:	10800404 	addi	r2,r2,16
 400acfc:	30c00044 	addi	r3,r6,1
 400ad00:	210aca04 	addi	r4,r4,11048
 400ad04:	41000015 	stw	r4,0(r8)
 400ad08:	47000115 	stw	fp,4(r8)
 400ad0c:	d8801c15 	stw	r2,112(sp)
 400ad10:	d8c01b15 	stw	r3,108(sp)
 400ad14:	50fff20e 	bge	r10,r3,400ace0 <__alt_data_end+0xfc00ace0>
 400ad18:	1001b21e 	bne	r2,zero,400b3e4 <___vfiprintf_internal_r+0xb84>
 400ad1c:	843ffc04 	addi	r16,r16,-16
 400ad20:	000d883a 	mov	r6,zero
 400ad24:	01000044 	movi	r4,1
 400ad28:	d811883a 	mov	r8,sp
 400ad2c:	e43ff116 	blt	fp,r16,400acf4 <__alt_data_end+0xfc00acf4>
 400ad30:	a807883a 	mov	r3,r21
 400ad34:	d9c02917 	ldw	r7,164(sp)
 400ad38:	802b883a 	mov	r21,r16
 400ad3c:	dc002717 	ldw	r16,156(sp)
 400ad40:	d9402317 	ldw	r5,140(sp)
 400ad44:	a885883a 	add	r2,r21,r2
 400ad48:	45400115 	stw	r21,4(r8)
 400ad4c:	41400015 	stw	r5,0(r8)
 400ad50:	d8801c15 	stw	r2,112(sp)
 400ad54:	d9001b15 	stw	r4,108(sp)
 400ad58:	014001c4 	movi	r5,7
 400ad5c:	29026216 	blt	r5,r4,400b6e8 <___vfiprintf_internal_r+0xe88>
 400ad60:	d9801d87 	ldb	r6,118(sp)
 400ad64:	42000204 	addi	r8,r8,8
 400ad68:	21400044 	addi	r5,r4,1
 400ad6c:	3001ae1e 	bne	r6,zero,400b428 <___vfiprintf_internal_r+0xbc8>
 400ad70:	3801bb26 	beq	r7,zero,400b460 <___vfiprintf_internal_r+0xc00>
 400ad74:	d9001d04 	addi	r4,sp,116
 400ad78:	10800084 	addi	r2,r2,2
 400ad7c:	41000015 	stw	r4,0(r8)
 400ad80:	01000084 	movi	r4,2
 400ad84:	41000115 	stw	r4,4(r8)
 400ad88:	d8801c15 	stw	r2,112(sp)
 400ad8c:	d9401b15 	stw	r5,108(sp)
 400ad90:	010001c4 	movi	r4,7
 400ad94:	2142680e 	bge	r4,r5,400b738 <___vfiprintf_internal_r+0xed8>
 400ad98:	1002b11e 	bne	r2,zero,400b860 <___vfiprintf_internal_r+0x1000>
 400ad9c:	01802004 	movi	r6,128
 400ada0:	01400044 	movi	r5,1
 400ada4:	0009883a 	mov	r4,zero
 400ada8:	d811883a 	mov	r8,sp
 400adac:	1981ae1e 	bne	r3,r6,400b468 <___vfiprintf_internal_r+0xc08>
 400adb0:	d8c02517 	ldw	r3,148(sp)
 400adb4:	1cf9c83a 	sub	fp,r3,r19
 400adb8:	0701ab0e 	bge	zero,fp,400b468 <___vfiprintf_internal_r+0xc08>
 400adbc:	05400404 	movi	r21,16
 400adc0:	af03a90e 	bge	r21,fp,400bc68 <___vfiprintf_internal_r+0x1408>
 400adc4:	01410074 	movhi	r5,1025
 400adc8:	294ac604 	addi	r5,r5,11032
 400adcc:	d9402315 	stw	r5,140(sp)
 400add0:	01c001c4 	movi	r7,7
 400add4:	00000506 	br	400adec <___vfiprintf_internal_r+0x58c>
 400add8:	21800084 	addi	r6,r4,2
 400addc:	42000204 	addi	r8,r8,8
 400ade0:	1809883a 	mov	r4,r3
 400ade4:	e73ffc04 	addi	fp,fp,-16
 400ade8:	af000d0e 	bge	r21,fp,400ae20 <___vfiprintf_internal_r+0x5c0>
 400adec:	10800404 	addi	r2,r2,16
 400adf0:	20c00044 	addi	r3,r4,1
 400adf4:	44800015 	stw	r18,0(r8)
 400adf8:	45400115 	stw	r21,4(r8)
 400adfc:	d8801c15 	stw	r2,112(sp)
 400ae00:	d8c01b15 	stw	r3,108(sp)
 400ae04:	38fff40e 	bge	r7,r3,400add8 <__alt_data_end+0xfc00add8>
 400ae08:	10022b1e 	bne	r2,zero,400b6b8 <___vfiprintf_internal_r+0xe58>
 400ae0c:	e73ffc04 	addi	fp,fp,-16
 400ae10:	01800044 	movi	r6,1
 400ae14:	0009883a 	mov	r4,zero
 400ae18:	d811883a 	mov	r8,sp
 400ae1c:	af3ff316 	blt	r21,fp,400adec <__alt_data_end+0xfc00adec>
 400ae20:	d8c02317 	ldw	r3,140(sp)
 400ae24:	1705883a 	add	r2,r2,fp
 400ae28:	47000115 	stw	fp,4(r8)
 400ae2c:	40c00015 	stw	r3,0(r8)
 400ae30:	d8801c15 	stw	r2,112(sp)
 400ae34:	d9801b15 	stw	r6,108(sp)
 400ae38:	00c001c4 	movi	r3,7
 400ae3c:	19829416 	blt	r3,r6,400b890 <___vfiprintf_internal_r+0x1030>
 400ae40:	8521c83a 	sub	r16,r16,r20
 400ae44:	42000204 	addi	r8,r8,8
 400ae48:	31400044 	addi	r5,r6,1
 400ae4c:	3009883a 	mov	r4,r6
 400ae50:	04018716 	blt	zero,r16,400b470 <___vfiprintf_internal_r+0xc10>
 400ae54:	a085883a 	add	r2,r20,r2
 400ae58:	45c00015 	stw	r23,0(r8)
 400ae5c:	45000115 	stw	r20,4(r8)
 400ae60:	d8801c15 	stw	r2,112(sp)
 400ae64:	d9401b15 	stw	r5,108(sp)
 400ae68:	00c001c4 	movi	r3,7
 400ae6c:	1941c20e 	bge	r3,r5,400b578 <___vfiprintf_internal_r+0xd18>
 400ae70:	1002531e 	bne	r2,zero,400b7c0 <___vfiprintf_internal_r+0xf60>
 400ae74:	d8001b15 	stw	zero,108(sp)
 400ae78:	8c40010c 	andi	r17,r17,4
 400ae7c:	88023226 	beq	r17,zero,400b748 <___vfiprintf_internal_r+0xee8>
 400ae80:	d9002517 	ldw	r4,148(sp)
 400ae84:	24e3c83a 	sub	r17,r4,r19
 400ae88:	04432916 	blt	zero,r17,400bb30 <___vfiprintf_internal_r+0x12d0>
 400ae8c:	d8802517 	ldw	r2,148(sp)
 400ae90:	14c0010e 	bge	r2,r19,400ae98 <___vfiprintf_internal_r+0x638>
 400ae94:	9805883a 	mov	r2,r19
 400ae98:	d8c02417 	ldw	r3,144(sp)
 400ae9c:	1887883a 	add	r3,r3,r2
 400aea0:	d8c02415 	stw	r3,144(sp)
 400aea4:	d8001b15 	stw	zero,108(sp)
 400aea8:	d811883a 	mov	r8,sp
 400aeac:	003ea006 	br	400a930 <__alt_data_end+0xfc00a930>
 400aeb0:	8c400814 	ori	r17,r17,32
 400aeb4:	b0c00007 	ldb	r3,0(r22)
 400aeb8:	003ec606 	br	400a9d4 <__alt_data_end+0xfc00a9d4>
 400aebc:	b0c00007 	ldb	r3,0(r22)
 400aec0:	00801b04 	movi	r2,108
 400aec4:	18832026 	beq	r3,r2,400bb48 <___vfiprintf_internal_r+0x12e8>
 400aec8:	8c400414 	ori	r17,r17,16
 400aecc:	003ec106 	br	400a9d4 <__alt_data_end+0xfc00a9d4>
 400aed0:	9cc03fcc 	andi	r19,r19,255
 400aed4:	b811883a 	mov	r8,r23
 400aed8:	9803981e 	bne	r19,zero,400bd3c <___vfiprintf_internal_r+0x14dc>
 400aedc:	8880080c 	andi	r2,r17,32
 400aee0:	1002be26 	beq	r2,zero,400b9dc <___vfiprintf_internal_r+0x117c>
 400aee4:	d9002217 	ldw	r4,136(sp)
 400aee8:	d9402417 	ldw	r5,144(sp)
 400aeec:	20800017 	ldw	r2,0(r4)
 400aef0:	2807d7fa 	srai	r3,r5,31
 400aef4:	21000104 	addi	r4,r4,4
 400aef8:	d9002215 	stw	r4,136(sp)
 400aefc:	11400015 	stw	r5,0(r2)
 400af00:	10c00115 	stw	r3,4(r2)
 400af04:	003e8a06 	br	400a930 <__alt_data_end+0xfc00a930>
 400af08:	9cc03fcc 	andi	r19,r19,255
 400af0c:	b811883a 	mov	r8,r23
 400af10:	9803871e 	bne	r19,zero,400bd30 <___vfiprintf_internal_r+0x14d0>
 400af14:	8880080c 	andi	r2,r17,32
 400af18:	10009a26 	beq	r2,zero,400b184 <___vfiprintf_internal_r+0x924>
 400af1c:	d9002217 	ldw	r4,136(sp)
 400af20:	d8001d85 	stb	zero,118(sp)
 400af24:	20800204 	addi	r2,r4,8
 400af28:	24c00017 	ldw	r19,0(r4)
 400af2c:	25000117 	ldw	r20,4(r4)
 400af30:	8002a416 	blt	r16,zero,400b9c4 <___vfiprintf_internal_r+0x1164>
 400af34:	013fdfc4 	movi	r4,-129
 400af38:	9d06b03a 	or	r3,r19,r20
 400af3c:	d8802215 	stw	r2,136(sp)
 400af40:	8922703a 	and	r17,r17,r4
 400af44:	18009b26 	beq	r3,zero,400b1b4 <___vfiprintf_internal_r+0x954>
 400af48:	002b883a 	mov	r21,zero
 400af4c:	ddc01a04 	addi	r23,sp,104
 400af50:	9806d0fa 	srli	r3,r19,3
 400af54:	a008977a 	slli	r4,r20,29
 400af58:	a028d0fa 	srli	r20,r20,3
 400af5c:	9cc001cc 	andi	r19,r19,7
 400af60:	98800c04 	addi	r2,r19,48
 400af64:	bdffffc4 	addi	r23,r23,-1
 400af68:	20e6b03a 	or	r19,r4,r3
 400af6c:	b8800005 	stb	r2,0(r23)
 400af70:	9d06b03a 	or	r3,r19,r20
 400af74:	183ff61e 	bne	r3,zero,400af50 <__alt_data_end+0xfc00af50>
 400af78:	88c0004c 	andi	r3,r17,1
 400af7c:	18021f1e 	bne	r3,zero,400b7fc <___vfiprintf_internal_r+0xf9c>
 400af80:	d9401e17 	ldw	r5,120(sp)
 400af84:	2de9c83a 	sub	r20,r5,r23
 400af88:	003f3806 	br	400ac6c <__alt_data_end+0xfc00ac6c>
 400af8c:	9cc03fcc 	andi	r19,r19,255
 400af90:	b811883a 	mov	r8,r23
 400af94:	98034f1e 	bne	r19,zero,400bcd4 <___vfiprintf_internal_r+0x1474>
 400af98:	00810074 	movhi	r2,1025
 400af9c:	108a6504 	addi	r2,r2,10644
 400afa0:	d8802615 	stw	r2,152(sp)
 400afa4:	8880080c 	andi	r2,r17,32
 400afa8:	1000ac26 	beq	r2,zero,400b25c <___vfiprintf_internal_r+0x9fc>
 400afac:	d9002217 	ldw	r4,136(sp)
 400afb0:	24c00017 	ldw	r19,0(r4)
 400afb4:	25000117 	ldw	r20,4(r4)
 400afb8:	21000204 	addi	r4,r4,8
 400afbc:	d9002215 	stw	r4,136(sp)
 400afc0:	8880004c 	andi	r2,r17,1
 400afc4:	1001e726 	beq	r2,zero,400b764 <___vfiprintf_internal_r+0xf04>
 400afc8:	9d04b03a 	or	r2,r19,r20
 400afcc:	10025c1e 	bne	r2,zero,400b940 <___vfiprintf_internal_r+0x10e0>
 400afd0:	d8001d85 	stb	zero,118(sp)
 400afd4:	80024416 	blt	r16,zero,400b8e8 <___vfiprintf_internal_r+0x1088>
 400afd8:	00bfdfc4 	movi	r2,-129
 400afdc:	88a2703a 	and	r17,r17,r2
 400afe0:	003f1d06 	br	400ac58 <__alt_data_end+0xfc00ac58>
 400afe4:	d8c02217 	ldw	r3,136(sp)
 400afe8:	04c00044 	movi	r19,1
 400afec:	b811883a 	mov	r8,r23
 400aff0:	18800017 	ldw	r2,0(r3)
 400aff4:	18c00104 	addi	r3,r3,4
 400aff8:	d8001d85 	stb	zero,118(sp)
 400affc:	d8801005 	stb	r2,64(sp)
 400b000:	d8c02215 	stw	r3,136(sp)
 400b004:	9829883a 	mov	r20,r19
 400b008:	ddc01004 	addi	r23,sp,64
 400b00c:	0021883a 	mov	r16,zero
 400b010:	003f1e06 	br	400ac8c <__alt_data_end+0xfc00ac8c>
 400b014:	9cc03fcc 	andi	r19,r19,255
 400b018:	b811883a 	mov	r8,r23
 400b01c:	9803331e 	bne	r19,zero,400bcec <___vfiprintf_internal_r+0x148c>
 400b020:	8880080c 	andi	r2,r17,32
 400b024:	10004826 	beq	r2,zero,400b148 <___vfiprintf_internal_r+0x8e8>
 400b028:	d9002217 	ldw	r4,136(sp)
 400b02c:	20800117 	ldw	r2,4(r4)
 400b030:	24c00017 	ldw	r19,0(r4)
 400b034:	21000204 	addi	r4,r4,8
 400b038:	d9002215 	stw	r4,136(sp)
 400b03c:	1029883a 	mov	r20,r2
 400b040:	10024c16 	blt	r2,zero,400b974 <___vfiprintf_internal_r+0x1114>
 400b044:	dd401d83 	ldbu	r21,118(sp)
 400b048:	80007116 	blt	r16,zero,400b210 <___vfiprintf_internal_r+0x9b0>
 400b04c:	00ffdfc4 	movi	r3,-129
 400b050:	9d04b03a 	or	r2,r19,r20
 400b054:	88e2703a 	and	r17,r17,r3
 400b058:	1000d126 	beq	r2,zero,400b3a0 <___vfiprintf_internal_r+0xb40>
 400b05c:	a0023526 	beq	r20,zero,400b934 <___vfiprintf_internal_r+0x10d4>
 400b060:	ddc01a04 	addi	r23,sp,104
 400b064:	4039883a 	mov	fp,r8
 400b068:	9809883a 	mov	r4,r19
 400b06c:	a00b883a 	mov	r5,r20
 400b070:	01800284 	movi	r6,10
 400b074:	000f883a 	mov	r7,zero
 400b078:	400cd8c0 	call	400cd8c <__umoddi3>
 400b07c:	10800c04 	addi	r2,r2,48
 400b080:	bdffffc4 	addi	r23,r23,-1
 400b084:	9809883a 	mov	r4,r19
 400b088:	a00b883a 	mov	r5,r20
 400b08c:	b8800005 	stb	r2,0(r23)
 400b090:	01800284 	movi	r6,10
 400b094:	000f883a 	mov	r7,zero
 400b098:	400c7900 	call	400c790 <__udivdi3>
 400b09c:	1027883a 	mov	r19,r2
 400b0a0:	10c4b03a 	or	r2,r2,r3
 400b0a4:	1829883a 	mov	r20,r3
 400b0a8:	103fef1e 	bne	r2,zero,400b068 <__alt_data_end+0xfc00b068>
 400b0ac:	d9001e17 	ldw	r4,120(sp)
 400b0b0:	e011883a 	mov	r8,fp
 400b0b4:	25e9c83a 	sub	r20,r4,r23
 400b0b8:	003eec06 	br	400ac6c <__alt_data_end+0xfc00ac6c>
 400b0bc:	d8802307 	ldb	r2,140(sp)
 400b0c0:	1002361e 	bne	r2,zero,400b99c <___vfiprintf_internal_r+0x113c>
 400b0c4:	00c00804 	movi	r3,32
 400b0c8:	d8c02305 	stb	r3,140(sp)
 400b0cc:	04c00044 	movi	r19,1
 400b0d0:	b0c00007 	ldb	r3,0(r22)
 400b0d4:	003e3f06 	br	400a9d4 <__alt_data_end+0xfc00a9d4>
 400b0d8:	8c400054 	ori	r17,r17,1
 400b0dc:	b0c00007 	ldb	r3,0(r22)
 400b0e0:	003e3c06 	br	400a9d4 <__alt_data_end+0xfc00a9d4>
 400b0e4:	8c402014 	ori	r17,r17,128
 400b0e8:	b0c00007 	ldb	r3,0(r22)
 400b0ec:	003e3906 	br	400a9d4 <__alt_data_end+0xfc00a9d4>
 400b0f0:	dc002715 	stw	r16,156(sp)
 400b0f4:	d8002515 	stw	zero,148(sp)
 400b0f8:	1f3ff404 	addi	fp,r3,-48
 400b0fc:	0009883a 	mov	r4,zero
 400b100:	b021883a 	mov	r16,r22
 400b104:	01400284 	movi	r5,10
 400b108:	4002ce00 	call	4002ce0 <__mulsi3>
 400b10c:	80c00007 	ldb	r3,0(r16)
 400b110:	e089883a 	add	r4,fp,r2
 400b114:	b5800044 	addi	r22,r22,1
 400b118:	1f3ff404 	addi	fp,r3,-48
 400b11c:	b021883a 	mov	r16,r22
 400b120:	af3ff82e 	bgeu	r21,fp,400b104 <__alt_data_end+0xfc00b104>
 400b124:	d9002515 	stw	r4,148(sp)
 400b128:	dc002717 	ldw	r16,156(sp)
 400b12c:	003e2a06 	br	400a9d8 <__alt_data_end+0xfc00a9d8>
 400b130:	9cc03fcc 	andi	r19,r19,255
 400b134:	b811883a 	mov	r8,r23
 400b138:	9802e91e 	bne	r19,zero,400bce0 <___vfiprintf_internal_r+0x1480>
 400b13c:	8c400414 	ori	r17,r17,16
 400b140:	8880080c 	andi	r2,r17,32
 400b144:	103fb81e 	bne	r2,zero,400b028 <__alt_data_end+0xfc00b028>
 400b148:	8880040c 	andi	r2,r17,16
 400b14c:	10022e26 	beq	r2,zero,400ba08 <___vfiprintf_internal_r+0x11a8>
 400b150:	d9402217 	ldw	r5,136(sp)
 400b154:	2cc00017 	ldw	r19,0(r5)
 400b158:	29400104 	addi	r5,r5,4
 400b15c:	d9402215 	stw	r5,136(sp)
 400b160:	9829d7fa 	srai	r20,r19,31
 400b164:	a005883a 	mov	r2,r20
 400b168:	003fb506 	br	400b040 <__alt_data_end+0xfc00b040>
 400b16c:	9cc03fcc 	andi	r19,r19,255
 400b170:	b811883a 	mov	r8,r23
 400b174:	9802fa1e 	bne	r19,zero,400bd60 <___vfiprintf_internal_r+0x1500>
 400b178:	8c400414 	ori	r17,r17,16
 400b17c:	8880080c 	andi	r2,r17,32
 400b180:	103f661e 	bne	r2,zero,400af1c <__alt_data_end+0xfc00af1c>
 400b184:	8880040c 	andi	r2,r17,16
 400b188:	10020626 	beq	r2,zero,400b9a4 <___vfiprintf_internal_r+0x1144>
 400b18c:	d9402217 	ldw	r5,136(sp)
 400b190:	d8001d85 	stb	zero,118(sp)
 400b194:	0029883a 	mov	r20,zero
 400b198:	28800104 	addi	r2,r5,4
 400b19c:	2cc00017 	ldw	r19,0(r5)
 400b1a0:	80020816 	blt	r16,zero,400b9c4 <___vfiprintf_internal_r+0x1164>
 400b1a4:	00ffdfc4 	movi	r3,-129
 400b1a8:	d8802215 	stw	r2,136(sp)
 400b1ac:	88e2703a 	and	r17,r17,r3
 400b1b0:	983f651e 	bne	r19,zero,400af48 <__alt_data_end+0xfc00af48>
 400b1b4:	002b883a 	mov	r21,zero
 400b1b8:	8002cf26 	beq	r16,zero,400bcf8 <___vfiprintf_internal_r+0x1498>
 400b1bc:	0027883a 	mov	r19,zero
 400b1c0:	0029883a 	mov	r20,zero
 400b1c4:	003f6106 	br	400af4c <__alt_data_end+0xfc00af4c>
 400b1c8:	9cc03fcc 	andi	r19,r19,255
 400b1cc:	b811883a 	mov	r8,r23
 400b1d0:	9802e01e 	bne	r19,zero,400bd54 <___vfiprintf_internal_r+0x14f4>
 400b1d4:	8c400414 	ori	r17,r17,16
 400b1d8:	8880080c 	andi	r2,r17,32
 400b1dc:	1000641e 	bne	r2,zero,400b370 <___vfiprintf_internal_r+0xb10>
 400b1e0:	8880040c 	andi	r2,r17,16
 400b1e4:	1001c81e 	bne	r2,zero,400b908 <___vfiprintf_internal_r+0x10a8>
 400b1e8:	8880100c 	andi	r2,r17,64
 400b1ec:	d8001d85 	stb	zero,118(sp)
 400b1f0:	1002281e 	bne	r2,zero,400ba94 <___vfiprintf_internal_r+0x1234>
 400b1f4:	d9002217 	ldw	r4,136(sp)
 400b1f8:	0029883a 	mov	r20,zero
 400b1fc:	20800104 	addi	r2,r4,4
 400b200:	24c00017 	ldw	r19,0(r4)
 400b204:	8001c60e 	bge	r16,zero,400b920 <___vfiprintf_internal_r+0x10c0>
 400b208:	d8802215 	stw	r2,136(sp)
 400b20c:	002b883a 	mov	r21,zero
 400b210:	9d04b03a 	or	r2,r19,r20
 400b214:	103f911e 	bne	r2,zero,400b05c <__alt_data_end+0xfc00b05c>
 400b218:	00800044 	movi	r2,1
 400b21c:	10803fcc 	andi	r2,r2,255
 400b220:	00c00044 	movi	r3,1
 400b224:	10c05f26 	beq	r2,r3,400b3a4 <___vfiprintf_internal_r+0xb44>
 400b228:	00c00084 	movi	r3,2
 400b22c:	10ffe31e 	bne	r2,r3,400b1bc <__alt_data_end+0xfc00b1bc>
 400b230:	0027883a 	mov	r19,zero
 400b234:	0029883a 	mov	r20,zero
 400b238:	00015106 	br	400b780 <___vfiprintf_internal_r+0xf20>
 400b23c:	9cc03fcc 	andi	r19,r19,255
 400b240:	b811883a 	mov	r8,r23
 400b244:	9802c01e 	bne	r19,zero,400bd48 <___vfiprintf_internal_r+0x14e8>
 400b248:	01410074 	movhi	r5,1025
 400b24c:	294a6004 	addi	r5,r5,10624
 400b250:	d9402615 	stw	r5,152(sp)
 400b254:	8880080c 	andi	r2,r17,32
 400b258:	103f541e 	bne	r2,zero,400afac <__alt_data_end+0xfc00afac>
 400b25c:	8880040c 	andi	r2,r17,16
 400b260:	1001f226 	beq	r2,zero,400ba2c <___vfiprintf_internal_r+0x11cc>
 400b264:	d9402217 	ldw	r5,136(sp)
 400b268:	0029883a 	mov	r20,zero
 400b26c:	2cc00017 	ldw	r19,0(r5)
 400b270:	29400104 	addi	r5,r5,4
 400b274:	d9402215 	stw	r5,136(sp)
 400b278:	003f5106 	br	400afc0 <__alt_data_end+0xfc00afc0>
 400b27c:	d8c02217 	ldw	r3,136(sp)
 400b280:	b811883a 	mov	r8,r23
 400b284:	d8001d85 	stb	zero,118(sp)
 400b288:	1dc00017 	ldw	r23,0(r3)
 400b28c:	1f000104 	addi	fp,r3,4
 400b290:	b8025926 	beq	r23,zero,400bbf8 <___vfiprintf_internal_r+0x1398>
 400b294:	80023316 	blt	r16,zero,400bb64 <___vfiprintf_internal_r+0x1304>
 400b298:	800d883a 	mov	r6,r16
 400b29c:	000b883a 	mov	r5,zero
 400b2a0:	b809883a 	mov	r4,r23
 400b2a4:	da002a15 	stw	r8,168(sp)
 400b2a8:	40088380 	call	4008838 <memchr>
 400b2ac:	da002a17 	ldw	r8,168(sp)
 400b2b0:	10026826 	beq	r2,zero,400bc54 <___vfiprintf_internal_r+0x13f4>
 400b2b4:	15e9c83a 	sub	r20,r2,r23
 400b2b8:	dd401d83 	ldbu	r21,118(sp)
 400b2bc:	df002215 	stw	fp,136(sp)
 400b2c0:	0021883a 	mov	r16,zero
 400b2c4:	003e6906 	br	400ac6c <__alt_data_end+0xfc00ac6c>
 400b2c8:	9cc03fcc 	andi	r19,r19,255
 400b2cc:	b811883a 	mov	r8,r23
 400b2d0:	983fc126 	beq	r19,zero,400b1d8 <__alt_data_end+0xfc00b1d8>
 400b2d4:	d8c02303 	ldbu	r3,140(sp)
 400b2d8:	d8c01d85 	stb	r3,118(sp)
 400b2dc:	003fbe06 	br	400b1d8 <__alt_data_end+0xfc00b1d8>
 400b2e0:	d9002217 	ldw	r4,136(sp)
 400b2e4:	d9402217 	ldw	r5,136(sp)
 400b2e8:	21000017 	ldw	r4,0(r4)
 400b2ec:	28800104 	addi	r2,r5,4
 400b2f0:	d9002515 	stw	r4,148(sp)
 400b2f4:	203e3d16 	blt	r4,zero,400abec <__alt_data_end+0xfc00abec>
 400b2f8:	d8802215 	stw	r2,136(sp)
 400b2fc:	b0c00007 	ldb	r3,0(r22)
 400b300:	003db406 	br	400a9d4 <__alt_data_end+0xfc00a9d4>
 400b304:	00c00ac4 	movi	r3,43
 400b308:	d8c02305 	stb	r3,140(sp)
 400b30c:	04c00044 	movi	r19,1
 400b310:	b0c00007 	ldb	r3,0(r22)
 400b314:	003daf06 	br	400a9d4 <__alt_data_end+0xfc00a9d4>
 400b318:	b0c00007 	ldb	r3,0(r22)
 400b31c:	01000a84 	movi	r4,42
 400b320:	b4000044 	addi	r16,r22,1
 400b324:	19025e26 	beq	r3,r4,400bca0 <___vfiprintf_internal_r+0x1440>
 400b328:	1f3ff404 	addi	fp,r3,-48
 400b32c:	0009883a 	mov	r4,zero
 400b330:	af025236 	bltu	r21,fp,400bc7c <___vfiprintf_internal_r+0x141c>
 400b334:	01400284 	movi	r5,10
 400b338:	4002ce00 	call	4002ce0 <__mulsi3>
 400b33c:	80c00007 	ldb	r3,0(r16)
 400b340:	1709883a 	add	r4,r2,fp
 400b344:	85800044 	addi	r22,r16,1
 400b348:	1f3ff404 	addi	fp,r3,-48
 400b34c:	b021883a 	mov	r16,r22
 400b350:	af3ff82e 	bgeu	r21,fp,400b334 <__alt_data_end+0xfc00b334>
 400b354:	2021883a 	mov	r16,r4
 400b358:	203d9f0e 	bge	r4,zero,400a9d8 <__alt_data_end+0xfc00a9d8>
 400b35c:	043fffc4 	movi	r16,-1
 400b360:	003d9d06 	br	400a9d8 <__alt_data_end+0xfc00a9d8>
 400b364:	8c401014 	ori	r17,r17,64
 400b368:	b0c00007 	ldb	r3,0(r22)
 400b36c:	003d9906 	br	400a9d4 <__alt_data_end+0xfc00a9d4>
 400b370:	d9002217 	ldw	r4,136(sp)
 400b374:	d8001d85 	stb	zero,118(sp)
 400b378:	20c00204 	addi	r3,r4,8
 400b37c:	24c00017 	ldw	r19,0(r4)
 400b380:	25000117 	ldw	r20,4(r4)
 400b384:	8001e716 	blt	r16,zero,400bb24 <___vfiprintf_internal_r+0x12c4>
 400b388:	013fdfc4 	movi	r4,-129
 400b38c:	9d04b03a 	or	r2,r19,r20
 400b390:	d8c02215 	stw	r3,136(sp)
 400b394:	8922703a 	and	r17,r17,r4
 400b398:	002b883a 	mov	r21,zero
 400b39c:	103f2f1e 	bne	r2,zero,400b05c <__alt_data_end+0xfc00b05c>
 400b3a0:	803e2f26 	beq	r16,zero,400ac60 <__alt_data_end+0xfc00ac60>
 400b3a4:	0027883a 	mov	r19,zero
 400b3a8:	9cc00c04 	addi	r19,r19,48
 400b3ac:	dcc019c5 	stb	r19,103(sp)
 400b3b0:	dd002817 	ldw	r20,160(sp)
 400b3b4:	ddc019c4 	addi	r23,sp,103
 400b3b8:	003e2c06 	br	400ac6c <__alt_data_end+0xfc00ac6c>
 400b3bc:	9cc03fcc 	andi	r19,r19,255
 400b3c0:	b811883a 	mov	r8,r23
 400b3c4:	9802571e 	bne	r19,zero,400bd24 <___vfiprintf_internal_r+0x14c4>
 400b3c8:	18005726 	beq	r3,zero,400b528 <___vfiprintf_internal_r+0xcc8>
 400b3cc:	04c00044 	movi	r19,1
 400b3d0:	d8c01005 	stb	r3,64(sp)
 400b3d4:	d8001d85 	stb	zero,118(sp)
 400b3d8:	9829883a 	mov	r20,r19
 400b3dc:	ddc01004 	addi	r23,sp,64
 400b3e0:	003f0a06 	br	400b00c <__alt_data_end+0xfc00b00c>
 400b3e4:	d9402017 	ldw	r5,128(sp)
 400b3e8:	d9002117 	ldw	r4,132(sp)
 400b3ec:	d9801a04 	addi	r6,sp,104
 400b3f0:	da802a15 	stw	r10,168(sp)
 400b3f4:	400a74c0 	call	400a74c <__sprint_r.part.0>
 400b3f8:	da802a17 	ldw	r10,168(sp)
 400b3fc:	1000501e 	bne	r2,zero,400b540 <___vfiprintf_internal_r+0xce0>
 400b400:	d9801b17 	ldw	r6,108(sp)
 400b404:	d8801c17 	ldw	r2,112(sp)
 400b408:	d811883a 	mov	r8,sp
 400b40c:	31000044 	addi	r4,r6,1
 400b410:	003e3606 	br	400acec <__alt_data_end+0xfc00acec>
 400b414:	d9001b17 	ldw	r4,108(sp)
 400b418:	d8801c17 	ldw	r2,112(sp)
 400b41c:	21400044 	addi	r5,r4,1
 400b420:	d9801d87 	ldb	r6,118(sp)
 400b424:	303e5226 	beq	r6,zero,400ad70 <__alt_data_end+0xfc00ad70>
 400b428:	01800044 	movi	r6,1
 400b42c:	d9001d84 	addi	r4,sp,118
 400b430:	1185883a 	add	r2,r2,r6
 400b434:	41000015 	stw	r4,0(r8)
 400b438:	41800115 	stw	r6,4(r8)
 400b43c:	d8801c15 	stw	r2,112(sp)
 400b440:	d9401b15 	stw	r5,108(sp)
 400b444:	010001c4 	movi	r4,7
 400b448:	2140b00e 	bge	r4,r5,400b70c <___vfiprintf_internal_r+0xeac>
 400b44c:	1000f61e 	bne	r2,zero,400b828 <___vfiprintf_internal_r+0xfc8>
 400b450:	3800b31e 	bne	r7,zero,400b720 <___vfiprintf_internal_r+0xec0>
 400b454:	0009883a 	mov	r4,zero
 400b458:	300b883a 	mov	r5,r6
 400b45c:	d811883a 	mov	r8,sp
 400b460:	01802004 	movi	r6,128
 400b464:	19be5226 	beq	r3,r6,400adb0 <__alt_data_end+0xfc00adb0>
 400b468:	8521c83a 	sub	r16,r16,r20
 400b46c:	043e790e 	bge	zero,r16,400ae54 <__alt_data_end+0xfc00ae54>
 400b470:	05400404 	movi	r21,16
 400b474:	ac01b00e 	bge	r21,r16,400bb38 <___vfiprintf_internal_r+0x12d8>
 400b478:	01410074 	movhi	r5,1025
 400b47c:	294ac604 	addi	r5,r5,11032
 400b480:	d9402315 	stw	r5,140(sp)
 400b484:	070001c4 	movi	fp,7
 400b488:	00000506 	br	400b4a0 <___vfiprintf_internal_r+0xc40>
 400b48c:	21400084 	addi	r5,r4,2
 400b490:	42000204 	addi	r8,r8,8
 400b494:	1809883a 	mov	r4,r3
 400b498:	843ffc04 	addi	r16,r16,-16
 400b49c:	ac000d0e 	bge	r21,r16,400b4d4 <___vfiprintf_internal_r+0xc74>
 400b4a0:	10800404 	addi	r2,r2,16
 400b4a4:	20c00044 	addi	r3,r4,1
 400b4a8:	44800015 	stw	r18,0(r8)
 400b4ac:	45400115 	stw	r21,4(r8)
 400b4b0:	d8801c15 	stw	r2,112(sp)
 400b4b4:	d8c01b15 	stw	r3,108(sp)
 400b4b8:	e0fff40e 	bge	fp,r3,400b48c <__alt_data_end+0xfc00b48c>
 400b4bc:	1000101e 	bne	r2,zero,400b500 <___vfiprintf_internal_r+0xca0>
 400b4c0:	843ffc04 	addi	r16,r16,-16
 400b4c4:	01400044 	movi	r5,1
 400b4c8:	0009883a 	mov	r4,zero
 400b4cc:	d811883a 	mov	r8,sp
 400b4d0:	ac3ff316 	blt	r21,r16,400b4a0 <__alt_data_end+0xfc00b4a0>
 400b4d4:	d8c02317 	ldw	r3,140(sp)
 400b4d8:	1405883a 	add	r2,r2,r16
 400b4dc:	44000115 	stw	r16,4(r8)
 400b4e0:	40c00015 	stw	r3,0(r8)
 400b4e4:	d8801c15 	stw	r2,112(sp)
 400b4e8:	d9401b15 	stw	r5,108(sp)
 400b4ec:	00c001c4 	movi	r3,7
 400b4f0:	19401916 	blt	r3,r5,400b558 <___vfiprintf_internal_r+0xcf8>
 400b4f4:	42000204 	addi	r8,r8,8
 400b4f8:	29400044 	addi	r5,r5,1
 400b4fc:	003e5506 	br	400ae54 <__alt_data_end+0xfc00ae54>
 400b500:	d9402017 	ldw	r5,128(sp)
 400b504:	d9002117 	ldw	r4,132(sp)
 400b508:	d9801a04 	addi	r6,sp,104
 400b50c:	400a74c0 	call	400a74c <__sprint_r.part.0>
 400b510:	10000b1e 	bne	r2,zero,400b540 <___vfiprintf_internal_r+0xce0>
 400b514:	d9001b17 	ldw	r4,108(sp)
 400b518:	d8801c17 	ldw	r2,112(sp)
 400b51c:	d811883a 	mov	r8,sp
 400b520:	21400044 	addi	r5,r4,1
 400b524:	003fdc06 	br	400b498 <__alt_data_end+0xfc00b498>
 400b528:	d8801c17 	ldw	r2,112(sp)
 400b52c:	10000426 	beq	r2,zero,400b540 <___vfiprintf_internal_r+0xce0>
 400b530:	d9402017 	ldw	r5,128(sp)
 400b534:	d9002117 	ldw	r4,132(sp)
 400b538:	d9801a04 	addi	r6,sp,104
 400b53c:	400a74c0 	call	400a74c <__sprint_r.part.0>
 400b540:	d9402017 	ldw	r5,128(sp)
 400b544:	2880030b 	ldhu	r2,12(r5)
 400b548:	1080100c 	andi	r2,r2,64
 400b54c:	10014d1e 	bne	r2,zero,400ba84 <___vfiprintf_internal_r+0x1224>
 400b550:	d8802417 	ldw	r2,144(sp)
 400b554:	003d9706 	br	400abb4 <__alt_data_end+0xfc00abb4>
 400b558:	1000d21e 	bne	r2,zero,400b8a4 <___vfiprintf_internal_r+0x1044>
 400b55c:	00c00044 	movi	r3,1
 400b560:	a005883a 	mov	r2,r20
 400b564:	ddc00015 	stw	r23,0(sp)
 400b568:	dd000115 	stw	r20,4(sp)
 400b56c:	dd001c15 	stw	r20,112(sp)
 400b570:	d8c01b15 	stw	r3,108(sp)
 400b574:	d811883a 	mov	r8,sp
 400b578:	42000204 	addi	r8,r8,8
 400b57c:	8c40010c 	andi	r17,r17,4
 400b580:	88004026 	beq	r17,zero,400b684 <___vfiprintf_internal_r+0xe24>
 400b584:	d9002517 	ldw	r4,148(sp)
 400b588:	24e3c83a 	sub	r17,r4,r19
 400b58c:	04403d0e 	bge	zero,r17,400b684 <___vfiprintf_internal_r+0xe24>
 400b590:	04000404 	movi	r16,16
 400b594:	8441a90e 	bge	r16,r17,400bc3c <___vfiprintf_internal_r+0x13dc>
 400b598:	00c10074 	movhi	r3,1025
 400b59c:	18caca04 	addi	r3,r3,11048
 400b5a0:	d9001b17 	ldw	r4,108(sp)
 400b5a4:	d8c02315 	stw	r3,140(sp)
 400b5a8:	050001c4 	movi	r20,7
 400b5ac:	dd402117 	ldw	r21,132(sp)
 400b5b0:	ddc02017 	ldw	r23,128(sp)
 400b5b4:	00000506 	br	400b5cc <___vfiprintf_internal_r+0xd6c>
 400b5b8:	21400084 	addi	r5,r4,2
 400b5bc:	42000204 	addi	r8,r8,8
 400b5c0:	1809883a 	mov	r4,r3
 400b5c4:	8c7ffc04 	addi	r17,r17,-16
 400b5c8:	84400f0e 	bge	r16,r17,400b608 <___vfiprintf_internal_r+0xda8>
 400b5cc:	01410074 	movhi	r5,1025
 400b5d0:	10800404 	addi	r2,r2,16
 400b5d4:	20c00044 	addi	r3,r4,1
 400b5d8:	294aca04 	addi	r5,r5,11048
 400b5dc:	41400015 	stw	r5,0(r8)
 400b5e0:	44000115 	stw	r16,4(r8)
 400b5e4:	d8801c15 	stw	r2,112(sp)
 400b5e8:	d8c01b15 	stw	r3,108(sp)
 400b5ec:	a0fff20e 	bge	r20,r3,400b5b8 <__alt_data_end+0xfc00b5b8>
 400b5f0:	1000141e 	bne	r2,zero,400b644 <___vfiprintf_internal_r+0xde4>
 400b5f4:	8c7ffc04 	addi	r17,r17,-16
 400b5f8:	01400044 	movi	r5,1
 400b5fc:	0009883a 	mov	r4,zero
 400b600:	d811883a 	mov	r8,sp
 400b604:	847ff116 	blt	r16,r17,400b5cc <__alt_data_end+0xfc00b5cc>
 400b608:	d8c02317 	ldw	r3,140(sp)
 400b60c:	1445883a 	add	r2,r2,r17
 400b610:	44400115 	stw	r17,4(r8)
 400b614:	40c00015 	stw	r3,0(r8)
 400b618:	d8801c15 	stw	r2,112(sp)
 400b61c:	d9401b15 	stw	r5,108(sp)
 400b620:	00c001c4 	movi	r3,7
 400b624:	1940170e 	bge	r3,r5,400b684 <___vfiprintf_internal_r+0xe24>
 400b628:	1000101e 	bne	r2,zero,400b66c <___vfiprintf_internal_r+0xe0c>
 400b62c:	d8802517 	ldw	r2,148(sp)
 400b630:	14c11616 	blt	r2,r19,400ba8c <___vfiprintf_internal_r+0x122c>
 400b634:	d9002417 	ldw	r4,144(sp)
 400b638:	2089883a 	add	r4,r4,r2
 400b63c:	d9002415 	stw	r4,144(sp)
 400b640:	003e1806 	br	400aea4 <__alt_data_end+0xfc00aea4>
 400b644:	d9801a04 	addi	r6,sp,104
 400b648:	b80b883a 	mov	r5,r23
 400b64c:	a809883a 	mov	r4,r21
 400b650:	400a74c0 	call	400a74c <__sprint_r.part.0>
 400b654:	103fba1e 	bne	r2,zero,400b540 <__alt_data_end+0xfc00b540>
 400b658:	d9001b17 	ldw	r4,108(sp)
 400b65c:	d8801c17 	ldw	r2,112(sp)
 400b660:	d811883a 	mov	r8,sp
 400b664:	21400044 	addi	r5,r4,1
 400b668:	003fd606 	br	400b5c4 <__alt_data_end+0xfc00b5c4>
 400b66c:	d9402017 	ldw	r5,128(sp)
 400b670:	d9002117 	ldw	r4,132(sp)
 400b674:	d9801a04 	addi	r6,sp,104
 400b678:	400a74c0 	call	400a74c <__sprint_r.part.0>
 400b67c:	103fb01e 	bne	r2,zero,400b540 <__alt_data_end+0xfc00b540>
 400b680:	d8801c17 	ldw	r2,112(sp)
 400b684:	d8c02517 	ldw	r3,148(sp)
 400b688:	1cc0010e 	bge	r3,r19,400b690 <___vfiprintf_internal_r+0xe30>
 400b68c:	9807883a 	mov	r3,r19
 400b690:	d9002417 	ldw	r4,144(sp)
 400b694:	20c9883a 	add	r4,r4,r3
 400b698:	d9002415 	stw	r4,144(sp)
 400b69c:	103e0126 	beq	r2,zero,400aea4 <__alt_data_end+0xfc00aea4>
 400b6a0:	d9402017 	ldw	r5,128(sp)
 400b6a4:	d9002117 	ldw	r4,132(sp)
 400b6a8:	d9801a04 	addi	r6,sp,104
 400b6ac:	400a74c0 	call	400a74c <__sprint_r.part.0>
 400b6b0:	103dfc26 	beq	r2,zero,400aea4 <__alt_data_end+0xfc00aea4>
 400b6b4:	003fa206 	br	400b540 <__alt_data_end+0xfc00b540>
 400b6b8:	d9402017 	ldw	r5,128(sp)
 400b6bc:	d9002117 	ldw	r4,132(sp)
 400b6c0:	d9801a04 	addi	r6,sp,104
 400b6c4:	d9c02b15 	stw	r7,172(sp)
 400b6c8:	400a74c0 	call	400a74c <__sprint_r.part.0>
 400b6cc:	d9c02b17 	ldw	r7,172(sp)
 400b6d0:	103f9b1e 	bne	r2,zero,400b540 <__alt_data_end+0xfc00b540>
 400b6d4:	d9001b17 	ldw	r4,108(sp)
 400b6d8:	d8801c17 	ldw	r2,112(sp)
 400b6dc:	d811883a 	mov	r8,sp
 400b6e0:	21800044 	addi	r6,r4,1
 400b6e4:	003dbf06 	br	400ade4 <__alt_data_end+0xfc00ade4>
 400b6e8:	1000d81e 	bne	r2,zero,400ba4c <___vfiprintf_internal_r+0x11ec>
 400b6ec:	d9001d87 	ldb	r4,118(sp)
 400b6f0:	20000a26 	beq	r4,zero,400b71c <___vfiprintf_internal_r+0xebc>
 400b6f4:	00800044 	movi	r2,1
 400b6f8:	d9001d84 	addi	r4,sp,118
 400b6fc:	100b883a 	mov	r5,r2
 400b700:	d9000015 	stw	r4,0(sp)
 400b704:	d8800115 	stw	r2,4(sp)
 400b708:	d811883a 	mov	r8,sp
 400b70c:	2809883a 	mov	r4,r5
 400b710:	42000204 	addi	r8,r8,8
 400b714:	29400044 	addi	r5,r5,1
 400b718:	003d9506 	br	400ad70 <__alt_data_end+0xfc00ad70>
 400b71c:	3800fd26 	beq	r7,zero,400bb14 <___vfiprintf_internal_r+0x12b4>
 400b720:	00800084 	movi	r2,2
 400b724:	d9001d04 	addi	r4,sp,116
 400b728:	d9000015 	stw	r4,0(sp)
 400b72c:	d8800115 	stw	r2,4(sp)
 400b730:	01400044 	movi	r5,1
 400b734:	d811883a 	mov	r8,sp
 400b738:	2809883a 	mov	r4,r5
 400b73c:	42000204 	addi	r8,r8,8
 400b740:	29400044 	addi	r5,r5,1
 400b744:	003f4606 	br	400b460 <__alt_data_end+0xfc00b460>
 400b748:	d8802517 	ldw	r2,148(sp)
 400b74c:	14c0010e 	bge	r2,r19,400b754 <___vfiprintf_internal_r+0xef4>
 400b750:	9805883a 	mov	r2,r19
 400b754:	d9402417 	ldw	r5,144(sp)
 400b758:	288b883a 	add	r5,r5,r2
 400b75c:	d9402415 	stw	r5,144(sp)
 400b760:	003dd006 	br	400aea4 <__alt_data_end+0xfc00aea4>
 400b764:	d8001d85 	stb	zero,118(sp)
 400b768:	80005d16 	blt	r16,zero,400b8e0 <___vfiprintf_internal_r+0x1080>
 400b76c:	00ffdfc4 	movi	r3,-129
 400b770:	9d04b03a 	or	r2,r19,r20
 400b774:	88e2703a 	and	r17,r17,r3
 400b778:	103d3726 	beq	r2,zero,400ac58 <__alt_data_end+0xfc00ac58>
 400b77c:	002b883a 	mov	r21,zero
 400b780:	d9002617 	ldw	r4,152(sp)
 400b784:	ddc01a04 	addi	r23,sp,104
 400b788:	988003cc 	andi	r2,r19,15
 400b78c:	a006973a 	slli	r3,r20,28
 400b790:	2085883a 	add	r2,r4,r2
 400b794:	9826d13a 	srli	r19,r19,4
 400b798:	10800003 	ldbu	r2,0(r2)
 400b79c:	a028d13a 	srli	r20,r20,4
 400b7a0:	bdffffc4 	addi	r23,r23,-1
 400b7a4:	1ce6b03a 	or	r19,r3,r19
 400b7a8:	b8800005 	stb	r2,0(r23)
 400b7ac:	9d04b03a 	or	r2,r19,r20
 400b7b0:	103ff51e 	bne	r2,zero,400b788 <__alt_data_end+0xfc00b788>
 400b7b4:	d8801e17 	ldw	r2,120(sp)
 400b7b8:	15e9c83a 	sub	r20,r2,r23
 400b7bc:	003d2b06 	br	400ac6c <__alt_data_end+0xfc00ac6c>
 400b7c0:	d9402017 	ldw	r5,128(sp)
 400b7c4:	d9002117 	ldw	r4,132(sp)
 400b7c8:	d9801a04 	addi	r6,sp,104
 400b7cc:	400a74c0 	call	400a74c <__sprint_r.part.0>
 400b7d0:	103f5b1e 	bne	r2,zero,400b540 <__alt_data_end+0xfc00b540>
 400b7d4:	d8801c17 	ldw	r2,112(sp)
 400b7d8:	d811883a 	mov	r8,sp
 400b7dc:	003f6706 	br	400b57c <__alt_data_end+0xfc00b57c>
 400b7e0:	d9402017 	ldw	r5,128(sp)
 400b7e4:	d9002117 	ldw	r4,132(sp)
 400b7e8:	d9801a04 	addi	r6,sp,104
 400b7ec:	400a74c0 	call	400a74c <__sprint_r.part.0>
 400b7f0:	103f531e 	bne	r2,zero,400b540 <__alt_data_end+0xfc00b540>
 400b7f4:	d811883a 	mov	r8,sp
 400b7f8:	003cd906 	br	400ab60 <__alt_data_end+0xfc00ab60>
 400b7fc:	10803fcc 	andi	r2,r2,255
 400b800:	1080201c 	xori	r2,r2,128
 400b804:	10bfe004 	addi	r2,r2,-128
 400b808:	00c00c04 	movi	r3,48
 400b80c:	10ffe926 	beq	r2,r3,400b7b4 <__alt_data_end+0xfc00b7b4>
 400b810:	b8ffffc5 	stb	r3,-1(r23)
 400b814:	d8c01e17 	ldw	r3,120(sp)
 400b818:	b8bfffc4 	addi	r2,r23,-1
 400b81c:	102f883a 	mov	r23,r2
 400b820:	18a9c83a 	sub	r20,r3,r2
 400b824:	003d1106 	br	400ac6c <__alt_data_end+0xfc00ac6c>
 400b828:	d9402017 	ldw	r5,128(sp)
 400b82c:	d9002117 	ldw	r4,132(sp)
 400b830:	d9801a04 	addi	r6,sp,104
 400b834:	d8c02a15 	stw	r3,168(sp)
 400b838:	d9c02b15 	stw	r7,172(sp)
 400b83c:	400a74c0 	call	400a74c <__sprint_r.part.0>
 400b840:	d8c02a17 	ldw	r3,168(sp)
 400b844:	d9c02b17 	ldw	r7,172(sp)
 400b848:	103f3d1e 	bne	r2,zero,400b540 <__alt_data_end+0xfc00b540>
 400b84c:	d9001b17 	ldw	r4,108(sp)
 400b850:	d8801c17 	ldw	r2,112(sp)
 400b854:	d811883a 	mov	r8,sp
 400b858:	21400044 	addi	r5,r4,1
 400b85c:	003d4406 	br	400ad70 <__alt_data_end+0xfc00ad70>
 400b860:	d9402017 	ldw	r5,128(sp)
 400b864:	d9002117 	ldw	r4,132(sp)
 400b868:	d9801a04 	addi	r6,sp,104
 400b86c:	d8c02a15 	stw	r3,168(sp)
 400b870:	400a74c0 	call	400a74c <__sprint_r.part.0>
 400b874:	d8c02a17 	ldw	r3,168(sp)
 400b878:	103f311e 	bne	r2,zero,400b540 <__alt_data_end+0xfc00b540>
 400b87c:	d9001b17 	ldw	r4,108(sp)
 400b880:	d8801c17 	ldw	r2,112(sp)
 400b884:	d811883a 	mov	r8,sp
 400b888:	21400044 	addi	r5,r4,1
 400b88c:	003ef406 	br	400b460 <__alt_data_end+0xfc00b460>
 400b890:	1000bd1e 	bne	r2,zero,400bb88 <___vfiprintf_internal_r+0x1328>
 400b894:	01400044 	movi	r5,1
 400b898:	0009883a 	mov	r4,zero
 400b89c:	d811883a 	mov	r8,sp
 400b8a0:	003ef106 	br	400b468 <__alt_data_end+0xfc00b468>
 400b8a4:	d9402017 	ldw	r5,128(sp)
 400b8a8:	d9002117 	ldw	r4,132(sp)
 400b8ac:	d9801a04 	addi	r6,sp,104
 400b8b0:	400a74c0 	call	400a74c <__sprint_r.part.0>
 400b8b4:	103f221e 	bne	r2,zero,400b540 <__alt_data_end+0xfc00b540>
 400b8b8:	d9401b17 	ldw	r5,108(sp)
 400b8bc:	d8801c17 	ldw	r2,112(sp)
 400b8c0:	d811883a 	mov	r8,sp
 400b8c4:	29400044 	addi	r5,r5,1
 400b8c8:	003d6206 	br	400ae54 <__alt_data_end+0xfc00ae54>
 400b8cc:	01410074 	movhi	r5,1025
 400b8d0:	294a6504 	addi	r5,r5,10644
 400b8d4:	d9402615 	stw	r5,152(sp)
 400b8d8:	d8c02215 	stw	r3,136(sp)
 400b8dc:	1023883a 	mov	r17,r2
 400b8e0:	9d04b03a 	or	r2,r19,r20
 400b8e4:	103fa51e 	bne	r2,zero,400b77c <__alt_data_end+0xfc00b77c>
 400b8e8:	002b883a 	mov	r21,zero
 400b8ec:	00800084 	movi	r2,2
 400b8f0:	003e4a06 	br	400b21c <__alt_data_end+0xfc00b21c>
 400b8f4:	01410074 	movhi	r5,1025
 400b8f8:	294a6504 	addi	r5,r5,10644
 400b8fc:	002b883a 	mov	r21,zero
 400b900:	d9402615 	stw	r5,152(sp)
 400b904:	003f9e06 	br	400b780 <__alt_data_end+0xfc00b780>
 400b908:	d9402217 	ldw	r5,136(sp)
 400b90c:	d8001d85 	stb	zero,118(sp)
 400b910:	0029883a 	mov	r20,zero
 400b914:	28800104 	addi	r2,r5,4
 400b918:	2cc00017 	ldw	r19,0(r5)
 400b91c:	803e3a16 	blt	r16,zero,400b208 <__alt_data_end+0xfc00b208>
 400b920:	00ffdfc4 	movi	r3,-129
 400b924:	d8802215 	stw	r2,136(sp)
 400b928:	88e2703a 	and	r17,r17,r3
 400b92c:	002b883a 	mov	r21,zero
 400b930:	983e9b26 	beq	r19,zero,400b3a0 <__alt_data_end+0xfc00b3a0>
 400b934:	00800244 	movi	r2,9
 400b938:	14fdc936 	bltu	r2,r19,400b060 <__alt_data_end+0xfc00b060>
 400b93c:	003e9a06 	br	400b3a8 <__alt_data_end+0xfc00b3a8>
 400b940:	00800c04 	movi	r2,48
 400b944:	d8c01d45 	stb	r3,117(sp)
 400b948:	d8801d05 	stb	r2,116(sp)
 400b94c:	d8001d85 	stb	zero,118(sp)
 400b950:	88c00094 	ori	r3,r17,2
 400b954:	80009c16 	blt	r16,zero,400bbc8 <___vfiprintf_internal_r+0x1368>
 400b958:	00bfdfc4 	movi	r2,-129
 400b95c:	88a2703a 	and	r17,r17,r2
 400b960:	8c400094 	ori	r17,r17,2
 400b964:	002b883a 	mov	r21,zero
 400b968:	003f8506 	br	400b780 <__alt_data_end+0xfc00b780>
 400b96c:	b029883a 	mov	r20,r22
 400b970:	003c0b06 	br	400a9a0 <__alt_data_end+0xfc00a9a0>
 400b974:	04e7c83a 	sub	r19,zero,r19
 400b978:	05400b44 	movi	r21,45
 400b97c:	9804c03a 	cmpne	r2,r19,zero
 400b980:	0529c83a 	sub	r20,zero,r20
 400b984:	dd401d85 	stb	r21,118(sp)
 400b988:	a0a9c83a 	sub	r20,r20,r2
 400b98c:	80009716 	blt	r16,zero,400bbec <___vfiprintf_internal_r+0x138c>
 400b990:	00bfdfc4 	movi	r2,-129
 400b994:	88a2703a 	and	r17,r17,r2
 400b998:	003db006 	br	400b05c <__alt_data_end+0xfc00b05c>
 400b99c:	b0c00007 	ldb	r3,0(r22)
 400b9a0:	003c0c06 	br	400a9d4 <__alt_data_end+0xfc00a9d4>
 400b9a4:	8880100c 	andi	r2,r17,64
 400b9a8:	d8001d85 	stb	zero,118(sp)
 400b9ac:	1000461e 	bne	r2,zero,400bac8 <___vfiprintf_internal_r+0x1268>
 400b9b0:	d9002217 	ldw	r4,136(sp)
 400b9b4:	0029883a 	mov	r20,zero
 400b9b8:	20800104 	addi	r2,r4,4
 400b9bc:	24c00017 	ldw	r19,0(r4)
 400b9c0:	803df80e 	bge	r16,zero,400b1a4 <__alt_data_end+0xfc00b1a4>
 400b9c4:	9d06b03a 	or	r3,r19,r20
 400b9c8:	d8802215 	stw	r2,136(sp)
 400b9cc:	183d5e1e 	bne	r3,zero,400af48 <__alt_data_end+0xfc00af48>
 400b9d0:	002b883a 	mov	r21,zero
 400b9d4:	0005883a 	mov	r2,zero
 400b9d8:	003e1006 	br	400b21c <__alt_data_end+0xfc00b21c>
 400b9dc:	8880040c 	andi	r2,r17,16
 400b9e0:	1000321e 	bne	r2,zero,400baac <___vfiprintf_internal_r+0x124c>
 400b9e4:	8c40100c 	andi	r17,r17,64
 400b9e8:	88008d26 	beq	r17,zero,400bc20 <___vfiprintf_internal_r+0x13c0>
 400b9ec:	d9402217 	ldw	r5,136(sp)
 400b9f0:	d8c02417 	ldw	r3,144(sp)
 400b9f4:	28800017 	ldw	r2,0(r5)
 400b9f8:	29400104 	addi	r5,r5,4
 400b9fc:	d9402215 	stw	r5,136(sp)
 400ba00:	10c0000d 	sth	r3,0(r2)
 400ba04:	003bca06 	br	400a930 <__alt_data_end+0xfc00a930>
 400ba08:	8880100c 	andi	r2,r17,64
 400ba0c:	10003a26 	beq	r2,zero,400baf8 <___vfiprintf_internal_r+0x1298>
 400ba10:	d8802217 	ldw	r2,136(sp)
 400ba14:	14c0000f 	ldh	r19,0(r2)
 400ba18:	10800104 	addi	r2,r2,4
 400ba1c:	d8802215 	stw	r2,136(sp)
 400ba20:	9829d7fa 	srai	r20,r19,31
 400ba24:	a005883a 	mov	r2,r20
 400ba28:	003d8506 	br	400b040 <__alt_data_end+0xfc00b040>
 400ba2c:	8880100c 	andi	r2,r17,64
 400ba30:	10002b26 	beq	r2,zero,400bae0 <___vfiprintf_internal_r+0x1280>
 400ba34:	d8802217 	ldw	r2,136(sp)
 400ba38:	0029883a 	mov	r20,zero
 400ba3c:	14c0000b 	ldhu	r19,0(r2)
 400ba40:	10800104 	addi	r2,r2,4
 400ba44:	d8802215 	stw	r2,136(sp)
 400ba48:	003d5d06 	br	400afc0 <__alt_data_end+0xfc00afc0>
 400ba4c:	d9402017 	ldw	r5,128(sp)
 400ba50:	d9002117 	ldw	r4,132(sp)
 400ba54:	d9801a04 	addi	r6,sp,104
 400ba58:	d8c02a15 	stw	r3,168(sp)
 400ba5c:	d9c02b15 	stw	r7,172(sp)
 400ba60:	400a74c0 	call	400a74c <__sprint_r.part.0>
 400ba64:	d8c02a17 	ldw	r3,168(sp)
 400ba68:	d9c02b17 	ldw	r7,172(sp)
 400ba6c:	103eb41e 	bne	r2,zero,400b540 <__alt_data_end+0xfc00b540>
 400ba70:	d9001b17 	ldw	r4,108(sp)
 400ba74:	d8801c17 	ldw	r2,112(sp)
 400ba78:	d811883a 	mov	r8,sp
 400ba7c:	21400044 	addi	r5,r4,1
 400ba80:	003e6706 	br	400b420 <__alt_data_end+0xfc00b420>
 400ba84:	00bfffc4 	movi	r2,-1
 400ba88:	003c4a06 	br	400abb4 <__alt_data_end+0xfc00abb4>
 400ba8c:	9805883a 	mov	r2,r19
 400ba90:	003ee806 	br	400b634 <__alt_data_end+0xfc00b634>
 400ba94:	d8c02217 	ldw	r3,136(sp)
 400ba98:	0029883a 	mov	r20,zero
 400ba9c:	18800104 	addi	r2,r3,4
 400baa0:	1cc0000b 	ldhu	r19,0(r3)
 400baa4:	803f9e0e 	bge	r16,zero,400b920 <__alt_data_end+0xfc00b920>
 400baa8:	003dd706 	br	400b208 <__alt_data_end+0xfc00b208>
 400baac:	d8c02217 	ldw	r3,136(sp)
 400bab0:	d9002417 	ldw	r4,144(sp)
 400bab4:	18800017 	ldw	r2,0(r3)
 400bab8:	18c00104 	addi	r3,r3,4
 400babc:	d8c02215 	stw	r3,136(sp)
 400bac0:	11000015 	stw	r4,0(r2)
 400bac4:	003b9a06 	br	400a930 <__alt_data_end+0xfc00a930>
 400bac8:	d8c02217 	ldw	r3,136(sp)
 400bacc:	0029883a 	mov	r20,zero
 400bad0:	18800104 	addi	r2,r3,4
 400bad4:	1cc0000b 	ldhu	r19,0(r3)
 400bad8:	803db20e 	bge	r16,zero,400b1a4 <__alt_data_end+0xfc00b1a4>
 400badc:	003fb906 	br	400b9c4 <__alt_data_end+0xfc00b9c4>
 400bae0:	d9002217 	ldw	r4,136(sp)
 400bae4:	0029883a 	mov	r20,zero
 400bae8:	24c00017 	ldw	r19,0(r4)
 400baec:	21000104 	addi	r4,r4,4
 400baf0:	d9002215 	stw	r4,136(sp)
 400baf4:	003d3206 	br	400afc0 <__alt_data_end+0xfc00afc0>
 400baf8:	d8c02217 	ldw	r3,136(sp)
 400bafc:	1cc00017 	ldw	r19,0(r3)
 400bb00:	18c00104 	addi	r3,r3,4
 400bb04:	d8c02215 	stw	r3,136(sp)
 400bb08:	9829d7fa 	srai	r20,r19,31
 400bb0c:	a005883a 	mov	r2,r20
 400bb10:	003d4b06 	br	400b040 <__alt_data_end+0xfc00b040>
 400bb14:	0009883a 	mov	r4,zero
 400bb18:	01400044 	movi	r5,1
 400bb1c:	d811883a 	mov	r8,sp
 400bb20:	003e4f06 	br	400b460 <__alt_data_end+0xfc00b460>
 400bb24:	d8c02215 	stw	r3,136(sp)
 400bb28:	002b883a 	mov	r21,zero
 400bb2c:	003db806 	br	400b210 <__alt_data_end+0xfc00b210>
 400bb30:	d811883a 	mov	r8,sp
 400bb34:	003e9606 	br	400b590 <__alt_data_end+0xfc00b590>
 400bb38:	01010074 	movhi	r4,1025
 400bb3c:	210ac604 	addi	r4,r4,11032
 400bb40:	d9002315 	stw	r4,140(sp)
 400bb44:	003e6306 	br	400b4d4 <__alt_data_end+0xfc00b4d4>
 400bb48:	b0c00043 	ldbu	r3,1(r22)
 400bb4c:	8c400814 	ori	r17,r17,32
 400bb50:	b5800044 	addi	r22,r22,1
 400bb54:	18c03fcc 	andi	r3,r3,255
 400bb58:	18c0201c 	xori	r3,r3,128
 400bb5c:	18ffe004 	addi	r3,r3,-128
 400bb60:	003b9c06 	br	400a9d4 <__alt_data_end+0xfc00a9d4>
 400bb64:	b809883a 	mov	r4,r23
 400bb68:	da002a15 	stw	r8,168(sp)
 400bb6c:	4002e680 	call	4002e68 <strlen>
 400bb70:	1029883a 	mov	r20,r2
 400bb74:	dd401d83 	ldbu	r21,118(sp)
 400bb78:	df002215 	stw	fp,136(sp)
 400bb7c:	0021883a 	mov	r16,zero
 400bb80:	da002a17 	ldw	r8,168(sp)
 400bb84:	003c3906 	br	400ac6c <__alt_data_end+0xfc00ac6c>
 400bb88:	d9402017 	ldw	r5,128(sp)
 400bb8c:	d9002117 	ldw	r4,132(sp)
 400bb90:	d9801a04 	addi	r6,sp,104
 400bb94:	400a74c0 	call	400a74c <__sprint_r.part.0>
 400bb98:	103e691e 	bne	r2,zero,400b540 <__alt_data_end+0xfc00b540>
 400bb9c:	d9001b17 	ldw	r4,108(sp)
 400bba0:	d8801c17 	ldw	r2,112(sp)
 400bba4:	d811883a 	mov	r8,sp
 400bba8:	21400044 	addi	r5,r4,1
 400bbac:	003e2e06 	br	400b468 <__alt_data_end+0xfc00b468>
 400bbb0:	01010074 	movhi	r4,1025
 400bbb4:	210aca04 	addi	r4,r4,11048
 400bbb8:	d9002315 	stw	r4,140(sp)
 400bbbc:	d9001b17 	ldw	r4,108(sp)
 400bbc0:	21000044 	addi	r4,r4,1
 400bbc4:	003c5e06 	br	400ad40 <__alt_data_end+0xfc00ad40>
 400bbc8:	002b883a 	mov	r21,zero
 400bbcc:	00800084 	movi	r2,2
 400bbd0:	10803fcc 	andi	r2,r2,255
 400bbd4:	01000044 	movi	r4,1
 400bbd8:	11002b26 	beq	r2,r4,400bc88 <___vfiprintf_internal_r+0x1428>
 400bbdc:	01000084 	movi	r4,2
 400bbe0:	11002b1e 	bne	r2,r4,400bc90 <___vfiprintf_internal_r+0x1430>
 400bbe4:	1823883a 	mov	r17,r3
 400bbe8:	003ee506 	br	400b780 <__alt_data_end+0xfc00b780>
 400bbec:	8807883a 	mov	r3,r17
 400bbf0:	00800044 	movi	r2,1
 400bbf4:	003ff606 	br	400bbd0 <__alt_data_end+0xfc00bbd0>
 400bbf8:	00800184 	movi	r2,6
 400bbfc:	1400012e 	bgeu	r2,r16,400bc04 <___vfiprintf_internal_r+0x13a4>
 400bc00:	1021883a 	mov	r16,r2
 400bc04:	8029883a 	mov	r20,r16
 400bc08:	8027883a 	mov	r19,r16
 400bc0c:	80002216 	blt	r16,zero,400bc98 <___vfiprintf_internal_r+0x1438>
 400bc10:	05c10074 	movhi	r23,1025
 400bc14:	df002215 	stw	fp,136(sp)
 400bc18:	bdca6a04 	addi	r23,r23,10664
 400bc1c:	003cfb06 	br	400b00c <__alt_data_end+0xfc00b00c>
 400bc20:	d9002217 	ldw	r4,136(sp)
 400bc24:	d9402417 	ldw	r5,144(sp)
 400bc28:	20800017 	ldw	r2,0(r4)
 400bc2c:	21000104 	addi	r4,r4,4
 400bc30:	d9002215 	stw	r4,136(sp)
 400bc34:	11400015 	stw	r5,0(r2)
 400bc38:	003b3d06 	br	400a930 <__alt_data_end+0xfc00a930>
 400bc3c:	01410074 	movhi	r5,1025
 400bc40:	294aca04 	addi	r5,r5,11048
 400bc44:	d9402315 	stw	r5,140(sp)
 400bc48:	d9401b17 	ldw	r5,108(sp)
 400bc4c:	29400044 	addi	r5,r5,1
 400bc50:	003e6d06 	br	400b608 <__alt_data_end+0xfc00b608>
 400bc54:	8029883a 	mov	r20,r16
 400bc58:	dd401d83 	ldbu	r21,118(sp)
 400bc5c:	df002215 	stw	fp,136(sp)
 400bc60:	0021883a 	mov	r16,zero
 400bc64:	003c0106 	br	400ac6c <__alt_data_end+0xfc00ac6c>
 400bc68:	00c10074 	movhi	r3,1025
 400bc6c:	18cac604 	addi	r3,r3,11032
 400bc70:	d8c02315 	stw	r3,140(sp)
 400bc74:	280d883a 	mov	r6,r5
 400bc78:	003c6906 	br	400ae20 <__alt_data_end+0xfc00ae20>
 400bc7c:	802d883a 	mov	r22,r16
 400bc80:	0021883a 	mov	r16,zero
 400bc84:	003b5406 	br	400a9d8 <__alt_data_end+0xfc00a9d8>
 400bc88:	1823883a 	mov	r17,r3
 400bc8c:	003cf306 	br	400b05c <__alt_data_end+0xfc00b05c>
 400bc90:	1823883a 	mov	r17,r3
 400bc94:	003cad06 	br	400af4c <__alt_data_end+0xfc00af4c>
 400bc98:	0027883a 	mov	r19,zero
 400bc9c:	003fdc06 	br	400bc10 <__alt_data_end+0xfc00bc10>
 400bca0:	d9402217 	ldw	r5,136(sp)
 400bca4:	8005883a 	mov	r2,r16
 400bca8:	b0c00043 	ldbu	r3,1(r22)
 400bcac:	2c000017 	ldw	r16,0(r5)
 400bcb0:	29000104 	addi	r4,r5,4
 400bcb4:	d9002215 	stw	r4,136(sp)
 400bcb8:	102d883a 	mov	r22,r2
 400bcbc:	803fa50e 	bge	r16,zero,400bb54 <__alt_data_end+0xfc00bb54>
 400bcc0:	18c03fcc 	andi	r3,r3,255
 400bcc4:	18c0201c 	xori	r3,r3,128
 400bcc8:	043fffc4 	movi	r16,-1
 400bccc:	18ffe004 	addi	r3,r3,-128
 400bcd0:	003b4006 	br	400a9d4 <__alt_data_end+0xfc00a9d4>
 400bcd4:	d9402303 	ldbu	r5,140(sp)
 400bcd8:	d9401d85 	stb	r5,118(sp)
 400bcdc:	003cae06 	br	400af98 <__alt_data_end+0xfc00af98>
 400bce0:	d8c02303 	ldbu	r3,140(sp)
 400bce4:	d8c01d85 	stb	r3,118(sp)
 400bce8:	003d1406 	br	400b13c <__alt_data_end+0xfc00b13c>
 400bcec:	d8c02303 	ldbu	r3,140(sp)
 400bcf0:	d8c01d85 	stb	r3,118(sp)
 400bcf4:	003cca06 	br	400b020 <__alt_data_end+0xfc00b020>
 400bcf8:	8880004c 	andi	r2,r17,1
 400bcfc:	002b883a 	mov	r21,zero
 400bd00:	10000526 	beq	r2,zero,400bd18 <___vfiprintf_internal_r+0x14b8>
 400bd04:	00800c04 	movi	r2,48
 400bd08:	d88019c5 	stb	r2,103(sp)
 400bd0c:	dd002817 	ldw	r20,160(sp)
 400bd10:	ddc019c4 	addi	r23,sp,103
 400bd14:	003bd506 	br	400ac6c <__alt_data_end+0xfc00ac6c>
 400bd18:	0029883a 	mov	r20,zero
 400bd1c:	ddc01a04 	addi	r23,sp,104
 400bd20:	003bd206 	br	400ac6c <__alt_data_end+0xfc00ac6c>
 400bd24:	d9002303 	ldbu	r4,140(sp)
 400bd28:	d9001d85 	stb	r4,118(sp)
 400bd2c:	003da606 	br	400b3c8 <__alt_data_end+0xfc00b3c8>
 400bd30:	d8c02303 	ldbu	r3,140(sp)
 400bd34:	d8c01d85 	stb	r3,118(sp)
 400bd38:	003c7606 	br	400af14 <__alt_data_end+0xfc00af14>
 400bd3c:	d8c02303 	ldbu	r3,140(sp)
 400bd40:	d8c01d85 	stb	r3,118(sp)
 400bd44:	003c6506 	br	400aedc <__alt_data_end+0xfc00aedc>
 400bd48:	d9002303 	ldbu	r4,140(sp)
 400bd4c:	d9001d85 	stb	r4,118(sp)
 400bd50:	003d3d06 	br	400b248 <__alt_data_end+0xfc00b248>
 400bd54:	d8c02303 	ldbu	r3,140(sp)
 400bd58:	d8c01d85 	stb	r3,118(sp)
 400bd5c:	003d1d06 	br	400b1d4 <__alt_data_end+0xfc00b1d4>
 400bd60:	d8c02303 	ldbu	r3,140(sp)
 400bd64:	d8c01d85 	stb	r3,118(sp)
 400bd68:	003d0306 	br	400b178 <__alt_data_end+0xfc00b178>

0400bd6c <__vfiprintf_internal>:
 400bd6c:	00810074 	movhi	r2,1025
 400bd70:	1091d704 	addi	r2,r2,18268
 400bd74:	300f883a 	mov	r7,r6
 400bd78:	280d883a 	mov	r6,r5
 400bd7c:	200b883a 	mov	r5,r4
 400bd80:	11000017 	ldw	r4,0(r2)
 400bd84:	400a8601 	jmpi	400a860 <___vfiprintf_internal_r>

0400bd88 <__sbprintf>:
 400bd88:	2880030b 	ldhu	r2,12(r5)
 400bd8c:	2ac01917 	ldw	r11,100(r5)
 400bd90:	2a80038b 	ldhu	r10,14(r5)
 400bd94:	2a400717 	ldw	r9,28(r5)
 400bd98:	2a000917 	ldw	r8,36(r5)
 400bd9c:	defee204 	addi	sp,sp,-1144
 400bda0:	00c10004 	movi	r3,1024
 400bda4:	dc011a15 	stw	r16,1128(sp)
 400bda8:	10bfff4c 	andi	r2,r2,65533
 400bdac:	2821883a 	mov	r16,r5
 400bdb0:	d8cb883a 	add	r5,sp,r3
 400bdb4:	dc811c15 	stw	r18,1136(sp)
 400bdb8:	dc411b15 	stw	r17,1132(sp)
 400bdbc:	dfc11d15 	stw	ra,1140(sp)
 400bdc0:	2025883a 	mov	r18,r4
 400bdc4:	d881030d 	sth	r2,1036(sp)
 400bdc8:	dac11915 	stw	r11,1124(sp)
 400bdcc:	da81038d 	sth	r10,1038(sp)
 400bdd0:	da410715 	stw	r9,1052(sp)
 400bdd4:	da010915 	stw	r8,1060(sp)
 400bdd8:	dec10015 	stw	sp,1024(sp)
 400bddc:	dec10415 	stw	sp,1040(sp)
 400bde0:	d8c10215 	stw	r3,1032(sp)
 400bde4:	d8c10515 	stw	r3,1044(sp)
 400bde8:	d8010615 	stw	zero,1048(sp)
 400bdec:	400a8600 	call	400a860 <___vfiprintf_internal_r>
 400bdf0:	1023883a 	mov	r17,r2
 400bdf4:	10000416 	blt	r2,zero,400be08 <__sbprintf+0x80>
 400bdf8:	d9410004 	addi	r5,sp,1024
 400bdfc:	9009883a 	mov	r4,r18
 400be00:	4006ed40 	call	4006ed4 <_fflush_r>
 400be04:	10000d1e 	bne	r2,zero,400be3c <__sbprintf+0xb4>
 400be08:	d881030b 	ldhu	r2,1036(sp)
 400be0c:	1080100c 	andi	r2,r2,64
 400be10:	10000326 	beq	r2,zero,400be20 <__sbprintf+0x98>
 400be14:	8080030b 	ldhu	r2,12(r16)
 400be18:	10801014 	ori	r2,r2,64
 400be1c:	8080030d 	sth	r2,12(r16)
 400be20:	8805883a 	mov	r2,r17
 400be24:	dfc11d17 	ldw	ra,1140(sp)
 400be28:	dc811c17 	ldw	r18,1136(sp)
 400be2c:	dc411b17 	ldw	r17,1132(sp)
 400be30:	dc011a17 	ldw	r16,1128(sp)
 400be34:	dec11e04 	addi	sp,sp,1144
 400be38:	f800283a 	ret
 400be3c:	047fffc4 	movi	r17,-1
 400be40:	003ff106 	br	400be08 <__alt_data_end+0xfc00be08>

0400be44 <__swbuf_r>:
 400be44:	defffb04 	addi	sp,sp,-20
 400be48:	dcc00315 	stw	r19,12(sp)
 400be4c:	dc800215 	stw	r18,8(sp)
 400be50:	dc000015 	stw	r16,0(sp)
 400be54:	dfc00415 	stw	ra,16(sp)
 400be58:	dc400115 	stw	r17,4(sp)
 400be5c:	2025883a 	mov	r18,r4
 400be60:	2827883a 	mov	r19,r5
 400be64:	3021883a 	mov	r16,r6
 400be68:	20000226 	beq	r4,zero,400be74 <__swbuf_r+0x30>
 400be6c:	20800e17 	ldw	r2,56(r4)
 400be70:	10004226 	beq	r2,zero,400bf7c <__swbuf_r+0x138>
 400be74:	80800617 	ldw	r2,24(r16)
 400be78:	8100030b 	ldhu	r4,12(r16)
 400be7c:	80800215 	stw	r2,8(r16)
 400be80:	2080020c 	andi	r2,r4,8
 400be84:	10003626 	beq	r2,zero,400bf60 <__swbuf_r+0x11c>
 400be88:	80c00417 	ldw	r3,16(r16)
 400be8c:	18003426 	beq	r3,zero,400bf60 <__swbuf_r+0x11c>
 400be90:	2088000c 	andi	r2,r4,8192
 400be94:	9c403fcc 	andi	r17,r19,255
 400be98:	10001a26 	beq	r2,zero,400bf04 <__swbuf_r+0xc0>
 400be9c:	80800017 	ldw	r2,0(r16)
 400bea0:	81000517 	ldw	r4,20(r16)
 400bea4:	10c7c83a 	sub	r3,r2,r3
 400bea8:	1900200e 	bge	r3,r4,400bf2c <__swbuf_r+0xe8>
 400beac:	18c00044 	addi	r3,r3,1
 400beb0:	81000217 	ldw	r4,8(r16)
 400beb4:	11400044 	addi	r5,r2,1
 400beb8:	81400015 	stw	r5,0(r16)
 400bebc:	213fffc4 	addi	r4,r4,-1
 400bec0:	81000215 	stw	r4,8(r16)
 400bec4:	14c00005 	stb	r19,0(r2)
 400bec8:	80800517 	ldw	r2,20(r16)
 400becc:	10c01e26 	beq	r2,r3,400bf48 <__swbuf_r+0x104>
 400bed0:	8080030b 	ldhu	r2,12(r16)
 400bed4:	1080004c 	andi	r2,r2,1
 400bed8:	10000226 	beq	r2,zero,400bee4 <__swbuf_r+0xa0>
 400bedc:	00800284 	movi	r2,10
 400bee0:	88801926 	beq	r17,r2,400bf48 <__swbuf_r+0x104>
 400bee4:	8805883a 	mov	r2,r17
 400bee8:	dfc00417 	ldw	ra,16(sp)
 400beec:	dcc00317 	ldw	r19,12(sp)
 400bef0:	dc800217 	ldw	r18,8(sp)
 400bef4:	dc400117 	ldw	r17,4(sp)
 400bef8:	dc000017 	ldw	r16,0(sp)
 400befc:	dec00504 	addi	sp,sp,20
 400bf00:	f800283a 	ret
 400bf04:	81401917 	ldw	r5,100(r16)
 400bf08:	00b7ffc4 	movi	r2,-8193
 400bf0c:	21080014 	ori	r4,r4,8192
 400bf10:	2884703a 	and	r2,r5,r2
 400bf14:	80801915 	stw	r2,100(r16)
 400bf18:	80800017 	ldw	r2,0(r16)
 400bf1c:	8100030d 	sth	r4,12(r16)
 400bf20:	81000517 	ldw	r4,20(r16)
 400bf24:	10c7c83a 	sub	r3,r2,r3
 400bf28:	193fe016 	blt	r3,r4,400beac <__alt_data_end+0xfc00beac>
 400bf2c:	800b883a 	mov	r5,r16
 400bf30:	9009883a 	mov	r4,r18
 400bf34:	4006ed40 	call	4006ed4 <_fflush_r>
 400bf38:	1000071e 	bne	r2,zero,400bf58 <__swbuf_r+0x114>
 400bf3c:	80800017 	ldw	r2,0(r16)
 400bf40:	00c00044 	movi	r3,1
 400bf44:	003fda06 	br	400beb0 <__alt_data_end+0xfc00beb0>
 400bf48:	800b883a 	mov	r5,r16
 400bf4c:	9009883a 	mov	r4,r18
 400bf50:	4006ed40 	call	4006ed4 <_fflush_r>
 400bf54:	103fe326 	beq	r2,zero,400bee4 <__alt_data_end+0xfc00bee4>
 400bf58:	00bfffc4 	movi	r2,-1
 400bf5c:	003fe206 	br	400bee8 <__alt_data_end+0xfc00bee8>
 400bf60:	800b883a 	mov	r5,r16
 400bf64:	9009883a 	mov	r4,r18
 400bf68:	40052b40 	call	40052b4 <__swsetup_r>
 400bf6c:	103ffa1e 	bne	r2,zero,400bf58 <__alt_data_end+0xfc00bf58>
 400bf70:	8100030b 	ldhu	r4,12(r16)
 400bf74:	80c00417 	ldw	r3,16(r16)
 400bf78:	003fc506 	br	400be90 <__alt_data_end+0xfc00be90>
 400bf7c:	40072c00 	call	40072c0 <__sinit>
 400bf80:	003fbc06 	br	400be74 <__alt_data_end+0xfc00be74>

0400bf84 <__swbuf>:
 400bf84:	00810074 	movhi	r2,1025
 400bf88:	1091d704 	addi	r2,r2,18268
 400bf8c:	280d883a 	mov	r6,r5
 400bf90:	200b883a 	mov	r5,r4
 400bf94:	11000017 	ldw	r4,0(r2)
 400bf98:	400be441 	jmpi	400be44 <__swbuf_r>

0400bf9c <_write_r>:
 400bf9c:	defffd04 	addi	sp,sp,-12
 400bfa0:	2805883a 	mov	r2,r5
 400bfa4:	dc000015 	stw	r16,0(sp)
 400bfa8:	04010074 	movhi	r16,1025
 400bfac:	dc400115 	stw	r17,4(sp)
 400bfb0:	300b883a 	mov	r5,r6
 400bfb4:	8418bd04 	addi	r16,r16,25332
 400bfb8:	2023883a 	mov	r17,r4
 400bfbc:	380d883a 	mov	r6,r7
 400bfc0:	1009883a 	mov	r4,r2
 400bfc4:	dfc00215 	stw	ra,8(sp)
 400bfc8:	80000015 	stw	zero,0(r16)
 400bfcc:	401065c0 	call	401065c <write>
 400bfd0:	00ffffc4 	movi	r3,-1
 400bfd4:	10c00526 	beq	r2,r3,400bfec <_write_r+0x50>
 400bfd8:	dfc00217 	ldw	ra,8(sp)
 400bfdc:	dc400117 	ldw	r17,4(sp)
 400bfe0:	dc000017 	ldw	r16,0(sp)
 400bfe4:	dec00304 	addi	sp,sp,12
 400bfe8:	f800283a 	ret
 400bfec:	80c00017 	ldw	r3,0(r16)
 400bff0:	183ff926 	beq	r3,zero,400bfd8 <__alt_data_end+0xfc00bfd8>
 400bff4:	88c00015 	stw	r3,0(r17)
 400bff8:	003ff706 	br	400bfd8 <__alt_data_end+0xfc00bfd8>

0400bffc <_close_r>:
 400bffc:	defffd04 	addi	sp,sp,-12
 400c000:	dc000015 	stw	r16,0(sp)
 400c004:	04010074 	movhi	r16,1025
 400c008:	dc400115 	stw	r17,4(sp)
 400c00c:	8418bd04 	addi	r16,r16,25332
 400c010:	2023883a 	mov	r17,r4
 400c014:	2809883a 	mov	r4,r5
 400c018:	dfc00215 	stw	ra,8(sp)
 400c01c:	80000015 	stw	zero,0(r16)
 400c020:	400fc300 	call	400fc30 <close>
 400c024:	00ffffc4 	movi	r3,-1
 400c028:	10c00526 	beq	r2,r3,400c040 <_close_r+0x44>
 400c02c:	dfc00217 	ldw	ra,8(sp)
 400c030:	dc400117 	ldw	r17,4(sp)
 400c034:	dc000017 	ldw	r16,0(sp)
 400c038:	dec00304 	addi	sp,sp,12
 400c03c:	f800283a 	ret
 400c040:	80c00017 	ldw	r3,0(r16)
 400c044:	183ff926 	beq	r3,zero,400c02c <__alt_data_end+0xfc00c02c>
 400c048:	88c00015 	stw	r3,0(r17)
 400c04c:	003ff706 	br	400c02c <__alt_data_end+0xfc00c02c>

0400c050 <_calloc_r>:
 400c050:	defffe04 	addi	sp,sp,-8
 400c054:	2805883a 	mov	r2,r5
 400c058:	dc000015 	stw	r16,0(sp)
 400c05c:	300b883a 	mov	r5,r6
 400c060:	2021883a 	mov	r16,r4
 400c064:	1009883a 	mov	r4,r2
 400c068:	dfc00115 	stw	ra,4(sp)
 400c06c:	4002ce00 	call	4002ce0 <__mulsi3>
 400c070:	100b883a 	mov	r5,r2
 400c074:	8009883a 	mov	r4,r16
 400c078:	400802c0 	call	400802c <_malloc_r>
 400c07c:	10002926 	beq	r2,zero,400c124 <_calloc_r+0xd4>
 400c080:	11bfff17 	ldw	r6,-4(r2)
 400c084:	1021883a 	mov	r16,r2
 400c088:	00bfff04 	movi	r2,-4
 400c08c:	308c703a 	and	r6,r6,r2
 400c090:	00c00904 	movi	r3,36
 400c094:	308d883a 	add	r6,r6,r2
 400c098:	19801636 	bltu	r3,r6,400c0f4 <_calloc_r+0xa4>
 400c09c:	008004c4 	movi	r2,19
 400c0a0:	11800b2e 	bgeu	r2,r6,400c0d0 <_calloc_r+0x80>
 400c0a4:	80000015 	stw	zero,0(r16)
 400c0a8:	80000115 	stw	zero,4(r16)
 400c0ac:	008006c4 	movi	r2,27
 400c0b0:	11801a2e 	bgeu	r2,r6,400c11c <_calloc_r+0xcc>
 400c0b4:	80000215 	stw	zero,8(r16)
 400c0b8:	80000315 	stw	zero,12(r16)
 400c0bc:	30c0151e 	bne	r6,r3,400c114 <_calloc_r+0xc4>
 400c0c0:	80000415 	stw	zero,16(r16)
 400c0c4:	80800604 	addi	r2,r16,24
 400c0c8:	80000515 	stw	zero,20(r16)
 400c0cc:	00000106 	br	400c0d4 <_calloc_r+0x84>
 400c0d0:	8005883a 	mov	r2,r16
 400c0d4:	10000015 	stw	zero,0(r2)
 400c0d8:	10000115 	stw	zero,4(r2)
 400c0dc:	10000215 	stw	zero,8(r2)
 400c0e0:	8005883a 	mov	r2,r16
 400c0e4:	dfc00117 	ldw	ra,4(sp)
 400c0e8:	dc000017 	ldw	r16,0(sp)
 400c0ec:	dec00204 	addi	sp,sp,8
 400c0f0:	f800283a 	ret
 400c0f4:	000b883a 	mov	r5,zero
 400c0f8:	8009883a 	mov	r4,r16
 400c0fc:	4008bc00 	call	4008bc0 <memset>
 400c100:	8005883a 	mov	r2,r16
 400c104:	dfc00117 	ldw	ra,4(sp)
 400c108:	dc000017 	ldw	r16,0(sp)
 400c10c:	dec00204 	addi	sp,sp,8
 400c110:	f800283a 	ret
 400c114:	80800404 	addi	r2,r16,16
 400c118:	003fee06 	br	400c0d4 <__alt_data_end+0xfc00c0d4>
 400c11c:	80800204 	addi	r2,r16,8
 400c120:	003fec06 	br	400c0d4 <__alt_data_end+0xfc00c0d4>
 400c124:	0005883a 	mov	r2,zero
 400c128:	003fee06 	br	400c0e4 <__alt_data_end+0xfc00c0e4>

0400c12c <_fclose_r>:
 400c12c:	28003926 	beq	r5,zero,400c214 <_fclose_r+0xe8>
 400c130:	defffc04 	addi	sp,sp,-16
 400c134:	dc400115 	stw	r17,4(sp)
 400c138:	dc000015 	stw	r16,0(sp)
 400c13c:	dfc00315 	stw	ra,12(sp)
 400c140:	dc800215 	stw	r18,8(sp)
 400c144:	2023883a 	mov	r17,r4
 400c148:	2821883a 	mov	r16,r5
 400c14c:	20000226 	beq	r4,zero,400c158 <_fclose_r+0x2c>
 400c150:	20800e17 	ldw	r2,56(r4)
 400c154:	10002726 	beq	r2,zero,400c1f4 <_fclose_r+0xc8>
 400c158:	8080030f 	ldh	r2,12(r16)
 400c15c:	1000071e 	bne	r2,zero,400c17c <_fclose_r+0x50>
 400c160:	0005883a 	mov	r2,zero
 400c164:	dfc00317 	ldw	ra,12(sp)
 400c168:	dc800217 	ldw	r18,8(sp)
 400c16c:	dc400117 	ldw	r17,4(sp)
 400c170:	dc000017 	ldw	r16,0(sp)
 400c174:	dec00404 	addi	sp,sp,16
 400c178:	f800283a 	ret
 400c17c:	800b883a 	mov	r5,r16
 400c180:	8809883a 	mov	r4,r17
 400c184:	4006cb80 	call	4006cb8 <__sflush_r>
 400c188:	1025883a 	mov	r18,r2
 400c18c:	80800b17 	ldw	r2,44(r16)
 400c190:	10000426 	beq	r2,zero,400c1a4 <_fclose_r+0x78>
 400c194:	81400717 	ldw	r5,28(r16)
 400c198:	8809883a 	mov	r4,r17
 400c19c:	103ee83a 	callr	r2
 400c1a0:	10001616 	blt	r2,zero,400c1fc <_fclose_r+0xd0>
 400c1a4:	8080030b 	ldhu	r2,12(r16)
 400c1a8:	1080200c 	andi	r2,r2,128
 400c1ac:	1000151e 	bne	r2,zero,400c204 <_fclose_r+0xd8>
 400c1b0:	81400c17 	ldw	r5,48(r16)
 400c1b4:	28000526 	beq	r5,zero,400c1cc <_fclose_r+0xa0>
 400c1b8:	80801004 	addi	r2,r16,64
 400c1bc:	28800226 	beq	r5,r2,400c1c8 <_fclose_r+0x9c>
 400c1c0:	8809883a 	mov	r4,r17
 400c1c4:	40074340 	call	4007434 <_free_r>
 400c1c8:	80000c15 	stw	zero,48(r16)
 400c1cc:	81401117 	ldw	r5,68(r16)
 400c1d0:	28000326 	beq	r5,zero,400c1e0 <_fclose_r+0xb4>
 400c1d4:	8809883a 	mov	r4,r17
 400c1d8:	40074340 	call	4007434 <_free_r>
 400c1dc:	80001115 	stw	zero,68(r16)
 400c1e0:	40072d00 	call	40072d0 <__sfp_lock_acquire>
 400c1e4:	8000030d 	sth	zero,12(r16)
 400c1e8:	40072d40 	call	40072d4 <__sfp_lock_release>
 400c1ec:	9005883a 	mov	r2,r18
 400c1f0:	003fdc06 	br	400c164 <__alt_data_end+0xfc00c164>
 400c1f4:	40072c00 	call	40072c0 <__sinit>
 400c1f8:	003fd706 	br	400c158 <__alt_data_end+0xfc00c158>
 400c1fc:	04bfffc4 	movi	r18,-1
 400c200:	003fe806 	br	400c1a4 <__alt_data_end+0xfc00c1a4>
 400c204:	81400417 	ldw	r5,16(r16)
 400c208:	8809883a 	mov	r4,r17
 400c20c:	40074340 	call	4007434 <_free_r>
 400c210:	003fe706 	br	400c1b0 <__alt_data_end+0xfc00c1b0>
 400c214:	0005883a 	mov	r2,zero
 400c218:	f800283a 	ret

0400c21c <fclose>:
 400c21c:	00810074 	movhi	r2,1025
 400c220:	1091d704 	addi	r2,r2,18268
 400c224:	200b883a 	mov	r5,r4
 400c228:	11000017 	ldw	r4,0(r2)
 400c22c:	400c12c1 	jmpi	400c12c <_fclose_r>

0400c230 <__fputwc>:
 400c230:	defff804 	addi	sp,sp,-32
 400c234:	dcc00415 	stw	r19,16(sp)
 400c238:	dc800315 	stw	r18,12(sp)
 400c23c:	dc000115 	stw	r16,4(sp)
 400c240:	dfc00715 	stw	ra,28(sp)
 400c244:	dd400615 	stw	r21,24(sp)
 400c248:	dd000515 	stw	r20,20(sp)
 400c24c:	dc400215 	stw	r17,8(sp)
 400c250:	2027883a 	mov	r19,r4
 400c254:	2825883a 	mov	r18,r5
 400c258:	3021883a 	mov	r16,r6
 400c25c:	4007e1c0 	call	4007e1c <__locale_mb_cur_max>
 400c260:	00c00044 	movi	r3,1
 400c264:	10c03e26 	beq	r2,r3,400c360 <__fputwc+0x130>
 400c268:	81c01704 	addi	r7,r16,92
 400c26c:	900d883a 	mov	r6,r18
 400c270:	d80b883a 	mov	r5,sp
 400c274:	9809883a 	mov	r4,r19
 400c278:	400c5a80 	call	400c5a8 <_wcrtomb_r>
 400c27c:	1029883a 	mov	r20,r2
 400c280:	00bfffc4 	movi	r2,-1
 400c284:	a0802026 	beq	r20,r2,400c308 <__fputwc+0xd8>
 400c288:	d9400003 	ldbu	r5,0(sp)
 400c28c:	a0001c26 	beq	r20,zero,400c300 <__fputwc+0xd0>
 400c290:	0023883a 	mov	r17,zero
 400c294:	05400284 	movi	r21,10
 400c298:	00000906 	br	400c2c0 <__fputwc+0x90>
 400c29c:	80800017 	ldw	r2,0(r16)
 400c2a0:	11400005 	stb	r5,0(r2)
 400c2a4:	80c00017 	ldw	r3,0(r16)
 400c2a8:	18c00044 	addi	r3,r3,1
 400c2ac:	80c00015 	stw	r3,0(r16)
 400c2b0:	8c400044 	addi	r17,r17,1
 400c2b4:	dc45883a 	add	r2,sp,r17
 400c2b8:	8d00112e 	bgeu	r17,r20,400c300 <__fputwc+0xd0>
 400c2bc:	11400003 	ldbu	r5,0(r2)
 400c2c0:	80c00217 	ldw	r3,8(r16)
 400c2c4:	18ffffc4 	addi	r3,r3,-1
 400c2c8:	80c00215 	stw	r3,8(r16)
 400c2cc:	183ff30e 	bge	r3,zero,400c29c <__alt_data_end+0xfc00c29c>
 400c2d0:	80800617 	ldw	r2,24(r16)
 400c2d4:	18801916 	blt	r3,r2,400c33c <__fputwc+0x10c>
 400c2d8:	80800017 	ldw	r2,0(r16)
 400c2dc:	11400005 	stb	r5,0(r2)
 400c2e0:	80800017 	ldw	r2,0(r16)
 400c2e4:	10c00003 	ldbu	r3,0(r2)
 400c2e8:	10800044 	addi	r2,r2,1
 400c2ec:	1d402326 	beq	r3,r21,400c37c <__fputwc+0x14c>
 400c2f0:	80800015 	stw	r2,0(r16)
 400c2f4:	8c400044 	addi	r17,r17,1
 400c2f8:	dc45883a 	add	r2,sp,r17
 400c2fc:	8d3fef36 	bltu	r17,r20,400c2bc <__alt_data_end+0xfc00c2bc>
 400c300:	9005883a 	mov	r2,r18
 400c304:	00000406 	br	400c318 <__fputwc+0xe8>
 400c308:	80c0030b 	ldhu	r3,12(r16)
 400c30c:	a005883a 	mov	r2,r20
 400c310:	18c01014 	ori	r3,r3,64
 400c314:	80c0030d 	sth	r3,12(r16)
 400c318:	dfc00717 	ldw	ra,28(sp)
 400c31c:	dd400617 	ldw	r21,24(sp)
 400c320:	dd000517 	ldw	r20,20(sp)
 400c324:	dcc00417 	ldw	r19,16(sp)
 400c328:	dc800317 	ldw	r18,12(sp)
 400c32c:	dc400217 	ldw	r17,8(sp)
 400c330:	dc000117 	ldw	r16,4(sp)
 400c334:	dec00804 	addi	sp,sp,32
 400c338:	f800283a 	ret
 400c33c:	800d883a 	mov	r6,r16
 400c340:	29403fcc 	andi	r5,r5,255
 400c344:	9809883a 	mov	r4,r19
 400c348:	400be440 	call	400be44 <__swbuf_r>
 400c34c:	10bfffe0 	cmpeqi	r2,r2,-1
 400c350:	10803fcc 	andi	r2,r2,255
 400c354:	103fd626 	beq	r2,zero,400c2b0 <__alt_data_end+0xfc00c2b0>
 400c358:	00bfffc4 	movi	r2,-1
 400c35c:	003fee06 	br	400c318 <__alt_data_end+0xfc00c318>
 400c360:	90ffffc4 	addi	r3,r18,-1
 400c364:	01003f84 	movi	r4,254
 400c368:	20ffbf36 	bltu	r4,r3,400c268 <__alt_data_end+0xfc00c268>
 400c36c:	900b883a 	mov	r5,r18
 400c370:	dc800005 	stb	r18,0(sp)
 400c374:	1029883a 	mov	r20,r2
 400c378:	003fc506 	br	400c290 <__alt_data_end+0xfc00c290>
 400c37c:	800d883a 	mov	r6,r16
 400c380:	a80b883a 	mov	r5,r21
 400c384:	9809883a 	mov	r4,r19
 400c388:	400be440 	call	400be44 <__swbuf_r>
 400c38c:	10bfffe0 	cmpeqi	r2,r2,-1
 400c390:	003fef06 	br	400c350 <__alt_data_end+0xfc00c350>

0400c394 <_fputwc_r>:
 400c394:	3080030b 	ldhu	r2,12(r6)
 400c398:	10c8000c 	andi	r3,r2,8192
 400c39c:	1800051e 	bne	r3,zero,400c3b4 <_fputwc_r+0x20>
 400c3a0:	30c01917 	ldw	r3,100(r6)
 400c3a4:	10880014 	ori	r2,r2,8192
 400c3a8:	3080030d 	sth	r2,12(r6)
 400c3ac:	18880014 	ori	r2,r3,8192
 400c3b0:	30801915 	stw	r2,100(r6)
 400c3b4:	400c2301 	jmpi	400c230 <__fputwc>

0400c3b8 <fputwc>:
 400c3b8:	00810074 	movhi	r2,1025
 400c3bc:	defffc04 	addi	sp,sp,-16
 400c3c0:	1091d704 	addi	r2,r2,18268
 400c3c4:	dc000115 	stw	r16,4(sp)
 400c3c8:	14000017 	ldw	r16,0(r2)
 400c3cc:	dc400215 	stw	r17,8(sp)
 400c3d0:	dfc00315 	stw	ra,12(sp)
 400c3d4:	2023883a 	mov	r17,r4
 400c3d8:	80000226 	beq	r16,zero,400c3e4 <fputwc+0x2c>
 400c3dc:	80800e17 	ldw	r2,56(r16)
 400c3e0:	10001026 	beq	r2,zero,400c424 <fputwc+0x6c>
 400c3e4:	2880030b 	ldhu	r2,12(r5)
 400c3e8:	10c8000c 	andi	r3,r2,8192
 400c3ec:	1800051e 	bne	r3,zero,400c404 <fputwc+0x4c>
 400c3f0:	28c01917 	ldw	r3,100(r5)
 400c3f4:	10880014 	ori	r2,r2,8192
 400c3f8:	2880030d 	sth	r2,12(r5)
 400c3fc:	18880014 	ori	r2,r3,8192
 400c400:	28801915 	stw	r2,100(r5)
 400c404:	280d883a 	mov	r6,r5
 400c408:	8009883a 	mov	r4,r16
 400c40c:	880b883a 	mov	r5,r17
 400c410:	dfc00317 	ldw	ra,12(sp)
 400c414:	dc400217 	ldw	r17,8(sp)
 400c418:	dc000117 	ldw	r16,4(sp)
 400c41c:	dec00404 	addi	sp,sp,16
 400c420:	400c2301 	jmpi	400c230 <__fputwc>
 400c424:	8009883a 	mov	r4,r16
 400c428:	d9400015 	stw	r5,0(sp)
 400c42c:	40072c00 	call	40072c0 <__sinit>
 400c430:	d9400017 	ldw	r5,0(sp)
 400c434:	003feb06 	br	400c3e4 <__alt_data_end+0xfc00c3e4>

0400c438 <_fstat_r>:
 400c438:	defffd04 	addi	sp,sp,-12
 400c43c:	2805883a 	mov	r2,r5
 400c440:	dc000015 	stw	r16,0(sp)
 400c444:	04010074 	movhi	r16,1025
 400c448:	dc400115 	stw	r17,4(sp)
 400c44c:	8418bd04 	addi	r16,r16,25332
 400c450:	2023883a 	mov	r17,r4
 400c454:	300b883a 	mov	r5,r6
 400c458:	1009883a 	mov	r4,r2
 400c45c:	dfc00215 	stw	ra,8(sp)
 400c460:	80000015 	stw	zero,0(r16)
 400c464:	400fd700 	call	400fd70 <fstat>
 400c468:	00ffffc4 	movi	r3,-1
 400c46c:	10c00526 	beq	r2,r3,400c484 <_fstat_r+0x4c>
 400c470:	dfc00217 	ldw	ra,8(sp)
 400c474:	dc400117 	ldw	r17,4(sp)
 400c478:	dc000017 	ldw	r16,0(sp)
 400c47c:	dec00304 	addi	sp,sp,12
 400c480:	f800283a 	ret
 400c484:	80c00017 	ldw	r3,0(r16)
 400c488:	183ff926 	beq	r3,zero,400c470 <__alt_data_end+0xfc00c470>
 400c48c:	88c00015 	stw	r3,0(r17)
 400c490:	003ff706 	br	400c470 <__alt_data_end+0xfc00c470>

0400c494 <_isatty_r>:
 400c494:	defffd04 	addi	sp,sp,-12
 400c498:	dc000015 	stw	r16,0(sp)
 400c49c:	04010074 	movhi	r16,1025
 400c4a0:	dc400115 	stw	r17,4(sp)
 400c4a4:	8418bd04 	addi	r16,r16,25332
 400c4a8:	2023883a 	mov	r17,r4
 400c4ac:	2809883a 	mov	r4,r5
 400c4b0:	dfc00215 	stw	ra,8(sp)
 400c4b4:	80000015 	stw	zero,0(r16)
 400c4b8:	400fe640 	call	400fe64 <isatty>
 400c4bc:	00ffffc4 	movi	r3,-1
 400c4c0:	10c00526 	beq	r2,r3,400c4d8 <_isatty_r+0x44>
 400c4c4:	dfc00217 	ldw	ra,8(sp)
 400c4c8:	dc400117 	ldw	r17,4(sp)
 400c4cc:	dc000017 	ldw	r16,0(sp)
 400c4d0:	dec00304 	addi	sp,sp,12
 400c4d4:	f800283a 	ret
 400c4d8:	80c00017 	ldw	r3,0(r16)
 400c4dc:	183ff926 	beq	r3,zero,400c4c4 <__alt_data_end+0xfc00c4c4>
 400c4e0:	88c00015 	stw	r3,0(r17)
 400c4e4:	003ff706 	br	400c4c4 <__alt_data_end+0xfc00c4c4>

0400c4e8 <_lseek_r>:
 400c4e8:	defffd04 	addi	sp,sp,-12
 400c4ec:	2805883a 	mov	r2,r5
 400c4f0:	dc000015 	stw	r16,0(sp)
 400c4f4:	04010074 	movhi	r16,1025
 400c4f8:	dc400115 	stw	r17,4(sp)
 400c4fc:	300b883a 	mov	r5,r6
 400c500:	8418bd04 	addi	r16,r16,25332
 400c504:	2023883a 	mov	r17,r4
 400c508:	380d883a 	mov	r6,r7
 400c50c:	1009883a 	mov	r4,r2
 400c510:	dfc00215 	stw	ra,8(sp)
 400c514:	80000015 	stw	zero,0(r16)
 400c518:	40100380 	call	4010038 <lseek>
 400c51c:	00ffffc4 	movi	r3,-1
 400c520:	10c00526 	beq	r2,r3,400c538 <_lseek_r+0x50>
 400c524:	dfc00217 	ldw	ra,8(sp)
 400c528:	dc400117 	ldw	r17,4(sp)
 400c52c:	dc000017 	ldw	r16,0(sp)
 400c530:	dec00304 	addi	sp,sp,12
 400c534:	f800283a 	ret
 400c538:	80c00017 	ldw	r3,0(r16)
 400c53c:	183ff926 	beq	r3,zero,400c524 <__alt_data_end+0xfc00c524>
 400c540:	88c00015 	stw	r3,0(r17)
 400c544:	003ff706 	br	400c524 <__alt_data_end+0xfc00c524>

0400c548 <_read_r>:
 400c548:	defffd04 	addi	sp,sp,-12
 400c54c:	2805883a 	mov	r2,r5
 400c550:	dc000015 	stw	r16,0(sp)
 400c554:	04010074 	movhi	r16,1025
 400c558:	dc400115 	stw	r17,4(sp)
 400c55c:	300b883a 	mov	r5,r6
 400c560:	8418bd04 	addi	r16,r16,25332
 400c564:	2023883a 	mov	r17,r4
 400c568:	380d883a 	mov	r6,r7
 400c56c:	1009883a 	mov	r4,r2
 400c570:	dfc00215 	stw	ra,8(sp)
 400c574:	80000015 	stw	zero,0(r16)
 400c578:	40102140 	call	4010214 <read>
 400c57c:	00ffffc4 	movi	r3,-1
 400c580:	10c00526 	beq	r2,r3,400c598 <_read_r+0x50>
 400c584:	dfc00217 	ldw	ra,8(sp)
 400c588:	dc400117 	ldw	r17,4(sp)
 400c58c:	dc000017 	ldw	r16,0(sp)
 400c590:	dec00304 	addi	sp,sp,12
 400c594:	f800283a 	ret
 400c598:	80c00017 	ldw	r3,0(r16)
 400c59c:	183ff926 	beq	r3,zero,400c584 <__alt_data_end+0xfc00c584>
 400c5a0:	88c00015 	stw	r3,0(r17)
 400c5a4:	003ff706 	br	400c584 <__alt_data_end+0xfc00c584>

0400c5a8 <_wcrtomb_r>:
 400c5a8:	defff604 	addi	sp,sp,-40
 400c5ac:	00810074 	movhi	r2,1025
 400c5b0:	dc800815 	stw	r18,32(sp)
 400c5b4:	dc400715 	stw	r17,28(sp)
 400c5b8:	dc000615 	stw	r16,24(sp)
 400c5bc:	1091db04 	addi	r2,r2,18284
 400c5c0:	dfc00915 	stw	ra,36(sp)
 400c5c4:	2021883a 	mov	r16,r4
 400c5c8:	3823883a 	mov	r17,r7
 400c5cc:	14800017 	ldw	r18,0(r2)
 400c5d0:	28001426 	beq	r5,zero,400c624 <_wcrtomb_r+0x7c>
 400c5d4:	d9400415 	stw	r5,16(sp)
 400c5d8:	d9800515 	stw	r6,20(sp)
 400c5dc:	4007e100 	call	4007e10 <__locale_charset>
 400c5e0:	d9800517 	ldw	r6,20(sp)
 400c5e4:	d9400417 	ldw	r5,16(sp)
 400c5e8:	100f883a 	mov	r7,r2
 400c5ec:	dc400015 	stw	r17,0(sp)
 400c5f0:	8009883a 	mov	r4,r16
 400c5f4:	903ee83a 	callr	r18
 400c5f8:	00ffffc4 	movi	r3,-1
 400c5fc:	10c0031e 	bne	r2,r3,400c60c <_wcrtomb_r+0x64>
 400c600:	88000015 	stw	zero,0(r17)
 400c604:	00c02284 	movi	r3,138
 400c608:	80c00015 	stw	r3,0(r16)
 400c60c:	dfc00917 	ldw	ra,36(sp)
 400c610:	dc800817 	ldw	r18,32(sp)
 400c614:	dc400717 	ldw	r17,28(sp)
 400c618:	dc000617 	ldw	r16,24(sp)
 400c61c:	dec00a04 	addi	sp,sp,40
 400c620:	f800283a 	ret
 400c624:	4007e100 	call	4007e10 <__locale_charset>
 400c628:	100f883a 	mov	r7,r2
 400c62c:	dc400015 	stw	r17,0(sp)
 400c630:	000d883a 	mov	r6,zero
 400c634:	d9400104 	addi	r5,sp,4
 400c638:	8009883a 	mov	r4,r16
 400c63c:	903ee83a 	callr	r18
 400c640:	003fed06 	br	400c5f8 <__alt_data_end+0xfc00c5f8>

0400c644 <wcrtomb>:
 400c644:	defff604 	addi	sp,sp,-40
 400c648:	00810074 	movhi	r2,1025
 400c64c:	dc800615 	stw	r18,24(sp)
 400c650:	dc400515 	stw	r17,20(sp)
 400c654:	1091d704 	addi	r2,r2,18268
 400c658:	dfc00915 	stw	ra,36(sp)
 400c65c:	dd000815 	stw	r20,32(sp)
 400c660:	dcc00715 	stw	r19,28(sp)
 400c664:	dc000415 	stw	r16,16(sp)
 400c668:	3025883a 	mov	r18,r6
 400c66c:	14400017 	ldw	r17,0(r2)
 400c670:	20001926 	beq	r4,zero,400c6d8 <wcrtomb+0x94>
 400c674:	00810074 	movhi	r2,1025
 400c678:	1091db04 	addi	r2,r2,18284
 400c67c:	15000017 	ldw	r20,0(r2)
 400c680:	2021883a 	mov	r16,r4
 400c684:	2827883a 	mov	r19,r5
 400c688:	4007e100 	call	4007e10 <__locale_charset>
 400c68c:	100f883a 	mov	r7,r2
 400c690:	dc800015 	stw	r18,0(sp)
 400c694:	980d883a 	mov	r6,r19
 400c698:	800b883a 	mov	r5,r16
 400c69c:	8809883a 	mov	r4,r17
 400c6a0:	a03ee83a 	callr	r20
 400c6a4:	00ffffc4 	movi	r3,-1
 400c6a8:	10c0031e 	bne	r2,r3,400c6b8 <wcrtomb+0x74>
 400c6ac:	90000015 	stw	zero,0(r18)
 400c6b0:	00c02284 	movi	r3,138
 400c6b4:	88c00015 	stw	r3,0(r17)
 400c6b8:	dfc00917 	ldw	ra,36(sp)
 400c6bc:	dd000817 	ldw	r20,32(sp)
 400c6c0:	dcc00717 	ldw	r19,28(sp)
 400c6c4:	dc800617 	ldw	r18,24(sp)
 400c6c8:	dc400517 	ldw	r17,20(sp)
 400c6cc:	dc000417 	ldw	r16,16(sp)
 400c6d0:	dec00a04 	addi	sp,sp,40
 400c6d4:	f800283a 	ret
 400c6d8:	00810074 	movhi	r2,1025
 400c6dc:	1091db04 	addi	r2,r2,18284
 400c6e0:	14000017 	ldw	r16,0(r2)
 400c6e4:	4007e100 	call	4007e10 <__locale_charset>
 400c6e8:	100f883a 	mov	r7,r2
 400c6ec:	dc800015 	stw	r18,0(sp)
 400c6f0:	000d883a 	mov	r6,zero
 400c6f4:	d9400104 	addi	r5,sp,4
 400c6f8:	8809883a 	mov	r4,r17
 400c6fc:	803ee83a 	callr	r16
 400c700:	003fe806 	br	400c6a4 <__alt_data_end+0xfc00c6a4>

0400c704 <__ascii_wctomb>:
 400c704:	28000526 	beq	r5,zero,400c71c <__ascii_wctomb+0x18>
 400c708:	00803fc4 	movi	r2,255
 400c70c:	11800536 	bltu	r2,r6,400c724 <__ascii_wctomb+0x20>
 400c710:	29800005 	stb	r6,0(r5)
 400c714:	00800044 	movi	r2,1
 400c718:	f800283a 	ret
 400c71c:	0005883a 	mov	r2,zero
 400c720:	f800283a 	ret
 400c724:	00802284 	movi	r2,138
 400c728:	20800015 	stw	r2,0(r4)
 400c72c:	00bfffc4 	movi	r2,-1
 400c730:	f800283a 	ret

0400c734 <_wctomb_r>:
 400c734:	00810074 	movhi	r2,1025
 400c738:	defff904 	addi	sp,sp,-28
 400c73c:	1091db04 	addi	r2,r2,18284
 400c740:	dfc00615 	stw	ra,24(sp)
 400c744:	dc400515 	stw	r17,20(sp)
 400c748:	dc000415 	stw	r16,16(sp)
 400c74c:	3823883a 	mov	r17,r7
 400c750:	14000017 	ldw	r16,0(r2)
 400c754:	d9000115 	stw	r4,4(sp)
 400c758:	d9400215 	stw	r5,8(sp)
 400c75c:	d9800315 	stw	r6,12(sp)
 400c760:	4007e100 	call	4007e10 <__locale_charset>
 400c764:	d9800317 	ldw	r6,12(sp)
 400c768:	d9400217 	ldw	r5,8(sp)
 400c76c:	d9000117 	ldw	r4,4(sp)
 400c770:	100f883a 	mov	r7,r2
 400c774:	dc400015 	stw	r17,0(sp)
 400c778:	803ee83a 	callr	r16
 400c77c:	dfc00617 	ldw	ra,24(sp)
 400c780:	dc400517 	ldw	r17,20(sp)
 400c784:	dc000417 	ldw	r16,16(sp)
 400c788:	dec00704 	addi	sp,sp,28
 400c78c:	f800283a 	ret

0400c790 <__udivdi3>:
 400c790:	defff404 	addi	sp,sp,-48
 400c794:	dcc00515 	stw	r19,20(sp)
 400c798:	dc000215 	stw	r16,8(sp)
 400c79c:	dfc00b15 	stw	ra,44(sp)
 400c7a0:	df000a15 	stw	fp,40(sp)
 400c7a4:	ddc00915 	stw	r23,36(sp)
 400c7a8:	dd800815 	stw	r22,32(sp)
 400c7ac:	dd400715 	stw	r21,28(sp)
 400c7b0:	dd000615 	stw	r20,24(sp)
 400c7b4:	dc800415 	stw	r18,16(sp)
 400c7b8:	dc400315 	stw	r17,12(sp)
 400c7bc:	2027883a 	mov	r19,r4
 400c7c0:	2821883a 	mov	r16,r5
 400c7c4:	3800461e 	bne	r7,zero,400c8e0 <__udivdi3+0x150>
 400c7c8:	3023883a 	mov	r17,r6
 400c7cc:	2025883a 	mov	r18,r4
 400c7d0:	2980572e 	bgeu	r5,r6,400c930 <__udivdi3+0x1a0>
 400c7d4:	00bfffd4 	movui	r2,65535
 400c7d8:	282d883a 	mov	r22,r5
 400c7dc:	1180b236 	bltu	r2,r6,400caa8 <__udivdi3+0x318>
 400c7e0:	00803fc4 	movi	r2,255
 400c7e4:	1185803a 	cmpltu	r2,r2,r6
 400c7e8:	100490fa 	slli	r2,r2,3
 400c7ec:	3086d83a 	srl	r3,r6,r2
 400c7f0:	01010074 	movhi	r4,1025
 400c7f4:	210ace04 	addi	r4,r4,11064
 400c7f8:	20c7883a 	add	r3,r4,r3
 400c7fc:	18c00003 	ldbu	r3,0(r3)
 400c800:	1885883a 	add	r2,r3,r2
 400c804:	00c00804 	movi	r3,32
 400c808:	1887c83a 	sub	r3,r3,r2
 400c80c:	18000526 	beq	r3,zero,400c824 <__udivdi3+0x94>
 400c810:	80e0983a 	sll	r16,r16,r3
 400c814:	9884d83a 	srl	r2,r19,r2
 400c818:	30e2983a 	sll	r17,r6,r3
 400c81c:	98e4983a 	sll	r18,r19,r3
 400c820:	142cb03a 	or	r22,r2,r16
 400c824:	882ad43a 	srli	r21,r17,16
 400c828:	b009883a 	mov	r4,r22
 400c82c:	8d3fffcc 	andi	r20,r17,65535
 400c830:	a80b883a 	mov	r5,r21
 400c834:	4002c880 	call	4002c88 <__umodsi3>
 400c838:	b009883a 	mov	r4,r22
 400c83c:	a80b883a 	mov	r5,r21
 400c840:	1027883a 	mov	r19,r2
 400c844:	4002c240 	call	4002c24 <__udivsi3>
 400c848:	100b883a 	mov	r5,r2
 400c84c:	a009883a 	mov	r4,r20
 400c850:	102d883a 	mov	r22,r2
 400c854:	4002ce00 	call	4002ce0 <__mulsi3>
 400c858:	9826943a 	slli	r19,r19,16
 400c85c:	9006d43a 	srli	r3,r18,16
 400c860:	1cc6b03a 	or	r3,r3,r19
 400c864:	1880052e 	bgeu	r3,r2,400c87c <__udivdi3+0xec>
 400c868:	1c47883a 	add	r3,r3,r17
 400c86c:	b13fffc4 	addi	r4,r22,-1
 400c870:	1c400136 	bltu	r3,r17,400c878 <__udivdi3+0xe8>
 400c874:	18814236 	bltu	r3,r2,400cd80 <__udivdi3+0x5f0>
 400c878:	202d883a 	mov	r22,r4
 400c87c:	18a1c83a 	sub	r16,r3,r2
 400c880:	8009883a 	mov	r4,r16
 400c884:	a80b883a 	mov	r5,r21
 400c888:	4002c880 	call	4002c88 <__umodsi3>
 400c88c:	1027883a 	mov	r19,r2
 400c890:	8009883a 	mov	r4,r16
 400c894:	a80b883a 	mov	r5,r21
 400c898:	9826943a 	slli	r19,r19,16
 400c89c:	4002c240 	call	4002c24 <__udivsi3>
 400c8a0:	100b883a 	mov	r5,r2
 400c8a4:	a009883a 	mov	r4,r20
 400c8a8:	94bfffcc 	andi	r18,r18,65535
 400c8ac:	1021883a 	mov	r16,r2
 400c8b0:	94e4b03a 	or	r18,r18,r19
 400c8b4:	4002ce00 	call	4002ce0 <__mulsi3>
 400c8b8:	9080052e 	bgeu	r18,r2,400c8d0 <__udivdi3+0x140>
 400c8bc:	8ca5883a 	add	r18,r17,r18
 400c8c0:	80ffffc4 	addi	r3,r16,-1
 400c8c4:	94410c36 	bltu	r18,r17,400ccf8 <__udivdi3+0x568>
 400c8c8:	90810b2e 	bgeu	r18,r2,400ccf8 <__udivdi3+0x568>
 400c8cc:	843fff84 	addi	r16,r16,-2
 400c8d0:	b004943a 	slli	r2,r22,16
 400c8d4:	0007883a 	mov	r3,zero
 400c8d8:	1404b03a 	or	r2,r2,r16
 400c8dc:	00005e06 	br	400ca58 <__udivdi3+0x2c8>
 400c8e0:	29c05b36 	bltu	r5,r7,400ca50 <__udivdi3+0x2c0>
 400c8e4:	00bfffd4 	movui	r2,65535
 400c8e8:	11c0672e 	bgeu	r2,r7,400ca88 <__udivdi3+0x2f8>
 400c8ec:	00804034 	movhi	r2,256
 400c8f0:	10bfffc4 	addi	r2,r2,-1
 400c8f4:	11c10a36 	bltu	r2,r7,400cd20 <__udivdi3+0x590>
 400c8f8:	00800404 	movi	r2,16
 400c8fc:	3886d83a 	srl	r3,r7,r2
 400c900:	01010074 	movhi	r4,1025
 400c904:	210ace04 	addi	r4,r4,11064
 400c908:	20c7883a 	add	r3,r4,r3
 400c90c:	18c00003 	ldbu	r3,0(r3)
 400c910:	05c00804 	movi	r23,32
 400c914:	1885883a 	add	r2,r3,r2
 400c918:	b8afc83a 	sub	r23,r23,r2
 400c91c:	b800671e 	bne	r23,zero,400cabc <__udivdi3+0x32c>
 400c920:	3c010536 	bltu	r7,r16,400cd38 <__udivdi3+0x5a8>
 400c924:	9985403a 	cmpgeu	r2,r19,r6
 400c928:	0007883a 	mov	r3,zero
 400c92c:	00004a06 	br	400ca58 <__udivdi3+0x2c8>
 400c930:	3000041e 	bne	r6,zero,400c944 <__udivdi3+0x1b4>
 400c934:	000b883a 	mov	r5,zero
 400c938:	01000044 	movi	r4,1
 400c93c:	4002c240 	call	4002c24 <__udivsi3>
 400c940:	1023883a 	mov	r17,r2
 400c944:	00bfffd4 	movui	r2,65535
 400c948:	1440532e 	bgeu	r2,r17,400ca98 <__udivdi3+0x308>
 400c94c:	00804034 	movhi	r2,256
 400c950:	10bfffc4 	addi	r2,r2,-1
 400c954:	1440f436 	bltu	r2,r17,400cd28 <__udivdi3+0x598>
 400c958:	00800404 	movi	r2,16
 400c95c:	8886d83a 	srl	r3,r17,r2
 400c960:	01010074 	movhi	r4,1025
 400c964:	210ace04 	addi	r4,r4,11064
 400c968:	20c7883a 	add	r3,r4,r3
 400c96c:	18c00003 	ldbu	r3,0(r3)
 400c970:	1885883a 	add	r2,r3,r2
 400c974:	00c00804 	movi	r3,32
 400c978:	1887c83a 	sub	r3,r3,r2
 400c97c:	1800a51e 	bne	r3,zero,400cc14 <__udivdi3+0x484>
 400c980:	882ad43a 	srli	r21,r17,16
 400c984:	8461c83a 	sub	r16,r16,r17
 400c988:	8d3fffcc 	andi	r20,r17,65535
 400c98c:	00c00044 	movi	r3,1
 400c990:	a80b883a 	mov	r5,r21
 400c994:	8009883a 	mov	r4,r16
 400c998:	d8c00115 	stw	r3,4(sp)
 400c99c:	4002c880 	call	4002c88 <__umodsi3>
 400c9a0:	a80b883a 	mov	r5,r21
 400c9a4:	8009883a 	mov	r4,r16
 400c9a8:	1027883a 	mov	r19,r2
 400c9ac:	4002c240 	call	4002c24 <__udivsi3>
 400c9b0:	a00b883a 	mov	r5,r20
 400c9b4:	1009883a 	mov	r4,r2
 400c9b8:	102d883a 	mov	r22,r2
 400c9bc:	4002ce00 	call	4002ce0 <__mulsi3>
 400c9c0:	9826943a 	slli	r19,r19,16
 400c9c4:	900ed43a 	srli	r7,r18,16
 400c9c8:	d8c00117 	ldw	r3,4(sp)
 400c9cc:	3cceb03a 	or	r7,r7,r19
 400c9d0:	3880052e 	bgeu	r7,r2,400c9e8 <__udivdi3+0x258>
 400c9d4:	3c4f883a 	add	r7,r7,r17
 400c9d8:	b13fffc4 	addi	r4,r22,-1
 400c9dc:	3c400136 	bltu	r7,r17,400c9e4 <__udivdi3+0x254>
 400c9e0:	3880e436 	bltu	r7,r2,400cd74 <__udivdi3+0x5e4>
 400c9e4:	202d883a 	mov	r22,r4
 400c9e8:	38a1c83a 	sub	r16,r7,r2
 400c9ec:	8009883a 	mov	r4,r16
 400c9f0:	a80b883a 	mov	r5,r21
 400c9f4:	d8c00115 	stw	r3,4(sp)
 400c9f8:	4002c880 	call	4002c88 <__umodsi3>
 400c9fc:	1027883a 	mov	r19,r2
 400ca00:	8009883a 	mov	r4,r16
 400ca04:	a80b883a 	mov	r5,r21
 400ca08:	9826943a 	slli	r19,r19,16
 400ca0c:	4002c240 	call	4002c24 <__udivsi3>
 400ca10:	a00b883a 	mov	r5,r20
 400ca14:	1009883a 	mov	r4,r2
 400ca18:	94bfffcc 	andi	r18,r18,65535
 400ca1c:	1021883a 	mov	r16,r2
 400ca20:	94e4b03a 	or	r18,r18,r19
 400ca24:	4002ce00 	call	4002ce0 <__mulsi3>
 400ca28:	d8c00117 	ldw	r3,4(sp)
 400ca2c:	9080052e 	bgeu	r18,r2,400ca44 <__udivdi3+0x2b4>
 400ca30:	8ca5883a 	add	r18,r17,r18
 400ca34:	813fffc4 	addi	r4,r16,-1
 400ca38:	9440ad36 	bltu	r18,r17,400ccf0 <__udivdi3+0x560>
 400ca3c:	9080ac2e 	bgeu	r18,r2,400ccf0 <__udivdi3+0x560>
 400ca40:	843fff84 	addi	r16,r16,-2
 400ca44:	b004943a 	slli	r2,r22,16
 400ca48:	1404b03a 	or	r2,r2,r16
 400ca4c:	00000206 	br	400ca58 <__udivdi3+0x2c8>
 400ca50:	0007883a 	mov	r3,zero
 400ca54:	0005883a 	mov	r2,zero
 400ca58:	dfc00b17 	ldw	ra,44(sp)
 400ca5c:	df000a17 	ldw	fp,40(sp)
 400ca60:	ddc00917 	ldw	r23,36(sp)
 400ca64:	dd800817 	ldw	r22,32(sp)
 400ca68:	dd400717 	ldw	r21,28(sp)
 400ca6c:	dd000617 	ldw	r20,24(sp)
 400ca70:	dcc00517 	ldw	r19,20(sp)
 400ca74:	dc800417 	ldw	r18,16(sp)
 400ca78:	dc400317 	ldw	r17,12(sp)
 400ca7c:	dc000217 	ldw	r16,8(sp)
 400ca80:	dec00c04 	addi	sp,sp,48
 400ca84:	f800283a 	ret
 400ca88:	00803fc4 	movi	r2,255
 400ca8c:	11c5803a 	cmpltu	r2,r2,r7
 400ca90:	100490fa 	slli	r2,r2,3
 400ca94:	003f9906 	br	400c8fc <__alt_data_end+0xfc00c8fc>
 400ca98:	00803fc4 	movi	r2,255
 400ca9c:	1445803a 	cmpltu	r2,r2,r17
 400caa0:	100490fa 	slli	r2,r2,3
 400caa4:	003fad06 	br	400c95c <__alt_data_end+0xfc00c95c>
 400caa8:	00804034 	movhi	r2,256
 400caac:	10bfffc4 	addi	r2,r2,-1
 400cab0:	11809f36 	bltu	r2,r6,400cd30 <__udivdi3+0x5a0>
 400cab4:	00800404 	movi	r2,16
 400cab8:	003f4c06 	br	400c7ec <__alt_data_end+0xfc00c7ec>
 400cabc:	3dce983a 	sll	r7,r7,r23
 400cac0:	30b8d83a 	srl	fp,r6,r2
 400cac4:	80a2d83a 	srl	r17,r16,r2
 400cac8:	35cc983a 	sll	r6,r6,r23
 400cacc:	3f38b03a 	or	fp,r7,fp
 400cad0:	e024d43a 	srli	r18,fp,16
 400cad4:	9884d83a 	srl	r2,r19,r2
 400cad8:	85e0983a 	sll	r16,r16,r23
 400cadc:	8809883a 	mov	r4,r17
 400cae0:	900b883a 	mov	r5,r18
 400cae4:	d9800015 	stw	r6,0(sp)
 400cae8:	1420b03a 	or	r16,r2,r16
 400caec:	4002c880 	call	4002c88 <__umodsi3>
 400caf0:	900b883a 	mov	r5,r18
 400caf4:	8809883a 	mov	r4,r17
 400caf8:	1029883a 	mov	r20,r2
 400cafc:	e5bfffcc 	andi	r22,fp,65535
 400cb00:	4002c240 	call	4002c24 <__udivsi3>
 400cb04:	100b883a 	mov	r5,r2
 400cb08:	b009883a 	mov	r4,r22
 400cb0c:	102b883a 	mov	r21,r2
 400cb10:	4002ce00 	call	4002ce0 <__mulsi3>
 400cb14:	a028943a 	slli	r20,r20,16
 400cb18:	8006d43a 	srli	r3,r16,16
 400cb1c:	1d06b03a 	or	r3,r3,r20
 400cb20:	1880042e 	bgeu	r3,r2,400cb34 <__udivdi3+0x3a4>
 400cb24:	1f07883a 	add	r3,r3,fp
 400cb28:	a93fffc4 	addi	r4,r21,-1
 400cb2c:	1f00892e 	bgeu	r3,fp,400cd54 <__udivdi3+0x5c4>
 400cb30:	202b883a 	mov	r21,r4
 400cb34:	18a3c83a 	sub	r17,r3,r2
 400cb38:	8809883a 	mov	r4,r17
 400cb3c:	900b883a 	mov	r5,r18
 400cb40:	4002c880 	call	4002c88 <__umodsi3>
 400cb44:	1029883a 	mov	r20,r2
 400cb48:	8809883a 	mov	r4,r17
 400cb4c:	900b883a 	mov	r5,r18
 400cb50:	a028943a 	slli	r20,r20,16
 400cb54:	4002c240 	call	4002c24 <__udivsi3>
 400cb58:	100b883a 	mov	r5,r2
 400cb5c:	b009883a 	mov	r4,r22
 400cb60:	843fffcc 	andi	r16,r16,65535
 400cb64:	1023883a 	mov	r17,r2
 400cb68:	8520b03a 	or	r16,r16,r20
 400cb6c:	4002ce00 	call	4002ce0 <__mulsi3>
 400cb70:	8080042e 	bgeu	r16,r2,400cb84 <__udivdi3+0x3f4>
 400cb74:	8721883a 	add	r16,r16,fp
 400cb78:	88ffffc4 	addi	r3,r17,-1
 400cb7c:	8700712e 	bgeu	r16,fp,400cd44 <__udivdi3+0x5b4>
 400cb80:	1823883a 	mov	r17,r3
 400cb84:	a80e943a 	slli	r7,r21,16
 400cb88:	d8c00017 	ldw	r3,0(sp)
 400cb8c:	80a1c83a 	sub	r16,r16,r2
 400cb90:	3c64b03a 	or	r18,r7,r17
 400cb94:	1d3fffcc 	andi	r20,r3,65535
 400cb98:	9022d43a 	srli	r17,r18,16
 400cb9c:	95bfffcc 	andi	r22,r18,65535
 400cba0:	a00b883a 	mov	r5,r20
 400cba4:	b009883a 	mov	r4,r22
 400cba8:	182ad43a 	srli	r21,r3,16
 400cbac:	4002ce00 	call	4002ce0 <__mulsi3>
 400cbb0:	a00b883a 	mov	r5,r20
 400cbb4:	8809883a 	mov	r4,r17
 400cbb8:	1039883a 	mov	fp,r2
 400cbbc:	4002ce00 	call	4002ce0 <__mulsi3>
 400cbc0:	8809883a 	mov	r4,r17
 400cbc4:	a80b883a 	mov	r5,r21
 400cbc8:	1029883a 	mov	r20,r2
 400cbcc:	4002ce00 	call	4002ce0 <__mulsi3>
 400cbd0:	a80b883a 	mov	r5,r21
 400cbd4:	b009883a 	mov	r4,r22
 400cbd8:	1023883a 	mov	r17,r2
 400cbdc:	4002ce00 	call	4002ce0 <__mulsi3>
 400cbe0:	e006d43a 	srli	r3,fp,16
 400cbe4:	1505883a 	add	r2,r2,r20
 400cbe8:	1887883a 	add	r3,r3,r2
 400cbec:	1d00022e 	bgeu	r3,r20,400cbf8 <__udivdi3+0x468>
 400cbf0:	00800074 	movhi	r2,1
 400cbf4:	88a3883a 	add	r17,r17,r2
 400cbf8:	1804d43a 	srli	r2,r3,16
 400cbfc:	1463883a 	add	r17,r2,r17
 400cc00:	84404436 	bltu	r16,r17,400cd14 <__udivdi3+0x584>
 400cc04:	84403e26 	beq	r16,r17,400cd00 <__udivdi3+0x570>
 400cc08:	9005883a 	mov	r2,r18
 400cc0c:	0007883a 	mov	r3,zero
 400cc10:	003f9106 	br	400ca58 <__alt_data_end+0xfc00ca58>
 400cc14:	88e2983a 	sll	r17,r17,r3
 400cc18:	80aed83a 	srl	r23,r16,r2
 400cc1c:	80e0983a 	sll	r16,r16,r3
 400cc20:	882ad43a 	srli	r21,r17,16
 400cc24:	9884d83a 	srl	r2,r19,r2
 400cc28:	b809883a 	mov	r4,r23
 400cc2c:	a80b883a 	mov	r5,r21
 400cc30:	98e4983a 	sll	r18,r19,r3
 400cc34:	142cb03a 	or	r22,r2,r16
 400cc38:	4002c880 	call	4002c88 <__umodsi3>
 400cc3c:	b809883a 	mov	r4,r23
 400cc40:	a80b883a 	mov	r5,r21
 400cc44:	1027883a 	mov	r19,r2
 400cc48:	8d3fffcc 	andi	r20,r17,65535
 400cc4c:	4002c240 	call	4002c24 <__udivsi3>
 400cc50:	a009883a 	mov	r4,r20
 400cc54:	100b883a 	mov	r5,r2
 400cc58:	102f883a 	mov	r23,r2
 400cc5c:	4002ce00 	call	4002ce0 <__mulsi3>
 400cc60:	9826943a 	slli	r19,r19,16
 400cc64:	b008d43a 	srli	r4,r22,16
 400cc68:	24c8b03a 	or	r4,r4,r19
 400cc6c:	2080062e 	bgeu	r4,r2,400cc88 <__udivdi3+0x4f8>
 400cc70:	2449883a 	add	r4,r4,r17
 400cc74:	b8ffffc4 	addi	r3,r23,-1
 400cc78:	24403c36 	bltu	r4,r17,400cd6c <__udivdi3+0x5dc>
 400cc7c:	20803b2e 	bgeu	r4,r2,400cd6c <__udivdi3+0x5dc>
 400cc80:	bdffff84 	addi	r23,r23,-2
 400cc84:	2449883a 	add	r4,r4,r17
 400cc88:	20a1c83a 	sub	r16,r4,r2
 400cc8c:	a80b883a 	mov	r5,r21
 400cc90:	8009883a 	mov	r4,r16
 400cc94:	4002c880 	call	4002c88 <__umodsi3>
 400cc98:	a80b883a 	mov	r5,r21
 400cc9c:	8009883a 	mov	r4,r16
 400cca0:	1027883a 	mov	r19,r2
 400cca4:	4002c240 	call	4002c24 <__udivsi3>
 400cca8:	a009883a 	mov	r4,r20
 400ccac:	100b883a 	mov	r5,r2
 400ccb0:	9826943a 	slli	r19,r19,16
 400ccb4:	1039883a 	mov	fp,r2
 400ccb8:	4002ce00 	call	4002ce0 <__mulsi3>
 400ccbc:	b13fffcc 	andi	r4,r22,65535
 400ccc0:	24c8b03a 	or	r4,r4,r19
 400ccc4:	2080062e 	bgeu	r4,r2,400cce0 <__udivdi3+0x550>
 400ccc8:	2449883a 	add	r4,r4,r17
 400cccc:	e0ffffc4 	addi	r3,fp,-1
 400ccd0:	24402436 	bltu	r4,r17,400cd64 <__udivdi3+0x5d4>
 400ccd4:	2080232e 	bgeu	r4,r2,400cd64 <__udivdi3+0x5d4>
 400ccd8:	e73fff84 	addi	fp,fp,-2
 400ccdc:	2449883a 	add	r4,r4,r17
 400cce0:	b82e943a 	slli	r23,r23,16
 400cce4:	20a1c83a 	sub	r16,r4,r2
 400cce8:	bf06b03a 	or	r3,r23,fp
 400ccec:	003f2806 	br	400c990 <__alt_data_end+0xfc00c990>
 400ccf0:	2021883a 	mov	r16,r4
 400ccf4:	003f5306 	br	400ca44 <__alt_data_end+0xfc00ca44>
 400ccf8:	1821883a 	mov	r16,r3
 400ccfc:	003ef406 	br	400c8d0 <__alt_data_end+0xfc00c8d0>
 400cd00:	1806943a 	slli	r3,r3,16
 400cd04:	9de6983a 	sll	r19,r19,r23
 400cd08:	e73fffcc 	andi	fp,fp,65535
 400cd0c:	1f07883a 	add	r3,r3,fp
 400cd10:	98ffbd2e 	bgeu	r19,r3,400cc08 <__alt_data_end+0xfc00cc08>
 400cd14:	90bfffc4 	addi	r2,r18,-1
 400cd18:	0007883a 	mov	r3,zero
 400cd1c:	003f4e06 	br	400ca58 <__alt_data_end+0xfc00ca58>
 400cd20:	00800604 	movi	r2,24
 400cd24:	003ef506 	br	400c8fc <__alt_data_end+0xfc00c8fc>
 400cd28:	00800604 	movi	r2,24
 400cd2c:	003f0b06 	br	400c95c <__alt_data_end+0xfc00c95c>
 400cd30:	00800604 	movi	r2,24
 400cd34:	003ead06 	br	400c7ec <__alt_data_end+0xfc00c7ec>
 400cd38:	0007883a 	mov	r3,zero
 400cd3c:	00800044 	movi	r2,1
 400cd40:	003f4506 	br	400ca58 <__alt_data_end+0xfc00ca58>
 400cd44:	80bf8e2e 	bgeu	r16,r2,400cb80 <__alt_data_end+0xfc00cb80>
 400cd48:	8c7fff84 	addi	r17,r17,-2
 400cd4c:	8721883a 	add	r16,r16,fp
 400cd50:	003f8c06 	br	400cb84 <__alt_data_end+0xfc00cb84>
 400cd54:	18bf762e 	bgeu	r3,r2,400cb30 <__alt_data_end+0xfc00cb30>
 400cd58:	ad7fff84 	addi	r21,r21,-2
 400cd5c:	1f07883a 	add	r3,r3,fp
 400cd60:	003f7406 	br	400cb34 <__alt_data_end+0xfc00cb34>
 400cd64:	1839883a 	mov	fp,r3
 400cd68:	003fdd06 	br	400cce0 <__alt_data_end+0xfc00cce0>
 400cd6c:	182f883a 	mov	r23,r3
 400cd70:	003fc506 	br	400cc88 <__alt_data_end+0xfc00cc88>
 400cd74:	b5bfff84 	addi	r22,r22,-2
 400cd78:	3c4f883a 	add	r7,r7,r17
 400cd7c:	003f1a06 	br	400c9e8 <__alt_data_end+0xfc00c9e8>
 400cd80:	b5bfff84 	addi	r22,r22,-2
 400cd84:	1c47883a 	add	r3,r3,r17
 400cd88:	003ebc06 	br	400c87c <__alt_data_end+0xfc00c87c>

0400cd8c <__umoddi3>:
 400cd8c:	defff304 	addi	sp,sp,-52
 400cd90:	df000b15 	stw	fp,44(sp)
 400cd94:	dc400415 	stw	r17,16(sp)
 400cd98:	dc000315 	stw	r16,12(sp)
 400cd9c:	dfc00c15 	stw	ra,48(sp)
 400cda0:	ddc00a15 	stw	r23,40(sp)
 400cda4:	dd800915 	stw	r22,36(sp)
 400cda8:	dd400815 	stw	r21,32(sp)
 400cdac:	dd000715 	stw	r20,28(sp)
 400cdb0:	dcc00615 	stw	r19,24(sp)
 400cdb4:	dc800515 	stw	r18,20(sp)
 400cdb8:	2021883a 	mov	r16,r4
 400cdbc:	2823883a 	mov	r17,r5
 400cdc0:	2839883a 	mov	fp,r5
 400cdc4:	3800401e 	bne	r7,zero,400cec8 <__umoddi3+0x13c>
 400cdc8:	3027883a 	mov	r19,r6
 400cdcc:	2029883a 	mov	r20,r4
 400cdd0:	2980552e 	bgeu	r5,r6,400cf28 <__umoddi3+0x19c>
 400cdd4:	00bfffd4 	movui	r2,65535
 400cdd8:	1180a236 	bltu	r2,r6,400d064 <__umoddi3+0x2d8>
 400cddc:	01003fc4 	movi	r4,255
 400cde0:	2189803a 	cmpltu	r4,r4,r6
 400cde4:	200890fa 	slli	r4,r4,3
 400cde8:	3104d83a 	srl	r2,r6,r4
 400cdec:	00c10074 	movhi	r3,1025
 400cdf0:	18cace04 	addi	r3,r3,11064
 400cdf4:	1885883a 	add	r2,r3,r2
 400cdf8:	10c00003 	ldbu	r3,0(r2)
 400cdfc:	00800804 	movi	r2,32
 400ce00:	1909883a 	add	r4,r3,r4
 400ce04:	1125c83a 	sub	r18,r2,r4
 400ce08:	90000526 	beq	r18,zero,400ce20 <__umoddi3+0x94>
 400ce0c:	8ca2983a 	sll	r17,r17,r18
 400ce10:	8108d83a 	srl	r4,r16,r4
 400ce14:	34a6983a 	sll	r19,r6,r18
 400ce18:	84a8983a 	sll	r20,r16,r18
 400ce1c:	2478b03a 	or	fp,r4,r17
 400ce20:	982cd43a 	srli	r22,r19,16
 400ce24:	e009883a 	mov	r4,fp
 400ce28:	9dffffcc 	andi	r23,r19,65535
 400ce2c:	b00b883a 	mov	r5,r22
 400ce30:	4002c880 	call	4002c88 <__umodsi3>
 400ce34:	b00b883a 	mov	r5,r22
 400ce38:	e009883a 	mov	r4,fp
 400ce3c:	102b883a 	mov	r21,r2
 400ce40:	4002c240 	call	4002c24 <__udivsi3>
 400ce44:	100b883a 	mov	r5,r2
 400ce48:	b809883a 	mov	r4,r23
 400ce4c:	4002ce00 	call	4002ce0 <__mulsi3>
 400ce50:	a82a943a 	slli	r21,r21,16
 400ce54:	a006d43a 	srli	r3,r20,16
 400ce58:	1d46b03a 	or	r3,r3,r21
 400ce5c:	1880032e 	bgeu	r3,r2,400ce6c <__umoddi3+0xe0>
 400ce60:	1cc7883a 	add	r3,r3,r19
 400ce64:	1cc00136 	bltu	r3,r19,400ce6c <__umoddi3+0xe0>
 400ce68:	18813136 	bltu	r3,r2,400d330 <__umoddi3+0x5a4>
 400ce6c:	18a1c83a 	sub	r16,r3,r2
 400ce70:	b00b883a 	mov	r5,r22
 400ce74:	8009883a 	mov	r4,r16
 400ce78:	4002c880 	call	4002c88 <__umodsi3>
 400ce7c:	b00b883a 	mov	r5,r22
 400ce80:	8009883a 	mov	r4,r16
 400ce84:	1023883a 	mov	r17,r2
 400ce88:	4002c240 	call	4002c24 <__udivsi3>
 400ce8c:	100b883a 	mov	r5,r2
 400ce90:	b809883a 	mov	r4,r23
 400ce94:	8822943a 	slli	r17,r17,16
 400ce98:	4002ce00 	call	4002ce0 <__mulsi3>
 400ce9c:	a0ffffcc 	andi	r3,r20,65535
 400cea0:	1c46b03a 	or	r3,r3,r17
 400cea4:	1880042e 	bgeu	r3,r2,400ceb8 <__umoddi3+0x12c>
 400cea8:	1cc7883a 	add	r3,r3,r19
 400ceac:	1cc00236 	bltu	r3,r19,400ceb8 <__umoddi3+0x12c>
 400ceb0:	1880012e 	bgeu	r3,r2,400ceb8 <__umoddi3+0x12c>
 400ceb4:	1cc7883a 	add	r3,r3,r19
 400ceb8:	1885c83a 	sub	r2,r3,r2
 400cebc:	1484d83a 	srl	r2,r2,r18
 400cec0:	0007883a 	mov	r3,zero
 400cec4:	00005306 	br	400d014 <__umoddi3+0x288>
 400cec8:	29c05036 	bltu	r5,r7,400d00c <__umoddi3+0x280>
 400cecc:	00bfffd4 	movui	r2,65535
 400ced0:	11c05c2e 	bgeu	r2,r7,400d044 <__umoddi3+0x2b8>
 400ced4:	00804034 	movhi	r2,256
 400ced8:	10bfffc4 	addi	r2,r2,-1
 400cedc:	11c10636 	bltu	r2,r7,400d2f8 <__umoddi3+0x56c>
 400cee0:	01000404 	movi	r4,16
 400cee4:	3904d83a 	srl	r2,r7,r4
 400cee8:	00c10074 	movhi	r3,1025
 400ceec:	18cace04 	addi	r3,r3,11064
 400cef0:	1885883a 	add	r2,r3,r2
 400cef4:	14c00003 	ldbu	r19,0(r2)
 400cef8:	00c00804 	movi	r3,32
 400cefc:	9927883a 	add	r19,r19,r4
 400cf00:	1ce9c83a 	sub	r20,r3,r19
 400cf04:	a0005c1e 	bne	r20,zero,400d078 <__umoddi3+0x2ec>
 400cf08:	3c400136 	bltu	r7,r17,400cf10 <__umoddi3+0x184>
 400cf0c:	81810a36 	bltu	r16,r6,400d338 <__umoddi3+0x5ac>
 400cf10:	8185c83a 	sub	r2,r16,r6
 400cf14:	89e3c83a 	sub	r17,r17,r7
 400cf18:	8089803a 	cmpltu	r4,r16,r2
 400cf1c:	8939c83a 	sub	fp,r17,r4
 400cf20:	e007883a 	mov	r3,fp
 400cf24:	00003b06 	br	400d014 <__umoddi3+0x288>
 400cf28:	3000041e 	bne	r6,zero,400cf3c <__umoddi3+0x1b0>
 400cf2c:	000b883a 	mov	r5,zero
 400cf30:	01000044 	movi	r4,1
 400cf34:	4002c240 	call	4002c24 <__udivsi3>
 400cf38:	1027883a 	mov	r19,r2
 400cf3c:	00bfffd4 	movui	r2,65535
 400cf40:	14c0442e 	bgeu	r2,r19,400d054 <__umoddi3+0x2c8>
 400cf44:	00804034 	movhi	r2,256
 400cf48:	10bfffc4 	addi	r2,r2,-1
 400cf4c:	14c0ec36 	bltu	r2,r19,400d300 <__umoddi3+0x574>
 400cf50:	00800404 	movi	r2,16
 400cf54:	9886d83a 	srl	r3,r19,r2
 400cf58:	01010074 	movhi	r4,1025
 400cf5c:	210ace04 	addi	r4,r4,11064
 400cf60:	20c7883a 	add	r3,r4,r3
 400cf64:	18c00003 	ldbu	r3,0(r3)
 400cf68:	1887883a 	add	r3,r3,r2
 400cf6c:	00800804 	movi	r2,32
 400cf70:	10e5c83a 	sub	r18,r2,r3
 400cf74:	9000ab1e 	bne	r18,zero,400d224 <__umoddi3+0x498>
 400cf78:	982cd43a 	srli	r22,r19,16
 400cf7c:	8ce3c83a 	sub	r17,r17,r19
 400cf80:	9dffffcc 	andi	r23,r19,65535
 400cf84:	b00b883a 	mov	r5,r22
 400cf88:	8809883a 	mov	r4,r17
 400cf8c:	4002c880 	call	4002c88 <__umodsi3>
 400cf90:	b00b883a 	mov	r5,r22
 400cf94:	8809883a 	mov	r4,r17
 400cf98:	102b883a 	mov	r21,r2
 400cf9c:	4002c240 	call	4002c24 <__udivsi3>
 400cfa0:	b80b883a 	mov	r5,r23
 400cfa4:	1009883a 	mov	r4,r2
 400cfa8:	4002ce00 	call	4002ce0 <__mulsi3>
 400cfac:	a82a943a 	slli	r21,r21,16
 400cfb0:	a006d43a 	srli	r3,r20,16
 400cfb4:	1d46b03a 	or	r3,r3,r21
 400cfb8:	1880042e 	bgeu	r3,r2,400cfcc <__umoddi3+0x240>
 400cfbc:	1cc7883a 	add	r3,r3,r19
 400cfc0:	1cc00236 	bltu	r3,r19,400cfcc <__umoddi3+0x240>
 400cfc4:	1880012e 	bgeu	r3,r2,400cfcc <__umoddi3+0x240>
 400cfc8:	1cc7883a 	add	r3,r3,r19
 400cfcc:	18a1c83a 	sub	r16,r3,r2
 400cfd0:	b00b883a 	mov	r5,r22
 400cfd4:	8009883a 	mov	r4,r16
 400cfd8:	4002c880 	call	4002c88 <__umodsi3>
 400cfdc:	1023883a 	mov	r17,r2
 400cfe0:	b00b883a 	mov	r5,r22
 400cfe4:	8009883a 	mov	r4,r16
 400cfe8:	4002c240 	call	4002c24 <__udivsi3>
 400cfec:	8822943a 	slli	r17,r17,16
 400cff0:	b80b883a 	mov	r5,r23
 400cff4:	1009883a 	mov	r4,r2
 400cff8:	4002ce00 	call	4002ce0 <__mulsi3>
 400cffc:	a53fffcc 	andi	r20,r20,65535
 400d000:	a446b03a 	or	r3,r20,r17
 400d004:	18bfac2e 	bgeu	r3,r2,400ceb8 <__alt_data_end+0xfc00ceb8>
 400d008:	003fa706 	br	400cea8 <__alt_data_end+0xfc00cea8>
 400d00c:	2005883a 	mov	r2,r4
 400d010:	2807883a 	mov	r3,r5
 400d014:	dfc00c17 	ldw	ra,48(sp)
 400d018:	df000b17 	ldw	fp,44(sp)
 400d01c:	ddc00a17 	ldw	r23,40(sp)
 400d020:	dd800917 	ldw	r22,36(sp)
 400d024:	dd400817 	ldw	r21,32(sp)
 400d028:	dd000717 	ldw	r20,28(sp)
 400d02c:	dcc00617 	ldw	r19,24(sp)
 400d030:	dc800517 	ldw	r18,20(sp)
 400d034:	dc400417 	ldw	r17,16(sp)
 400d038:	dc000317 	ldw	r16,12(sp)
 400d03c:	dec00d04 	addi	sp,sp,52
 400d040:	f800283a 	ret
 400d044:	04c03fc4 	movi	r19,255
 400d048:	99c9803a 	cmpltu	r4,r19,r7
 400d04c:	200890fa 	slli	r4,r4,3
 400d050:	003fa406 	br	400cee4 <__alt_data_end+0xfc00cee4>
 400d054:	00803fc4 	movi	r2,255
 400d058:	14c5803a 	cmpltu	r2,r2,r19
 400d05c:	100490fa 	slli	r2,r2,3
 400d060:	003fbc06 	br	400cf54 <__alt_data_end+0xfc00cf54>
 400d064:	00804034 	movhi	r2,256
 400d068:	10bfffc4 	addi	r2,r2,-1
 400d06c:	1180a636 	bltu	r2,r6,400d308 <__umoddi3+0x57c>
 400d070:	01000404 	movi	r4,16
 400d074:	003f5c06 	br	400cde8 <__alt_data_end+0xfc00cde8>
 400d078:	3d0e983a 	sll	r7,r7,r20
 400d07c:	34ead83a 	srl	r21,r6,r19
 400d080:	8cc6d83a 	srl	r3,r17,r19
 400d084:	8d10983a 	sll	r8,r17,r20
 400d088:	3d6ab03a 	or	r21,r7,r21
 400d08c:	a82cd43a 	srli	r22,r21,16
 400d090:	84e2d83a 	srl	r17,r16,r19
 400d094:	1809883a 	mov	r4,r3
 400d098:	b00b883a 	mov	r5,r22
 400d09c:	8a22b03a 	or	r17,r17,r8
 400d0a0:	3524983a 	sll	r18,r6,r20
 400d0a4:	dc400015 	stw	r17,0(sp)
 400d0a8:	d8c00115 	stw	r3,4(sp)
 400d0ac:	4002c880 	call	4002c88 <__umodsi3>
 400d0b0:	d8c00117 	ldw	r3,4(sp)
 400d0b4:	b00b883a 	mov	r5,r22
 400d0b8:	1039883a 	mov	fp,r2
 400d0bc:	1809883a 	mov	r4,r3
 400d0c0:	4002c240 	call	4002c24 <__udivsi3>
 400d0c4:	adffffcc 	andi	r23,r21,65535
 400d0c8:	100b883a 	mov	r5,r2
 400d0cc:	b809883a 	mov	r4,r23
 400d0d0:	1023883a 	mov	r17,r2
 400d0d4:	4002ce00 	call	4002ce0 <__mulsi3>
 400d0d8:	d9400017 	ldw	r5,0(sp)
 400d0dc:	e008943a 	slli	r4,fp,16
 400d0e0:	8520983a 	sll	r16,r16,r20
 400d0e4:	2806d43a 	srli	r3,r5,16
 400d0e8:	1906b03a 	or	r3,r3,r4
 400d0ec:	1880042e 	bgeu	r3,r2,400d100 <__umoddi3+0x374>
 400d0f0:	1d47883a 	add	r3,r3,r21
 400d0f4:	893fffc4 	addi	r4,r17,-1
 400d0f8:	1d40892e 	bgeu	r3,r21,400d320 <__umoddi3+0x594>
 400d0fc:	2023883a 	mov	r17,r4
 400d100:	18b9c83a 	sub	fp,r3,r2
 400d104:	b00b883a 	mov	r5,r22
 400d108:	e009883a 	mov	r4,fp
 400d10c:	4002c880 	call	4002c88 <__umodsi3>
 400d110:	b00b883a 	mov	r5,r22
 400d114:	e009883a 	mov	r4,fp
 400d118:	d8800215 	stw	r2,8(sp)
 400d11c:	4002c240 	call	4002c24 <__udivsi3>
 400d120:	100b883a 	mov	r5,r2
 400d124:	b809883a 	mov	r4,r23
 400d128:	102d883a 	mov	r22,r2
 400d12c:	4002ce00 	call	4002ce0 <__mulsi3>
 400d130:	d9800217 	ldw	r6,8(sp)
 400d134:	d8c00017 	ldw	r3,0(sp)
 400d138:	300c943a 	slli	r6,r6,16
 400d13c:	1a3fffcc 	andi	r8,r3,65535
 400d140:	4190b03a 	or	r8,r8,r6
 400d144:	4080042e 	bgeu	r8,r2,400d158 <__umoddi3+0x3cc>
 400d148:	4551883a 	add	r8,r8,r21
 400d14c:	b0ffffc4 	addi	r3,r22,-1
 400d150:	45406f2e 	bgeu	r8,r21,400d310 <__umoddi3+0x584>
 400d154:	182d883a 	mov	r22,r3
 400d158:	880e943a 	slli	r7,r17,16
 400d15c:	9006d43a 	srli	r3,r18,16
 400d160:	91bfffcc 	andi	r6,r18,65535
 400d164:	3dacb03a 	or	r22,r7,r22
 400d168:	b02ed43a 	srli	r23,r22,16
 400d16c:	b5bfffcc 	andi	r22,r22,65535
 400d170:	300b883a 	mov	r5,r6
 400d174:	b009883a 	mov	r4,r22
 400d178:	40a3c83a 	sub	r17,r8,r2
 400d17c:	d8c00115 	stw	r3,4(sp)
 400d180:	d9800215 	stw	r6,8(sp)
 400d184:	4002ce00 	call	4002ce0 <__mulsi3>
 400d188:	d9800217 	ldw	r6,8(sp)
 400d18c:	b809883a 	mov	r4,r23
 400d190:	1039883a 	mov	fp,r2
 400d194:	300b883a 	mov	r5,r6
 400d198:	4002ce00 	call	4002ce0 <__mulsi3>
 400d19c:	d8c00117 	ldw	r3,4(sp)
 400d1a0:	b809883a 	mov	r4,r23
 400d1a4:	d8800215 	stw	r2,8(sp)
 400d1a8:	180b883a 	mov	r5,r3
 400d1ac:	4002ce00 	call	4002ce0 <__mulsi3>
 400d1b0:	d8c00117 	ldw	r3,4(sp)
 400d1b4:	b009883a 	mov	r4,r22
 400d1b8:	102f883a 	mov	r23,r2
 400d1bc:	180b883a 	mov	r5,r3
 400d1c0:	4002ce00 	call	4002ce0 <__mulsi3>
 400d1c4:	d9800217 	ldw	r6,8(sp)
 400d1c8:	e006d43a 	srli	r3,fp,16
 400d1cc:	1185883a 	add	r2,r2,r6
 400d1d0:	1885883a 	add	r2,r3,r2
 400d1d4:	1180022e 	bgeu	r2,r6,400d1e0 <__umoddi3+0x454>
 400d1d8:	00c00074 	movhi	r3,1
 400d1dc:	b8ef883a 	add	r23,r23,r3
 400d1e0:	1006d43a 	srli	r3,r2,16
 400d1e4:	1004943a 	slli	r2,r2,16
 400d1e8:	e73fffcc 	andi	fp,fp,65535
 400d1ec:	1dc7883a 	add	r3,r3,r23
 400d1f0:	1739883a 	add	fp,r2,fp
 400d1f4:	88c03a36 	bltu	r17,r3,400d2e0 <__umoddi3+0x554>
 400d1f8:	88c05126 	beq	r17,r3,400d340 <__umoddi3+0x5b4>
 400d1fc:	88c9c83a 	sub	r4,r17,r3
 400d200:	e00f883a 	mov	r7,fp
 400d204:	81cfc83a 	sub	r7,r16,r7
 400d208:	81c7803a 	cmpltu	r3,r16,r7
 400d20c:	20c7c83a 	sub	r3,r4,r3
 400d210:	1cc4983a 	sll	r2,r3,r19
 400d214:	3d0ed83a 	srl	r7,r7,r20
 400d218:	1d06d83a 	srl	r3,r3,r20
 400d21c:	11c4b03a 	or	r2,r2,r7
 400d220:	003f7c06 	br	400d014 <__alt_data_end+0xfc00d014>
 400d224:	9ca6983a 	sll	r19,r19,r18
 400d228:	88f8d83a 	srl	fp,r17,r3
 400d22c:	80c4d83a 	srl	r2,r16,r3
 400d230:	982cd43a 	srli	r22,r19,16
 400d234:	8ca2983a 	sll	r17,r17,r18
 400d238:	e009883a 	mov	r4,fp
 400d23c:	b00b883a 	mov	r5,r22
 400d240:	146ab03a 	or	r21,r2,r17
 400d244:	4002c880 	call	4002c88 <__umodsi3>
 400d248:	b00b883a 	mov	r5,r22
 400d24c:	e009883a 	mov	r4,fp
 400d250:	1029883a 	mov	r20,r2
 400d254:	9dffffcc 	andi	r23,r19,65535
 400d258:	4002c240 	call	4002c24 <__udivsi3>
 400d25c:	b809883a 	mov	r4,r23
 400d260:	100b883a 	mov	r5,r2
 400d264:	4002ce00 	call	4002ce0 <__mulsi3>
 400d268:	a008943a 	slli	r4,r20,16
 400d26c:	a806d43a 	srli	r3,r21,16
 400d270:	84a8983a 	sll	r20,r16,r18
 400d274:	1906b03a 	or	r3,r3,r4
 400d278:	1880042e 	bgeu	r3,r2,400d28c <__umoddi3+0x500>
 400d27c:	1cc7883a 	add	r3,r3,r19
 400d280:	1cc00236 	bltu	r3,r19,400d28c <__umoddi3+0x500>
 400d284:	1880012e 	bgeu	r3,r2,400d28c <__umoddi3+0x500>
 400d288:	1cc7883a 	add	r3,r3,r19
 400d28c:	18a3c83a 	sub	r17,r3,r2
 400d290:	b00b883a 	mov	r5,r22
 400d294:	8809883a 	mov	r4,r17
 400d298:	4002c880 	call	4002c88 <__umodsi3>
 400d29c:	b00b883a 	mov	r5,r22
 400d2a0:	8809883a 	mov	r4,r17
 400d2a4:	1021883a 	mov	r16,r2
 400d2a8:	4002c240 	call	4002c24 <__udivsi3>
 400d2ac:	100b883a 	mov	r5,r2
 400d2b0:	b809883a 	mov	r4,r23
 400d2b4:	8020943a 	slli	r16,r16,16
 400d2b8:	4002ce00 	call	4002ce0 <__mulsi3>
 400d2bc:	a8ffffcc 	andi	r3,r21,65535
 400d2c0:	1c06b03a 	or	r3,r3,r16
 400d2c4:	1880042e 	bgeu	r3,r2,400d2d8 <__umoddi3+0x54c>
 400d2c8:	1cc7883a 	add	r3,r3,r19
 400d2cc:	1cc00236 	bltu	r3,r19,400d2d8 <__umoddi3+0x54c>
 400d2d0:	1880012e 	bgeu	r3,r2,400d2d8 <__umoddi3+0x54c>
 400d2d4:	1cc7883a 	add	r3,r3,r19
 400d2d8:	18a3c83a 	sub	r17,r3,r2
 400d2dc:	003f2906 	br	400cf84 <__alt_data_end+0xfc00cf84>
 400d2e0:	e48fc83a 	sub	r7,fp,r18
 400d2e4:	1d49c83a 	sub	r4,r3,r21
 400d2e8:	e1f9803a 	cmpltu	fp,fp,r7
 400d2ec:	2739c83a 	sub	fp,r4,fp
 400d2f0:	8f09c83a 	sub	r4,r17,fp
 400d2f4:	003fc306 	br	400d204 <__alt_data_end+0xfc00d204>
 400d2f8:	01000604 	movi	r4,24
 400d2fc:	003ef906 	br	400cee4 <__alt_data_end+0xfc00cee4>
 400d300:	00800604 	movi	r2,24
 400d304:	003f1306 	br	400cf54 <__alt_data_end+0xfc00cf54>
 400d308:	01000604 	movi	r4,24
 400d30c:	003eb606 	br	400cde8 <__alt_data_end+0xfc00cde8>
 400d310:	40bf902e 	bgeu	r8,r2,400d154 <__alt_data_end+0xfc00d154>
 400d314:	b5bfff84 	addi	r22,r22,-2
 400d318:	4551883a 	add	r8,r8,r21
 400d31c:	003f8e06 	br	400d158 <__alt_data_end+0xfc00d158>
 400d320:	18bf762e 	bgeu	r3,r2,400d0fc <__alt_data_end+0xfc00d0fc>
 400d324:	8c7fff84 	addi	r17,r17,-2
 400d328:	1d47883a 	add	r3,r3,r21
 400d32c:	003f7406 	br	400d100 <__alt_data_end+0xfc00d100>
 400d330:	1cc7883a 	add	r3,r3,r19
 400d334:	003ecd06 	br	400ce6c <__alt_data_end+0xfc00ce6c>
 400d338:	8005883a 	mov	r2,r16
 400d33c:	003ef806 	br	400cf20 <__alt_data_end+0xfc00cf20>
 400d340:	873fe736 	bltu	r16,fp,400d2e0 <__alt_data_end+0xfc00d2e0>
 400d344:	e00f883a 	mov	r7,fp
 400d348:	0009883a 	mov	r4,zero
 400d34c:	003fad06 	br	400d204 <__alt_data_end+0xfc00d204>

0400d350 <__adddf3>:
 400d350:	02c00434 	movhi	r11,16
 400d354:	5affffc4 	addi	r11,r11,-1
 400d358:	2806d7fa 	srli	r3,r5,31
 400d35c:	2ad4703a 	and	r10,r5,r11
 400d360:	3ad2703a 	and	r9,r7,r11
 400d364:	3804d53a 	srli	r2,r7,20
 400d368:	3018d77a 	srli	r12,r6,29
 400d36c:	280ad53a 	srli	r5,r5,20
 400d370:	501490fa 	slli	r10,r10,3
 400d374:	2010d77a 	srli	r8,r4,29
 400d378:	481290fa 	slli	r9,r9,3
 400d37c:	380ed7fa 	srli	r7,r7,31
 400d380:	defffb04 	addi	sp,sp,-20
 400d384:	dc800215 	stw	r18,8(sp)
 400d388:	dc400115 	stw	r17,4(sp)
 400d38c:	dc000015 	stw	r16,0(sp)
 400d390:	dfc00415 	stw	ra,16(sp)
 400d394:	dcc00315 	stw	r19,12(sp)
 400d398:	1c803fcc 	andi	r18,r3,255
 400d39c:	2c01ffcc 	andi	r16,r5,2047
 400d3a0:	5210b03a 	or	r8,r10,r8
 400d3a4:	202290fa 	slli	r17,r4,3
 400d3a8:	1081ffcc 	andi	r2,r2,2047
 400d3ac:	4b12b03a 	or	r9,r9,r12
 400d3b0:	300c90fa 	slli	r6,r6,3
 400d3b4:	91c07526 	beq	r18,r7,400d58c <__adddf3+0x23c>
 400d3b8:	8087c83a 	sub	r3,r16,r2
 400d3bc:	00c0ab0e 	bge	zero,r3,400d66c <__adddf3+0x31c>
 400d3c0:	10002a1e 	bne	r2,zero,400d46c <__adddf3+0x11c>
 400d3c4:	4984b03a 	or	r2,r9,r6
 400d3c8:	1000961e 	bne	r2,zero,400d624 <__adddf3+0x2d4>
 400d3cc:	888001cc 	andi	r2,r17,7
 400d3d0:	10000726 	beq	r2,zero,400d3f0 <__adddf3+0xa0>
 400d3d4:	888003cc 	andi	r2,r17,15
 400d3d8:	00c00104 	movi	r3,4
 400d3dc:	10c00426 	beq	r2,r3,400d3f0 <__adddf3+0xa0>
 400d3e0:	88c7883a 	add	r3,r17,r3
 400d3e4:	1c63803a 	cmpltu	r17,r3,r17
 400d3e8:	4451883a 	add	r8,r8,r17
 400d3ec:	1823883a 	mov	r17,r3
 400d3f0:	4080202c 	andhi	r2,r8,128
 400d3f4:	10005926 	beq	r2,zero,400d55c <__adddf3+0x20c>
 400d3f8:	84000044 	addi	r16,r16,1
 400d3fc:	0081ffc4 	movi	r2,2047
 400d400:	8080ba26 	beq	r16,r2,400d6ec <__adddf3+0x39c>
 400d404:	00bfe034 	movhi	r2,65408
 400d408:	10bfffc4 	addi	r2,r2,-1
 400d40c:	4090703a 	and	r8,r8,r2
 400d410:	4004977a 	slli	r2,r8,29
 400d414:	4010927a 	slli	r8,r8,9
 400d418:	8822d0fa 	srli	r17,r17,3
 400d41c:	8401ffcc 	andi	r16,r16,2047
 400d420:	4010d33a 	srli	r8,r8,12
 400d424:	9007883a 	mov	r3,r18
 400d428:	1444b03a 	or	r2,r2,r17
 400d42c:	8401ffcc 	andi	r16,r16,2047
 400d430:	8020953a 	slli	r16,r16,20
 400d434:	18c03fcc 	andi	r3,r3,255
 400d438:	01000434 	movhi	r4,16
 400d43c:	213fffc4 	addi	r4,r4,-1
 400d440:	180697fa 	slli	r3,r3,31
 400d444:	4110703a 	and	r8,r8,r4
 400d448:	4410b03a 	or	r8,r8,r16
 400d44c:	40c6b03a 	or	r3,r8,r3
 400d450:	dfc00417 	ldw	ra,16(sp)
 400d454:	dcc00317 	ldw	r19,12(sp)
 400d458:	dc800217 	ldw	r18,8(sp)
 400d45c:	dc400117 	ldw	r17,4(sp)
 400d460:	dc000017 	ldw	r16,0(sp)
 400d464:	dec00504 	addi	sp,sp,20
 400d468:	f800283a 	ret
 400d46c:	0081ffc4 	movi	r2,2047
 400d470:	80bfd626 	beq	r16,r2,400d3cc <__alt_data_end+0xfc00d3cc>
 400d474:	4a402034 	orhi	r9,r9,128
 400d478:	00800e04 	movi	r2,56
 400d47c:	10c09f16 	blt	r2,r3,400d6fc <__adddf3+0x3ac>
 400d480:	008007c4 	movi	r2,31
 400d484:	10c0c216 	blt	r2,r3,400d790 <__adddf3+0x440>
 400d488:	00800804 	movi	r2,32
 400d48c:	10c5c83a 	sub	r2,r2,r3
 400d490:	488a983a 	sll	r5,r9,r2
 400d494:	30c8d83a 	srl	r4,r6,r3
 400d498:	3084983a 	sll	r2,r6,r2
 400d49c:	48c6d83a 	srl	r3,r9,r3
 400d4a0:	290cb03a 	or	r6,r5,r4
 400d4a4:	1004c03a 	cmpne	r2,r2,zero
 400d4a8:	308cb03a 	or	r6,r6,r2
 400d4ac:	898dc83a 	sub	r6,r17,r6
 400d4b0:	89a3803a 	cmpltu	r17,r17,r6
 400d4b4:	40d1c83a 	sub	r8,r8,r3
 400d4b8:	4451c83a 	sub	r8,r8,r17
 400d4bc:	3023883a 	mov	r17,r6
 400d4c0:	4080202c 	andhi	r2,r8,128
 400d4c4:	10002326 	beq	r2,zero,400d554 <__adddf3+0x204>
 400d4c8:	04c02034 	movhi	r19,128
 400d4cc:	9cffffc4 	addi	r19,r19,-1
 400d4d0:	44e6703a 	and	r19,r8,r19
 400d4d4:	98007626 	beq	r19,zero,400d6b0 <__adddf3+0x360>
 400d4d8:	9809883a 	mov	r4,r19
 400d4dc:	400fb900 	call	400fb90 <__clzsi2>
 400d4e0:	10fffe04 	addi	r3,r2,-8
 400d4e4:	010007c4 	movi	r4,31
 400d4e8:	20c07716 	blt	r4,r3,400d6c8 <__adddf3+0x378>
 400d4ec:	00800804 	movi	r2,32
 400d4f0:	10c5c83a 	sub	r2,r2,r3
 400d4f4:	8884d83a 	srl	r2,r17,r2
 400d4f8:	98d0983a 	sll	r8,r19,r3
 400d4fc:	88e2983a 	sll	r17,r17,r3
 400d500:	1204b03a 	or	r2,r2,r8
 400d504:	1c007416 	blt	r3,r16,400d6d8 <__adddf3+0x388>
 400d508:	1c21c83a 	sub	r16,r3,r16
 400d50c:	82000044 	addi	r8,r16,1
 400d510:	00c007c4 	movi	r3,31
 400d514:	1a009116 	blt	r3,r8,400d75c <__adddf3+0x40c>
 400d518:	00c00804 	movi	r3,32
 400d51c:	1a07c83a 	sub	r3,r3,r8
 400d520:	8a08d83a 	srl	r4,r17,r8
 400d524:	88e2983a 	sll	r17,r17,r3
 400d528:	10c6983a 	sll	r3,r2,r3
 400d52c:	1210d83a 	srl	r8,r2,r8
 400d530:	8804c03a 	cmpne	r2,r17,zero
 400d534:	1906b03a 	or	r3,r3,r4
 400d538:	18a2b03a 	or	r17,r3,r2
 400d53c:	0021883a 	mov	r16,zero
 400d540:	003fa206 	br	400d3cc <__alt_data_end+0xfc00d3cc>
 400d544:	1890b03a 	or	r8,r3,r2
 400d548:	40017d26 	beq	r8,zero,400db40 <__adddf3+0x7f0>
 400d54c:	1011883a 	mov	r8,r2
 400d550:	1823883a 	mov	r17,r3
 400d554:	888001cc 	andi	r2,r17,7
 400d558:	103f9e1e 	bne	r2,zero,400d3d4 <__alt_data_end+0xfc00d3d4>
 400d55c:	4004977a 	slli	r2,r8,29
 400d560:	8822d0fa 	srli	r17,r17,3
 400d564:	4010d0fa 	srli	r8,r8,3
 400d568:	9007883a 	mov	r3,r18
 400d56c:	1444b03a 	or	r2,r2,r17
 400d570:	0101ffc4 	movi	r4,2047
 400d574:	81002426 	beq	r16,r4,400d608 <__adddf3+0x2b8>
 400d578:	8120703a 	and	r16,r16,r4
 400d57c:	01000434 	movhi	r4,16
 400d580:	213fffc4 	addi	r4,r4,-1
 400d584:	4110703a 	and	r8,r8,r4
 400d588:	003fa806 	br	400d42c <__alt_data_end+0xfc00d42c>
 400d58c:	8089c83a 	sub	r4,r16,r2
 400d590:	01005e0e 	bge	zero,r4,400d70c <__adddf3+0x3bc>
 400d594:	10002b26 	beq	r2,zero,400d644 <__adddf3+0x2f4>
 400d598:	0081ffc4 	movi	r2,2047
 400d59c:	80bf8b26 	beq	r16,r2,400d3cc <__alt_data_end+0xfc00d3cc>
 400d5a0:	4a402034 	orhi	r9,r9,128
 400d5a4:	00800e04 	movi	r2,56
 400d5a8:	1100a40e 	bge	r2,r4,400d83c <__adddf3+0x4ec>
 400d5ac:	498cb03a 	or	r6,r9,r6
 400d5b0:	300ac03a 	cmpne	r5,r6,zero
 400d5b4:	0013883a 	mov	r9,zero
 400d5b8:	2c4b883a 	add	r5,r5,r17
 400d5bc:	2c63803a 	cmpltu	r17,r5,r17
 400d5c0:	4a11883a 	add	r8,r9,r8
 400d5c4:	8a11883a 	add	r8,r17,r8
 400d5c8:	2823883a 	mov	r17,r5
 400d5cc:	4080202c 	andhi	r2,r8,128
 400d5d0:	103fe026 	beq	r2,zero,400d554 <__alt_data_end+0xfc00d554>
 400d5d4:	84000044 	addi	r16,r16,1
 400d5d8:	0081ffc4 	movi	r2,2047
 400d5dc:	8080d226 	beq	r16,r2,400d928 <__adddf3+0x5d8>
 400d5e0:	00bfe034 	movhi	r2,65408
 400d5e4:	10bfffc4 	addi	r2,r2,-1
 400d5e8:	4090703a 	and	r8,r8,r2
 400d5ec:	880ad07a 	srli	r5,r17,1
 400d5f0:	400897fa 	slli	r4,r8,31
 400d5f4:	88c0004c 	andi	r3,r17,1
 400d5f8:	28e2b03a 	or	r17,r5,r3
 400d5fc:	4010d07a 	srli	r8,r8,1
 400d600:	2462b03a 	or	r17,r4,r17
 400d604:	003f7106 	br	400d3cc <__alt_data_end+0xfc00d3cc>
 400d608:	4088b03a 	or	r4,r8,r2
 400d60c:	20014526 	beq	r4,zero,400db24 <__adddf3+0x7d4>
 400d610:	01000434 	movhi	r4,16
 400d614:	42000234 	orhi	r8,r8,8
 400d618:	213fffc4 	addi	r4,r4,-1
 400d61c:	4110703a 	and	r8,r8,r4
 400d620:	003f8206 	br	400d42c <__alt_data_end+0xfc00d42c>
 400d624:	18ffffc4 	addi	r3,r3,-1
 400d628:	1800491e 	bne	r3,zero,400d750 <__adddf3+0x400>
 400d62c:	898bc83a 	sub	r5,r17,r6
 400d630:	8963803a 	cmpltu	r17,r17,r5
 400d634:	4251c83a 	sub	r8,r8,r9
 400d638:	4451c83a 	sub	r8,r8,r17
 400d63c:	2823883a 	mov	r17,r5
 400d640:	003f9f06 	br	400d4c0 <__alt_data_end+0xfc00d4c0>
 400d644:	4984b03a 	or	r2,r9,r6
 400d648:	103f6026 	beq	r2,zero,400d3cc <__alt_data_end+0xfc00d3cc>
 400d64c:	213fffc4 	addi	r4,r4,-1
 400d650:	2000931e 	bne	r4,zero,400d8a0 <__adddf3+0x550>
 400d654:	898d883a 	add	r6,r17,r6
 400d658:	3463803a 	cmpltu	r17,r6,r17
 400d65c:	4251883a 	add	r8,r8,r9
 400d660:	8a11883a 	add	r8,r17,r8
 400d664:	3023883a 	mov	r17,r6
 400d668:	003fd806 	br	400d5cc <__alt_data_end+0xfc00d5cc>
 400d66c:	1800541e 	bne	r3,zero,400d7c0 <__adddf3+0x470>
 400d670:	80800044 	addi	r2,r16,1
 400d674:	1081ffcc 	andi	r2,r2,2047
 400d678:	00c00044 	movi	r3,1
 400d67c:	1880a00e 	bge	r3,r2,400d900 <__adddf3+0x5b0>
 400d680:	8989c83a 	sub	r4,r17,r6
 400d684:	8905803a 	cmpltu	r2,r17,r4
 400d688:	4267c83a 	sub	r19,r8,r9
 400d68c:	98a7c83a 	sub	r19,r19,r2
 400d690:	9880202c 	andhi	r2,r19,128
 400d694:	10006326 	beq	r2,zero,400d824 <__adddf3+0x4d4>
 400d698:	3463c83a 	sub	r17,r6,r17
 400d69c:	4a07c83a 	sub	r3,r9,r8
 400d6a0:	344d803a 	cmpltu	r6,r6,r17
 400d6a4:	19a7c83a 	sub	r19,r3,r6
 400d6a8:	3825883a 	mov	r18,r7
 400d6ac:	983f8a1e 	bne	r19,zero,400d4d8 <__alt_data_end+0xfc00d4d8>
 400d6b0:	8809883a 	mov	r4,r17
 400d6b4:	400fb900 	call	400fb90 <__clzsi2>
 400d6b8:	10800804 	addi	r2,r2,32
 400d6bc:	10fffe04 	addi	r3,r2,-8
 400d6c0:	010007c4 	movi	r4,31
 400d6c4:	20ff890e 	bge	r4,r3,400d4ec <__alt_data_end+0xfc00d4ec>
 400d6c8:	10bff604 	addi	r2,r2,-40
 400d6cc:	8884983a 	sll	r2,r17,r2
 400d6d0:	0023883a 	mov	r17,zero
 400d6d4:	1c3f8c0e 	bge	r3,r16,400d508 <__alt_data_end+0xfc00d508>
 400d6d8:	023fe034 	movhi	r8,65408
 400d6dc:	423fffc4 	addi	r8,r8,-1
 400d6e0:	80e1c83a 	sub	r16,r16,r3
 400d6e4:	1210703a 	and	r8,r2,r8
 400d6e8:	003f3806 	br	400d3cc <__alt_data_end+0xfc00d3cc>
 400d6ec:	9007883a 	mov	r3,r18
 400d6f0:	0011883a 	mov	r8,zero
 400d6f4:	0005883a 	mov	r2,zero
 400d6f8:	003f4c06 	br	400d42c <__alt_data_end+0xfc00d42c>
 400d6fc:	498cb03a 	or	r6,r9,r6
 400d700:	300cc03a 	cmpne	r6,r6,zero
 400d704:	0007883a 	mov	r3,zero
 400d708:	003f6806 	br	400d4ac <__alt_data_end+0xfc00d4ac>
 400d70c:	20009c1e 	bne	r4,zero,400d980 <__adddf3+0x630>
 400d710:	80800044 	addi	r2,r16,1
 400d714:	1141ffcc 	andi	r5,r2,2047
 400d718:	01000044 	movi	r4,1
 400d71c:	2140670e 	bge	r4,r5,400d8bc <__adddf3+0x56c>
 400d720:	0101ffc4 	movi	r4,2047
 400d724:	11007f26 	beq	r2,r4,400d924 <__adddf3+0x5d4>
 400d728:	898d883a 	add	r6,r17,r6
 400d72c:	4247883a 	add	r3,r8,r9
 400d730:	3451803a 	cmpltu	r8,r6,r17
 400d734:	40d1883a 	add	r8,r8,r3
 400d738:	402297fa 	slli	r17,r8,31
 400d73c:	300cd07a 	srli	r6,r6,1
 400d740:	4010d07a 	srli	r8,r8,1
 400d744:	1021883a 	mov	r16,r2
 400d748:	89a2b03a 	or	r17,r17,r6
 400d74c:	003f1f06 	br	400d3cc <__alt_data_end+0xfc00d3cc>
 400d750:	0081ffc4 	movi	r2,2047
 400d754:	80bf481e 	bne	r16,r2,400d478 <__alt_data_end+0xfc00d478>
 400d758:	003f1c06 	br	400d3cc <__alt_data_end+0xfc00d3cc>
 400d75c:	843ff844 	addi	r16,r16,-31
 400d760:	01000804 	movi	r4,32
 400d764:	1406d83a 	srl	r3,r2,r16
 400d768:	41005026 	beq	r8,r4,400d8ac <__adddf3+0x55c>
 400d76c:	01001004 	movi	r4,64
 400d770:	2211c83a 	sub	r8,r4,r8
 400d774:	1204983a 	sll	r2,r2,r8
 400d778:	88a2b03a 	or	r17,r17,r2
 400d77c:	8822c03a 	cmpne	r17,r17,zero
 400d780:	1c62b03a 	or	r17,r3,r17
 400d784:	0011883a 	mov	r8,zero
 400d788:	0021883a 	mov	r16,zero
 400d78c:	003f7106 	br	400d554 <__alt_data_end+0xfc00d554>
 400d790:	193ff804 	addi	r4,r3,-32
 400d794:	00800804 	movi	r2,32
 400d798:	4908d83a 	srl	r4,r9,r4
 400d79c:	18804526 	beq	r3,r2,400d8b4 <__adddf3+0x564>
 400d7a0:	00801004 	movi	r2,64
 400d7a4:	10c5c83a 	sub	r2,r2,r3
 400d7a8:	4886983a 	sll	r3,r9,r2
 400d7ac:	198cb03a 	or	r6,r3,r6
 400d7b0:	300cc03a 	cmpne	r6,r6,zero
 400d7b4:	218cb03a 	or	r6,r4,r6
 400d7b8:	0007883a 	mov	r3,zero
 400d7bc:	003f3b06 	br	400d4ac <__alt_data_end+0xfc00d4ac>
 400d7c0:	80002a26 	beq	r16,zero,400d86c <__adddf3+0x51c>
 400d7c4:	0101ffc4 	movi	r4,2047
 400d7c8:	11006826 	beq	r2,r4,400d96c <__adddf3+0x61c>
 400d7cc:	00c7c83a 	sub	r3,zero,r3
 400d7d0:	42002034 	orhi	r8,r8,128
 400d7d4:	01000e04 	movi	r4,56
 400d7d8:	20c07c16 	blt	r4,r3,400d9cc <__adddf3+0x67c>
 400d7dc:	010007c4 	movi	r4,31
 400d7e0:	20c0da16 	blt	r4,r3,400db4c <__adddf3+0x7fc>
 400d7e4:	01000804 	movi	r4,32
 400d7e8:	20c9c83a 	sub	r4,r4,r3
 400d7ec:	4114983a 	sll	r10,r8,r4
 400d7f0:	88cad83a 	srl	r5,r17,r3
 400d7f4:	8908983a 	sll	r4,r17,r4
 400d7f8:	40c6d83a 	srl	r3,r8,r3
 400d7fc:	5162b03a 	or	r17,r10,r5
 400d800:	2008c03a 	cmpne	r4,r4,zero
 400d804:	8922b03a 	or	r17,r17,r4
 400d808:	3463c83a 	sub	r17,r6,r17
 400d80c:	48c7c83a 	sub	r3,r9,r3
 400d810:	344d803a 	cmpltu	r6,r6,r17
 400d814:	1991c83a 	sub	r8,r3,r6
 400d818:	1021883a 	mov	r16,r2
 400d81c:	3825883a 	mov	r18,r7
 400d820:	003f2706 	br	400d4c0 <__alt_data_end+0xfc00d4c0>
 400d824:	24d0b03a 	or	r8,r4,r19
 400d828:	40001b1e 	bne	r8,zero,400d898 <__adddf3+0x548>
 400d82c:	0005883a 	mov	r2,zero
 400d830:	0007883a 	mov	r3,zero
 400d834:	0021883a 	mov	r16,zero
 400d838:	003f4d06 	br	400d570 <__alt_data_end+0xfc00d570>
 400d83c:	008007c4 	movi	r2,31
 400d840:	11003c16 	blt	r2,r4,400d934 <__adddf3+0x5e4>
 400d844:	00800804 	movi	r2,32
 400d848:	1105c83a 	sub	r2,r2,r4
 400d84c:	488e983a 	sll	r7,r9,r2
 400d850:	310ad83a 	srl	r5,r6,r4
 400d854:	3084983a 	sll	r2,r6,r2
 400d858:	4912d83a 	srl	r9,r9,r4
 400d85c:	394ab03a 	or	r5,r7,r5
 400d860:	1004c03a 	cmpne	r2,r2,zero
 400d864:	288ab03a 	or	r5,r5,r2
 400d868:	003f5306 	br	400d5b8 <__alt_data_end+0xfc00d5b8>
 400d86c:	4448b03a 	or	r4,r8,r17
 400d870:	20003e26 	beq	r4,zero,400d96c <__adddf3+0x61c>
 400d874:	00c6303a 	nor	r3,zero,r3
 400d878:	18003a1e 	bne	r3,zero,400d964 <__adddf3+0x614>
 400d87c:	3463c83a 	sub	r17,r6,r17
 400d880:	4a07c83a 	sub	r3,r9,r8
 400d884:	344d803a 	cmpltu	r6,r6,r17
 400d888:	1991c83a 	sub	r8,r3,r6
 400d88c:	1021883a 	mov	r16,r2
 400d890:	3825883a 	mov	r18,r7
 400d894:	003f0a06 	br	400d4c0 <__alt_data_end+0xfc00d4c0>
 400d898:	2023883a 	mov	r17,r4
 400d89c:	003f0d06 	br	400d4d4 <__alt_data_end+0xfc00d4d4>
 400d8a0:	0081ffc4 	movi	r2,2047
 400d8a4:	80bf3f1e 	bne	r16,r2,400d5a4 <__alt_data_end+0xfc00d5a4>
 400d8a8:	003ec806 	br	400d3cc <__alt_data_end+0xfc00d3cc>
 400d8ac:	0005883a 	mov	r2,zero
 400d8b0:	003fb106 	br	400d778 <__alt_data_end+0xfc00d778>
 400d8b4:	0007883a 	mov	r3,zero
 400d8b8:	003fbc06 	br	400d7ac <__alt_data_end+0xfc00d7ac>
 400d8bc:	4444b03a 	or	r2,r8,r17
 400d8c0:	8000871e 	bne	r16,zero,400dae0 <__adddf3+0x790>
 400d8c4:	1000ba26 	beq	r2,zero,400dbb0 <__adddf3+0x860>
 400d8c8:	4984b03a 	or	r2,r9,r6
 400d8cc:	103ebf26 	beq	r2,zero,400d3cc <__alt_data_end+0xfc00d3cc>
 400d8d0:	8985883a 	add	r2,r17,r6
 400d8d4:	4247883a 	add	r3,r8,r9
 400d8d8:	1451803a 	cmpltu	r8,r2,r17
 400d8dc:	40d1883a 	add	r8,r8,r3
 400d8e0:	40c0202c 	andhi	r3,r8,128
 400d8e4:	1023883a 	mov	r17,r2
 400d8e8:	183f1a26 	beq	r3,zero,400d554 <__alt_data_end+0xfc00d554>
 400d8ec:	00bfe034 	movhi	r2,65408
 400d8f0:	10bfffc4 	addi	r2,r2,-1
 400d8f4:	2021883a 	mov	r16,r4
 400d8f8:	4090703a 	and	r8,r8,r2
 400d8fc:	003eb306 	br	400d3cc <__alt_data_end+0xfc00d3cc>
 400d900:	4444b03a 	or	r2,r8,r17
 400d904:	8000291e 	bne	r16,zero,400d9ac <__adddf3+0x65c>
 400d908:	10004b1e 	bne	r2,zero,400da38 <__adddf3+0x6e8>
 400d90c:	4990b03a 	or	r8,r9,r6
 400d910:	40008b26 	beq	r8,zero,400db40 <__adddf3+0x7f0>
 400d914:	4811883a 	mov	r8,r9
 400d918:	3023883a 	mov	r17,r6
 400d91c:	3825883a 	mov	r18,r7
 400d920:	003eaa06 	br	400d3cc <__alt_data_end+0xfc00d3cc>
 400d924:	1021883a 	mov	r16,r2
 400d928:	0011883a 	mov	r8,zero
 400d92c:	0005883a 	mov	r2,zero
 400d930:	003f0f06 	br	400d570 <__alt_data_end+0xfc00d570>
 400d934:	217ff804 	addi	r5,r4,-32
 400d938:	00800804 	movi	r2,32
 400d93c:	494ad83a 	srl	r5,r9,r5
 400d940:	20807d26 	beq	r4,r2,400db38 <__adddf3+0x7e8>
 400d944:	00801004 	movi	r2,64
 400d948:	1109c83a 	sub	r4,r2,r4
 400d94c:	4912983a 	sll	r9,r9,r4
 400d950:	498cb03a 	or	r6,r9,r6
 400d954:	300cc03a 	cmpne	r6,r6,zero
 400d958:	298ab03a 	or	r5,r5,r6
 400d95c:	0013883a 	mov	r9,zero
 400d960:	003f1506 	br	400d5b8 <__alt_data_end+0xfc00d5b8>
 400d964:	0101ffc4 	movi	r4,2047
 400d968:	113f9a1e 	bne	r2,r4,400d7d4 <__alt_data_end+0xfc00d7d4>
 400d96c:	4811883a 	mov	r8,r9
 400d970:	3023883a 	mov	r17,r6
 400d974:	1021883a 	mov	r16,r2
 400d978:	3825883a 	mov	r18,r7
 400d97c:	003e9306 	br	400d3cc <__alt_data_end+0xfc00d3cc>
 400d980:	8000161e 	bne	r16,zero,400d9dc <__adddf3+0x68c>
 400d984:	444ab03a 	or	r5,r8,r17
 400d988:	28005126 	beq	r5,zero,400dad0 <__adddf3+0x780>
 400d98c:	0108303a 	nor	r4,zero,r4
 400d990:	20004d1e 	bne	r4,zero,400dac8 <__adddf3+0x778>
 400d994:	89a3883a 	add	r17,r17,r6
 400d998:	4253883a 	add	r9,r8,r9
 400d99c:	898d803a 	cmpltu	r6,r17,r6
 400d9a0:	3251883a 	add	r8,r6,r9
 400d9a4:	1021883a 	mov	r16,r2
 400d9a8:	003f0806 	br	400d5cc <__alt_data_end+0xfc00d5cc>
 400d9ac:	1000301e 	bne	r2,zero,400da70 <__adddf3+0x720>
 400d9b0:	4984b03a 	or	r2,r9,r6
 400d9b4:	10007126 	beq	r2,zero,400db7c <__adddf3+0x82c>
 400d9b8:	4811883a 	mov	r8,r9
 400d9bc:	3023883a 	mov	r17,r6
 400d9c0:	3825883a 	mov	r18,r7
 400d9c4:	0401ffc4 	movi	r16,2047
 400d9c8:	003e8006 	br	400d3cc <__alt_data_end+0xfc00d3cc>
 400d9cc:	4462b03a 	or	r17,r8,r17
 400d9d0:	8822c03a 	cmpne	r17,r17,zero
 400d9d4:	0007883a 	mov	r3,zero
 400d9d8:	003f8b06 	br	400d808 <__alt_data_end+0xfc00d808>
 400d9dc:	0141ffc4 	movi	r5,2047
 400d9e0:	11403b26 	beq	r2,r5,400dad0 <__adddf3+0x780>
 400d9e4:	0109c83a 	sub	r4,zero,r4
 400d9e8:	42002034 	orhi	r8,r8,128
 400d9ec:	01400e04 	movi	r5,56
 400d9f0:	29006716 	blt	r5,r4,400db90 <__adddf3+0x840>
 400d9f4:	014007c4 	movi	r5,31
 400d9f8:	29007016 	blt	r5,r4,400dbbc <__adddf3+0x86c>
 400d9fc:	01400804 	movi	r5,32
 400da00:	290bc83a 	sub	r5,r5,r4
 400da04:	4154983a 	sll	r10,r8,r5
 400da08:	890ed83a 	srl	r7,r17,r4
 400da0c:	894a983a 	sll	r5,r17,r5
 400da10:	4108d83a 	srl	r4,r8,r4
 400da14:	51e2b03a 	or	r17,r10,r7
 400da18:	280ac03a 	cmpne	r5,r5,zero
 400da1c:	8962b03a 	or	r17,r17,r5
 400da20:	89a3883a 	add	r17,r17,r6
 400da24:	2253883a 	add	r9,r4,r9
 400da28:	898d803a 	cmpltu	r6,r17,r6
 400da2c:	3251883a 	add	r8,r6,r9
 400da30:	1021883a 	mov	r16,r2
 400da34:	003ee506 	br	400d5cc <__alt_data_end+0xfc00d5cc>
 400da38:	4984b03a 	or	r2,r9,r6
 400da3c:	103e6326 	beq	r2,zero,400d3cc <__alt_data_end+0xfc00d3cc>
 400da40:	8987c83a 	sub	r3,r17,r6
 400da44:	88c9803a 	cmpltu	r4,r17,r3
 400da48:	4245c83a 	sub	r2,r8,r9
 400da4c:	1105c83a 	sub	r2,r2,r4
 400da50:	1100202c 	andhi	r4,r2,128
 400da54:	203ebb26 	beq	r4,zero,400d544 <__alt_data_end+0xfc00d544>
 400da58:	3463c83a 	sub	r17,r6,r17
 400da5c:	4a07c83a 	sub	r3,r9,r8
 400da60:	344d803a 	cmpltu	r6,r6,r17
 400da64:	1991c83a 	sub	r8,r3,r6
 400da68:	3825883a 	mov	r18,r7
 400da6c:	003e5706 	br	400d3cc <__alt_data_end+0xfc00d3cc>
 400da70:	4984b03a 	or	r2,r9,r6
 400da74:	10002e26 	beq	r2,zero,400db30 <__adddf3+0x7e0>
 400da78:	4004d0fa 	srli	r2,r8,3
 400da7c:	8822d0fa 	srli	r17,r17,3
 400da80:	4010977a 	slli	r8,r8,29
 400da84:	10c0022c 	andhi	r3,r2,8
 400da88:	4462b03a 	or	r17,r8,r17
 400da8c:	18000826 	beq	r3,zero,400dab0 <__adddf3+0x760>
 400da90:	4808d0fa 	srli	r4,r9,3
 400da94:	20c0022c 	andhi	r3,r4,8
 400da98:	1800051e 	bne	r3,zero,400dab0 <__adddf3+0x760>
 400da9c:	300cd0fa 	srli	r6,r6,3
 400daa0:	4806977a 	slli	r3,r9,29
 400daa4:	2005883a 	mov	r2,r4
 400daa8:	3825883a 	mov	r18,r7
 400daac:	19a2b03a 	or	r17,r3,r6
 400dab0:	8810d77a 	srli	r8,r17,29
 400dab4:	100490fa 	slli	r2,r2,3
 400dab8:	882290fa 	slli	r17,r17,3
 400dabc:	0401ffc4 	movi	r16,2047
 400dac0:	4090b03a 	or	r8,r8,r2
 400dac4:	003e4106 	br	400d3cc <__alt_data_end+0xfc00d3cc>
 400dac8:	0141ffc4 	movi	r5,2047
 400dacc:	117fc71e 	bne	r2,r5,400d9ec <__alt_data_end+0xfc00d9ec>
 400dad0:	4811883a 	mov	r8,r9
 400dad4:	3023883a 	mov	r17,r6
 400dad8:	1021883a 	mov	r16,r2
 400dadc:	003e3b06 	br	400d3cc <__alt_data_end+0xfc00d3cc>
 400dae0:	10002f26 	beq	r2,zero,400dba0 <__adddf3+0x850>
 400dae4:	4984b03a 	or	r2,r9,r6
 400dae8:	10001126 	beq	r2,zero,400db30 <__adddf3+0x7e0>
 400daec:	4004d0fa 	srli	r2,r8,3
 400daf0:	8822d0fa 	srli	r17,r17,3
 400daf4:	4010977a 	slli	r8,r8,29
 400daf8:	10c0022c 	andhi	r3,r2,8
 400dafc:	4462b03a 	or	r17,r8,r17
 400db00:	183feb26 	beq	r3,zero,400dab0 <__alt_data_end+0xfc00dab0>
 400db04:	4808d0fa 	srli	r4,r9,3
 400db08:	20c0022c 	andhi	r3,r4,8
 400db0c:	183fe81e 	bne	r3,zero,400dab0 <__alt_data_end+0xfc00dab0>
 400db10:	300cd0fa 	srli	r6,r6,3
 400db14:	4806977a 	slli	r3,r9,29
 400db18:	2005883a 	mov	r2,r4
 400db1c:	19a2b03a 	or	r17,r3,r6
 400db20:	003fe306 	br	400dab0 <__alt_data_end+0xfc00dab0>
 400db24:	0011883a 	mov	r8,zero
 400db28:	0005883a 	mov	r2,zero
 400db2c:	003e3f06 	br	400d42c <__alt_data_end+0xfc00d42c>
 400db30:	0401ffc4 	movi	r16,2047
 400db34:	003e2506 	br	400d3cc <__alt_data_end+0xfc00d3cc>
 400db38:	0013883a 	mov	r9,zero
 400db3c:	003f8406 	br	400d950 <__alt_data_end+0xfc00d950>
 400db40:	0005883a 	mov	r2,zero
 400db44:	0007883a 	mov	r3,zero
 400db48:	003e8906 	br	400d570 <__alt_data_end+0xfc00d570>
 400db4c:	197ff804 	addi	r5,r3,-32
 400db50:	01000804 	movi	r4,32
 400db54:	414ad83a 	srl	r5,r8,r5
 400db58:	19002426 	beq	r3,r4,400dbec <__adddf3+0x89c>
 400db5c:	01001004 	movi	r4,64
 400db60:	20c7c83a 	sub	r3,r4,r3
 400db64:	40c6983a 	sll	r3,r8,r3
 400db68:	1c46b03a 	or	r3,r3,r17
 400db6c:	1806c03a 	cmpne	r3,r3,zero
 400db70:	28e2b03a 	or	r17,r5,r3
 400db74:	0007883a 	mov	r3,zero
 400db78:	003f2306 	br	400d808 <__alt_data_end+0xfc00d808>
 400db7c:	0007883a 	mov	r3,zero
 400db80:	5811883a 	mov	r8,r11
 400db84:	00bfffc4 	movi	r2,-1
 400db88:	0401ffc4 	movi	r16,2047
 400db8c:	003e7806 	br	400d570 <__alt_data_end+0xfc00d570>
 400db90:	4462b03a 	or	r17,r8,r17
 400db94:	8822c03a 	cmpne	r17,r17,zero
 400db98:	0009883a 	mov	r4,zero
 400db9c:	003fa006 	br	400da20 <__alt_data_end+0xfc00da20>
 400dba0:	4811883a 	mov	r8,r9
 400dba4:	3023883a 	mov	r17,r6
 400dba8:	0401ffc4 	movi	r16,2047
 400dbac:	003e0706 	br	400d3cc <__alt_data_end+0xfc00d3cc>
 400dbb0:	4811883a 	mov	r8,r9
 400dbb4:	3023883a 	mov	r17,r6
 400dbb8:	003e0406 	br	400d3cc <__alt_data_end+0xfc00d3cc>
 400dbbc:	21fff804 	addi	r7,r4,-32
 400dbc0:	01400804 	movi	r5,32
 400dbc4:	41ced83a 	srl	r7,r8,r7
 400dbc8:	21400a26 	beq	r4,r5,400dbf4 <__adddf3+0x8a4>
 400dbcc:	01401004 	movi	r5,64
 400dbd0:	2909c83a 	sub	r4,r5,r4
 400dbd4:	4108983a 	sll	r4,r8,r4
 400dbd8:	2448b03a 	or	r4,r4,r17
 400dbdc:	2008c03a 	cmpne	r4,r4,zero
 400dbe0:	3922b03a 	or	r17,r7,r4
 400dbe4:	0009883a 	mov	r4,zero
 400dbe8:	003f8d06 	br	400da20 <__alt_data_end+0xfc00da20>
 400dbec:	0007883a 	mov	r3,zero
 400dbf0:	003fdd06 	br	400db68 <__alt_data_end+0xfc00db68>
 400dbf4:	0009883a 	mov	r4,zero
 400dbf8:	003ff706 	br	400dbd8 <__alt_data_end+0xfc00dbd8>

0400dbfc <__divdf3>:
 400dbfc:	defff004 	addi	sp,sp,-64
 400dc00:	dc800815 	stw	r18,32(sp)
 400dc04:	2824d53a 	srli	r18,r5,20
 400dc08:	dd800c15 	stw	r22,48(sp)
 400dc0c:	282cd7fa 	srli	r22,r5,31
 400dc10:	dc000615 	stw	r16,24(sp)
 400dc14:	04000434 	movhi	r16,16
 400dc18:	843fffc4 	addi	r16,r16,-1
 400dc1c:	dfc00f15 	stw	ra,60(sp)
 400dc20:	df000e15 	stw	fp,56(sp)
 400dc24:	ddc00d15 	stw	r23,52(sp)
 400dc28:	dd400b15 	stw	r21,44(sp)
 400dc2c:	dd000a15 	stw	r20,40(sp)
 400dc30:	dcc00915 	stw	r19,36(sp)
 400dc34:	dc400715 	stw	r17,28(sp)
 400dc38:	9481ffcc 	andi	r18,r18,2047
 400dc3c:	2c20703a 	and	r16,r5,r16
 400dc40:	b2003fcc 	andi	r8,r22,255
 400dc44:	90006126 	beq	r18,zero,400ddcc <__divdf3+0x1d0>
 400dc48:	0081ffc4 	movi	r2,2047
 400dc4c:	202b883a 	mov	r21,r4
 400dc50:	90803726 	beq	r18,r2,400dd30 <__divdf3+0x134>
 400dc54:	80800434 	orhi	r2,r16,16
 400dc58:	100490fa 	slli	r2,r2,3
 400dc5c:	2020d77a 	srli	r16,r4,29
 400dc60:	202a90fa 	slli	r21,r4,3
 400dc64:	94bf0044 	addi	r18,r18,-1023
 400dc68:	80a0b03a 	or	r16,r16,r2
 400dc6c:	0013883a 	mov	r9,zero
 400dc70:	000b883a 	mov	r5,zero
 400dc74:	3806d53a 	srli	r3,r7,20
 400dc78:	382ed7fa 	srli	r23,r7,31
 400dc7c:	04400434 	movhi	r17,16
 400dc80:	8c7fffc4 	addi	r17,r17,-1
 400dc84:	18c1ffcc 	andi	r3,r3,2047
 400dc88:	3029883a 	mov	r20,r6
 400dc8c:	3c62703a 	and	r17,r7,r17
 400dc90:	bf003fcc 	andi	fp,r23,255
 400dc94:	18006e26 	beq	r3,zero,400de50 <__divdf3+0x254>
 400dc98:	0081ffc4 	movi	r2,2047
 400dc9c:	18806626 	beq	r3,r2,400de38 <__divdf3+0x23c>
 400dca0:	88800434 	orhi	r2,r17,16
 400dca4:	100490fa 	slli	r2,r2,3
 400dca8:	3022d77a 	srli	r17,r6,29
 400dcac:	302890fa 	slli	r20,r6,3
 400dcb0:	18ff0044 	addi	r3,r3,-1023
 400dcb4:	88a2b03a 	or	r17,r17,r2
 400dcb8:	000f883a 	mov	r7,zero
 400dcbc:	b5e6f03a 	xor	r19,r22,r23
 400dcc0:	3a4cb03a 	or	r6,r7,r9
 400dcc4:	008003c4 	movi	r2,15
 400dcc8:	9809883a 	mov	r4,r19
 400dccc:	90c7c83a 	sub	r3,r18,r3
 400dcd0:	9cc03fcc 	andi	r19,r19,255
 400dcd4:	11809636 	bltu	r2,r6,400df30 <__divdf3+0x334>
 400dcd8:	300c90ba 	slli	r6,r6,2
 400dcdc:	00810074 	movhi	r2,1025
 400dce0:	10b73c04 	addi	r2,r2,-8976
 400dce4:	308d883a 	add	r6,r6,r2
 400dce8:	30800017 	ldw	r2,0(r6)
 400dcec:	1000683a 	jmp	r2
 400dcf0:	0400df30 	cmpltui	r16,zero,892
 400dcf4:	0400dd68 	cmpgeui	r16,zero,885
 400dcf8:	0400df20 	cmpeqi	r16,zero,892
 400dcfc:	0400dd5c 	xori	r16,zero,885
 400dd00:	0400df20 	cmpeqi	r16,zero,892
 400dd04:	0400def4 	movhi	r16,891
 400dd08:	0400df20 	cmpeqi	r16,zero,892
 400dd0c:	0400dd5c 	xori	r16,zero,885
 400dd10:	0400dd68 	cmpgeui	r16,zero,885
 400dd14:	0400dd68 	cmpgeui	r16,zero,885
 400dd18:	0400def4 	movhi	r16,891
 400dd1c:	0400dd5c 	xori	r16,zero,885
 400dd20:	0400dd4c 	andi	r16,zero,885
 400dd24:	0400dd4c 	andi	r16,zero,885
 400dd28:	0400dd4c 	andi	r16,zero,885
 400dd2c:	0400e2b8 	rdprs	r16,zero,906
 400dd30:	2404b03a 	or	r2,r4,r16
 400dd34:	10006c1e 	bne	r2,zero,400dee8 <__divdf3+0x2ec>
 400dd38:	02400204 	movi	r9,8
 400dd3c:	0021883a 	mov	r16,zero
 400dd40:	002b883a 	mov	r21,zero
 400dd44:	01400084 	movi	r5,2
 400dd48:	003fca06 	br	400dc74 <__alt_data_end+0xfc00dc74>
 400dd4c:	8023883a 	mov	r17,r16
 400dd50:	a829883a 	mov	r20,r21
 400dd54:	4039883a 	mov	fp,r8
 400dd58:	280f883a 	mov	r7,r5
 400dd5c:	00800084 	movi	r2,2
 400dd60:	3881601e 	bne	r7,r2,400e2e4 <__divdf3+0x6e8>
 400dd64:	e027883a 	mov	r19,fp
 400dd68:	9900004c 	andi	r4,r19,1
 400dd6c:	0081ffc4 	movi	r2,2047
 400dd70:	0021883a 	mov	r16,zero
 400dd74:	002b883a 	mov	r21,zero
 400dd78:	1004953a 	slli	r2,r2,20
 400dd7c:	20c03fcc 	andi	r3,r4,255
 400dd80:	01400434 	movhi	r5,16
 400dd84:	297fffc4 	addi	r5,r5,-1
 400dd88:	180697fa 	slli	r3,r3,31
 400dd8c:	8160703a 	and	r16,r16,r5
 400dd90:	80a0b03a 	or	r16,r16,r2
 400dd94:	80c6b03a 	or	r3,r16,r3
 400dd98:	a805883a 	mov	r2,r21
 400dd9c:	dfc00f17 	ldw	ra,60(sp)
 400dda0:	df000e17 	ldw	fp,56(sp)
 400dda4:	ddc00d17 	ldw	r23,52(sp)
 400dda8:	dd800c17 	ldw	r22,48(sp)
 400ddac:	dd400b17 	ldw	r21,44(sp)
 400ddb0:	dd000a17 	ldw	r20,40(sp)
 400ddb4:	dcc00917 	ldw	r19,36(sp)
 400ddb8:	dc800817 	ldw	r18,32(sp)
 400ddbc:	dc400717 	ldw	r17,28(sp)
 400ddc0:	dc000617 	ldw	r16,24(sp)
 400ddc4:	dec01004 	addi	sp,sp,64
 400ddc8:	f800283a 	ret
 400ddcc:	2404b03a 	or	r2,r4,r16
 400ddd0:	2023883a 	mov	r17,r4
 400ddd4:	10003f26 	beq	r2,zero,400ded4 <__divdf3+0x2d8>
 400ddd8:	80015e26 	beq	r16,zero,400e354 <__divdf3+0x758>
 400dddc:	8009883a 	mov	r4,r16
 400dde0:	d9800215 	stw	r6,8(sp)
 400dde4:	d9c00515 	stw	r7,20(sp)
 400dde8:	da000415 	stw	r8,16(sp)
 400ddec:	400fb900 	call	400fb90 <__clzsi2>
 400ddf0:	d9800217 	ldw	r6,8(sp)
 400ddf4:	d9c00517 	ldw	r7,20(sp)
 400ddf8:	da000417 	ldw	r8,16(sp)
 400ddfc:	113ffd44 	addi	r4,r2,-11
 400de00:	00c00704 	movi	r3,28
 400de04:	19014f16 	blt	r3,r4,400e344 <__divdf3+0x748>
 400de08:	00c00744 	movi	r3,29
 400de0c:	157ffe04 	addi	r21,r2,-8
 400de10:	1907c83a 	sub	r3,r3,r4
 400de14:	8560983a 	sll	r16,r16,r21
 400de18:	88c6d83a 	srl	r3,r17,r3
 400de1c:	8d6a983a 	sll	r21,r17,r21
 400de20:	1c20b03a 	or	r16,r3,r16
 400de24:	1080fcc4 	addi	r2,r2,1011
 400de28:	00a5c83a 	sub	r18,zero,r2
 400de2c:	0013883a 	mov	r9,zero
 400de30:	000b883a 	mov	r5,zero
 400de34:	003f8f06 	br	400dc74 <__alt_data_end+0xfc00dc74>
 400de38:	3444b03a 	or	r2,r6,r17
 400de3c:	1000231e 	bne	r2,zero,400decc <__divdf3+0x2d0>
 400de40:	0023883a 	mov	r17,zero
 400de44:	0029883a 	mov	r20,zero
 400de48:	01c00084 	movi	r7,2
 400de4c:	003f9b06 	br	400dcbc <__alt_data_end+0xfc00dcbc>
 400de50:	3444b03a 	or	r2,r6,r17
 400de54:	10001926 	beq	r2,zero,400debc <__divdf3+0x2c0>
 400de58:	88014b26 	beq	r17,zero,400e388 <__divdf3+0x78c>
 400de5c:	8809883a 	mov	r4,r17
 400de60:	d9400115 	stw	r5,4(sp)
 400de64:	d9800215 	stw	r6,8(sp)
 400de68:	da000415 	stw	r8,16(sp)
 400de6c:	da400315 	stw	r9,12(sp)
 400de70:	400fb900 	call	400fb90 <__clzsi2>
 400de74:	d9400117 	ldw	r5,4(sp)
 400de78:	d9800217 	ldw	r6,8(sp)
 400de7c:	da000417 	ldw	r8,16(sp)
 400de80:	da400317 	ldw	r9,12(sp)
 400de84:	113ffd44 	addi	r4,r2,-11
 400de88:	00c00704 	movi	r3,28
 400de8c:	19013a16 	blt	r3,r4,400e378 <__divdf3+0x77c>
 400de90:	00c00744 	movi	r3,29
 400de94:	153ffe04 	addi	r20,r2,-8
 400de98:	1907c83a 	sub	r3,r3,r4
 400de9c:	8d22983a 	sll	r17,r17,r20
 400dea0:	30c6d83a 	srl	r3,r6,r3
 400dea4:	3528983a 	sll	r20,r6,r20
 400dea8:	1c62b03a 	or	r17,r3,r17
 400deac:	1080fcc4 	addi	r2,r2,1011
 400deb0:	0087c83a 	sub	r3,zero,r2
 400deb4:	000f883a 	mov	r7,zero
 400deb8:	003f8006 	br	400dcbc <__alt_data_end+0xfc00dcbc>
 400debc:	0023883a 	mov	r17,zero
 400dec0:	0029883a 	mov	r20,zero
 400dec4:	01c00044 	movi	r7,1
 400dec8:	003f7c06 	br	400dcbc <__alt_data_end+0xfc00dcbc>
 400decc:	01c000c4 	movi	r7,3
 400ded0:	003f7a06 	br	400dcbc <__alt_data_end+0xfc00dcbc>
 400ded4:	02400104 	movi	r9,4
 400ded8:	0021883a 	mov	r16,zero
 400dedc:	002b883a 	mov	r21,zero
 400dee0:	01400044 	movi	r5,1
 400dee4:	003f6306 	br	400dc74 <__alt_data_end+0xfc00dc74>
 400dee8:	02400304 	movi	r9,12
 400deec:	014000c4 	movi	r5,3
 400def0:	003f6006 	br	400dc74 <__alt_data_end+0xfc00dc74>
 400def4:	04000434 	movhi	r16,16
 400def8:	0009883a 	mov	r4,zero
 400defc:	843fffc4 	addi	r16,r16,-1
 400df00:	057fffc4 	movi	r21,-1
 400df04:	0081ffc4 	movi	r2,2047
 400df08:	003f9b06 	br	400dd78 <__alt_data_end+0xfc00dd78>
 400df0c:	00c00044 	movi	r3,1
 400df10:	1887c83a 	sub	r3,r3,r2
 400df14:	01000e04 	movi	r4,56
 400df18:	20c1530e 	bge	r4,r3,400e468 <__divdf3+0x86c>
 400df1c:	9900004c 	andi	r4,r19,1
 400df20:	0005883a 	mov	r2,zero
 400df24:	0021883a 	mov	r16,zero
 400df28:	002b883a 	mov	r21,zero
 400df2c:	003f9206 	br	400dd78 <__alt_data_end+0xfc00dd78>
 400df30:	8c012e36 	bltu	r17,r16,400e3ec <__divdf3+0x7f0>
 400df34:	84412c26 	beq	r16,r17,400e3e8 <__divdf3+0x7ec>
 400df38:	a82f883a 	mov	r23,r21
 400df3c:	18ffffc4 	addi	r3,r3,-1
 400df40:	002b883a 	mov	r21,zero
 400df44:	a004d63a 	srli	r2,r20,24
 400df48:	8822923a 	slli	r17,r17,8
 400df4c:	a028923a 	slli	r20,r20,8
 400df50:	8009883a 	mov	r4,r16
 400df54:	88acb03a 	or	r22,r17,r2
 400df58:	dd000015 	stw	r20,0(sp)
 400df5c:	b028d43a 	srli	r20,r22,16
 400df60:	d8c00215 	stw	r3,8(sp)
 400df64:	b4bfffcc 	andi	r18,r22,65535
 400df68:	a00b883a 	mov	r5,r20
 400df6c:	4002c240 	call	4002c24 <__udivsi3>
 400df70:	100b883a 	mov	r5,r2
 400df74:	9009883a 	mov	r4,r18
 400df78:	1023883a 	mov	r17,r2
 400df7c:	4002ce00 	call	4002ce0 <__mulsi3>
 400df80:	8009883a 	mov	r4,r16
 400df84:	a00b883a 	mov	r5,r20
 400df88:	1039883a 	mov	fp,r2
 400df8c:	4002c880 	call	4002c88 <__umodsi3>
 400df90:	1004943a 	slli	r2,r2,16
 400df94:	b808d43a 	srli	r4,r23,16
 400df98:	d8c00217 	ldw	r3,8(sp)
 400df9c:	2084b03a 	or	r2,r4,r2
 400dfa0:	1700062e 	bgeu	r2,fp,400dfbc <__divdf3+0x3c0>
 400dfa4:	1585883a 	add	r2,r2,r22
 400dfa8:	893fffc4 	addi	r4,r17,-1
 400dfac:	15811d36 	bltu	r2,r22,400e424 <__divdf3+0x828>
 400dfb0:	17011c2e 	bgeu	r2,fp,400e424 <__divdf3+0x828>
 400dfb4:	8c7fff84 	addi	r17,r17,-2
 400dfb8:	1585883a 	add	r2,r2,r22
 400dfbc:	1739c83a 	sub	fp,r2,fp
 400dfc0:	a00b883a 	mov	r5,r20
 400dfc4:	e009883a 	mov	r4,fp
 400dfc8:	d8c00215 	stw	r3,8(sp)
 400dfcc:	4002c240 	call	4002c24 <__udivsi3>
 400dfd0:	100b883a 	mov	r5,r2
 400dfd4:	9009883a 	mov	r4,r18
 400dfd8:	1021883a 	mov	r16,r2
 400dfdc:	4002ce00 	call	4002ce0 <__mulsi3>
 400dfe0:	a00b883a 	mov	r5,r20
 400dfe4:	e009883a 	mov	r4,fp
 400dfe8:	d8800415 	stw	r2,16(sp)
 400dfec:	4002c880 	call	4002c88 <__umodsi3>
 400dff0:	1004943a 	slli	r2,r2,16
 400dff4:	da000417 	ldw	r8,16(sp)
 400dff8:	bdffffcc 	andi	r23,r23,65535
 400dffc:	b884b03a 	or	r2,r23,r2
 400e000:	d8c00217 	ldw	r3,8(sp)
 400e004:	1200062e 	bgeu	r2,r8,400e020 <__divdf3+0x424>
 400e008:	1585883a 	add	r2,r2,r22
 400e00c:	813fffc4 	addi	r4,r16,-1
 400e010:	15810236 	bltu	r2,r22,400e41c <__divdf3+0x820>
 400e014:	1201012e 	bgeu	r2,r8,400e41c <__divdf3+0x820>
 400e018:	843fff84 	addi	r16,r16,-2
 400e01c:	1585883a 	add	r2,r2,r22
 400e020:	8822943a 	slli	r17,r17,16
 400e024:	d9800017 	ldw	r6,0(sp)
 400e028:	1211c83a 	sub	r8,r2,r8
 400e02c:	8c22b03a 	or	r17,r17,r16
 400e030:	373fffcc 	andi	fp,r6,65535
 400e034:	8abfffcc 	andi	r10,r17,65535
 400e038:	8820d43a 	srli	r16,r17,16
 400e03c:	5009883a 	mov	r4,r10
 400e040:	e00b883a 	mov	r5,fp
 400e044:	302ed43a 	srli	r23,r6,16
 400e048:	d8c00215 	stw	r3,8(sp)
 400e04c:	da000415 	stw	r8,16(sp)
 400e050:	da800115 	stw	r10,4(sp)
 400e054:	4002ce00 	call	4002ce0 <__mulsi3>
 400e058:	800b883a 	mov	r5,r16
 400e05c:	e009883a 	mov	r4,fp
 400e060:	d8800515 	stw	r2,20(sp)
 400e064:	4002ce00 	call	4002ce0 <__mulsi3>
 400e068:	8009883a 	mov	r4,r16
 400e06c:	b80b883a 	mov	r5,r23
 400e070:	d8800315 	stw	r2,12(sp)
 400e074:	4002ce00 	call	4002ce0 <__mulsi3>
 400e078:	da800117 	ldw	r10,4(sp)
 400e07c:	b80b883a 	mov	r5,r23
 400e080:	1021883a 	mov	r16,r2
 400e084:	5009883a 	mov	r4,r10
 400e088:	4002ce00 	call	4002ce0 <__mulsi3>
 400e08c:	d9c00517 	ldw	r7,20(sp)
 400e090:	da400317 	ldw	r9,12(sp)
 400e094:	d8c00217 	ldw	r3,8(sp)
 400e098:	3808d43a 	srli	r4,r7,16
 400e09c:	1245883a 	add	r2,r2,r9
 400e0a0:	da000417 	ldw	r8,16(sp)
 400e0a4:	2085883a 	add	r2,r4,r2
 400e0a8:	1240022e 	bgeu	r2,r9,400e0b4 <__divdf3+0x4b8>
 400e0ac:	01000074 	movhi	r4,1
 400e0b0:	8121883a 	add	r16,r16,r4
 400e0b4:	1008d43a 	srli	r4,r2,16
 400e0b8:	1004943a 	slli	r2,r2,16
 400e0bc:	39ffffcc 	andi	r7,r7,65535
 400e0c0:	2409883a 	add	r4,r4,r16
 400e0c4:	11c5883a 	add	r2,r2,r7
 400e0c8:	4100bb36 	bltu	r8,r4,400e3b8 <__divdf3+0x7bc>
 400e0cc:	4100d726 	beq	r8,r4,400e42c <__divdf3+0x830>
 400e0d0:	4109c83a 	sub	r4,r8,r4
 400e0d4:	a8a1c83a 	sub	r16,r21,r2
 400e0d8:	ac2b803a 	cmpltu	r21,r21,r16
 400e0dc:	256bc83a 	sub	r21,r4,r21
 400e0e0:	b540d926 	beq	r22,r21,400e448 <__divdf3+0x84c>
 400e0e4:	a00b883a 	mov	r5,r20
 400e0e8:	a809883a 	mov	r4,r21
 400e0ec:	d8c00215 	stw	r3,8(sp)
 400e0f0:	4002c240 	call	4002c24 <__udivsi3>
 400e0f4:	100b883a 	mov	r5,r2
 400e0f8:	9009883a 	mov	r4,r18
 400e0fc:	d8800515 	stw	r2,20(sp)
 400e100:	4002ce00 	call	4002ce0 <__mulsi3>
 400e104:	a809883a 	mov	r4,r21
 400e108:	a00b883a 	mov	r5,r20
 400e10c:	d8800415 	stw	r2,16(sp)
 400e110:	4002c880 	call	4002c88 <__umodsi3>
 400e114:	1004943a 	slli	r2,r2,16
 400e118:	8008d43a 	srli	r4,r16,16
 400e11c:	da000417 	ldw	r8,16(sp)
 400e120:	d8c00217 	ldw	r3,8(sp)
 400e124:	2084b03a 	or	r2,r4,r2
 400e128:	d9c00517 	ldw	r7,20(sp)
 400e12c:	1200062e 	bgeu	r2,r8,400e148 <__divdf3+0x54c>
 400e130:	1585883a 	add	r2,r2,r22
 400e134:	393fffc4 	addi	r4,r7,-1
 400e138:	1580c536 	bltu	r2,r22,400e450 <__divdf3+0x854>
 400e13c:	1200c42e 	bgeu	r2,r8,400e450 <__divdf3+0x854>
 400e140:	39ffff84 	addi	r7,r7,-2
 400e144:	1585883a 	add	r2,r2,r22
 400e148:	122bc83a 	sub	r21,r2,r8
 400e14c:	a00b883a 	mov	r5,r20
 400e150:	a809883a 	mov	r4,r21
 400e154:	d8c00215 	stw	r3,8(sp)
 400e158:	d9c00515 	stw	r7,20(sp)
 400e15c:	4002c240 	call	4002c24 <__udivsi3>
 400e160:	9009883a 	mov	r4,r18
 400e164:	100b883a 	mov	r5,r2
 400e168:	d8800415 	stw	r2,16(sp)
 400e16c:	4002ce00 	call	4002ce0 <__mulsi3>
 400e170:	a809883a 	mov	r4,r21
 400e174:	a00b883a 	mov	r5,r20
 400e178:	1025883a 	mov	r18,r2
 400e17c:	4002c880 	call	4002c88 <__umodsi3>
 400e180:	1004943a 	slli	r2,r2,16
 400e184:	813fffcc 	andi	r4,r16,65535
 400e188:	d8c00217 	ldw	r3,8(sp)
 400e18c:	20a0b03a 	or	r16,r4,r2
 400e190:	d9c00517 	ldw	r7,20(sp)
 400e194:	da000417 	ldw	r8,16(sp)
 400e198:	8480062e 	bgeu	r16,r18,400e1b4 <__divdf3+0x5b8>
 400e19c:	85a1883a 	add	r16,r16,r22
 400e1a0:	40bfffc4 	addi	r2,r8,-1
 400e1a4:	8580ac36 	bltu	r16,r22,400e458 <__divdf3+0x85c>
 400e1a8:	8480ab2e 	bgeu	r16,r18,400e458 <__divdf3+0x85c>
 400e1ac:	423fff84 	addi	r8,r8,-2
 400e1b0:	85a1883a 	add	r16,r16,r22
 400e1b4:	3804943a 	slli	r2,r7,16
 400e1b8:	84a1c83a 	sub	r16,r16,r18
 400e1bc:	e009883a 	mov	r4,fp
 400e1c0:	1228b03a 	or	r20,r2,r8
 400e1c4:	a1ffffcc 	andi	r7,r20,65535
 400e1c8:	a024d43a 	srli	r18,r20,16
 400e1cc:	380b883a 	mov	r5,r7
 400e1d0:	d8c00215 	stw	r3,8(sp)
 400e1d4:	d9c00515 	stw	r7,20(sp)
 400e1d8:	4002ce00 	call	4002ce0 <__mulsi3>
 400e1dc:	900b883a 	mov	r5,r18
 400e1e0:	e009883a 	mov	r4,fp
 400e1e4:	102b883a 	mov	r21,r2
 400e1e8:	4002ce00 	call	4002ce0 <__mulsi3>
 400e1ec:	900b883a 	mov	r5,r18
 400e1f0:	b809883a 	mov	r4,r23
 400e1f4:	1039883a 	mov	fp,r2
 400e1f8:	4002ce00 	call	4002ce0 <__mulsi3>
 400e1fc:	d9c00517 	ldw	r7,20(sp)
 400e200:	b80b883a 	mov	r5,r23
 400e204:	1025883a 	mov	r18,r2
 400e208:	3809883a 	mov	r4,r7
 400e20c:	4002ce00 	call	4002ce0 <__mulsi3>
 400e210:	a808d43a 	srli	r4,r21,16
 400e214:	1705883a 	add	r2,r2,fp
 400e218:	d8c00217 	ldw	r3,8(sp)
 400e21c:	2085883a 	add	r2,r4,r2
 400e220:	1700022e 	bgeu	r2,fp,400e22c <__divdf3+0x630>
 400e224:	01000074 	movhi	r4,1
 400e228:	9125883a 	add	r18,r18,r4
 400e22c:	1008d43a 	srli	r4,r2,16
 400e230:	1004943a 	slli	r2,r2,16
 400e234:	ad7fffcc 	andi	r21,r21,65535
 400e238:	2489883a 	add	r4,r4,r18
 400e23c:	1545883a 	add	r2,r2,r21
 400e240:	81003836 	bltu	r16,r4,400e324 <__divdf3+0x728>
 400e244:	81003626 	beq	r16,r4,400e320 <__divdf3+0x724>
 400e248:	a5000054 	ori	r20,r20,1
 400e24c:	1880ffc4 	addi	r2,r3,1023
 400e250:	00bf2e0e 	bge	zero,r2,400df0c <__alt_data_end+0xfc00df0c>
 400e254:	a10001cc 	andi	r4,r20,7
 400e258:	20000726 	beq	r4,zero,400e278 <__divdf3+0x67c>
 400e25c:	a10003cc 	andi	r4,r20,15
 400e260:	01400104 	movi	r5,4
 400e264:	21400426 	beq	r4,r5,400e278 <__divdf3+0x67c>
 400e268:	a149883a 	add	r4,r20,r5
 400e26c:	2529803a 	cmpltu	r20,r4,r20
 400e270:	8d23883a 	add	r17,r17,r20
 400e274:	2029883a 	mov	r20,r4
 400e278:	8900402c 	andhi	r4,r17,256
 400e27c:	20000426 	beq	r4,zero,400e290 <__divdf3+0x694>
 400e280:	18810004 	addi	r2,r3,1024
 400e284:	00ffc034 	movhi	r3,65280
 400e288:	18ffffc4 	addi	r3,r3,-1
 400e28c:	88e2703a 	and	r17,r17,r3
 400e290:	00c1ff84 	movi	r3,2046
 400e294:	18beb416 	blt	r3,r2,400dd68 <__alt_data_end+0xfc00dd68>
 400e298:	a028d0fa 	srli	r20,r20,3
 400e29c:	882a977a 	slli	r21,r17,29
 400e2a0:	8820927a 	slli	r16,r17,9
 400e2a4:	1081ffcc 	andi	r2,r2,2047
 400e2a8:	ad2ab03a 	or	r21,r21,r20
 400e2ac:	8020d33a 	srli	r16,r16,12
 400e2b0:	9900004c 	andi	r4,r19,1
 400e2b4:	003eb006 	br	400dd78 <__alt_data_end+0xfc00dd78>
 400e2b8:	8080022c 	andhi	r2,r16,8
 400e2bc:	10001226 	beq	r2,zero,400e308 <__divdf3+0x70c>
 400e2c0:	8880022c 	andhi	r2,r17,8
 400e2c4:	1000101e 	bne	r2,zero,400e308 <__divdf3+0x70c>
 400e2c8:	00800434 	movhi	r2,16
 400e2cc:	8c000234 	orhi	r16,r17,8
 400e2d0:	10bfffc4 	addi	r2,r2,-1
 400e2d4:	b809883a 	mov	r4,r23
 400e2d8:	80a0703a 	and	r16,r16,r2
 400e2dc:	a02b883a 	mov	r21,r20
 400e2e0:	003f0806 	br	400df04 <__alt_data_end+0xfc00df04>
 400e2e4:	008000c4 	movi	r2,3
 400e2e8:	3880b126 	beq	r7,r2,400e5b0 <__divdf3+0x9b4>
 400e2ec:	00800044 	movi	r2,1
 400e2f0:	38805b1e 	bne	r7,r2,400e460 <__divdf3+0x864>
 400e2f4:	e009883a 	mov	r4,fp
 400e2f8:	0005883a 	mov	r2,zero
 400e2fc:	0021883a 	mov	r16,zero
 400e300:	002b883a 	mov	r21,zero
 400e304:	003e9c06 	br	400dd78 <__alt_data_end+0xfc00dd78>
 400e308:	00800434 	movhi	r2,16
 400e30c:	84000234 	orhi	r16,r16,8
 400e310:	10bfffc4 	addi	r2,r2,-1
 400e314:	b009883a 	mov	r4,r22
 400e318:	80a0703a 	and	r16,r16,r2
 400e31c:	003ef906 	br	400df04 <__alt_data_end+0xfc00df04>
 400e320:	103fca26 	beq	r2,zero,400e24c <__alt_data_end+0xfc00e24c>
 400e324:	b421883a 	add	r16,r22,r16
 400e328:	a17fffc4 	addi	r5,r20,-1
 400e32c:	8580422e 	bgeu	r16,r22,400e438 <__divdf3+0x83c>
 400e330:	2829883a 	mov	r20,r5
 400e334:	813fc41e 	bne	r16,r4,400e248 <__alt_data_end+0xfc00e248>
 400e338:	d9800017 	ldw	r6,0(sp)
 400e33c:	30bfc21e 	bne	r6,r2,400e248 <__alt_data_end+0xfc00e248>
 400e340:	003fc206 	br	400e24c <__alt_data_end+0xfc00e24c>
 400e344:	143ff604 	addi	r16,r2,-40
 400e348:	8c20983a 	sll	r16,r17,r16
 400e34c:	002b883a 	mov	r21,zero
 400e350:	003eb406 	br	400de24 <__alt_data_end+0xfc00de24>
 400e354:	d9800215 	stw	r6,8(sp)
 400e358:	d9c00515 	stw	r7,20(sp)
 400e35c:	da000415 	stw	r8,16(sp)
 400e360:	400fb900 	call	400fb90 <__clzsi2>
 400e364:	10800804 	addi	r2,r2,32
 400e368:	da000417 	ldw	r8,16(sp)
 400e36c:	d9c00517 	ldw	r7,20(sp)
 400e370:	d9800217 	ldw	r6,8(sp)
 400e374:	003ea106 	br	400ddfc <__alt_data_end+0xfc00ddfc>
 400e378:	147ff604 	addi	r17,r2,-40
 400e37c:	3462983a 	sll	r17,r6,r17
 400e380:	0029883a 	mov	r20,zero
 400e384:	003ec906 	br	400deac <__alt_data_end+0xfc00deac>
 400e388:	3009883a 	mov	r4,r6
 400e38c:	d9400115 	stw	r5,4(sp)
 400e390:	d9800215 	stw	r6,8(sp)
 400e394:	da000415 	stw	r8,16(sp)
 400e398:	da400315 	stw	r9,12(sp)
 400e39c:	400fb900 	call	400fb90 <__clzsi2>
 400e3a0:	10800804 	addi	r2,r2,32
 400e3a4:	da400317 	ldw	r9,12(sp)
 400e3a8:	da000417 	ldw	r8,16(sp)
 400e3ac:	d9800217 	ldw	r6,8(sp)
 400e3b0:	d9400117 	ldw	r5,4(sp)
 400e3b4:	003eb306 	br	400de84 <__alt_data_end+0xfc00de84>
 400e3b8:	d9800017 	ldw	r6,0(sp)
 400e3bc:	a9ab883a 	add	r21,r21,r6
 400e3c0:	a98b803a 	cmpltu	r5,r21,r6
 400e3c4:	2d8b883a 	add	r5,r5,r22
 400e3c8:	2a11883a 	add	r8,r5,r8
 400e3cc:	897fffc4 	addi	r5,r17,-1
 400e3d0:	b2000c2e 	bgeu	r22,r8,400e404 <__divdf3+0x808>
 400e3d4:	41003f36 	bltu	r8,r4,400e4d4 <__divdf3+0x8d8>
 400e3d8:	22006c26 	beq	r4,r8,400e58c <__divdf3+0x990>
 400e3dc:	4109c83a 	sub	r4,r8,r4
 400e3e0:	2823883a 	mov	r17,r5
 400e3e4:	003f3b06 	br	400e0d4 <__alt_data_end+0xfc00e0d4>
 400e3e8:	ad3ed336 	bltu	r21,r20,400df38 <__alt_data_end+0xfc00df38>
 400e3ec:	a804d07a 	srli	r2,r21,1
 400e3f0:	802e97fa 	slli	r23,r16,31
 400e3f4:	a82a97fa 	slli	r21,r21,31
 400e3f8:	8020d07a 	srli	r16,r16,1
 400e3fc:	b8aeb03a 	or	r23,r23,r2
 400e400:	003ed006 	br	400df44 <__alt_data_end+0xfc00df44>
 400e404:	b23ff51e 	bne	r22,r8,400e3dc <__alt_data_end+0xfc00e3dc>
 400e408:	d9800017 	ldw	r6,0(sp)
 400e40c:	a9bff12e 	bgeu	r21,r6,400e3d4 <__alt_data_end+0xfc00e3d4>
 400e410:	b109c83a 	sub	r4,r22,r4
 400e414:	2823883a 	mov	r17,r5
 400e418:	003f2e06 	br	400e0d4 <__alt_data_end+0xfc00e0d4>
 400e41c:	2021883a 	mov	r16,r4
 400e420:	003eff06 	br	400e020 <__alt_data_end+0xfc00e020>
 400e424:	2023883a 	mov	r17,r4
 400e428:	003ee406 	br	400dfbc <__alt_data_end+0xfc00dfbc>
 400e42c:	a8bfe236 	bltu	r21,r2,400e3b8 <__alt_data_end+0xfc00e3b8>
 400e430:	0009883a 	mov	r4,zero
 400e434:	003f2706 	br	400e0d4 <__alt_data_end+0xfc00e0d4>
 400e438:	81002d36 	bltu	r16,r4,400e4f0 <__divdf3+0x8f4>
 400e43c:	24005626 	beq	r4,r16,400e598 <__divdf3+0x99c>
 400e440:	2829883a 	mov	r20,r5
 400e444:	003f8006 	br	400e248 <__alt_data_end+0xfc00e248>
 400e448:	053fffc4 	movi	r20,-1
 400e44c:	003f7f06 	br	400e24c <__alt_data_end+0xfc00e24c>
 400e450:	200f883a 	mov	r7,r4
 400e454:	003f3c06 	br	400e148 <__alt_data_end+0xfc00e148>
 400e458:	1011883a 	mov	r8,r2
 400e45c:	003f5506 	br	400e1b4 <__alt_data_end+0xfc00e1b4>
 400e460:	e027883a 	mov	r19,fp
 400e464:	003f7906 	br	400e24c <__alt_data_end+0xfc00e24c>
 400e468:	010007c4 	movi	r4,31
 400e46c:	20c02816 	blt	r4,r3,400e510 <__divdf3+0x914>
 400e470:	00800804 	movi	r2,32
 400e474:	10c5c83a 	sub	r2,r2,r3
 400e478:	888a983a 	sll	r5,r17,r2
 400e47c:	a0c8d83a 	srl	r4,r20,r3
 400e480:	a084983a 	sll	r2,r20,r2
 400e484:	88e2d83a 	srl	r17,r17,r3
 400e488:	2906b03a 	or	r3,r5,r4
 400e48c:	1004c03a 	cmpne	r2,r2,zero
 400e490:	1886b03a 	or	r3,r3,r2
 400e494:	188001cc 	andi	r2,r3,7
 400e498:	10000726 	beq	r2,zero,400e4b8 <__divdf3+0x8bc>
 400e49c:	188003cc 	andi	r2,r3,15
 400e4a0:	01000104 	movi	r4,4
 400e4a4:	11000426 	beq	r2,r4,400e4b8 <__divdf3+0x8bc>
 400e4a8:	1805883a 	mov	r2,r3
 400e4ac:	10c00104 	addi	r3,r2,4
 400e4b0:	1885803a 	cmpltu	r2,r3,r2
 400e4b4:	88a3883a 	add	r17,r17,r2
 400e4b8:	8880202c 	andhi	r2,r17,128
 400e4bc:	10002926 	beq	r2,zero,400e564 <__divdf3+0x968>
 400e4c0:	9900004c 	andi	r4,r19,1
 400e4c4:	00800044 	movi	r2,1
 400e4c8:	0021883a 	mov	r16,zero
 400e4cc:	002b883a 	mov	r21,zero
 400e4d0:	003e2906 	br	400dd78 <__alt_data_end+0xfc00dd78>
 400e4d4:	d9800017 	ldw	r6,0(sp)
 400e4d8:	8c7fff84 	addi	r17,r17,-2
 400e4dc:	a9ab883a 	add	r21,r21,r6
 400e4e0:	a98b803a 	cmpltu	r5,r21,r6
 400e4e4:	2d8b883a 	add	r5,r5,r22
 400e4e8:	2a11883a 	add	r8,r5,r8
 400e4ec:	003ef806 	br	400e0d0 <__alt_data_end+0xfc00e0d0>
 400e4f0:	d9800017 	ldw	r6,0(sp)
 400e4f4:	318f883a 	add	r7,r6,r6
 400e4f8:	398b803a 	cmpltu	r5,r7,r6
 400e4fc:	2d8d883a 	add	r6,r5,r22
 400e500:	81a1883a 	add	r16,r16,r6
 400e504:	a17fff84 	addi	r5,r20,-2
 400e508:	d9c00015 	stw	r7,0(sp)
 400e50c:	003f8806 	br	400e330 <__alt_data_end+0xfc00e330>
 400e510:	013ff844 	movi	r4,-31
 400e514:	2085c83a 	sub	r2,r4,r2
 400e518:	8888d83a 	srl	r4,r17,r2
 400e51c:	00800804 	movi	r2,32
 400e520:	18802126 	beq	r3,r2,400e5a8 <__divdf3+0x9ac>
 400e524:	04001004 	movi	r16,64
 400e528:	80c7c83a 	sub	r3,r16,r3
 400e52c:	88e0983a 	sll	r16,r17,r3
 400e530:	8504b03a 	or	r2,r16,r20
 400e534:	1004c03a 	cmpne	r2,r2,zero
 400e538:	2084b03a 	or	r2,r4,r2
 400e53c:	144001cc 	andi	r17,r2,7
 400e540:	88000d1e 	bne	r17,zero,400e578 <__divdf3+0x97c>
 400e544:	0021883a 	mov	r16,zero
 400e548:	102ad0fa 	srli	r21,r2,3
 400e54c:	9900004c 	andi	r4,r19,1
 400e550:	0005883a 	mov	r2,zero
 400e554:	ac6ab03a 	or	r21,r21,r17
 400e558:	003e0706 	br	400dd78 <__alt_data_end+0xfc00dd78>
 400e55c:	1007883a 	mov	r3,r2
 400e560:	0023883a 	mov	r17,zero
 400e564:	8820927a 	slli	r16,r17,9
 400e568:	1805883a 	mov	r2,r3
 400e56c:	8822977a 	slli	r17,r17,29
 400e570:	8020d33a 	srli	r16,r16,12
 400e574:	003ff406 	br	400e548 <__alt_data_end+0xfc00e548>
 400e578:	10c003cc 	andi	r3,r2,15
 400e57c:	01000104 	movi	r4,4
 400e580:	193ff626 	beq	r3,r4,400e55c <__alt_data_end+0xfc00e55c>
 400e584:	0023883a 	mov	r17,zero
 400e588:	003fc806 	br	400e4ac <__alt_data_end+0xfc00e4ac>
 400e58c:	a8bfd136 	bltu	r21,r2,400e4d4 <__alt_data_end+0xfc00e4d4>
 400e590:	2823883a 	mov	r17,r5
 400e594:	003fa606 	br	400e430 <__alt_data_end+0xfc00e430>
 400e598:	d9800017 	ldw	r6,0(sp)
 400e59c:	30bfd436 	bltu	r6,r2,400e4f0 <__alt_data_end+0xfc00e4f0>
 400e5a0:	2829883a 	mov	r20,r5
 400e5a4:	003f6406 	br	400e338 <__alt_data_end+0xfc00e338>
 400e5a8:	0021883a 	mov	r16,zero
 400e5ac:	003fe006 	br	400e530 <__alt_data_end+0xfc00e530>
 400e5b0:	00800434 	movhi	r2,16
 400e5b4:	8c000234 	orhi	r16,r17,8
 400e5b8:	10bfffc4 	addi	r2,r2,-1
 400e5bc:	e009883a 	mov	r4,fp
 400e5c0:	80a0703a 	and	r16,r16,r2
 400e5c4:	a02b883a 	mov	r21,r20
 400e5c8:	003e4e06 	br	400df04 <__alt_data_end+0xfc00df04>

0400e5cc <__eqdf2>:
 400e5cc:	2804d53a 	srli	r2,r5,20
 400e5d0:	3806d53a 	srli	r3,r7,20
 400e5d4:	02000434 	movhi	r8,16
 400e5d8:	423fffc4 	addi	r8,r8,-1
 400e5dc:	1081ffcc 	andi	r2,r2,2047
 400e5e0:	0281ffc4 	movi	r10,2047
 400e5e4:	2a12703a 	and	r9,r5,r8
 400e5e8:	18c1ffcc 	andi	r3,r3,2047
 400e5ec:	3a10703a 	and	r8,r7,r8
 400e5f0:	280ad7fa 	srli	r5,r5,31
 400e5f4:	380ed7fa 	srli	r7,r7,31
 400e5f8:	12801026 	beq	r2,r10,400e63c <__eqdf2+0x70>
 400e5fc:	0281ffc4 	movi	r10,2047
 400e600:	1a800a26 	beq	r3,r10,400e62c <__eqdf2+0x60>
 400e604:	10c00226 	beq	r2,r3,400e610 <__eqdf2+0x44>
 400e608:	00800044 	movi	r2,1
 400e60c:	f800283a 	ret
 400e610:	4a3ffd1e 	bne	r9,r8,400e608 <__alt_data_end+0xfc00e608>
 400e614:	21bffc1e 	bne	r4,r6,400e608 <__alt_data_end+0xfc00e608>
 400e618:	29c00c26 	beq	r5,r7,400e64c <__eqdf2+0x80>
 400e61c:	103ffa1e 	bne	r2,zero,400e608 <__alt_data_end+0xfc00e608>
 400e620:	2244b03a 	or	r2,r4,r9
 400e624:	1004c03a 	cmpne	r2,r2,zero
 400e628:	f800283a 	ret
 400e62c:	3214b03a 	or	r10,r6,r8
 400e630:	503ff426 	beq	r10,zero,400e604 <__alt_data_end+0xfc00e604>
 400e634:	00800044 	movi	r2,1
 400e638:	f800283a 	ret
 400e63c:	2254b03a 	or	r10,r4,r9
 400e640:	503fee26 	beq	r10,zero,400e5fc <__alt_data_end+0xfc00e5fc>
 400e644:	00800044 	movi	r2,1
 400e648:	f800283a 	ret
 400e64c:	0005883a 	mov	r2,zero
 400e650:	f800283a 	ret

0400e654 <__gedf2>:
 400e654:	2804d53a 	srli	r2,r5,20
 400e658:	3806d53a 	srli	r3,r7,20
 400e65c:	02000434 	movhi	r8,16
 400e660:	423fffc4 	addi	r8,r8,-1
 400e664:	1081ffcc 	andi	r2,r2,2047
 400e668:	0241ffc4 	movi	r9,2047
 400e66c:	2a14703a 	and	r10,r5,r8
 400e670:	18c1ffcc 	andi	r3,r3,2047
 400e674:	3a10703a 	and	r8,r7,r8
 400e678:	280ad7fa 	srli	r5,r5,31
 400e67c:	380ed7fa 	srli	r7,r7,31
 400e680:	12401d26 	beq	r2,r9,400e6f8 <__gedf2+0xa4>
 400e684:	0241ffc4 	movi	r9,2047
 400e688:	1a401226 	beq	r3,r9,400e6d4 <__gedf2+0x80>
 400e68c:	1000081e 	bne	r2,zero,400e6b0 <__gedf2+0x5c>
 400e690:	2296b03a 	or	r11,r4,r10
 400e694:	5813003a 	cmpeq	r9,r11,zero
 400e698:	1800091e 	bne	r3,zero,400e6c0 <__gedf2+0x6c>
 400e69c:	3218b03a 	or	r12,r6,r8
 400e6a0:	6000071e 	bne	r12,zero,400e6c0 <__gedf2+0x6c>
 400e6a4:	0005883a 	mov	r2,zero
 400e6a8:	5800101e 	bne	r11,zero,400e6ec <__gedf2+0x98>
 400e6ac:	f800283a 	ret
 400e6b0:	18000c1e 	bne	r3,zero,400e6e4 <__gedf2+0x90>
 400e6b4:	3212b03a 	or	r9,r6,r8
 400e6b8:	48000c26 	beq	r9,zero,400e6ec <__gedf2+0x98>
 400e6bc:	0013883a 	mov	r9,zero
 400e6c0:	39c03fcc 	andi	r7,r7,255
 400e6c4:	48000826 	beq	r9,zero,400e6e8 <__gedf2+0x94>
 400e6c8:	38000926 	beq	r7,zero,400e6f0 <__gedf2+0x9c>
 400e6cc:	00800044 	movi	r2,1
 400e6d0:	f800283a 	ret
 400e6d4:	3212b03a 	or	r9,r6,r8
 400e6d8:	483fec26 	beq	r9,zero,400e68c <__alt_data_end+0xfc00e68c>
 400e6dc:	00bfff84 	movi	r2,-2
 400e6e0:	f800283a 	ret
 400e6e4:	39c03fcc 	andi	r7,r7,255
 400e6e8:	29c00626 	beq	r5,r7,400e704 <__gedf2+0xb0>
 400e6ec:	283ff726 	beq	r5,zero,400e6cc <__alt_data_end+0xfc00e6cc>
 400e6f0:	00bfffc4 	movi	r2,-1
 400e6f4:	f800283a 	ret
 400e6f8:	2292b03a 	or	r9,r4,r10
 400e6fc:	483fe126 	beq	r9,zero,400e684 <__alt_data_end+0xfc00e684>
 400e700:	003ff606 	br	400e6dc <__alt_data_end+0xfc00e6dc>
 400e704:	18bff916 	blt	r3,r2,400e6ec <__alt_data_end+0xfc00e6ec>
 400e708:	10c00316 	blt	r2,r3,400e718 <__gedf2+0xc4>
 400e70c:	42bff736 	bltu	r8,r10,400e6ec <__alt_data_end+0xfc00e6ec>
 400e710:	52000326 	beq	r10,r8,400e720 <__gedf2+0xcc>
 400e714:	5200042e 	bgeu	r10,r8,400e728 <__gedf2+0xd4>
 400e718:	283fec1e 	bne	r5,zero,400e6cc <__alt_data_end+0xfc00e6cc>
 400e71c:	003ff406 	br	400e6f0 <__alt_data_end+0xfc00e6f0>
 400e720:	313ff236 	bltu	r6,r4,400e6ec <__alt_data_end+0xfc00e6ec>
 400e724:	21bffc36 	bltu	r4,r6,400e718 <__alt_data_end+0xfc00e718>
 400e728:	0005883a 	mov	r2,zero
 400e72c:	f800283a 	ret

0400e730 <__ledf2>:
 400e730:	2804d53a 	srli	r2,r5,20
 400e734:	3810d53a 	srli	r8,r7,20
 400e738:	00c00434 	movhi	r3,16
 400e73c:	18ffffc4 	addi	r3,r3,-1
 400e740:	1081ffcc 	andi	r2,r2,2047
 400e744:	0241ffc4 	movi	r9,2047
 400e748:	28d4703a 	and	r10,r5,r3
 400e74c:	4201ffcc 	andi	r8,r8,2047
 400e750:	38c6703a 	and	r3,r7,r3
 400e754:	280ad7fa 	srli	r5,r5,31
 400e758:	380ed7fa 	srli	r7,r7,31
 400e75c:	12401f26 	beq	r2,r9,400e7dc <__ledf2+0xac>
 400e760:	0241ffc4 	movi	r9,2047
 400e764:	42401426 	beq	r8,r9,400e7b8 <__ledf2+0x88>
 400e768:	1000091e 	bne	r2,zero,400e790 <__ledf2+0x60>
 400e76c:	2296b03a 	or	r11,r4,r10
 400e770:	5813003a 	cmpeq	r9,r11,zero
 400e774:	29403fcc 	andi	r5,r5,255
 400e778:	40000a1e 	bne	r8,zero,400e7a4 <__ledf2+0x74>
 400e77c:	30d8b03a 	or	r12,r6,r3
 400e780:	6000081e 	bne	r12,zero,400e7a4 <__ledf2+0x74>
 400e784:	0005883a 	mov	r2,zero
 400e788:	5800111e 	bne	r11,zero,400e7d0 <__ledf2+0xa0>
 400e78c:	f800283a 	ret
 400e790:	29403fcc 	andi	r5,r5,255
 400e794:	40000c1e 	bne	r8,zero,400e7c8 <__ledf2+0x98>
 400e798:	30d2b03a 	or	r9,r6,r3
 400e79c:	48000c26 	beq	r9,zero,400e7d0 <__ledf2+0xa0>
 400e7a0:	0013883a 	mov	r9,zero
 400e7a4:	39c03fcc 	andi	r7,r7,255
 400e7a8:	48000826 	beq	r9,zero,400e7cc <__ledf2+0x9c>
 400e7ac:	38001126 	beq	r7,zero,400e7f4 <__ledf2+0xc4>
 400e7b0:	00800044 	movi	r2,1
 400e7b4:	f800283a 	ret
 400e7b8:	30d2b03a 	or	r9,r6,r3
 400e7bc:	483fea26 	beq	r9,zero,400e768 <__alt_data_end+0xfc00e768>
 400e7c0:	00800084 	movi	r2,2
 400e7c4:	f800283a 	ret
 400e7c8:	39c03fcc 	andi	r7,r7,255
 400e7cc:	39400726 	beq	r7,r5,400e7ec <__ledf2+0xbc>
 400e7d0:	2800081e 	bne	r5,zero,400e7f4 <__ledf2+0xc4>
 400e7d4:	00800044 	movi	r2,1
 400e7d8:	f800283a 	ret
 400e7dc:	2292b03a 	or	r9,r4,r10
 400e7e0:	483fdf26 	beq	r9,zero,400e760 <__alt_data_end+0xfc00e760>
 400e7e4:	00800084 	movi	r2,2
 400e7e8:	f800283a 	ret
 400e7ec:	4080030e 	bge	r8,r2,400e7fc <__ledf2+0xcc>
 400e7f0:	383fef26 	beq	r7,zero,400e7b0 <__alt_data_end+0xfc00e7b0>
 400e7f4:	00bfffc4 	movi	r2,-1
 400e7f8:	f800283a 	ret
 400e7fc:	123feb16 	blt	r2,r8,400e7ac <__alt_data_end+0xfc00e7ac>
 400e800:	1abff336 	bltu	r3,r10,400e7d0 <__alt_data_end+0xfc00e7d0>
 400e804:	50c00326 	beq	r10,r3,400e814 <__ledf2+0xe4>
 400e808:	50c0042e 	bgeu	r10,r3,400e81c <__ledf2+0xec>
 400e80c:	283fe81e 	bne	r5,zero,400e7b0 <__alt_data_end+0xfc00e7b0>
 400e810:	003ff806 	br	400e7f4 <__alt_data_end+0xfc00e7f4>
 400e814:	313fee36 	bltu	r6,r4,400e7d0 <__alt_data_end+0xfc00e7d0>
 400e818:	21bffc36 	bltu	r4,r6,400e80c <__alt_data_end+0xfc00e80c>
 400e81c:	0005883a 	mov	r2,zero
 400e820:	f800283a 	ret

0400e824 <__muldf3>:
 400e824:	deffee04 	addi	sp,sp,-72
 400e828:	dd000c15 	stw	r20,48(sp)
 400e82c:	2828d53a 	srli	r20,r5,20
 400e830:	ddc00f15 	stw	r23,60(sp)
 400e834:	282ed7fa 	srli	r23,r5,31
 400e838:	dc000815 	stw	r16,32(sp)
 400e83c:	04000434 	movhi	r16,16
 400e840:	dcc00b15 	stw	r19,44(sp)
 400e844:	843fffc4 	addi	r16,r16,-1
 400e848:	dfc01115 	stw	ra,68(sp)
 400e84c:	df001015 	stw	fp,64(sp)
 400e850:	dd800e15 	stw	r22,56(sp)
 400e854:	dd400d15 	stw	r21,52(sp)
 400e858:	dc800a15 	stw	r18,40(sp)
 400e85c:	dc400915 	stw	r17,36(sp)
 400e860:	a501ffcc 	andi	r20,r20,2047
 400e864:	2c20703a 	and	r16,r5,r16
 400e868:	b827883a 	mov	r19,r23
 400e86c:	ba403fcc 	andi	r9,r23,255
 400e870:	a0006026 	beq	r20,zero,400e9f4 <__muldf3+0x1d0>
 400e874:	0081ffc4 	movi	r2,2047
 400e878:	202d883a 	mov	r22,r4
 400e87c:	a0803626 	beq	r20,r2,400e958 <__muldf3+0x134>
 400e880:	84000434 	orhi	r16,r16,16
 400e884:	200ad77a 	srli	r5,r4,29
 400e888:	800490fa 	slli	r2,r16,3
 400e88c:	202c90fa 	slli	r22,r4,3
 400e890:	a53f0044 	addi	r20,r20,-1023
 400e894:	28a0b03a 	or	r16,r5,r2
 400e898:	002b883a 	mov	r21,zero
 400e89c:	000b883a 	mov	r5,zero
 400e8a0:	3804d53a 	srli	r2,r7,20
 400e8a4:	3838d7fa 	srli	fp,r7,31
 400e8a8:	04400434 	movhi	r17,16
 400e8ac:	8c7fffc4 	addi	r17,r17,-1
 400e8b0:	1081ffcc 	andi	r2,r2,2047
 400e8b4:	3025883a 	mov	r18,r6
 400e8b8:	3c62703a 	and	r17,r7,r17
 400e8bc:	e2803fcc 	andi	r10,fp,255
 400e8c0:	10006d26 	beq	r2,zero,400ea78 <__muldf3+0x254>
 400e8c4:	00c1ffc4 	movi	r3,2047
 400e8c8:	10c06526 	beq	r2,r3,400ea60 <__muldf3+0x23c>
 400e8cc:	8c400434 	orhi	r17,r17,16
 400e8d0:	300ed77a 	srli	r7,r6,29
 400e8d4:	880690fa 	slli	r3,r17,3
 400e8d8:	302490fa 	slli	r18,r6,3
 400e8dc:	10bf0044 	addi	r2,r2,-1023
 400e8e0:	38e2b03a 	or	r17,r7,r3
 400e8e4:	000f883a 	mov	r7,zero
 400e8e8:	a087883a 	add	r3,r20,r2
 400e8ec:	010003c4 	movi	r4,15
 400e8f0:	3d44b03a 	or	r2,r7,r21
 400e8f4:	e5ccf03a 	xor	r6,fp,r23
 400e8f8:	1a000044 	addi	r8,r3,1
 400e8fc:	20809b36 	bltu	r4,r2,400eb6c <__muldf3+0x348>
 400e900:	100490ba 	slli	r2,r2,2
 400e904:	01010074 	movhi	r4,1025
 400e908:	213a4604 	addi	r4,r4,-5864
 400e90c:	1105883a 	add	r2,r2,r4
 400e910:	10800017 	ldw	r2,0(r2)
 400e914:	1000683a 	jmp	r2
 400e918:	0400eb6c 	andhi	r16,zero,941
 400e91c:	0400e978 	rdprs	r16,zero,933
 400e920:	0400e978 	rdprs	r16,zero,933
 400e924:	0400e974 	movhi	r16,933
 400e928:	0400eb48 	cmpgei	r16,zero,941
 400e92c:	0400eb48 	cmpgei	r16,zero,941
 400e930:	0400eb30 	cmpltui	r16,zero,940
 400e934:	0400e974 	movhi	r16,933
 400e938:	0400eb48 	cmpgei	r16,zero,941
 400e93c:	0400eb30 	cmpltui	r16,zero,940
 400e940:	0400eb48 	cmpgei	r16,zero,941
 400e944:	0400e974 	movhi	r16,933
 400e948:	0400eb58 	cmpnei	r16,zero,941
 400e94c:	0400eb58 	cmpnei	r16,zero,941
 400e950:	0400eb58 	cmpnei	r16,zero,941
 400e954:	0400eeb8 	rdprs	r16,zero,954
 400e958:	2404b03a 	or	r2,r4,r16
 400e95c:	1000711e 	bne	r2,zero,400eb24 <__muldf3+0x300>
 400e960:	05400204 	movi	r21,8
 400e964:	0021883a 	mov	r16,zero
 400e968:	002d883a 	mov	r22,zero
 400e96c:	01400084 	movi	r5,2
 400e970:	003fcb06 	br	400e8a0 <__alt_data_end+0xfc00e8a0>
 400e974:	500d883a 	mov	r6,r10
 400e978:	00800084 	movi	r2,2
 400e97c:	38805926 	beq	r7,r2,400eae4 <__muldf3+0x2c0>
 400e980:	008000c4 	movi	r2,3
 400e984:	3881bb26 	beq	r7,r2,400f074 <__muldf3+0x850>
 400e988:	00800044 	movi	r2,1
 400e98c:	3881961e 	bne	r7,r2,400efe8 <__muldf3+0x7c4>
 400e990:	3027883a 	mov	r19,r6
 400e994:	0005883a 	mov	r2,zero
 400e998:	0021883a 	mov	r16,zero
 400e99c:	002d883a 	mov	r22,zero
 400e9a0:	1004953a 	slli	r2,r2,20
 400e9a4:	98c03fcc 	andi	r3,r19,255
 400e9a8:	04400434 	movhi	r17,16
 400e9ac:	8c7fffc4 	addi	r17,r17,-1
 400e9b0:	180697fa 	slli	r3,r3,31
 400e9b4:	8460703a 	and	r16,r16,r17
 400e9b8:	80a0b03a 	or	r16,r16,r2
 400e9bc:	80c6b03a 	or	r3,r16,r3
 400e9c0:	b005883a 	mov	r2,r22
 400e9c4:	dfc01117 	ldw	ra,68(sp)
 400e9c8:	df001017 	ldw	fp,64(sp)
 400e9cc:	ddc00f17 	ldw	r23,60(sp)
 400e9d0:	dd800e17 	ldw	r22,56(sp)
 400e9d4:	dd400d17 	ldw	r21,52(sp)
 400e9d8:	dd000c17 	ldw	r20,48(sp)
 400e9dc:	dcc00b17 	ldw	r19,44(sp)
 400e9e0:	dc800a17 	ldw	r18,40(sp)
 400e9e4:	dc400917 	ldw	r17,36(sp)
 400e9e8:	dc000817 	ldw	r16,32(sp)
 400e9ec:	dec01204 	addi	sp,sp,72
 400e9f0:	f800283a 	ret
 400e9f4:	2404b03a 	or	r2,r4,r16
 400e9f8:	202b883a 	mov	r21,r4
 400e9fc:	10004426 	beq	r2,zero,400eb10 <__muldf3+0x2ec>
 400ea00:	80015126 	beq	r16,zero,400ef48 <__muldf3+0x724>
 400ea04:	8009883a 	mov	r4,r16
 400ea08:	d9800715 	stw	r6,28(sp)
 400ea0c:	d9c00215 	stw	r7,8(sp)
 400ea10:	da400415 	stw	r9,16(sp)
 400ea14:	400fb900 	call	400fb90 <__clzsi2>
 400ea18:	d9800717 	ldw	r6,28(sp)
 400ea1c:	d9c00217 	ldw	r7,8(sp)
 400ea20:	da400417 	ldw	r9,16(sp)
 400ea24:	113ffd44 	addi	r4,r2,-11
 400ea28:	00c00704 	movi	r3,28
 400ea2c:	19014216 	blt	r3,r4,400ef38 <__muldf3+0x714>
 400ea30:	00c00744 	movi	r3,29
 400ea34:	15bffe04 	addi	r22,r2,-8
 400ea38:	1907c83a 	sub	r3,r3,r4
 400ea3c:	85a0983a 	sll	r16,r16,r22
 400ea40:	a8c6d83a 	srl	r3,r21,r3
 400ea44:	adac983a 	sll	r22,r21,r22
 400ea48:	1c20b03a 	or	r16,r3,r16
 400ea4c:	1080fcc4 	addi	r2,r2,1011
 400ea50:	00a9c83a 	sub	r20,zero,r2
 400ea54:	002b883a 	mov	r21,zero
 400ea58:	000b883a 	mov	r5,zero
 400ea5c:	003f9006 	br	400e8a0 <__alt_data_end+0xfc00e8a0>
 400ea60:	3446b03a 	or	r3,r6,r17
 400ea64:	1800281e 	bne	r3,zero,400eb08 <__muldf3+0x2e4>
 400ea68:	0023883a 	mov	r17,zero
 400ea6c:	0025883a 	mov	r18,zero
 400ea70:	01c00084 	movi	r7,2
 400ea74:	003f9c06 	br	400e8e8 <__alt_data_end+0xfc00e8e8>
 400ea78:	3446b03a 	or	r3,r6,r17
 400ea7c:	18001e26 	beq	r3,zero,400eaf8 <__muldf3+0x2d4>
 400ea80:	88012126 	beq	r17,zero,400ef08 <__muldf3+0x6e4>
 400ea84:	8809883a 	mov	r4,r17
 400ea88:	d9400215 	stw	r5,8(sp)
 400ea8c:	d9800715 	stw	r6,28(sp)
 400ea90:	da400415 	stw	r9,16(sp)
 400ea94:	da800315 	stw	r10,12(sp)
 400ea98:	400fb900 	call	400fb90 <__clzsi2>
 400ea9c:	d9400217 	ldw	r5,8(sp)
 400eaa0:	d9800717 	ldw	r6,28(sp)
 400eaa4:	da400417 	ldw	r9,16(sp)
 400eaa8:	da800317 	ldw	r10,12(sp)
 400eaac:	113ffd44 	addi	r4,r2,-11
 400eab0:	00c00704 	movi	r3,28
 400eab4:	19011016 	blt	r3,r4,400eef8 <__muldf3+0x6d4>
 400eab8:	00c00744 	movi	r3,29
 400eabc:	14bffe04 	addi	r18,r2,-8
 400eac0:	1907c83a 	sub	r3,r3,r4
 400eac4:	8ca2983a 	sll	r17,r17,r18
 400eac8:	30c6d83a 	srl	r3,r6,r3
 400eacc:	34a4983a 	sll	r18,r6,r18
 400ead0:	1c62b03a 	or	r17,r3,r17
 400ead4:	1080fcc4 	addi	r2,r2,1011
 400ead8:	0085c83a 	sub	r2,zero,r2
 400eadc:	000f883a 	mov	r7,zero
 400eae0:	003f8106 	br	400e8e8 <__alt_data_end+0xfc00e8e8>
 400eae4:	3027883a 	mov	r19,r6
 400eae8:	0081ffc4 	movi	r2,2047
 400eaec:	0021883a 	mov	r16,zero
 400eaf0:	002d883a 	mov	r22,zero
 400eaf4:	003faa06 	br	400e9a0 <__alt_data_end+0xfc00e9a0>
 400eaf8:	0023883a 	mov	r17,zero
 400eafc:	0025883a 	mov	r18,zero
 400eb00:	01c00044 	movi	r7,1
 400eb04:	003f7806 	br	400e8e8 <__alt_data_end+0xfc00e8e8>
 400eb08:	01c000c4 	movi	r7,3
 400eb0c:	003f7606 	br	400e8e8 <__alt_data_end+0xfc00e8e8>
 400eb10:	05400104 	movi	r21,4
 400eb14:	0021883a 	mov	r16,zero
 400eb18:	002d883a 	mov	r22,zero
 400eb1c:	01400044 	movi	r5,1
 400eb20:	003f5f06 	br	400e8a0 <__alt_data_end+0xfc00e8a0>
 400eb24:	05400304 	movi	r21,12
 400eb28:	014000c4 	movi	r5,3
 400eb2c:	003f5c06 	br	400e8a0 <__alt_data_end+0xfc00e8a0>
 400eb30:	04000434 	movhi	r16,16
 400eb34:	0027883a 	mov	r19,zero
 400eb38:	843fffc4 	addi	r16,r16,-1
 400eb3c:	05bfffc4 	movi	r22,-1
 400eb40:	0081ffc4 	movi	r2,2047
 400eb44:	003f9606 	br	400e9a0 <__alt_data_end+0xfc00e9a0>
 400eb48:	8023883a 	mov	r17,r16
 400eb4c:	b025883a 	mov	r18,r22
 400eb50:	280f883a 	mov	r7,r5
 400eb54:	003f8806 	br	400e978 <__alt_data_end+0xfc00e978>
 400eb58:	8023883a 	mov	r17,r16
 400eb5c:	b025883a 	mov	r18,r22
 400eb60:	480d883a 	mov	r6,r9
 400eb64:	280f883a 	mov	r7,r5
 400eb68:	003f8306 	br	400e978 <__alt_data_end+0xfc00e978>
 400eb6c:	b026d43a 	srli	r19,r22,16
 400eb70:	902ed43a 	srli	r23,r18,16
 400eb74:	b5bfffcc 	andi	r22,r22,65535
 400eb78:	94bfffcc 	andi	r18,r18,65535
 400eb7c:	b00b883a 	mov	r5,r22
 400eb80:	9009883a 	mov	r4,r18
 400eb84:	d8c00515 	stw	r3,20(sp)
 400eb88:	d9800715 	stw	r6,28(sp)
 400eb8c:	da000615 	stw	r8,24(sp)
 400eb90:	4002ce00 	call	4002ce0 <__mulsi3>
 400eb94:	980b883a 	mov	r5,r19
 400eb98:	9009883a 	mov	r4,r18
 400eb9c:	1029883a 	mov	r20,r2
 400eba0:	4002ce00 	call	4002ce0 <__mulsi3>
 400eba4:	b80b883a 	mov	r5,r23
 400eba8:	9809883a 	mov	r4,r19
 400ebac:	102b883a 	mov	r21,r2
 400ebb0:	4002ce00 	call	4002ce0 <__mulsi3>
 400ebb4:	b809883a 	mov	r4,r23
 400ebb8:	b00b883a 	mov	r5,r22
 400ebbc:	1039883a 	mov	fp,r2
 400ebc0:	4002ce00 	call	4002ce0 <__mulsi3>
 400ebc4:	a008d43a 	srli	r4,r20,16
 400ebc8:	1545883a 	add	r2,r2,r21
 400ebcc:	d8c00517 	ldw	r3,20(sp)
 400ebd0:	2085883a 	add	r2,r4,r2
 400ebd4:	d9800717 	ldw	r6,28(sp)
 400ebd8:	da000617 	ldw	r8,24(sp)
 400ebdc:	1540022e 	bgeu	r2,r21,400ebe8 <__muldf3+0x3c4>
 400ebe0:	01000074 	movhi	r4,1
 400ebe4:	e139883a 	add	fp,fp,r4
 400ebe8:	100e943a 	slli	r7,r2,16
 400ebec:	1004d43a 	srli	r2,r2,16
 400ebf0:	882ad43a 	srli	r21,r17,16
 400ebf4:	a53fffcc 	andi	r20,r20,65535
 400ebf8:	8c7fffcc 	andi	r17,r17,65535
 400ebfc:	3d29883a 	add	r20,r7,r20
 400ec00:	b00b883a 	mov	r5,r22
 400ec04:	8809883a 	mov	r4,r17
 400ec08:	d8c00515 	stw	r3,20(sp)
 400ec0c:	d9800715 	stw	r6,28(sp)
 400ec10:	da000615 	stw	r8,24(sp)
 400ec14:	dd000115 	stw	r20,4(sp)
 400ec18:	d8800015 	stw	r2,0(sp)
 400ec1c:	4002ce00 	call	4002ce0 <__mulsi3>
 400ec20:	980b883a 	mov	r5,r19
 400ec24:	8809883a 	mov	r4,r17
 400ec28:	d8800215 	stw	r2,8(sp)
 400ec2c:	4002ce00 	call	4002ce0 <__mulsi3>
 400ec30:	9809883a 	mov	r4,r19
 400ec34:	a80b883a 	mov	r5,r21
 400ec38:	1029883a 	mov	r20,r2
 400ec3c:	4002ce00 	call	4002ce0 <__mulsi3>
 400ec40:	b00b883a 	mov	r5,r22
 400ec44:	a809883a 	mov	r4,r21
 400ec48:	d8800415 	stw	r2,16(sp)
 400ec4c:	4002ce00 	call	4002ce0 <__mulsi3>
 400ec50:	d9c00217 	ldw	r7,8(sp)
 400ec54:	1505883a 	add	r2,r2,r20
 400ec58:	d8c00517 	ldw	r3,20(sp)
 400ec5c:	3826d43a 	srli	r19,r7,16
 400ec60:	d9800717 	ldw	r6,28(sp)
 400ec64:	da000617 	ldw	r8,24(sp)
 400ec68:	9885883a 	add	r2,r19,r2
 400ec6c:	da400417 	ldw	r9,16(sp)
 400ec70:	1500022e 	bgeu	r2,r20,400ec7c <__muldf3+0x458>
 400ec74:	01000074 	movhi	r4,1
 400ec78:	4913883a 	add	r9,r9,r4
 400ec7c:	1028d43a 	srli	r20,r2,16
 400ec80:	1004943a 	slli	r2,r2,16
 400ec84:	802cd43a 	srli	r22,r16,16
 400ec88:	843fffcc 	andi	r16,r16,65535
 400ec8c:	3cffffcc 	andi	r19,r7,65535
 400ec90:	9009883a 	mov	r4,r18
 400ec94:	800b883a 	mov	r5,r16
 400ec98:	a269883a 	add	r20,r20,r9
 400ec9c:	d8c00515 	stw	r3,20(sp)
 400eca0:	d9800715 	stw	r6,28(sp)
 400eca4:	da000615 	stw	r8,24(sp)
 400eca8:	14e7883a 	add	r19,r2,r19
 400ecac:	4002ce00 	call	4002ce0 <__mulsi3>
 400ecb0:	9009883a 	mov	r4,r18
 400ecb4:	b00b883a 	mov	r5,r22
 400ecb8:	d8800315 	stw	r2,12(sp)
 400ecbc:	4002ce00 	call	4002ce0 <__mulsi3>
 400ecc0:	b809883a 	mov	r4,r23
 400ecc4:	b00b883a 	mov	r5,r22
 400ecc8:	d8800215 	stw	r2,8(sp)
 400eccc:	4002ce00 	call	4002ce0 <__mulsi3>
 400ecd0:	b80b883a 	mov	r5,r23
 400ecd4:	8009883a 	mov	r4,r16
 400ecd8:	d8800415 	stw	r2,16(sp)
 400ecdc:	4002ce00 	call	4002ce0 <__mulsi3>
 400ece0:	da800317 	ldw	r10,12(sp)
 400ece4:	d9c00217 	ldw	r7,8(sp)
 400ece8:	d9000017 	ldw	r4,0(sp)
 400ecec:	502ed43a 	srli	r23,r10,16
 400ecf0:	11c5883a 	add	r2,r2,r7
 400ecf4:	24e5883a 	add	r18,r4,r19
 400ecf8:	b885883a 	add	r2,r23,r2
 400ecfc:	d8c00517 	ldw	r3,20(sp)
 400ed00:	d9800717 	ldw	r6,28(sp)
 400ed04:	da000617 	ldw	r8,24(sp)
 400ed08:	da400417 	ldw	r9,16(sp)
 400ed0c:	11c0022e 	bgeu	r2,r7,400ed18 <__muldf3+0x4f4>
 400ed10:	01000074 	movhi	r4,1
 400ed14:	4913883a 	add	r9,r9,r4
 400ed18:	100ed43a 	srli	r7,r2,16
 400ed1c:	1004943a 	slli	r2,r2,16
 400ed20:	55ffffcc 	andi	r23,r10,65535
 400ed24:	3a53883a 	add	r9,r7,r9
 400ed28:	8809883a 	mov	r4,r17
 400ed2c:	800b883a 	mov	r5,r16
 400ed30:	d8c00515 	stw	r3,20(sp)
 400ed34:	d9800715 	stw	r6,28(sp)
 400ed38:	da000615 	stw	r8,24(sp)
 400ed3c:	da400415 	stw	r9,16(sp)
 400ed40:	15ef883a 	add	r23,r2,r23
 400ed44:	4002ce00 	call	4002ce0 <__mulsi3>
 400ed48:	8809883a 	mov	r4,r17
 400ed4c:	b00b883a 	mov	r5,r22
 400ed50:	d8800215 	stw	r2,8(sp)
 400ed54:	4002ce00 	call	4002ce0 <__mulsi3>
 400ed58:	b00b883a 	mov	r5,r22
 400ed5c:	a809883a 	mov	r4,r21
 400ed60:	d8800315 	stw	r2,12(sp)
 400ed64:	4002ce00 	call	4002ce0 <__mulsi3>
 400ed68:	8009883a 	mov	r4,r16
 400ed6c:	a80b883a 	mov	r5,r21
 400ed70:	1023883a 	mov	r17,r2
 400ed74:	4002ce00 	call	4002ce0 <__mulsi3>
 400ed78:	d9c00217 	ldw	r7,8(sp)
 400ed7c:	da800317 	ldw	r10,12(sp)
 400ed80:	d8c00517 	ldw	r3,20(sp)
 400ed84:	3808d43a 	srli	r4,r7,16
 400ed88:	1285883a 	add	r2,r2,r10
 400ed8c:	d9800717 	ldw	r6,28(sp)
 400ed90:	2085883a 	add	r2,r4,r2
 400ed94:	da000617 	ldw	r8,24(sp)
 400ed98:	da400417 	ldw	r9,16(sp)
 400ed9c:	1280022e 	bgeu	r2,r10,400eda8 <__muldf3+0x584>
 400eda0:	01000074 	movhi	r4,1
 400eda4:	8923883a 	add	r17,r17,r4
 400eda8:	1008943a 	slli	r4,r2,16
 400edac:	39ffffcc 	andi	r7,r7,65535
 400edb0:	e4b9883a 	add	fp,fp,r18
 400edb4:	21cf883a 	add	r7,r4,r7
 400edb8:	e4e7803a 	cmpltu	r19,fp,r19
 400edbc:	3d0f883a 	add	r7,r7,r20
 400edc0:	bf39883a 	add	fp,r23,fp
 400edc4:	99c9883a 	add	r4,r19,r7
 400edc8:	e5ef803a 	cmpltu	r23,fp,r23
 400edcc:	490b883a 	add	r5,r9,r4
 400edd0:	1004d43a 	srli	r2,r2,16
 400edd4:	b965883a 	add	r18,r23,r5
 400edd8:	24c9803a 	cmpltu	r4,r4,r19
 400eddc:	3d29803a 	cmpltu	r20,r7,r20
 400ede0:	a128b03a 	or	r20,r20,r4
 400ede4:	95ef803a 	cmpltu	r23,r18,r23
 400ede8:	2a53803a 	cmpltu	r9,r5,r9
 400edec:	a0a9883a 	add	r20,r20,r2
 400edf0:	4deeb03a 	or	r23,r9,r23
 400edf4:	a5ef883a 	add	r23,r20,r23
 400edf8:	bc63883a 	add	r17,r23,r17
 400edfc:	e004927a 	slli	r2,fp,9
 400ee00:	d9000117 	ldw	r4,4(sp)
 400ee04:	882e927a 	slli	r23,r17,9
 400ee08:	9022d5fa 	srli	r17,r18,23
 400ee0c:	e038d5fa 	srli	fp,fp,23
 400ee10:	1104b03a 	or	r2,r2,r4
 400ee14:	9024927a 	slli	r18,r18,9
 400ee18:	1004c03a 	cmpne	r2,r2,zero
 400ee1c:	bc62b03a 	or	r17,r23,r17
 400ee20:	1738b03a 	or	fp,r2,fp
 400ee24:	8880402c 	andhi	r2,r17,256
 400ee28:	e4a4b03a 	or	r18,fp,r18
 400ee2c:	10000726 	beq	r2,zero,400ee4c <__muldf3+0x628>
 400ee30:	9006d07a 	srli	r3,r18,1
 400ee34:	880497fa 	slli	r2,r17,31
 400ee38:	9480004c 	andi	r18,r18,1
 400ee3c:	8822d07a 	srli	r17,r17,1
 400ee40:	1ca4b03a 	or	r18,r3,r18
 400ee44:	14a4b03a 	or	r18,r2,r18
 400ee48:	4007883a 	mov	r3,r8
 400ee4c:	1880ffc4 	addi	r2,r3,1023
 400ee50:	0080460e 	bge	zero,r2,400ef6c <__muldf3+0x748>
 400ee54:	910001cc 	andi	r4,r18,7
 400ee58:	20000726 	beq	r4,zero,400ee78 <__muldf3+0x654>
 400ee5c:	910003cc 	andi	r4,r18,15
 400ee60:	01400104 	movi	r5,4
 400ee64:	21400426 	beq	r4,r5,400ee78 <__muldf3+0x654>
 400ee68:	9149883a 	add	r4,r18,r5
 400ee6c:	24a5803a 	cmpltu	r18,r4,r18
 400ee70:	8ca3883a 	add	r17,r17,r18
 400ee74:	2025883a 	mov	r18,r4
 400ee78:	8900402c 	andhi	r4,r17,256
 400ee7c:	20000426 	beq	r4,zero,400ee90 <__muldf3+0x66c>
 400ee80:	18810004 	addi	r2,r3,1024
 400ee84:	00ffc034 	movhi	r3,65280
 400ee88:	18ffffc4 	addi	r3,r3,-1
 400ee8c:	88e2703a 	and	r17,r17,r3
 400ee90:	00c1ff84 	movi	r3,2046
 400ee94:	18bf1316 	blt	r3,r2,400eae4 <__alt_data_end+0xfc00eae4>
 400ee98:	882c977a 	slli	r22,r17,29
 400ee9c:	9024d0fa 	srli	r18,r18,3
 400eea0:	8822927a 	slli	r17,r17,9
 400eea4:	1081ffcc 	andi	r2,r2,2047
 400eea8:	b4acb03a 	or	r22,r22,r18
 400eeac:	8820d33a 	srli	r16,r17,12
 400eeb0:	3027883a 	mov	r19,r6
 400eeb4:	003eba06 	br	400e9a0 <__alt_data_end+0xfc00e9a0>
 400eeb8:	8080022c 	andhi	r2,r16,8
 400eebc:	10000926 	beq	r2,zero,400eee4 <__muldf3+0x6c0>
 400eec0:	8880022c 	andhi	r2,r17,8
 400eec4:	1000071e 	bne	r2,zero,400eee4 <__muldf3+0x6c0>
 400eec8:	00800434 	movhi	r2,16
 400eecc:	8c000234 	orhi	r16,r17,8
 400eed0:	10bfffc4 	addi	r2,r2,-1
 400eed4:	e027883a 	mov	r19,fp
 400eed8:	80a0703a 	and	r16,r16,r2
 400eedc:	902d883a 	mov	r22,r18
 400eee0:	003f1706 	br	400eb40 <__alt_data_end+0xfc00eb40>
 400eee4:	00800434 	movhi	r2,16
 400eee8:	84000234 	orhi	r16,r16,8
 400eeec:	10bfffc4 	addi	r2,r2,-1
 400eef0:	80a0703a 	and	r16,r16,r2
 400eef4:	003f1206 	br	400eb40 <__alt_data_end+0xfc00eb40>
 400eef8:	147ff604 	addi	r17,r2,-40
 400eefc:	3462983a 	sll	r17,r6,r17
 400ef00:	0025883a 	mov	r18,zero
 400ef04:	003ef306 	br	400ead4 <__alt_data_end+0xfc00ead4>
 400ef08:	3009883a 	mov	r4,r6
 400ef0c:	d9400215 	stw	r5,8(sp)
 400ef10:	d9800715 	stw	r6,28(sp)
 400ef14:	da400415 	stw	r9,16(sp)
 400ef18:	da800315 	stw	r10,12(sp)
 400ef1c:	400fb900 	call	400fb90 <__clzsi2>
 400ef20:	10800804 	addi	r2,r2,32
 400ef24:	da800317 	ldw	r10,12(sp)
 400ef28:	da400417 	ldw	r9,16(sp)
 400ef2c:	d9800717 	ldw	r6,28(sp)
 400ef30:	d9400217 	ldw	r5,8(sp)
 400ef34:	003edd06 	br	400eaac <__alt_data_end+0xfc00eaac>
 400ef38:	143ff604 	addi	r16,r2,-40
 400ef3c:	ac20983a 	sll	r16,r21,r16
 400ef40:	002d883a 	mov	r22,zero
 400ef44:	003ec106 	br	400ea4c <__alt_data_end+0xfc00ea4c>
 400ef48:	d9800715 	stw	r6,28(sp)
 400ef4c:	d9c00215 	stw	r7,8(sp)
 400ef50:	da400415 	stw	r9,16(sp)
 400ef54:	400fb900 	call	400fb90 <__clzsi2>
 400ef58:	10800804 	addi	r2,r2,32
 400ef5c:	da400417 	ldw	r9,16(sp)
 400ef60:	d9c00217 	ldw	r7,8(sp)
 400ef64:	d9800717 	ldw	r6,28(sp)
 400ef68:	003eae06 	br	400ea24 <__alt_data_end+0xfc00ea24>
 400ef6c:	00c00044 	movi	r3,1
 400ef70:	1887c83a 	sub	r3,r3,r2
 400ef74:	01000e04 	movi	r4,56
 400ef78:	20fe8516 	blt	r4,r3,400e990 <__alt_data_end+0xfc00e990>
 400ef7c:	010007c4 	movi	r4,31
 400ef80:	20c01b16 	blt	r4,r3,400eff0 <__muldf3+0x7cc>
 400ef84:	00800804 	movi	r2,32
 400ef88:	10c5c83a 	sub	r2,r2,r3
 400ef8c:	888a983a 	sll	r5,r17,r2
 400ef90:	90c8d83a 	srl	r4,r18,r3
 400ef94:	9084983a 	sll	r2,r18,r2
 400ef98:	88e2d83a 	srl	r17,r17,r3
 400ef9c:	2906b03a 	or	r3,r5,r4
 400efa0:	1004c03a 	cmpne	r2,r2,zero
 400efa4:	1886b03a 	or	r3,r3,r2
 400efa8:	188001cc 	andi	r2,r3,7
 400efac:	10000726 	beq	r2,zero,400efcc <__muldf3+0x7a8>
 400efb0:	188003cc 	andi	r2,r3,15
 400efb4:	01000104 	movi	r4,4
 400efb8:	11000426 	beq	r2,r4,400efcc <__muldf3+0x7a8>
 400efbc:	1805883a 	mov	r2,r3
 400efc0:	10c00104 	addi	r3,r2,4
 400efc4:	1885803a 	cmpltu	r2,r3,r2
 400efc8:	88a3883a 	add	r17,r17,r2
 400efcc:	8880202c 	andhi	r2,r17,128
 400efd0:	10001c26 	beq	r2,zero,400f044 <__muldf3+0x820>
 400efd4:	3027883a 	mov	r19,r6
 400efd8:	00800044 	movi	r2,1
 400efdc:	0021883a 	mov	r16,zero
 400efe0:	002d883a 	mov	r22,zero
 400efe4:	003e6e06 	br	400e9a0 <__alt_data_end+0xfc00e9a0>
 400efe8:	4007883a 	mov	r3,r8
 400efec:	003f9706 	br	400ee4c <__alt_data_end+0xfc00ee4c>
 400eff0:	017ff844 	movi	r5,-31
 400eff4:	2885c83a 	sub	r2,r5,r2
 400eff8:	888ad83a 	srl	r5,r17,r2
 400effc:	00800804 	movi	r2,32
 400f000:	18801a26 	beq	r3,r2,400f06c <__muldf3+0x848>
 400f004:	01001004 	movi	r4,64
 400f008:	20c7c83a 	sub	r3,r4,r3
 400f00c:	88e2983a 	sll	r17,r17,r3
 400f010:	8ca4b03a 	or	r18,r17,r18
 400f014:	9004c03a 	cmpne	r2,r18,zero
 400f018:	2884b03a 	or	r2,r5,r2
 400f01c:	144001cc 	andi	r17,r2,7
 400f020:	88000d1e 	bne	r17,zero,400f058 <__muldf3+0x834>
 400f024:	0021883a 	mov	r16,zero
 400f028:	102cd0fa 	srli	r22,r2,3
 400f02c:	3027883a 	mov	r19,r6
 400f030:	0005883a 	mov	r2,zero
 400f034:	b46cb03a 	or	r22,r22,r17
 400f038:	003e5906 	br	400e9a0 <__alt_data_end+0xfc00e9a0>
 400f03c:	1007883a 	mov	r3,r2
 400f040:	0023883a 	mov	r17,zero
 400f044:	8820927a 	slli	r16,r17,9
 400f048:	1805883a 	mov	r2,r3
 400f04c:	8822977a 	slli	r17,r17,29
 400f050:	8020d33a 	srli	r16,r16,12
 400f054:	003ff406 	br	400f028 <__alt_data_end+0xfc00f028>
 400f058:	10c003cc 	andi	r3,r2,15
 400f05c:	01000104 	movi	r4,4
 400f060:	193ff626 	beq	r3,r4,400f03c <__alt_data_end+0xfc00f03c>
 400f064:	0023883a 	mov	r17,zero
 400f068:	003fd506 	br	400efc0 <__alt_data_end+0xfc00efc0>
 400f06c:	0023883a 	mov	r17,zero
 400f070:	003fe706 	br	400f010 <__alt_data_end+0xfc00f010>
 400f074:	00800434 	movhi	r2,16
 400f078:	8c000234 	orhi	r16,r17,8
 400f07c:	10bfffc4 	addi	r2,r2,-1
 400f080:	3027883a 	mov	r19,r6
 400f084:	80a0703a 	and	r16,r16,r2
 400f088:	902d883a 	mov	r22,r18
 400f08c:	003eac06 	br	400eb40 <__alt_data_end+0xfc00eb40>

0400f090 <__subdf3>:
 400f090:	02000434 	movhi	r8,16
 400f094:	423fffc4 	addi	r8,r8,-1
 400f098:	defffb04 	addi	sp,sp,-20
 400f09c:	2a14703a 	and	r10,r5,r8
 400f0a0:	3812d53a 	srli	r9,r7,20
 400f0a4:	3a10703a 	and	r8,r7,r8
 400f0a8:	2006d77a 	srli	r3,r4,29
 400f0ac:	3004d77a 	srli	r2,r6,29
 400f0b0:	dc000015 	stw	r16,0(sp)
 400f0b4:	501490fa 	slli	r10,r10,3
 400f0b8:	2820d53a 	srli	r16,r5,20
 400f0bc:	401090fa 	slli	r8,r8,3
 400f0c0:	dc800215 	stw	r18,8(sp)
 400f0c4:	dc400115 	stw	r17,4(sp)
 400f0c8:	dfc00415 	stw	ra,16(sp)
 400f0cc:	202290fa 	slli	r17,r4,3
 400f0d0:	dcc00315 	stw	r19,12(sp)
 400f0d4:	4a41ffcc 	andi	r9,r9,2047
 400f0d8:	0101ffc4 	movi	r4,2047
 400f0dc:	2824d7fa 	srli	r18,r5,31
 400f0e0:	8401ffcc 	andi	r16,r16,2047
 400f0e4:	50c6b03a 	or	r3,r10,r3
 400f0e8:	380ed7fa 	srli	r7,r7,31
 400f0ec:	408ab03a 	or	r5,r8,r2
 400f0f0:	300c90fa 	slli	r6,r6,3
 400f0f4:	49009626 	beq	r9,r4,400f350 <__subdf3+0x2c0>
 400f0f8:	39c0005c 	xori	r7,r7,1
 400f0fc:	8245c83a 	sub	r2,r16,r9
 400f100:	3c807426 	beq	r7,r18,400f2d4 <__subdf3+0x244>
 400f104:	0080af0e 	bge	zero,r2,400f3c4 <__subdf3+0x334>
 400f108:	48002a1e 	bne	r9,zero,400f1b4 <__subdf3+0x124>
 400f10c:	2988b03a 	or	r4,r5,r6
 400f110:	20009a1e 	bne	r4,zero,400f37c <__subdf3+0x2ec>
 400f114:	888001cc 	andi	r2,r17,7
 400f118:	10000726 	beq	r2,zero,400f138 <__subdf3+0xa8>
 400f11c:	888003cc 	andi	r2,r17,15
 400f120:	01000104 	movi	r4,4
 400f124:	11000426 	beq	r2,r4,400f138 <__subdf3+0xa8>
 400f128:	890b883a 	add	r5,r17,r4
 400f12c:	2c63803a 	cmpltu	r17,r5,r17
 400f130:	1c47883a 	add	r3,r3,r17
 400f134:	2823883a 	mov	r17,r5
 400f138:	1880202c 	andhi	r2,r3,128
 400f13c:	10005926 	beq	r2,zero,400f2a4 <__subdf3+0x214>
 400f140:	84000044 	addi	r16,r16,1
 400f144:	0081ffc4 	movi	r2,2047
 400f148:	8080be26 	beq	r16,r2,400f444 <__subdf3+0x3b4>
 400f14c:	017fe034 	movhi	r5,65408
 400f150:	297fffc4 	addi	r5,r5,-1
 400f154:	1946703a 	and	r3,r3,r5
 400f158:	1804977a 	slli	r2,r3,29
 400f15c:	1806927a 	slli	r3,r3,9
 400f160:	8822d0fa 	srli	r17,r17,3
 400f164:	8401ffcc 	andi	r16,r16,2047
 400f168:	180ad33a 	srli	r5,r3,12
 400f16c:	9100004c 	andi	r4,r18,1
 400f170:	1444b03a 	or	r2,r2,r17
 400f174:	80c1ffcc 	andi	r3,r16,2047
 400f178:	1820953a 	slli	r16,r3,20
 400f17c:	20c03fcc 	andi	r3,r4,255
 400f180:	180897fa 	slli	r4,r3,31
 400f184:	00c00434 	movhi	r3,16
 400f188:	18ffffc4 	addi	r3,r3,-1
 400f18c:	28c6703a 	and	r3,r5,r3
 400f190:	1c06b03a 	or	r3,r3,r16
 400f194:	1906b03a 	or	r3,r3,r4
 400f198:	dfc00417 	ldw	ra,16(sp)
 400f19c:	dcc00317 	ldw	r19,12(sp)
 400f1a0:	dc800217 	ldw	r18,8(sp)
 400f1a4:	dc400117 	ldw	r17,4(sp)
 400f1a8:	dc000017 	ldw	r16,0(sp)
 400f1ac:	dec00504 	addi	sp,sp,20
 400f1b0:	f800283a 	ret
 400f1b4:	0101ffc4 	movi	r4,2047
 400f1b8:	813fd626 	beq	r16,r4,400f114 <__alt_data_end+0xfc00f114>
 400f1bc:	29402034 	orhi	r5,r5,128
 400f1c0:	01000e04 	movi	r4,56
 400f1c4:	2080a316 	blt	r4,r2,400f454 <__subdf3+0x3c4>
 400f1c8:	010007c4 	movi	r4,31
 400f1cc:	2080c616 	blt	r4,r2,400f4e8 <__subdf3+0x458>
 400f1d0:	01000804 	movi	r4,32
 400f1d4:	2089c83a 	sub	r4,r4,r2
 400f1d8:	2910983a 	sll	r8,r5,r4
 400f1dc:	308ed83a 	srl	r7,r6,r2
 400f1e0:	3108983a 	sll	r4,r6,r4
 400f1e4:	2884d83a 	srl	r2,r5,r2
 400f1e8:	41ccb03a 	or	r6,r8,r7
 400f1ec:	2008c03a 	cmpne	r4,r4,zero
 400f1f0:	310cb03a 	or	r6,r6,r4
 400f1f4:	898dc83a 	sub	r6,r17,r6
 400f1f8:	89a3803a 	cmpltu	r17,r17,r6
 400f1fc:	1887c83a 	sub	r3,r3,r2
 400f200:	1c47c83a 	sub	r3,r3,r17
 400f204:	3023883a 	mov	r17,r6
 400f208:	1880202c 	andhi	r2,r3,128
 400f20c:	10002326 	beq	r2,zero,400f29c <__subdf3+0x20c>
 400f210:	04c02034 	movhi	r19,128
 400f214:	9cffffc4 	addi	r19,r19,-1
 400f218:	1ce6703a 	and	r19,r3,r19
 400f21c:	98007a26 	beq	r19,zero,400f408 <__subdf3+0x378>
 400f220:	9809883a 	mov	r4,r19
 400f224:	400fb900 	call	400fb90 <__clzsi2>
 400f228:	113ffe04 	addi	r4,r2,-8
 400f22c:	00c007c4 	movi	r3,31
 400f230:	19007b16 	blt	r3,r4,400f420 <__subdf3+0x390>
 400f234:	00800804 	movi	r2,32
 400f238:	1105c83a 	sub	r2,r2,r4
 400f23c:	8884d83a 	srl	r2,r17,r2
 400f240:	9906983a 	sll	r3,r19,r4
 400f244:	8922983a 	sll	r17,r17,r4
 400f248:	10c4b03a 	or	r2,r2,r3
 400f24c:	24007816 	blt	r4,r16,400f430 <__subdf3+0x3a0>
 400f250:	2421c83a 	sub	r16,r4,r16
 400f254:	80c00044 	addi	r3,r16,1
 400f258:	010007c4 	movi	r4,31
 400f25c:	20c09516 	blt	r4,r3,400f4b4 <__subdf3+0x424>
 400f260:	01400804 	movi	r5,32
 400f264:	28cbc83a 	sub	r5,r5,r3
 400f268:	88c8d83a 	srl	r4,r17,r3
 400f26c:	8962983a 	sll	r17,r17,r5
 400f270:	114a983a 	sll	r5,r2,r5
 400f274:	10c6d83a 	srl	r3,r2,r3
 400f278:	8804c03a 	cmpne	r2,r17,zero
 400f27c:	290ab03a 	or	r5,r5,r4
 400f280:	28a2b03a 	or	r17,r5,r2
 400f284:	0021883a 	mov	r16,zero
 400f288:	003fa206 	br	400f114 <__alt_data_end+0xfc00f114>
 400f28c:	2090b03a 	or	r8,r4,r2
 400f290:	40018e26 	beq	r8,zero,400f8cc <__subdf3+0x83c>
 400f294:	1007883a 	mov	r3,r2
 400f298:	2023883a 	mov	r17,r4
 400f29c:	888001cc 	andi	r2,r17,7
 400f2a0:	103f9e1e 	bne	r2,zero,400f11c <__alt_data_end+0xfc00f11c>
 400f2a4:	1804977a 	slli	r2,r3,29
 400f2a8:	8822d0fa 	srli	r17,r17,3
 400f2ac:	1810d0fa 	srli	r8,r3,3
 400f2b0:	9100004c 	andi	r4,r18,1
 400f2b4:	1444b03a 	or	r2,r2,r17
 400f2b8:	00c1ffc4 	movi	r3,2047
 400f2bc:	80c02826 	beq	r16,r3,400f360 <__subdf3+0x2d0>
 400f2c0:	01400434 	movhi	r5,16
 400f2c4:	297fffc4 	addi	r5,r5,-1
 400f2c8:	80e0703a 	and	r16,r16,r3
 400f2cc:	414a703a 	and	r5,r8,r5
 400f2d0:	003fa806 	br	400f174 <__alt_data_end+0xfc00f174>
 400f2d4:	0080630e 	bge	zero,r2,400f464 <__subdf3+0x3d4>
 400f2d8:	48003026 	beq	r9,zero,400f39c <__subdf3+0x30c>
 400f2dc:	0101ffc4 	movi	r4,2047
 400f2e0:	813f8c26 	beq	r16,r4,400f114 <__alt_data_end+0xfc00f114>
 400f2e4:	29402034 	orhi	r5,r5,128
 400f2e8:	01000e04 	movi	r4,56
 400f2ec:	2080a90e 	bge	r4,r2,400f594 <__subdf3+0x504>
 400f2f0:	298cb03a 	or	r6,r5,r6
 400f2f4:	3012c03a 	cmpne	r9,r6,zero
 400f2f8:	0005883a 	mov	r2,zero
 400f2fc:	4c53883a 	add	r9,r9,r17
 400f300:	4c63803a 	cmpltu	r17,r9,r17
 400f304:	10c7883a 	add	r3,r2,r3
 400f308:	88c7883a 	add	r3,r17,r3
 400f30c:	4823883a 	mov	r17,r9
 400f310:	1880202c 	andhi	r2,r3,128
 400f314:	1000d026 	beq	r2,zero,400f658 <__subdf3+0x5c8>
 400f318:	84000044 	addi	r16,r16,1
 400f31c:	0081ffc4 	movi	r2,2047
 400f320:	8080fe26 	beq	r16,r2,400f71c <__subdf3+0x68c>
 400f324:	00bfe034 	movhi	r2,65408
 400f328:	10bfffc4 	addi	r2,r2,-1
 400f32c:	1886703a 	and	r3,r3,r2
 400f330:	880ad07a 	srli	r5,r17,1
 400f334:	180497fa 	slli	r2,r3,31
 400f338:	8900004c 	andi	r4,r17,1
 400f33c:	2922b03a 	or	r17,r5,r4
 400f340:	1806d07a 	srli	r3,r3,1
 400f344:	1462b03a 	or	r17,r2,r17
 400f348:	3825883a 	mov	r18,r7
 400f34c:	003f7106 	br	400f114 <__alt_data_end+0xfc00f114>
 400f350:	2984b03a 	or	r2,r5,r6
 400f354:	103f6826 	beq	r2,zero,400f0f8 <__alt_data_end+0xfc00f0f8>
 400f358:	39c03fcc 	andi	r7,r7,255
 400f35c:	003f6706 	br	400f0fc <__alt_data_end+0xfc00f0fc>
 400f360:	4086b03a 	or	r3,r8,r2
 400f364:	18015226 	beq	r3,zero,400f8b0 <__subdf3+0x820>
 400f368:	00c00434 	movhi	r3,16
 400f36c:	41400234 	orhi	r5,r8,8
 400f370:	18ffffc4 	addi	r3,r3,-1
 400f374:	28ca703a 	and	r5,r5,r3
 400f378:	003f7e06 	br	400f174 <__alt_data_end+0xfc00f174>
 400f37c:	10bfffc4 	addi	r2,r2,-1
 400f380:	1000491e 	bne	r2,zero,400f4a8 <__subdf3+0x418>
 400f384:	898fc83a 	sub	r7,r17,r6
 400f388:	89e3803a 	cmpltu	r17,r17,r7
 400f38c:	1947c83a 	sub	r3,r3,r5
 400f390:	1c47c83a 	sub	r3,r3,r17
 400f394:	3823883a 	mov	r17,r7
 400f398:	003f9b06 	br	400f208 <__alt_data_end+0xfc00f208>
 400f39c:	2988b03a 	or	r4,r5,r6
 400f3a0:	203f5c26 	beq	r4,zero,400f114 <__alt_data_end+0xfc00f114>
 400f3a4:	10bfffc4 	addi	r2,r2,-1
 400f3a8:	1000931e 	bne	r2,zero,400f5f8 <__subdf3+0x568>
 400f3ac:	898d883a 	add	r6,r17,r6
 400f3b0:	3463803a 	cmpltu	r17,r6,r17
 400f3b4:	1947883a 	add	r3,r3,r5
 400f3b8:	88c7883a 	add	r3,r17,r3
 400f3bc:	3023883a 	mov	r17,r6
 400f3c0:	003fd306 	br	400f310 <__alt_data_end+0xfc00f310>
 400f3c4:	1000541e 	bne	r2,zero,400f518 <__subdf3+0x488>
 400f3c8:	80800044 	addi	r2,r16,1
 400f3cc:	1081ffcc 	andi	r2,r2,2047
 400f3d0:	01000044 	movi	r4,1
 400f3d4:	2080a20e 	bge	r4,r2,400f660 <__subdf3+0x5d0>
 400f3d8:	8989c83a 	sub	r4,r17,r6
 400f3dc:	8905803a 	cmpltu	r2,r17,r4
 400f3e0:	1967c83a 	sub	r19,r3,r5
 400f3e4:	98a7c83a 	sub	r19,r19,r2
 400f3e8:	9880202c 	andhi	r2,r19,128
 400f3ec:	10006326 	beq	r2,zero,400f57c <__subdf3+0x4ec>
 400f3f0:	3463c83a 	sub	r17,r6,r17
 400f3f4:	28c7c83a 	sub	r3,r5,r3
 400f3f8:	344d803a 	cmpltu	r6,r6,r17
 400f3fc:	19a7c83a 	sub	r19,r3,r6
 400f400:	3825883a 	mov	r18,r7
 400f404:	983f861e 	bne	r19,zero,400f220 <__alt_data_end+0xfc00f220>
 400f408:	8809883a 	mov	r4,r17
 400f40c:	400fb900 	call	400fb90 <__clzsi2>
 400f410:	10800804 	addi	r2,r2,32
 400f414:	113ffe04 	addi	r4,r2,-8
 400f418:	00c007c4 	movi	r3,31
 400f41c:	193f850e 	bge	r3,r4,400f234 <__alt_data_end+0xfc00f234>
 400f420:	10bff604 	addi	r2,r2,-40
 400f424:	8884983a 	sll	r2,r17,r2
 400f428:	0023883a 	mov	r17,zero
 400f42c:	243f880e 	bge	r4,r16,400f250 <__alt_data_end+0xfc00f250>
 400f430:	00ffe034 	movhi	r3,65408
 400f434:	18ffffc4 	addi	r3,r3,-1
 400f438:	8121c83a 	sub	r16,r16,r4
 400f43c:	10c6703a 	and	r3,r2,r3
 400f440:	003f3406 	br	400f114 <__alt_data_end+0xfc00f114>
 400f444:	9100004c 	andi	r4,r18,1
 400f448:	000b883a 	mov	r5,zero
 400f44c:	0005883a 	mov	r2,zero
 400f450:	003f4806 	br	400f174 <__alt_data_end+0xfc00f174>
 400f454:	298cb03a 	or	r6,r5,r6
 400f458:	300cc03a 	cmpne	r6,r6,zero
 400f45c:	0005883a 	mov	r2,zero
 400f460:	003f6406 	br	400f1f4 <__alt_data_end+0xfc00f1f4>
 400f464:	10009a1e 	bne	r2,zero,400f6d0 <__subdf3+0x640>
 400f468:	82400044 	addi	r9,r16,1
 400f46c:	4881ffcc 	andi	r2,r9,2047
 400f470:	02800044 	movi	r10,1
 400f474:	5080670e 	bge	r10,r2,400f614 <__subdf3+0x584>
 400f478:	0081ffc4 	movi	r2,2047
 400f47c:	4880af26 	beq	r9,r2,400f73c <__subdf3+0x6ac>
 400f480:	898d883a 	add	r6,r17,r6
 400f484:	1945883a 	add	r2,r3,r5
 400f488:	3447803a 	cmpltu	r3,r6,r17
 400f48c:	1887883a 	add	r3,r3,r2
 400f490:	182297fa 	slli	r17,r3,31
 400f494:	300cd07a 	srli	r6,r6,1
 400f498:	1806d07a 	srli	r3,r3,1
 400f49c:	4821883a 	mov	r16,r9
 400f4a0:	89a2b03a 	or	r17,r17,r6
 400f4a4:	003f1b06 	br	400f114 <__alt_data_end+0xfc00f114>
 400f4a8:	0101ffc4 	movi	r4,2047
 400f4ac:	813f441e 	bne	r16,r4,400f1c0 <__alt_data_end+0xfc00f1c0>
 400f4b0:	003f1806 	br	400f114 <__alt_data_end+0xfc00f114>
 400f4b4:	843ff844 	addi	r16,r16,-31
 400f4b8:	01400804 	movi	r5,32
 400f4bc:	1408d83a 	srl	r4,r2,r16
 400f4c0:	19405026 	beq	r3,r5,400f604 <__subdf3+0x574>
 400f4c4:	01401004 	movi	r5,64
 400f4c8:	28c7c83a 	sub	r3,r5,r3
 400f4cc:	10c4983a 	sll	r2,r2,r3
 400f4d0:	88a2b03a 	or	r17,r17,r2
 400f4d4:	8822c03a 	cmpne	r17,r17,zero
 400f4d8:	2462b03a 	or	r17,r4,r17
 400f4dc:	0007883a 	mov	r3,zero
 400f4e0:	0021883a 	mov	r16,zero
 400f4e4:	003f6d06 	br	400f29c <__alt_data_end+0xfc00f29c>
 400f4e8:	11fff804 	addi	r7,r2,-32
 400f4ec:	01000804 	movi	r4,32
 400f4f0:	29ced83a 	srl	r7,r5,r7
 400f4f4:	11004526 	beq	r2,r4,400f60c <__subdf3+0x57c>
 400f4f8:	01001004 	movi	r4,64
 400f4fc:	2089c83a 	sub	r4,r4,r2
 400f500:	2904983a 	sll	r2,r5,r4
 400f504:	118cb03a 	or	r6,r2,r6
 400f508:	300cc03a 	cmpne	r6,r6,zero
 400f50c:	398cb03a 	or	r6,r7,r6
 400f510:	0005883a 	mov	r2,zero
 400f514:	003f3706 	br	400f1f4 <__alt_data_end+0xfc00f1f4>
 400f518:	80002a26 	beq	r16,zero,400f5c4 <__subdf3+0x534>
 400f51c:	0101ffc4 	movi	r4,2047
 400f520:	49006626 	beq	r9,r4,400f6bc <__subdf3+0x62c>
 400f524:	0085c83a 	sub	r2,zero,r2
 400f528:	18c02034 	orhi	r3,r3,128
 400f52c:	01000e04 	movi	r4,56
 400f530:	20807e16 	blt	r4,r2,400f72c <__subdf3+0x69c>
 400f534:	010007c4 	movi	r4,31
 400f538:	2080e716 	blt	r4,r2,400f8d8 <__subdf3+0x848>
 400f53c:	01000804 	movi	r4,32
 400f540:	2089c83a 	sub	r4,r4,r2
 400f544:	1914983a 	sll	r10,r3,r4
 400f548:	8890d83a 	srl	r8,r17,r2
 400f54c:	8908983a 	sll	r4,r17,r4
 400f550:	1884d83a 	srl	r2,r3,r2
 400f554:	5222b03a 	or	r17,r10,r8
 400f558:	2006c03a 	cmpne	r3,r4,zero
 400f55c:	88e2b03a 	or	r17,r17,r3
 400f560:	3463c83a 	sub	r17,r6,r17
 400f564:	2885c83a 	sub	r2,r5,r2
 400f568:	344d803a 	cmpltu	r6,r6,r17
 400f56c:	1187c83a 	sub	r3,r2,r6
 400f570:	4821883a 	mov	r16,r9
 400f574:	3825883a 	mov	r18,r7
 400f578:	003f2306 	br	400f208 <__alt_data_end+0xfc00f208>
 400f57c:	24d0b03a 	or	r8,r4,r19
 400f580:	40001b1e 	bne	r8,zero,400f5f0 <__subdf3+0x560>
 400f584:	0005883a 	mov	r2,zero
 400f588:	0009883a 	mov	r4,zero
 400f58c:	0021883a 	mov	r16,zero
 400f590:	003f4906 	br	400f2b8 <__alt_data_end+0xfc00f2b8>
 400f594:	010007c4 	movi	r4,31
 400f598:	20803a16 	blt	r4,r2,400f684 <__subdf3+0x5f4>
 400f59c:	01000804 	movi	r4,32
 400f5a0:	2089c83a 	sub	r4,r4,r2
 400f5a4:	2912983a 	sll	r9,r5,r4
 400f5a8:	3090d83a 	srl	r8,r6,r2
 400f5ac:	3108983a 	sll	r4,r6,r4
 400f5b0:	2884d83a 	srl	r2,r5,r2
 400f5b4:	4a12b03a 	or	r9,r9,r8
 400f5b8:	2008c03a 	cmpne	r4,r4,zero
 400f5bc:	4912b03a 	or	r9,r9,r4
 400f5c0:	003f4e06 	br	400f2fc <__alt_data_end+0xfc00f2fc>
 400f5c4:	1c48b03a 	or	r4,r3,r17
 400f5c8:	20003c26 	beq	r4,zero,400f6bc <__subdf3+0x62c>
 400f5cc:	0084303a 	nor	r2,zero,r2
 400f5d0:	1000381e 	bne	r2,zero,400f6b4 <__subdf3+0x624>
 400f5d4:	3463c83a 	sub	r17,r6,r17
 400f5d8:	28c5c83a 	sub	r2,r5,r3
 400f5dc:	344d803a 	cmpltu	r6,r6,r17
 400f5e0:	1187c83a 	sub	r3,r2,r6
 400f5e4:	4821883a 	mov	r16,r9
 400f5e8:	3825883a 	mov	r18,r7
 400f5ec:	003f0606 	br	400f208 <__alt_data_end+0xfc00f208>
 400f5f0:	2023883a 	mov	r17,r4
 400f5f4:	003f0906 	br	400f21c <__alt_data_end+0xfc00f21c>
 400f5f8:	0101ffc4 	movi	r4,2047
 400f5fc:	813f3a1e 	bne	r16,r4,400f2e8 <__alt_data_end+0xfc00f2e8>
 400f600:	003ec406 	br	400f114 <__alt_data_end+0xfc00f114>
 400f604:	0005883a 	mov	r2,zero
 400f608:	003fb106 	br	400f4d0 <__alt_data_end+0xfc00f4d0>
 400f60c:	0005883a 	mov	r2,zero
 400f610:	003fbc06 	br	400f504 <__alt_data_end+0xfc00f504>
 400f614:	1c44b03a 	or	r2,r3,r17
 400f618:	80008e1e 	bne	r16,zero,400f854 <__subdf3+0x7c4>
 400f61c:	1000c826 	beq	r2,zero,400f940 <__subdf3+0x8b0>
 400f620:	2984b03a 	or	r2,r5,r6
 400f624:	103ebb26 	beq	r2,zero,400f114 <__alt_data_end+0xfc00f114>
 400f628:	8989883a 	add	r4,r17,r6
 400f62c:	1945883a 	add	r2,r3,r5
 400f630:	2447803a 	cmpltu	r3,r4,r17
 400f634:	1887883a 	add	r3,r3,r2
 400f638:	1880202c 	andhi	r2,r3,128
 400f63c:	2023883a 	mov	r17,r4
 400f640:	103f1626 	beq	r2,zero,400f29c <__alt_data_end+0xfc00f29c>
 400f644:	00bfe034 	movhi	r2,65408
 400f648:	10bfffc4 	addi	r2,r2,-1
 400f64c:	5021883a 	mov	r16,r10
 400f650:	1886703a 	and	r3,r3,r2
 400f654:	003eaf06 	br	400f114 <__alt_data_end+0xfc00f114>
 400f658:	3825883a 	mov	r18,r7
 400f65c:	003f0f06 	br	400f29c <__alt_data_end+0xfc00f29c>
 400f660:	1c44b03a 	or	r2,r3,r17
 400f664:	8000251e 	bne	r16,zero,400f6fc <__subdf3+0x66c>
 400f668:	1000661e 	bne	r2,zero,400f804 <__subdf3+0x774>
 400f66c:	2990b03a 	or	r8,r5,r6
 400f670:	40009626 	beq	r8,zero,400f8cc <__subdf3+0x83c>
 400f674:	2807883a 	mov	r3,r5
 400f678:	3023883a 	mov	r17,r6
 400f67c:	3825883a 	mov	r18,r7
 400f680:	003ea406 	br	400f114 <__alt_data_end+0xfc00f114>
 400f684:	127ff804 	addi	r9,r2,-32
 400f688:	01000804 	movi	r4,32
 400f68c:	2a52d83a 	srl	r9,r5,r9
 400f690:	11008c26 	beq	r2,r4,400f8c4 <__subdf3+0x834>
 400f694:	01001004 	movi	r4,64
 400f698:	2085c83a 	sub	r2,r4,r2
 400f69c:	2884983a 	sll	r2,r5,r2
 400f6a0:	118cb03a 	or	r6,r2,r6
 400f6a4:	300cc03a 	cmpne	r6,r6,zero
 400f6a8:	4992b03a 	or	r9,r9,r6
 400f6ac:	0005883a 	mov	r2,zero
 400f6b0:	003f1206 	br	400f2fc <__alt_data_end+0xfc00f2fc>
 400f6b4:	0101ffc4 	movi	r4,2047
 400f6b8:	493f9c1e 	bne	r9,r4,400f52c <__alt_data_end+0xfc00f52c>
 400f6bc:	2807883a 	mov	r3,r5
 400f6c0:	3023883a 	mov	r17,r6
 400f6c4:	4821883a 	mov	r16,r9
 400f6c8:	3825883a 	mov	r18,r7
 400f6cc:	003e9106 	br	400f114 <__alt_data_end+0xfc00f114>
 400f6d0:	80001f1e 	bne	r16,zero,400f750 <__subdf3+0x6c0>
 400f6d4:	1c48b03a 	or	r4,r3,r17
 400f6d8:	20005a26 	beq	r4,zero,400f844 <__subdf3+0x7b4>
 400f6dc:	0084303a 	nor	r2,zero,r2
 400f6e0:	1000561e 	bne	r2,zero,400f83c <__subdf3+0x7ac>
 400f6e4:	89a3883a 	add	r17,r17,r6
 400f6e8:	1945883a 	add	r2,r3,r5
 400f6ec:	898d803a 	cmpltu	r6,r17,r6
 400f6f0:	3087883a 	add	r3,r6,r2
 400f6f4:	4821883a 	mov	r16,r9
 400f6f8:	003f0506 	br	400f310 <__alt_data_end+0xfc00f310>
 400f6fc:	10002b1e 	bne	r2,zero,400f7ac <__subdf3+0x71c>
 400f700:	2984b03a 	or	r2,r5,r6
 400f704:	10008026 	beq	r2,zero,400f908 <__subdf3+0x878>
 400f708:	2807883a 	mov	r3,r5
 400f70c:	3023883a 	mov	r17,r6
 400f710:	3825883a 	mov	r18,r7
 400f714:	0401ffc4 	movi	r16,2047
 400f718:	003e7e06 	br	400f114 <__alt_data_end+0xfc00f114>
 400f71c:	3809883a 	mov	r4,r7
 400f720:	0011883a 	mov	r8,zero
 400f724:	0005883a 	mov	r2,zero
 400f728:	003ee306 	br	400f2b8 <__alt_data_end+0xfc00f2b8>
 400f72c:	1c62b03a 	or	r17,r3,r17
 400f730:	8822c03a 	cmpne	r17,r17,zero
 400f734:	0005883a 	mov	r2,zero
 400f738:	003f8906 	br	400f560 <__alt_data_end+0xfc00f560>
 400f73c:	3809883a 	mov	r4,r7
 400f740:	4821883a 	mov	r16,r9
 400f744:	0011883a 	mov	r8,zero
 400f748:	0005883a 	mov	r2,zero
 400f74c:	003eda06 	br	400f2b8 <__alt_data_end+0xfc00f2b8>
 400f750:	0101ffc4 	movi	r4,2047
 400f754:	49003b26 	beq	r9,r4,400f844 <__subdf3+0x7b4>
 400f758:	0085c83a 	sub	r2,zero,r2
 400f75c:	18c02034 	orhi	r3,r3,128
 400f760:	01000e04 	movi	r4,56
 400f764:	20806e16 	blt	r4,r2,400f920 <__subdf3+0x890>
 400f768:	010007c4 	movi	r4,31
 400f76c:	20807716 	blt	r4,r2,400f94c <__subdf3+0x8bc>
 400f770:	01000804 	movi	r4,32
 400f774:	2089c83a 	sub	r4,r4,r2
 400f778:	1914983a 	sll	r10,r3,r4
 400f77c:	8890d83a 	srl	r8,r17,r2
 400f780:	8908983a 	sll	r4,r17,r4
 400f784:	1884d83a 	srl	r2,r3,r2
 400f788:	5222b03a 	or	r17,r10,r8
 400f78c:	2006c03a 	cmpne	r3,r4,zero
 400f790:	88e2b03a 	or	r17,r17,r3
 400f794:	89a3883a 	add	r17,r17,r6
 400f798:	1145883a 	add	r2,r2,r5
 400f79c:	898d803a 	cmpltu	r6,r17,r6
 400f7a0:	3087883a 	add	r3,r6,r2
 400f7a4:	4821883a 	mov	r16,r9
 400f7a8:	003ed906 	br	400f310 <__alt_data_end+0xfc00f310>
 400f7ac:	2984b03a 	or	r2,r5,r6
 400f7b0:	10004226 	beq	r2,zero,400f8bc <__subdf3+0x82c>
 400f7b4:	1808d0fa 	srli	r4,r3,3
 400f7b8:	8822d0fa 	srli	r17,r17,3
 400f7bc:	1806977a 	slli	r3,r3,29
 400f7c0:	2080022c 	andhi	r2,r4,8
 400f7c4:	1c62b03a 	or	r17,r3,r17
 400f7c8:	10000826 	beq	r2,zero,400f7ec <__subdf3+0x75c>
 400f7cc:	2812d0fa 	srli	r9,r5,3
 400f7d0:	4880022c 	andhi	r2,r9,8
 400f7d4:	1000051e 	bne	r2,zero,400f7ec <__subdf3+0x75c>
 400f7d8:	300cd0fa 	srli	r6,r6,3
 400f7dc:	2804977a 	slli	r2,r5,29
 400f7e0:	4809883a 	mov	r4,r9
 400f7e4:	3825883a 	mov	r18,r7
 400f7e8:	11a2b03a 	or	r17,r2,r6
 400f7ec:	8806d77a 	srli	r3,r17,29
 400f7f0:	200890fa 	slli	r4,r4,3
 400f7f4:	882290fa 	slli	r17,r17,3
 400f7f8:	0401ffc4 	movi	r16,2047
 400f7fc:	1906b03a 	or	r3,r3,r4
 400f800:	003e4406 	br	400f114 <__alt_data_end+0xfc00f114>
 400f804:	2984b03a 	or	r2,r5,r6
 400f808:	103e4226 	beq	r2,zero,400f114 <__alt_data_end+0xfc00f114>
 400f80c:	8989c83a 	sub	r4,r17,r6
 400f810:	8911803a 	cmpltu	r8,r17,r4
 400f814:	1945c83a 	sub	r2,r3,r5
 400f818:	1205c83a 	sub	r2,r2,r8
 400f81c:	1200202c 	andhi	r8,r2,128
 400f820:	403e9a26 	beq	r8,zero,400f28c <__alt_data_end+0xfc00f28c>
 400f824:	3463c83a 	sub	r17,r6,r17
 400f828:	28c5c83a 	sub	r2,r5,r3
 400f82c:	344d803a 	cmpltu	r6,r6,r17
 400f830:	1187c83a 	sub	r3,r2,r6
 400f834:	3825883a 	mov	r18,r7
 400f838:	003e3606 	br	400f114 <__alt_data_end+0xfc00f114>
 400f83c:	0101ffc4 	movi	r4,2047
 400f840:	493fc71e 	bne	r9,r4,400f760 <__alt_data_end+0xfc00f760>
 400f844:	2807883a 	mov	r3,r5
 400f848:	3023883a 	mov	r17,r6
 400f84c:	4821883a 	mov	r16,r9
 400f850:	003e3006 	br	400f114 <__alt_data_end+0xfc00f114>
 400f854:	10003626 	beq	r2,zero,400f930 <__subdf3+0x8a0>
 400f858:	2984b03a 	or	r2,r5,r6
 400f85c:	10001726 	beq	r2,zero,400f8bc <__subdf3+0x82c>
 400f860:	1808d0fa 	srli	r4,r3,3
 400f864:	8822d0fa 	srli	r17,r17,3
 400f868:	1806977a 	slli	r3,r3,29
 400f86c:	2080022c 	andhi	r2,r4,8
 400f870:	1c62b03a 	or	r17,r3,r17
 400f874:	10000726 	beq	r2,zero,400f894 <__subdf3+0x804>
 400f878:	2812d0fa 	srli	r9,r5,3
 400f87c:	4880022c 	andhi	r2,r9,8
 400f880:	1000041e 	bne	r2,zero,400f894 <__subdf3+0x804>
 400f884:	300cd0fa 	srli	r6,r6,3
 400f888:	2804977a 	slli	r2,r5,29
 400f88c:	4809883a 	mov	r4,r9
 400f890:	11a2b03a 	or	r17,r2,r6
 400f894:	8806d77a 	srli	r3,r17,29
 400f898:	200890fa 	slli	r4,r4,3
 400f89c:	882290fa 	slli	r17,r17,3
 400f8a0:	3825883a 	mov	r18,r7
 400f8a4:	1906b03a 	or	r3,r3,r4
 400f8a8:	0401ffc4 	movi	r16,2047
 400f8ac:	003e1906 	br	400f114 <__alt_data_end+0xfc00f114>
 400f8b0:	000b883a 	mov	r5,zero
 400f8b4:	0005883a 	mov	r2,zero
 400f8b8:	003e2e06 	br	400f174 <__alt_data_end+0xfc00f174>
 400f8bc:	0401ffc4 	movi	r16,2047
 400f8c0:	003e1406 	br	400f114 <__alt_data_end+0xfc00f114>
 400f8c4:	0005883a 	mov	r2,zero
 400f8c8:	003f7506 	br	400f6a0 <__alt_data_end+0xfc00f6a0>
 400f8cc:	0005883a 	mov	r2,zero
 400f8d0:	0009883a 	mov	r4,zero
 400f8d4:	003e7806 	br	400f2b8 <__alt_data_end+0xfc00f2b8>
 400f8d8:	123ff804 	addi	r8,r2,-32
 400f8dc:	01000804 	movi	r4,32
 400f8e0:	1a10d83a 	srl	r8,r3,r8
 400f8e4:	11002526 	beq	r2,r4,400f97c <__subdf3+0x8ec>
 400f8e8:	01001004 	movi	r4,64
 400f8ec:	2085c83a 	sub	r2,r4,r2
 400f8f0:	1884983a 	sll	r2,r3,r2
 400f8f4:	1444b03a 	or	r2,r2,r17
 400f8f8:	1004c03a 	cmpne	r2,r2,zero
 400f8fc:	40a2b03a 	or	r17,r8,r2
 400f900:	0005883a 	mov	r2,zero
 400f904:	003f1606 	br	400f560 <__alt_data_end+0xfc00f560>
 400f908:	02000434 	movhi	r8,16
 400f90c:	0009883a 	mov	r4,zero
 400f910:	423fffc4 	addi	r8,r8,-1
 400f914:	00bfffc4 	movi	r2,-1
 400f918:	0401ffc4 	movi	r16,2047
 400f91c:	003e6606 	br	400f2b8 <__alt_data_end+0xfc00f2b8>
 400f920:	1c62b03a 	or	r17,r3,r17
 400f924:	8822c03a 	cmpne	r17,r17,zero
 400f928:	0005883a 	mov	r2,zero
 400f92c:	003f9906 	br	400f794 <__alt_data_end+0xfc00f794>
 400f930:	2807883a 	mov	r3,r5
 400f934:	3023883a 	mov	r17,r6
 400f938:	0401ffc4 	movi	r16,2047
 400f93c:	003df506 	br	400f114 <__alt_data_end+0xfc00f114>
 400f940:	2807883a 	mov	r3,r5
 400f944:	3023883a 	mov	r17,r6
 400f948:	003df206 	br	400f114 <__alt_data_end+0xfc00f114>
 400f94c:	123ff804 	addi	r8,r2,-32
 400f950:	01000804 	movi	r4,32
 400f954:	1a10d83a 	srl	r8,r3,r8
 400f958:	11000a26 	beq	r2,r4,400f984 <__subdf3+0x8f4>
 400f95c:	01001004 	movi	r4,64
 400f960:	2085c83a 	sub	r2,r4,r2
 400f964:	1884983a 	sll	r2,r3,r2
 400f968:	1444b03a 	or	r2,r2,r17
 400f96c:	1004c03a 	cmpne	r2,r2,zero
 400f970:	40a2b03a 	or	r17,r8,r2
 400f974:	0005883a 	mov	r2,zero
 400f978:	003f8606 	br	400f794 <__alt_data_end+0xfc00f794>
 400f97c:	0005883a 	mov	r2,zero
 400f980:	003fdc06 	br	400f8f4 <__alt_data_end+0xfc00f8f4>
 400f984:	0005883a 	mov	r2,zero
 400f988:	003ff706 	br	400f968 <__alt_data_end+0xfc00f968>

0400f98c <__fixdfsi>:
 400f98c:	280cd53a 	srli	r6,r5,20
 400f990:	00c00434 	movhi	r3,16
 400f994:	18ffffc4 	addi	r3,r3,-1
 400f998:	3181ffcc 	andi	r6,r6,2047
 400f99c:	01c0ff84 	movi	r7,1022
 400f9a0:	28c6703a 	and	r3,r5,r3
 400f9a4:	280ad7fa 	srli	r5,r5,31
 400f9a8:	3980120e 	bge	r7,r6,400f9f4 <__fixdfsi+0x68>
 400f9ac:	00810744 	movi	r2,1053
 400f9b0:	11800c16 	blt	r2,r6,400f9e4 <__fixdfsi+0x58>
 400f9b4:	00810cc4 	movi	r2,1075
 400f9b8:	1185c83a 	sub	r2,r2,r6
 400f9bc:	01c007c4 	movi	r7,31
 400f9c0:	18c00434 	orhi	r3,r3,16
 400f9c4:	38800d16 	blt	r7,r2,400f9fc <__fixdfsi+0x70>
 400f9c8:	31befb44 	addi	r6,r6,-1043
 400f9cc:	2084d83a 	srl	r2,r4,r2
 400f9d0:	1986983a 	sll	r3,r3,r6
 400f9d4:	1884b03a 	or	r2,r3,r2
 400f9d8:	28000726 	beq	r5,zero,400f9f8 <__fixdfsi+0x6c>
 400f9dc:	0085c83a 	sub	r2,zero,r2
 400f9e0:	f800283a 	ret
 400f9e4:	00a00034 	movhi	r2,32768
 400f9e8:	10bfffc4 	addi	r2,r2,-1
 400f9ec:	2885883a 	add	r2,r5,r2
 400f9f0:	f800283a 	ret
 400f9f4:	0005883a 	mov	r2,zero
 400f9f8:	f800283a 	ret
 400f9fc:	008104c4 	movi	r2,1043
 400fa00:	1185c83a 	sub	r2,r2,r6
 400fa04:	1884d83a 	srl	r2,r3,r2
 400fa08:	003ff306 	br	400f9d8 <__alt_data_end+0xfc00f9d8>

0400fa0c <__floatsidf>:
 400fa0c:	defffd04 	addi	sp,sp,-12
 400fa10:	dfc00215 	stw	ra,8(sp)
 400fa14:	dc400115 	stw	r17,4(sp)
 400fa18:	dc000015 	stw	r16,0(sp)
 400fa1c:	20002b26 	beq	r4,zero,400facc <__floatsidf+0xc0>
 400fa20:	2023883a 	mov	r17,r4
 400fa24:	2020d7fa 	srli	r16,r4,31
 400fa28:	20002d16 	blt	r4,zero,400fae0 <__floatsidf+0xd4>
 400fa2c:	8809883a 	mov	r4,r17
 400fa30:	400fb900 	call	400fb90 <__clzsi2>
 400fa34:	01410784 	movi	r5,1054
 400fa38:	288bc83a 	sub	r5,r5,r2
 400fa3c:	01010cc4 	movi	r4,1075
 400fa40:	2149c83a 	sub	r4,r4,r5
 400fa44:	00c007c4 	movi	r3,31
 400fa48:	1900160e 	bge	r3,r4,400faa4 <__floatsidf+0x98>
 400fa4c:	00c104c4 	movi	r3,1043
 400fa50:	1947c83a 	sub	r3,r3,r5
 400fa54:	88c6983a 	sll	r3,r17,r3
 400fa58:	00800434 	movhi	r2,16
 400fa5c:	10bfffc4 	addi	r2,r2,-1
 400fa60:	1886703a 	and	r3,r3,r2
 400fa64:	2941ffcc 	andi	r5,r5,2047
 400fa68:	800d883a 	mov	r6,r16
 400fa6c:	0005883a 	mov	r2,zero
 400fa70:	280a953a 	slli	r5,r5,20
 400fa74:	31803fcc 	andi	r6,r6,255
 400fa78:	01000434 	movhi	r4,16
 400fa7c:	300c97fa 	slli	r6,r6,31
 400fa80:	213fffc4 	addi	r4,r4,-1
 400fa84:	1906703a 	and	r3,r3,r4
 400fa88:	1946b03a 	or	r3,r3,r5
 400fa8c:	1986b03a 	or	r3,r3,r6
 400fa90:	dfc00217 	ldw	ra,8(sp)
 400fa94:	dc400117 	ldw	r17,4(sp)
 400fa98:	dc000017 	ldw	r16,0(sp)
 400fa9c:	dec00304 	addi	sp,sp,12
 400faa0:	f800283a 	ret
 400faa4:	00c002c4 	movi	r3,11
 400faa8:	1887c83a 	sub	r3,r3,r2
 400faac:	88c6d83a 	srl	r3,r17,r3
 400fab0:	8904983a 	sll	r2,r17,r4
 400fab4:	01000434 	movhi	r4,16
 400fab8:	213fffc4 	addi	r4,r4,-1
 400fabc:	2941ffcc 	andi	r5,r5,2047
 400fac0:	1906703a 	and	r3,r3,r4
 400fac4:	800d883a 	mov	r6,r16
 400fac8:	003fe906 	br	400fa70 <__alt_data_end+0xfc00fa70>
 400facc:	000d883a 	mov	r6,zero
 400fad0:	000b883a 	mov	r5,zero
 400fad4:	0007883a 	mov	r3,zero
 400fad8:	0005883a 	mov	r2,zero
 400fadc:	003fe406 	br	400fa70 <__alt_data_end+0xfc00fa70>
 400fae0:	0123c83a 	sub	r17,zero,r4
 400fae4:	003fd106 	br	400fa2c <__alt_data_end+0xfc00fa2c>

0400fae8 <__floatunsidf>:
 400fae8:	defffe04 	addi	sp,sp,-8
 400faec:	dc000015 	stw	r16,0(sp)
 400faf0:	dfc00115 	stw	ra,4(sp)
 400faf4:	2021883a 	mov	r16,r4
 400faf8:	20002226 	beq	r4,zero,400fb84 <__floatunsidf+0x9c>
 400fafc:	400fb900 	call	400fb90 <__clzsi2>
 400fb00:	01010784 	movi	r4,1054
 400fb04:	2089c83a 	sub	r4,r4,r2
 400fb08:	01810cc4 	movi	r6,1075
 400fb0c:	310dc83a 	sub	r6,r6,r4
 400fb10:	00c007c4 	movi	r3,31
 400fb14:	1980120e 	bge	r3,r6,400fb60 <__floatunsidf+0x78>
 400fb18:	00c104c4 	movi	r3,1043
 400fb1c:	1907c83a 	sub	r3,r3,r4
 400fb20:	80ca983a 	sll	r5,r16,r3
 400fb24:	00800434 	movhi	r2,16
 400fb28:	10bfffc4 	addi	r2,r2,-1
 400fb2c:	2101ffcc 	andi	r4,r4,2047
 400fb30:	0021883a 	mov	r16,zero
 400fb34:	288a703a 	and	r5,r5,r2
 400fb38:	2008953a 	slli	r4,r4,20
 400fb3c:	00c00434 	movhi	r3,16
 400fb40:	18ffffc4 	addi	r3,r3,-1
 400fb44:	28c6703a 	and	r3,r5,r3
 400fb48:	8005883a 	mov	r2,r16
 400fb4c:	1906b03a 	or	r3,r3,r4
 400fb50:	dfc00117 	ldw	ra,4(sp)
 400fb54:	dc000017 	ldw	r16,0(sp)
 400fb58:	dec00204 	addi	sp,sp,8
 400fb5c:	f800283a 	ret
 400fb60:	00c002c4 	movi	r3,11
 400fb64:	188bc83a 	sub	r5,r3,r2
 400fb68:	814ad83a 	srl	r5,r16,r5
 400fb6c:	00c00434 	movhi	r3,16
 400fb70:	18ffffc4 	addi	r3,r3,-1
 400fb74:	81a0983a 	sll	r16,r16,r6
 400fb78:	2101ffcc 	andi	r4,r4,2047
 400fb7c:	28ca703a 	and	r5,r5,r3
 400fb80:	003fed06 	br	400fb38 <__alt_data_end+0xfc00fb38>
 400fb84:	0009883a 	mov	r4,zero
 400fb88:	000b883a 	mov	r5,zero
 400fb8c:	003fea06 	br	400fb38 <__alt_data_end+0xfc00fb38>

0400fb90 <__clzsi2>:
 400fb90:	00bfffd4 	movui	r2,65535
 400fb94:	11000536 	bltu	r2,r4,400fbac <__clzsi2+0x1c>
 400fb98:	00803fc4 	movi	r2,255
 400fb9c:	11000f36 	bltu	r2,r4,400fbdc <__clzsi2+0x4c>
 400fba0:	00800804 	movi	r2,32
 400fba4:	0007883a 	mov	r3,zero
 400fba8:	00000506 	br	400fbc0 <__clzsi2+0x30>
 400fbac:	00804034 	movhi	r2,256
 400fbb0:	10bfffc4 	addi	r2,r2,-1
 400fbb4:	11000c2e 	bgeu	r2,r4,400fbe8 <__clzsi2+0x58>
 400fbb8:	00800204 	movi	r2,8
 400fbbc:	00c00604 	movi	r3,24
 400fbc0:	20c8d83a 	srl	r4,r4,r3
 400fbc4:	00c10074 	movhi	r3,1025
 400fbc8:	18cace04 	addi	r3,r3,11064
 400fbcc:	1909883a 	add	r4,r3,r4
 400fbd0:	20c00003 	ldbu	r3,0(r4)
 400fbd4:	10c5c83a 	sub	r2,r2,r3
 400fbd8:	f800283a 	ret
 400fbdc:	00800604 	movi	r2,24
 400fbe0:	00c00204 	movi	r3,8
 400fbe4:	003ff606 	br	400fbc0 <__alt_data_end+0xfc00fbc0>
 400fbe8:	00800404 	movi	r2,16
 400fbec:	1007883a 	mov	r3,r2
 400fbf0:	003ff306 	br	400fbc0 <__alt_data_end+0xfc00fbc0>

0400fbf4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400fbf4:	defffe04 	addi	sp,sp,-8
 400fbf8:	dfc00115 	stw	ra,4(sp)
 400fbfc:	df000015 	stw	fp,0(sp)
 400fc00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400fc04:	d0a00f17 	ldw	r2,-32708(gp)
 400fc08:	10000326 	beq	r2,zero,400fc18 <alt_get_errno+0x24>
 400fc0c:	d0a00f17 	ldw	r2,-32708(gp)
 400fc10:	103ee83a 	callr	r2
 400fc14:	00000106 	br	400fc1c <alt_get_errno+0x28>
 400fc18:	d0a6eb04 	addi	r2,gp,-25684
}
 400fc1c:	e037883a 	mov	sp,fp
 400fc20:	dfc00117 	ldw	ra,4(sp)
 400fc24:	df000017 	ldw	fp,0(sp)
 400fc28:	dec00204 	addi	sp,sp,8
 400fc2c:	f800283a 	ret

0400fc30 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 400fc30:	defffb04 	addi	sp,sp,-20
 400fc34:	dfc00415 	stw	ra,16(sp)
 400fc38:	df000315 	stw	fp,12(sp)
 400fc3c:	df000304 	addi	fp,sp,12
 400fc40:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 400fc44:	e0bfff17 	ldw	r2,-4(fp)
 400fc48:	10000816 	blt	r2,zero,400fc6c <close+0x3c>
 400fc4c:	01400304 	movi	r5,12
 400fc50:	e13fff17 	ldw	r4,-4(fp)
 400fc54:	4002ce00 	call	4002ce0 <__mulsi3>
 400fc58:	1007883a 	mov	r3,r2
 400fc5c:	00810074 	movhi	r2,1025
 400fc60:	108d5a04 	addi	r2,r2,13672
 400fc64:	1885883a 	add	r2,r3,r2
 400fc68:	00000106 	br	400fc70 <close+0x40>
 400fc6c:	0005883a 	mov	r2,zero
 400fc70:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 400fc74:	e0bffd17 	ldw	r2,-12(fp)
 400fc78:	10001926 	beq	r2,zero,400fce0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 400fc7c:	e0bffd17 	ldw	r2,-12(fp)
 400fc80:	10800017 	ldw	r2,0(r2)
 400fc84:	10800417 	ldw	r2,16(r2)
 400fc88:	10000626 	beq	r2,zero,400fca4 <close+0x74>
 400fc8c:	e0bffd17 	ldw	r2,-12(fp)
 400fc90:	10800017 	ldw	r2,0(r2)
 400fc94:	10800417 	ldw	r2,16(r2)
 400fc98:	e13ffd17 	ldw	r4,-12(fp)
 400fc9c:	103ee83a 	callr	r2
 400fca0:	00000106 	br	400fca8 <close+0x78>
 400fca4:	0005883a 	mov	r2,zero
 400fca8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 400fcac:	e13fff17 	ldw	r4,-4(fp)
 400fcb0:	40103180 	call	4010318 <alt_release_fd>
    if (rval < 0)
 400fcb4:	e0bffe17 	ldw	r2,-8(fp)
 400fcb8:	1000070e 	bge	r2,zero,400fcd8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 400fcbc:	400fbf40 	call	400fbf4 <alt_get_errno>
 400fcc0:	1007883a 	mov	r3,r2
 400fcc4:	e0bffe17 	ldw	r2,-8(fp)
 400fcc8:	0085c83a 	sub	r2,zero,r2
 400fccc:	18800015 	stw	r2,0(r3)
      return -1;
 400fcd0:	00bfffc4 	movi	r2,-1
 400fcd4:	00000706 	br	400fcf4 <close+0xc4>
    }
    return 0;
 400fcd8:	0005883a 	mov	r2,zero
 400fcdc:	00000506 	br	400fcf4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400fce0:	400fbf40 	call	400fbf4 <alt_get_errno>
 400fce4:	1007883a 	mov	r3,r2
 400fce8:	00801444 	movi	r2,81
 400fcec:	18800015 	stw	r2,0(r3)
    return -1;
 400fcf0:	00bfffc4 	movi	r2,-1
  }
}
 400fcf4:	e037883a 	mov	sp,fp
 400fcf8:	dfc00117 	ldw	ra,4(sp)
 400fcfc:	df000017 	ldw	fp,0(sp)
 400fd00:	dec00204 	addi	sp,sp,8
 400fd04:	f800283a 	ret

0400fd08 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 400fd08:	defffc04 	addi	sp,sp,-16
 400fd0c:	df000315 	stw	fp,12(sp)
 400fd10:	df000304 	addi	fp,sp,12
 400fd14:	e13ffd15 	stw	r4,-12(fp)
 400fd18:	e17ffe15 	stw	r5,-8(fp)
 400fd1c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 400fd20:	e0bfff17 	ldw	r2,-4(fp)
}
 400fd24:	e037883a 	mov	sp,fp
 400fd28:	df000017 	ldw	fp,0(sp)
 400fd2c:	dec00104 	addi	sp,sp,4
 400fd30:	f800283a 	ret

0400fd34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400fd34:	defffe04 	addi	sp,sp,-8
 400fd38:	dfc00115 	stw	ra,4(sp)
 400fd3c:	df000015 	stw	fp,0(sp)
 400fd40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400fd44:	d0a00f17 	ldw	r2,-32708(gp)
 400fd48:	10000326 	beq	r2,zero,400fd58 <alt_get_errno+0x24>
 400fd4c:	d0a00f17 	ldw	r2,-32708(gp)
 400fd50:	103ee83a 	callr	r2
 400fd54:	00000106 	br	400fd5c <alt_get_errno+0x28>
 400fd58:	d0a6eb04 	addi	r2,gp,-25684
}
 400fd5c:	e037883a 	mov	sp,fp
 400fd60:	dfc00117 	ldw	ra,4(sp)
 400fd64:	df000017 	ldw	fp,0(sp)
 400fd68:	dec00204 	addi	sp,sp,8
 400fd6c:	f800283a 	ret

0400fd70 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 400fd70:	defffb04 	addi	sp,sp,-20
 400fd74:	dfc00415 	stw	ra,16(sp)
 400fd78:	df000315 	stw	fp,12(sp)
 400fd7c:	df000304 	addi	fp,sp,12
 400fd80:	e13ffe15 	stw	r4,-8(fp)
 400fd84:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400fd88:	e0bffe17 	ldw	r2,-8(fp)
 400fd8c:	10000816 	blt	r2,zero,400fdb0 <fstat+0x40>
 400fd90:	01400304 	movi	r5,12
 400fd94:	e13ffe17 	ldw	r4,-8(fp)
 400fd98:	4002ce00 	call	4002ce0 <__mulsi3>
 400fd9c:	1007883a 	mov	r3,r2
 400fda0:	00810074 	movhi	r2,1025
 400fda4:	108d5a04 	addi	r2,r2,13672
 400fda8:	1885883a 	add	r2,r3,r2
 400fdac:	00000106 	br	400fdb4 <fstat+0x44>
 400fdb0:	0005883a 	mov	r2,zero
 400fdb4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 400fdb8:	e0bffd17 	ldw	r2,-12(fp)
 400fdbc:	10001026 	beq	r2,zero,400fe00 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 400fdc0:	e0bffd17 	ldw	r2,-12(fp)
 400fdc4:	10800017 	ldw	r2,0(r2)
 400fdc8:	10800817 	ldw	r2,32(r2)
 400fdcc:	10000726 	beq	r2,zero,400fdec <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 400fdd0:	e0bffd17 	ldw	r2,-12(fp)
 400fdd4:	10800017 	ldw	r2,0(r2)
 400fdd8:	10800817 	ldw	r2,32(r2)
 400fddc:	e17fff17 	ldw	r5,-4(fp)
 400fde0:	e13ffd17 	ldw	r4,-12(fp)
 400fde4:	103ee83a 	callr	r2
 400fde8:	00000a06 	br	400fe14 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 400fdec:	e0bfff17 	ldw	r2,-4(fp)
 400fdf0:	00c80004 	movi	r3,8192
 400fdf4:	10c00115 	stw	r3,4(r2)
      return 0;
 400fdf8:	0005883a 	mov	r2,zero
 400fdfc:	00000506 	br	400fe14 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400fe00:	400fd340 	call	400fd34 <alt_get_errno>
 400fe04:	1007883a 	mov	r3,r2
 400fe08:	00801444 	movi	r2,81
 400fe0c:	18800015 	stw	r2,0(r3)
    return -1;
 400fe10:	00bfffc4 	movi	r2,-1
  }
}
 400fe14:	e037883a 	mov	sp,fp
 400fe18:	dfc00117 	ldw	ra,4(sp)
 400fe1c:	df000017 	ldw	fp,0(sp)
 400fe20:	dec00204 	addi	sp,sp,8
 400fe24:	f800283a 	ret

0400fe28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400fe28:	defffe04 	addi	sp,sp,-8
 400fe2c:	dfc00115 	stw	ra,4(sp)
 400fe30:	df000015 	stw	fp,0(sp)
 400fe34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400fe38:	d0a00f17 	ldw	r2,-32708(gp)
 400fe3c:	10000326 	beq	r2,zero,400fe4c <alt_get_errno+0x24>
 400fe40:	d0a00f17 	ldw	r2,-32708(gp)
 400fe44:	103ee83a 	callr	r2
 400fe48:	00000106 	br	400fe50 <alt_get_errno+0x28>
 400fe4c:	d0a6eb04 	addi	r2,gp,-25684
}
 400fe50:	e037883a 	mov	sp,fp
 400fe54:	dfc00117 	ldw	ra,4(sp)
 400fe58:	df000017 	ldw	fp,0(sp)
 400fe5c:	dec00204 	addi	sp,sp,8
 400fe60:	f800283a 	ret

0400fe64 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 400fe64:	deffed04 	addi	sp,sp,-76
 400fe68:	dfc01215 	stw	ra,72(sp)
 400fe6c:	df001115 	stw	fp,68(sp)
 400fe70:	df001104 	addi	fp,sp,68
 400fe74:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400fe78:	e0bfff17 	ldw	r2,-4(fp)
 400fe7c:	10000816 	blt	r2,zero,400fea0 <isatty+0x3c>
 400fe80:	01400304 	movi	r5,12
 400fe84:	e13fff17 	ldw	r4,-4(fp)
 400fe88:	4002ce00 	call	4002ce0 <__mulsi3>
 400fe8c:	1007883a 	mov	r3,r2
 400fe90:	00810074 	movhi	r2,1025
 400fe94:	108d5a04 	addi	r2,r2,13672
 400fe98:	1885883a 	add	r2,r3,r2
 400fe9c:	00000106 	br	400fea4 <isatty+0x40>
 400fea0:	0005883a 	mov	r2,zero
 400fea4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 400fea8:	e0bfef17 	ldw	r2,-68(fp)
 400feac:	10000e26 	beq	r2,zero,400fee8 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 400feb0:	e0bfef17 	ldw	r2,-68(fp)
 400feb4:	10800017 	ldw	r2,0(r2)
 400feb8:	10800817 	ldw	r2,32(r2)
 400febc:	1000021e 	bne	r2,zero,400fec8 <isatty+0x64>
    {
      return 1;
 400fec0:	00800044 	movi	r2,1
 400fec4:	00000d06 	br	400fefc <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 400fec8:	e0bff004 	addi	r2,fp,-64
 400fecc:	100b883a 	mov	r5,r2
 400fed0:	e13fff17 	ldw	r4,-4(fp)
 400fed4:	400fd700 	call	400fd70 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 400fed8:	e0bff117 	ldw	r2,-60(fp)
 400fedc:	10880020 	cmpeqi	r2,r2,8192
 400fee0:	10803fcc 	andi	r2,r2,255
 400fee4:	00000506 	br	400fefc <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400fee8:	400fe280 	call	400fe28 <alt_get_errno>
 400feec:	1007883a 	mov	r3,r2
 400fef0:	00801444 	movi	r2,81
 400fef4:	18800015 	stw	r2,0(r3)
    return 0;
 400fef8:	0005883a 	mov	r2,zero
  }
}
 400fefc:	e037883a 	mov	sp,fp
 400ff00:	dfc00117 	ldw	ra,4(sp)
 400ff04:	df000017 	ldw	fp,0(sp)
 400ff08:	dec00204 	addi	sp,sp,8
 400ff0c:	f800283a 	ret

0400ff10 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 400ff10:	defffc04 	addi	sp,sp,-16
 400ff14:	df000315 	stw	fp,12(sp)
 400ff18:	df000304 	addi	fp,sp,12
 400ff1c:	e13ffd15 	stw	r4,-12(fp)
 400ff20:	e17ffe15 	stw	r5,-8(fp)
 400ff24:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 400ff28:	e0fffe17 	ldw	r3,-8(fp)
 400ff2c:	e0bffd17 	ldw	r2,-12(fp)
 400ff30:	18800c26 	beq	r3,r2,400ff64 <alt_load_section+0x54>
  {
    while( to != end )
 400ff34:	00000806 	br	400ff58 <alt_load_section+0x48>
    {
      *to++ = *from++;
 400ff38:	e0bffe17 	ldw	r2,-8(fp)
 400ff3c:	10c00104 	addi	r3,r2,4
 400ff40:	e0fffe15 	stw	r3,-8(fp)
 400ff44:	e0fffd17 	ldw	r3,-12(fp)
 400ff48:	19000104 	addi	r4,r3,4
 400ff4c:	e13ffd15 	stw	r4,-12(fp)
 400ff50:	18c00017 	ldw	r3,0(r3)
 400ff54:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 400ff58:	e0fffe17 	ldw	r3,-8(fp)
 400ff5c:	e0bfff17 	ldw	r2,-4(fp)
 400ff60:	18bff51e 	bne	r3,r2,400ff38 <__alt_data_end+0xfc00ff38>
    {
      *to++ = *from++;
    }
  }
}
 400ff64:	0001883a 	nop
 400ff68:	e037883a 	mov	sp,fp
 400ff6c:	df000017 	ldw	fp,0(sp)
 400ff70:	dec00104 	addi	sp,sp,4
 400ff74:	f800283a 	ret

0400ff78 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 400ff78:	defffe04 	addi	sp,sp,-8
 400ff7c:	dfc00115 	stw	ra,4(sp)
 400ff80:	df000015 	stw	fp,0(sp)
 400ff84:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 400ff88:	01810074 	movhi	r6,1025
 400ff8c:	3191e604 	addi	r6,r6,18328
 400ff90:	01410074 	movhi	r5,1025
 400ff94:	294b1b04 	addi	r5,r5,11372
 400ff98:	01010074 	movhi	r4,1025
 400ff9c:	2111e604 	addi	r4,r4,18328
 400ffa0:	400ff100 	call	400ff10 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 400ffa4:	01810034 	movhi	r6,1024
 400ffa8:	31808c04 	addi	r6,r6,560
 400ffac:	01410034 	movhi	r5,1024
 400ffb0:	29400804 	addi	r5,r5,32
 400ffb4:	01010034 	movhi	r4,1024
 400ffb8:	21000804 	addi	r4,r4,32
 400ffbc:	400ff100 	call	400ff10 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 400ffc0:	01810074 	movhi	r6,1025
 400ffc4:	318b1b04 	addi	r6,r6,11372
 400ffc8:	01410074 	movhi	r5,1025
 400ffcc:	2949c804 	addi	r5,r5,10016
 400ffd0:	01010074 	movhi	r4,1025
 400ffd4:	2109c804 	addi	r4,r4,10016
 400ffd8:	400ff100 	call	400ff10 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 400ffdc:	401180c0 	call	401180c <alt_dcache_flush_all>
  alt_icache_flush_all();
 400ffe0:	40119cc0 	call	40119cc <alt_icache_flush_all>
}
 400ffe4:	0001883a 	nop
 400ffe8:	e037883a 	mov	sp,fp
 400ffec:	dfc00117 	ldw	ra,4(sp)
 400fff0:	df000017 	ldw	fp,0(sp)
 400fff4:	dec00204 	addi	sp,sp,8
 400fff8:	f800283a 	ret

0400fffc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400fffc:	defffe04 	addi	sp,sp,-8
 4010000:	dfc00115 	stw	ra,4(sp)
 4010004:	df000015 	stw	fp,0(sp)
 4010008:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401000c:	d0a00f17 	ldw	r2,-32708(gp)
 4010010:	10000326 	beq	r2,zero,4010020 <alt_get_errno+0x24>
 4010014:	d0a00f17 	ldw	r2,-32708(gp)
 4010018:	103ee83a 	callr	r2
 401001c:	00000106 	br	4010024 <alt_get_errno+0x28>
 4010020:	d0a6eb04 	addi	r2,gp,-25684
}
 4010024:	e037883a 	mov	sp,fp
 4010028:	dfc00117 	ldw	ra,4(sp)
 401002c:	df000017 	ldw	fp,0(sp)
 4010030:	dec00204 	addi	sp,sp,8
 4010034:	f800283a 	ret

04010038 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 4010038:	defff904 	addi	sp,sp,-28
 401003c:	dfc00615 	stw	ra,24(sp)
 4010040:	df000515 	stw	fp,20(sp)
 4010044:	df000504 	addi	fp,sp,20
 4010048:	e13ffd15 	stw	r4,-12(fp)
 401004c:	e17ffe15 	stw	r5,-8(fp)
 4010050:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 4010054:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4010058:	e0bffd17 	ldw	r2,-12(fp)
 401005c:	10000816 	blt	r2,zero,4010080 <lseek+0x48>
 4010060:	01400304 	movi	r5,12
 4010064:	e13ffd17 	ldw	r4,-12(fp)
 4010068:	4002ce00 	call	4002ce0 <__mulsi3>
 401006c:	1007883a 	mov	r3,r2
 4010070:	00810074 	movhi	r2,1025
 4010074:	108d5a04 	addi	r2,r2,13672
 4010078:	1885883a 	add	r2,r3,r2
 401007c:	00000106 	br	4010084 <lseek+0x4c>
 4010080:	0005883a 	mov	r2,zero
 4010084:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 4010088:	e0bffc17 	ldw	r2,-16(fp)
 401008c:	10001026 	beq	r2,zero,40100d0 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 4010090:	e0bffc17 	ldw	r2,-16(fp)
 4010094:	10800017 	ldw	r2,0(r2)
 4010098:	10800717 	ldw	r2,28(r2)
 401009c:	10000926 	beq	r2,zero,40100c4 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 40100a0:	e0bffc17 	ldw	r2,-16(fp)
 40100a4:	10800017 	ldw	r2,0(r2)
 40100a8:	10800717 	ldw	r2,28(r2)
 40100ac:	e1bfff17 	ldw	r6,-4(fp)
 40100b0:	e17ffe17 	ldw	r5,-8(fp)
 40100b4:	e13ffc17 	ldw	r4,-16(fp)
 40100b8:	103ee83a 	callr	r2
 40100bc:	e0bffb15 	stw	r2,-20(fp)
 40100c0:	00000506 	br	40100d8 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 40100c4:	00bfde84 	movi	r2,-134
 40100c8:	e0bffb15 	stw	r2,-20(fp)
 40100cc:	00000206 	br	40100d8 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 40100d0:	00bfebc4 	movi	r2,-81
 40100d4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 40100d8:	e0bffb17 	ldw	r2,-20(fp)
 40100dc:	1000070e 	bge	r2,zero,40100fc <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 40100e0:	400fffc0 	call	400fffc <alt_get_errno>
 40100e4:	1007883a 	mov	r3,r2
 40100e8:	e0bffb17 	ldw	r2,-20(fp)
 40100ec:	0085c83a 	sub	r2,zero,r2
 40100f0:	18800015 	stw	r2,0(r3)
    rc = -1;
 40100f4:	00bfffc4 	movi	r2,-1
 40100f8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 40100fc:	e0bffb17 	ldw	r2,-20(fp)
}
 4010100:	e037883a 	mov	sp,fp
 4010104:	dfc00117 	ldw	ra,4(sp)
 4010108:	df000017 	ldw	fp,0(sp)
 401010c:	dec00204 	addi	sp,sp,8
 4010110:	f800283a 	ret

04010114 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4010114:	defffd04 	addi	sp,sp,-12
 4010118:	dfc00215 	stw	ra,8(sp)
 401011c:	df000115 	stw	fp,4(sp)
 4010120:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4010124:	0009883a 	mov	r4,zero
 4010128:	40107900 	call	4010790 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 401012c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4010130:	40107c80 	call	40107c8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4010134:	01810074 	movhi	r6,1025
 4010138:	318b1104 	addi	r6,r6,11332
 401013c:	01410074 	movhi	r5,1025
 4010140:	294b1104 	addi	r5,r5,11332
 4010144:	01010074 	movhi	r4,1025
 4010148:	210b1104 	addi	r4,r4,11332
 401014c:	4011d700 	call	4011d70 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4010150:	401190c0 	call	401190c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4010154:	01010074 	movhi	r4,1025
 4010158:	21065b04 	addi	r4,r4,6508
 401015c:	401238c0 	call	401238c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4010160:	d0a6ec17 	ldw	r2,-25680(gp)
 4010164:	d0e6ed17 	ldw	r3,-25676(gp)
 4010168:	d126ee17 	ldw	r4,-25672(gp)
 401016c:	200d883a 	mov	r6,r4
 4010170:	180b883a 	mov	r5,r3
 4010174:	1009883a 	mov	r4,r2
 4010178:	40007900 	call	4000790 <main>
 401017c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 4010180:	01000044 	movi	r4,1
 4010184:	400fc300 	call	400fc30 <close>
  exit (result);
 4010188:	e13fff17 	ldw	r4,-4(fp)
 401018c:	40123a00 	call	40123a0 <exit>

04010190 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 4010190:	defffe04 	addi	sp,sp,-8
 4010194:	df000115 	stw	fp,4(sp)
 4010198:	df000104 	addi	fp,sp,4
 401019c:	e13fff15 	stw	r4,-4(fp)
}
 40101a0:	0001883a 	nop
 40101a4:	e037883a 	mov	sp,fp
 40101a8:	df000017 	ldw	fp,0(sp)
 40101ac:	dec00104 	addi	sp,sp,4
 40101b0:	f800283a 	ret

040101b4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 40101b4:	defffe04 	addi	sp,sp,-8
 40101b8:	df000115 	stw	fp,4(sp)
 40101bc:	df000104 	addi	fp,sp,4
 40101c0:	e13fff15 	stw	r4,-4(fp)
}
 40101c4:	0001883a 	nop
 40101c8:	e037883a 	mov	sp,fp
 40101cc:	df000017 	ldw	fp,0(sp)
 40101d0:	dec00104 	addi	sp,sp,4
 40101d4:	f800283a 	ret

040101d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40101d8:	defffe04 	addi	sp,sp,-8
 40101dc:	dfc00115 	stw	ra,4(sp)
 40101e0:	df000015 	stw	fp,0(sp)
 40101e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40101e8:	d0a00f17 	ldw	r2,-32708(gp)
 40101ec:	10000326 	beq	r2,zero,40101fc <alt_get_errno+0x24>
 40101f0:	d0a00f17 	ldw	r2,-32708(gp)
 40101f4:	103ee83a 	callr	r2
 40101f8:	00000106 	br	4010200 <alt_get_errno+0x28>
 40101fc:	d0a6eb04 	addi	r2,gp,-25684
}
 4010200:	e037883a 	mov	sp,fp
 4010204:	dfc00117 	ldw	ra,4(sp)
 4010208:	df000017 	ldw	fp,0(sp)
 401020c:	dec00204 	addi	sp,sp,8
 4010210:	f800283a 	ret

04010214 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 4010214:	defff904 	addi	sp,sp,-28
 4010218:	dfc00615 	stw	ra,24(sp)
 401021c:	df000515 	stw	fp,20(sp)
 4010220:	df000504 	addi	fp,sp,20
 4010224:	e13ffd15 	stw	r4,-12(fp)
 4010228:	e17ffe15 	stw	r5,-8(fp)
 401022c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4010230:	e0bffd17 	ldw	r2,-12(fp)
 4010234:	10000816 	blt	r2,zero,4010258 <read+0x44>
 4010238:	01400304 	movi	r5,12
 401023c:	e13ffd17 	ldw	r4,-12(fp)
 4010240:	4002ce00 	call	4002ce0 <__mulsi3>
 4010244:	1007883a 	mov	r3,r2
 4010248:	00810074 	movhi	r2,1025
 401024c:	108d5a04 	addi	r2,r2,13672
 4010250:	1885883a 	add	r2,r3,r2
 4010254:	00000106 	br	401025c <read+0x48>
 4010258:	0005883a 	mov	r2,zero
 401025c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4010260:	e0bffb17 	ldw	r2,-20(fp)
 4010264:	10002226 	beq	r2,zero,40102f0 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4010268:	e0bffb17 	ldw	r2,-20(fp)
 401026c:	10800217 	ldw	r2,8(r2)
 4010270:	108000cc 	andi	r2,r2,3
 4010274:	10800060 	cmpeqi	r2,r2,1
 4010278:	1000181e 	bne	r2,zero,40102dc <read+0xc8>
        (fd->dev->read))
 401027c:	e0bffb17 	ldw	r2,-20(fp)
 4010280:	10800017 	ldw	r2,0(r2)
 4010284:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4010288:	10001426 	beq	r2,zero,40102dc <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 401028c:	e0bffb17 	ldw	r2,-20(fp)
 4010290:	10800017 	ldw	r2,0(r2)
 4010294:	10800517 	ldw	r2,20(r2)
 4010298:	e0ffff17 	ldw	r3,-4(fp)
 401029c:	180d883a 	mov	r6,r3
 40102a0:	e17ffe17 	ldw	r5,-8(fp)
 40102a4:	e13ffb17 	ldw	r4,-20(fp)
 40102a8:	103ee83a 	callr	r2
 40102ac:	e0bffc15 	stw	r2,-16(fp)
 40102b0:	e0bffc17 	ldw	r2,-16(fp)
 40102b4:	1000070e 	bge	r2,zero,40102d4 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 40102b8:	40101d80 	call	40101d8 <alt_get_errno>
 40102bc:	1007883a 	mov	r3,r2
 40102c0:	e0bffc17 	ldw	r2,-16(fp)
 40102c4:	0085c83a 	sub	r2,zero,r2
 40102c8:	18800015 	stw	r2,0(r3)
          return -1;
 40102cc:	00bfffc4 	movi	r2,-1
 40102d0:	00000c06 	br	4010304 <read+0xf0>
        }
        return rval;
 40102d4:	e0bffc17 	ldw	r2,-16(fp)
 40102d8:	00000a06 	br	4010304 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 40102dc:	40101d80 	call	40101d8 <alt_get_errno>
 40102e0:	1007883a 	mov	r3,r2
 40102e4:	00800344 	movi	r2,13
 40102e8:	18800015 	stw	r2,0(r3)
 40102ec:	00000406 	br	4010300 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 40102f0:	40101d80 	call	40101d8 <alt_get_errno>
 40102f4:	1007883a 	mov	r3,r2
 40102f8:	00801444 	movi	r2,81
 40102fc:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4010300:	00bfffc4 	movi	r2,-1
}
 4010304:	e037883a 	mov	sp,fp
 4010308:	dfc00117 	ldw	ra,4(sp)
 401030c:	df000017 	ldw	fp,0(sp)
 4010310:	dec00204 	addi	sp,sp,8
 4010314:	f800283a 	ret

04010318 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4010318:	defffc04 	addi	sp,sp,-16
 401031c:	dfc00315 	stw	ra,12(sp)
 4010320:	df000215 	stw	fp,8(sp)
 4010324:	dc000115 	stw	r16,4(sp)
 4010328:	df000204 	addi	fp,sp,8
 401032c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 4010330:	e0bffe17 	ldw	r2,-8(fp)
 4010334:	108000d0 	cmplti	r2,r2,3
 4010338:	1000111e 	bne	r2,zero,4010380 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 401033c:	04010074 	movhi	r16,1025
 4010340:	840d5a04 	addi	r16,r16,13672
 4010344:	e0bffe17 	ldw	r2,-8(fp)
 4010348:	01400304 	movi	r5,12
 401034c:	1009883a 	mov	r4,r2
 4010350:	4002ce00 	call	4002ce0 <__mulsi3>
 4010354:	8085883a 	add	r2,r16,r2
 4010358:	10800204 	addi	r2,r2,8
 401035c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4010360:	04010074 	movhi	r16,1025
 4010364:	840d5a04 	addi	r16,r16,13672
 4010368:	e0bffe17 	ldw	r2,-8(fp)
 401036c:	01400304 	movi	r5,12
 4010370:	1009883a 	mov	r4,r2
 4010374:	4002ce00 	call	4002ce0 <__mulsi3>
 4010378:	8085883a 	add	r2,r16,r2
 401037c:	10000015 	stw	zero,0(r2)
  }
}
 4010380:	0001883a 	nop
 4010384:	e6ffff04 	addi	sp,fp,-4
 4010388:	dfc00217 	ldw	ra,8(sp)
 401038c:	df000117 	ldw	fp,4(sp)
 4010390:	dc000017 	ldw	r16,0(sp)
 4010394:	dec00304 	addi	sp,sp,12
 4010398:	f800283a 	ret

0401039c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 401039c:	defff904 	addi	sp,sp,-28
 40103a0:	df000615 	stw	fp,24(sp)
 40103a4:	df000604 	addi	fp,sp,24
 40103a8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40103ac:	0005303a 	rdctl	r2,status
 40103b0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40103b4:	e0fffe17 	ldw	r3,-8(fp)
 40103b8:	00bfff84 	movi	r2,-2
 40103bc:	1884703a 	and	r2,r3,r2
 40103c0:	1001703a 	wrctl	status,r2
  
  return context;
 40103c4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 40103c8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 40103cc:	d0a01017 	ldw	r2,-32704(gp)
 40103d0:	10c000c4 	addi	r3,r2,3
 40103d4:	00bfff04 	movi	r2,-4
 40103d8:	1884703a 	and	r2,r3,r2
 40103dc:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 40103e0:	d0e01017 	ldw	r3,-32704(gp)
 40103e4:	e0bfff17 	ldw	r2,-4(fp)
 40103e8:	1887883a 	add	r3,r3,r2
 40103ec:	00820034 	movhi	r2,2048
 40103f0:	10800004 	addi	r2,r2,0
 40103f4:	10c0062e 	bgeu	r2,r3,4010410 <sbrk+0x74>
 40103f8:	e0bffb17 	ldw	r2,-20(fp)
 40103fc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010400:	e0bffa17 	ldw	r2,-24(fp)
 4010404:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 4010408:	00bfffc4 	movi	r2,-1
 401040c:	00000b06 	br	401043c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 4010410:	d0a01017 	ldw	r2,-32704(gp)
 4010414:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 4010418:	d0e01017 	ldw	r3,-32704(gp)
 401041c:	e0bfff17 	ldw	r2,-4(fp)
 4010420:	1885883a 	add	r2,r3,r2
 4010424:	d0a01015 	stw	r2,-32704(gp)
 4010428:	e0bffb17 	ldw	r2,-20(fp)
 401042c:	e0bffc15 	stw	r2,-16(fp)
 4010430:	e0bffc17 	ldw	r2,-16(fp)
 4010434:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 4010438:	e0bffd17 	ldw	r2,-12(fp)
} 
 401043c:	e037883a 	mov	sp,fp
 4010440:	df000017 	ldw	fp,0(sp)
 4010444:	dec00104 	addi	sp,sp,4
 4010448:	f800283a 	ret

0401044c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 401044c:	defffa04 	addi	sp,sp,-24
 4010450:	df000515 	stw	fp,20(sp)
 4010454:	df000504 	addi	fp,sp,20
 4010458:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401045c:	0005303a 	rdctl	r2,status
 4010460:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010464:	e0fffc17 	ldw	r3,-16(fp)
 4010468:	00bfff84 	movi	r2,-2
 401046c:	1884703a 	and	r2,r3,r2
 4010470:	1001703a 	wrctl	status,r2
  
  return context;
 4010474:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4010478:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 401047c:	e0bfff17 	ldw	r2,-4(fp)
 4010480:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4010484:	e0bffd17 	ldw	r2,-12(fp)
 4010488:	10800017 	ldw	r2,0(r2)
 401048c:	e0fffd17 	ldw	r3,-12(fp)
 4010490:	18c00117 	ldw	r3,4(r3)
 4010494:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4010498:	e0bffd17 	ldw	r2,-12(fp)
 401049c:	10800117 	ldw	r2,4(r2)
 40104a0:	e0fffd17 	ldw	r3,-12(fp)
 40104a4:	18c00017 	ldw	r3,0(r3)
 40104a8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 40104ac:	e0bffd17 	ldw	r2,-12(fp)
 40104b0:	e0fffd17 	ldw	r3,-12(fp)
 40104b4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 40104b8:	e0bffd17 	ldw	r2,-12(fp)
 40104bc:	e0fffd17 	ldw	r3,-12(fp)
 40104c0:	10c00015 	stw	r3,0(r2)
 40104c4:	e0bffb17 	ldw	r2,-20(fp)
 40104c8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40104cc:	e0bffe17 	ldw	r2,-8(fp)
 40104d0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 40104d4:	0001883a 	nop
 40104d8:	e037883a 	mov	sp,fp
 40104dc:	df000017 	ldw	fp,0(sp)
 40104e0:	dec00104 	addi	sp,sp,4
 40104e4:	f800283a 	ret

040104e8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 40104e8:	defffb04 	addi	sp,sp,-20
 40104ec:	dfc00415 	stw	ra,16(sp)
 40104f0:	df000315 	stw	fp,12(sp)
 40104f4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 40104f8:	d0a01117 	ldw	r2,-32700(gp)
 40104fc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4010500:	d0a6f017 	ldw	r2,-25664(gp)
 4010504:	10800044 	addi	r2,r2,1
 4010508:	d0a6f015 	stw	r2,-25664(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 401050c:	00002e06 	br	40105c8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 4010510:	e0bffd17 	ldw	r2,-12(fp)
 4010514:	10800017 	ldw	r2,0(r2)
 4010518:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 401051c:	e0bffd17 	ldw	r2,-12(fp)
 4010520:	10800403 	ldbu	r2,16(r2)
 4010524:	10803fcc 	andi	r2,r2,255
 4010528:	10000426 	beq	r2,zero,401053c <alt_tick+0x54>
 401052c:	d0a6f017 	ldw	r2,-25664(gp)
 4010530:	1000021e 	bne	r2,zero,401053c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 4010534:	e0bffd17 	ldw	r2,-12(fp)
 4010538:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 401053c:	e0bffd17 	ldw	r2,-12(fp)
 4010540:	10800217 	ldw	r2,8(r2)
 4010544:	d0e6f017 	ldw	r3,-25664(gp)
 4010548:	18801d36 	bltu	r3,r2,40105c0 <alt_tick+0xd8>
 401054c:	e0bffd17 	ldw	r2,-12(fp)
 4010550:	10800403 	ldbu	r2,16(r2)
 4010554:	10803fcc 	andi	r2,r2,255
 4010558:	1000191e 	bne	r2,zero,40105c0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 401055c:	e0bffd17 	ldw	r2,-12(fp)
 4010560:	10800317 	ldw	r2,12(r2)
 4010564:	e0fffd17 	ldw	r3,-12(fp)
 4010568:	18c00517 	ldw	r3,20(r3)
 401056c:	1809883a 	mov	r4,r3
 4010570:	103ee83a 	callr	r2
 4010574:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4010578:	e0bfff17 	ldw	r2,-4(fp)
 401057c:	1000031e 	bne	r2,zero,401058c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4010580:	e13ffd17 	ldw	r4,-12(fp)
 4010584:	401044c0 	call	401044c <alt_alarm_stop>
 4010588:	00000d06 	br	40105c0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 401058c:	e0bffd17 	ldw	r2,-12(fp)
 4010590:	10c00217 	ldw	r3,8(r2)
 4010594:	e0bfff17 	ldw	r2,-4(fp)
 4010598:	1887883a 	add	r3,r3,r2
 401059c:	e0bffd17 	ldw	r2,-12(fp)
 40105a0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 40105a4:	e0bffd17 	ldw	r2,-12(fp)
 40105a8:	10c00217 	ldw	r3,8(r2)
 40105ac:	d0a6f017 	ldw	r2,-25664(gp)
 40105b0:	1880032e 	bgeu	r3,r2,40105c0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 40105b4:	e0bffd17 	ldw	r2,-12(fp)
 40105b8:	00c00044 	movi	r3,1
 40105bc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 40105c0:	e0bffe17 	ldw	r2,-8(fp)
 40105c4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 40105c8:	e0fffd17 	ldw	r3,-12(fp)
 40105cc:	d0a01104 	addi	r2,gp,-32700
 40105d0:	18bfcf1e 	bne	r3,r2,4010510 <__alt_data_end+0xfc010510>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 40105d4:	0001883a 	nop
}
 40105d8:	0001883a 	nop
 40105dc:	e037883a 	mov	sp,fp
 40105e0:	dfc00117 	ldw	ra,4(sp)
 40105e4:	df000017 	ldw	fp,0(sp)
 40105e8:	dec00204 	addi	sp,sp,8
 40105ec:	f800283a 	ret

040105f0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 40105f0:	defffd04 	addi	sp,sp,-12
 40105f4:	dfc00215 	stw	ra,8(sp)
 40105f8:	df000115 	stw	fp,4(sp)
 40105fc:	df000104 	addi	fp,sp,4
 4010600:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 4010604:	e13fff17 	ldw	r4,-4(fp)
 4010608:	40116b40 	call	40116b4 <alt_busy_sleep>
}
 401060c:	e037883a 	mov	sp,fp
 4010610:	dfc00117 	ldw	ra,4(sp)
 4010614:	df000017 	ldw	fp,0(sp)
 4010618:	dec00204 	addi	sp,sp,8
 401061c:	f800283a 	ret

04010620 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4010620:	defffe04 	addi	sp,sp,-8
 4010624:	dfc00115 	stw	ra,4(sp)
 4010628:	df000015 	stw	fp,0(sp)
 401062c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4010630:	d0a00f17 	ldw	r2,-32708(gp)
 4010634:	10000326 	beq	r2,zero,4010644 <alt_get_errno+0x24>
 4010638:	d0a00f17 	ldw	r2,-32708(gp)
 401063c:	103ee83a 	callr	r2
 4010640:	00000106 	br	4010648 <alt_get_errno+0x28>
 4010644:	d0a6eb04 	addi	r2,gp,-25684
}
 4010648:	e037883a 	mov	sp,fp
 401064c:	dfc00117 	ldw	ra,4(sp)
 4010650:	df000017 	ldw	fp,0(sp)
 4010654:	dec00204 	addi	sp,sp,8
 4010658:	f800283a 	ret

0401065c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 401065c:	defff904 	addi	sp,sp,-28
 4010660:	dfc00615 	stw	ra,24(sp)
 4010664:	df000515 	stw	fp,20(sp)
 4010668:	df000504 	addi	fp,sp,20
 401066c:	e13ffd15 	stw	r4,-12(fp)
 4010670:	e17ffe15 	stw	r5,-8(fp)
 4010674:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4010678:	e0bffd17 	ldw	r2,-12(fp)
 401067c:	10000816 	blt	r2,zero,40106a0 <write+0x44>
 4010680:	01400304 	movi	r5,12
 4010684:	e13ffd17 	ldw	r4,-12(fp)
 4010688:	4002ce00 	call	4002ce0 <__mulsi3>
 401068c:	1007883a 	mov	r3,r2
 4010690:	00810074 	movhi	r2,1025
 4010694:	108d5a04 	addi	r2,r2,13672
 4010698:	1885883a 	add	r2,r3,r2
 401069c:	00000106 	br	40106a4 <write+0x48>
 40106a0:	0005883a 	mov	r2,zero
 40106a4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 40106a8:	e0bffb17 	ldw	r2,-20(fp)
 40106ac:	10002126 	beq	r2,zero,4010734 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 40106b0:	e0bffb17 	ldw	r2,-20(fp)
 40106b4:	10800217 	ldw	r2,8(r2)
 40106b8:	108000cc 	andi	r2,r2,3
 40106bc:	10001826 	beq	r2,zero,4010720 <write+0xc4>
 40106c0:	e0bffb17 	ldw	r2,-20(fp)
 40106c4:	10800017 	ldw	r2,0(r2)
 40106c8:	10800617 	ldw	r2,24(r2)
 40106cc:	10001426 	beq	r2,zero,4010720 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 40106d0:	e0bffb17 	ldw	r2,-20(fp)
 40106d4:	10800017 	ldw	r2,0(r2)
 40106d8:	10800617 	ldw	r2,24(r2)
 40106dc:	e0ffff17 	ldw	r3,-4(fp)
 40106e0:	180d883a 	mov	r6,r3
 40106e4:	e17ffe17 	ldw	r5,-8(fp)
 40106e8:	e13ffb17 	ldw	r4,-20(fp)
 40106ec:	103ee83a 	callr	r2
 40106f0:	e0bffc15 	stw	r2,-16(fp)
 40106f4:	e0bffc17 	ldw	r2,-16(fp)
 40106f8:	1000070e 	bge	r2,zero,4010718 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 40106fc:	40106200 	call	4010620 <alt_get_errno>
 4010700:	1007883a 	mov	r3,r2
 4010704:	e0bffc17 	ldw	r2,-16(fp)
 4010708:	0085c83a 	sub	r2,zero,r2
 401070c:	18800015 	stw	r2,0(r3)
        return -1;
 4010710:	00bfffc4 	movi	r2,-1
 4010714:	00000c06 	br	4010748 <write+0xec>
      }
      return rval;
 4010718:	e0bffc17 	ldw	r2,-16(fp)
 401071c:	00000a06 	br	4010748 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 4010720:	40106200 	call	4010620 <alt_get_errno>
 4010724:	1007883a 	mov	r3,r2
 4010728:	00800344 	movi	r2,13
 401072c:	18800015 	stw	r2,0(r3)
 4010730:	00000406 	br	4010744 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4010734:	40106200 	call	4010620 <alt_get_errno>
 4010738:	1007883a 	mov	r3,r2
 401073c:	00801444 	movi	r2,81
 4010740:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4010744:	00bfffc4 	movi	r2,-1
}
 4010748:	e037883a 	mov	sp,fp
 401074c:	dfc00117 	ldw	ra,4(sp)
 4010750:	df000017 	ldw	fp,0(sp)
 4010754:	dec00204 	addi	sp,sp,8
 4010758:	f800283a 	ret

0401075c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 401075c:	defffd04 	addi	sp,sp,-12
 4010760:	dfc00215 	stw	ra,8(sp)
 4010764:	df000115 	stw	fp,4(sp)
 4010768:	df000104 	addi	fp,sp,4
 401076c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4010770:	d1600c04 	addi	r5,gp,-32720
 4010774:	e13fff17 	ldw	r4,-4(fp)
 4010778:	40118680 	call	4011868 <alt_dev_llist_insert>
}
 401077c:	e037883a 	mov	sp,fp
 4010780:	dfc00117 	ldw	ra,4(sp)
 4010784:	df000017 	ldw	fp,0(sp)
 4010788:	dec00204 	addi	sp,sp,8
 401078c:	f800283a 	ret

04010790 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4010790:	defffd04 	addi	sp,sp,-12
 4010794:	dfc00215 	stw	ra,8(sp)
 4010798:	df000115 	stw	fp,4(sp)
 401079c:	df000104 	addi	fp,sp,4
 40107a0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 40107a4:	40120700 	call	4012070 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 40107a8:	00800044 	movi	r2,1
 40107ac:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 40107b0:	0001883a 	nop
 40107b4:	e037883a 	mov	sp,fp
 40107b8:	dfc00117 	ldw	ra,4(sp)
 40107bc:	df000017 	ldw	fp,0(sp)
 40107c0:	dec00204 	addi	sp,sp,8
 40107c4:	f800283a 	ret

040107c8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 40107c8:	defffe04 	addi	sp,sp,-8
 40107cc:	dfc00115 	stw	ra,4(sp)
 40107d0:	df000015 	stw	fp,0(sp)
 40107d4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 40107d8:	01c0fa04 	movi	r7,1000
 40107dc:	01800084 	movi	r6,2
 40107e0:	000b883a 	mov	r5,zero
 40107e4:	01020034 	movhi	r4,2048
 40107e8:	21041004 	addi	r4,r4,4160
 40107ec:	401150c0 	call	401150c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 40107f0:	01800044 	movi	r6,1
 40107f4:	000b883a 	mov	r5,zero
 40107f8:	01010074 	movhi	r4,1025
 40107fc:	210dc404 	addi	r4,r4,14096
 4010800:	40109940 	call	4010994 <altera_avalon_jtag_uart_init>
 4010804:	01010074 	movhi	r4,1025
 4010808:	210dba04 	addi	r4,r4,14056
 401080c:	401075c0 	call	401075c <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 4010810:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 4010814:	0001883a 	nop
}
 4010818:	0001883a 	nop
 401081c:	e037883a 	mov	sp,fp
 4010820:	dfc00117 	ldw	ra,4(sp)
 4010824:	df000017 	ldw	fp,0(sp)
 4010828:	dec00204 	addi	sp,sp,8
 401082c:	f800283a 	ret

04010830 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4010830:	defffa04 	addi	sp,sp,-24
 4010834:	dfc00515 	stw	ra,20(sp)
 4010838:	df000415 	stw	fp,16(sp)
 401083c:	df000404 	addi	fp,sp,16
 4010840:	e13ffd15 	stw	r4,-12(fp)
 4010844:	e17ffe15 	stw	r5,-8(fp)
 4010848:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 401084c:	e0bffd17 	ldw	r2,-12(fp)
 4010850:	10800017 	ldw	r2,0(r2)
 4010854:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4010858:	e0bffc17 	ldw	r2,-16(fp)
 401085c:	10c00a04 	addi	r3,r2,40
 4010860:	e0bffd17 	ldw	r2,-12(fp)
 4010864:	10800217 	ldw	r2,8(r2)
 4010868:	100f883a 	mov	r7,r2
 401086c:	e1bfff17 	ldw	r6,-4(fp)
 4010870:	e17ffe17 	ldw	r5,-8(fp)
 4010874:	1809883a 	mov	r4,r3
 4010878:	4010e580 	call	4010e58 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 401087c:	e037883a 	mov	sp,fp
 4010880:	dfc00117 	ldw	ra,4(sp)
 4010884:	df000017 	ldw	fp,0(sp)
 4010888:	dec00204 	addi	sp,sp,8
 401088c:	f800283a 	ret

04010890 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4010890:	defffa04 	addi	sp,sp,-24
 4010894:	dfc00515 	stw	ra,20(sp)
 4010898:	df000415 	stw	fp,16(sp)
 401089c:	df000404 	addi	fp,sp,16
 40108a0:	e13ffd15 	stw	r4,-12(fp)
 40108a4:	e17ffe15 	stw	r5,-8(fp)
 40108a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40108ac:	e0bffd17 	ldw	r2,-12(fp)
 40108b0:	10800017 	ldw	r2,0(r2)
 40108b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 40108b8:	e0bffc17 	ldw	r2,-16(fp)
 40108bc:	10c00a04 	addi	r3,r2,40
 40108c0:	e0bffd17 	ldw	r2,-12(fp)
 40108c4:	10800217 	ldw	r2,8(r2)
 40108c8:	100f883a 	mov	r7,r2
 40108cc:	e1bfff17 	ldw	r6,-4(fp)
 40108d0:	e17ffe17 	ldw	r5,-8(fp)
 40108d4:	1809883a 	mov	r4,r3
 40108d8:	40110740 	call	4011074 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 40108dc:	e037883a 	mov	sp,fp
 40108e0:	dfc00117 	ldw	ra,4(sp)
 40108e4:	df000017 	ldw	fp,0(sp)
 40108e8:	dec00204 	addi	sp,sp,8
 40108ec:	f800283a 	ret

040108f0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 40108f0:	defffc04 	addi	sp,sp,-16
 40108f4:	dfc00315 	stw	ra,12(sp)
 40108f8:	df000215 	stw	fp,8(sp)
 40108fc:	df000204 	addi	fp,sp,8
 4010900:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4010904:	e0bfff17 	ldw	r2,-4(fp)
 4010908:	10800017 	ldw	r2,0(r2)
 401090c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 4010910:	e0bffe17 	ldw	r2,-8(fp)
 4010914:	10c00a04 	addi	r3,r2,40
 4010918:	e0bfff17 	ldw	r2,-4(fp)
 401091c:	10800217 	ldw	r2,8(r2)
 4010920:	100b883a 	mov	r5,r2
 4010924:	1809883a 	mov	r4,r3
 4010928:	4010d000 	call	4010d00 <altera_avalon_jtag_uart_close>
}
 401092c:	e037883a 	mov	sp,fp
 4010930:	dfc00117 	ldw	ra,4(sp)
 4010934:	df000017 	ldw	fp,0(sp)
 4010938:	dec00204 	addi	sp,sp,8
 401093c:	f800283a 	ret

04010940 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4010940:	defffa04 	addi	sp,sp,-24
 4010944:	dfc00515 	stw	ra,20(sp)
 4010948:	df000415 	stw	fp,16(sp)
 401094c:	df000404 	addi	fp,sp,16
 4010950:	e13ffd15 	stw	r4,-12(fp)
 4010954:	e17ffe15 	stw	r5,-8(fp)
 4010958:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 401095c:	e0bffd17 	ldw	r2,-12(fp)
 4010960:	10800017 	ldw	r2,0(r2)
 4010964:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4010968:	e0bffc17 	ldw	r2,-16(fp)
 401096c:	10800a04 	addi	r2,r2,40
 4010970:	e1bfff17 	ldw	r6,-4(fp)
 4010974:	e17ffe17 	ldw	r5,-8(fp)
 4010978:	1009883a 	mov	r4,r2
 401097c:	4010d680 	call	4010d68 <altera_avalon_jtag_uart_ioctl>
}
 4010980:	e037883a 	mov	sp,fp
 4010984:	dfc00117 	ldw	ra,4(sp)
 4010988:	df000017 	ldw	fp,0(sp)
 401098c:	dec00204 	addi	sp,sp,8
 4010990:	f800283a 	ret

04010994 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4010994:	defffa04 	addi	sp,sp,-24
 4010998:	dfc00515 	stw	ra,20(sp)
 401099c:	df000415 	stw	fp,16(sp)
 40109a0:	df000404 	addi	fp,sp,16
 40109a4:	e13ffd15 	stw	r4,-12(fp)
 40109a8:	e17ffe15 	stw	r5,-8(fp)
 40109ac:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 40109b0:	e0bffd17 	ldw	r2,-12(fp)
 40109b4:	00c00044 	movi	r3,1
 40109b8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 40109bc:	e0bffd17 	ldw	r2,-12(fp)
 40109c0:	10800017 	ldw	r2,0(r2)
 40109c4:	10800104 	addi	r2,r2,4
 40109c8:	1007883a 	mov	r3,r2
 40109cc:	e0bffd17 	ldw	r2,-12(fp)
 40109d0:	10800817 	ldw	r2,32(r2)
 40109d4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 40109d8:	e0bffe17 	ldw	r2,-8(fp)
 40109dc:	e0ffff17 	ldw	r3,-4(fp)
 40109e0:	d8000015 	stw	zero,0(sp)
 40109e4:	e1fffd17 	ldw	r7,-12(fp)
 40109e8:	01810074 	movhi	r6,1025
 40109ec:	31829504 	addi	r6,r6,2644
 40109f0:	180b883a 	mov	r5,r3
 40109f4:	1009883a 	mov	r4,r2
 40109f8:	40119ec0 	call	40119ec <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 40109fc:	e0bffd17 	ldw	r2,-12(fp)
 4010a00:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4010a04:	e0bffd17 	ldw	r2,-12(fp)
 4010a08:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4010a0c:	d0e6ef17 	ldw	r3,-25668(gp)
 4010a10:	e1fffd17 	ldw	r7,-12(fp)
 4010a14:	01810074 	movhi	r6,1025
 4010a18:	31831804 	addi	r6,r6,3168
 4010a1c:	180b883a 	mov	r5,r3
 4010a20:	1009883a 	mov	r4,r2
 4010a24:	40115880 	call	4011588 <alt_alarm_start>
 4010a28:	1000040e 	bge	r2,zero,4010a3c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 4010a2c:	e0fffd17 	ldw	r3,-12(fp)
 4010a30:	00a00034 	movhi	r2,32768
 4010a34:	10bfffc4 	addi	r2,r2,-1
 4010a38:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 4010a3c:	0001883a 	nop
 4010a40:	e037883a 	mov	sp,fp
 4010a44:	dfc00117 	ldw	ra,4(sp)
 4010a48:	df000017 	ldw	fp,0(sp)
 4010a4c:	dec00204 	addi	sp,sp,8
 4010a50:	f800283a 	ret

04010a54 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4010a54:	defff804 	addi	sp,sp,-32
 4010a58:	df000715 	stw	fp,28(sp)
 4010a5c:	df000704 	addi	fp,sp,28
 4010a60:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4010a64:	e0bfff17 	ldw	r2,-4(fp)
 4010a68:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 4010a6c:	e0bffb17 	ldw	r2,-20(fp)
 4010a70:	10800017 	ldw	r2,0(r2)
 4010a74:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4010a78:	e0bffc17 	ldw	r2,-16(fp)
 4010a7c:	10800104 	addi	r2,r2,4
 4010a80:	10800037 	ldwio	r2,0(r2)
 4010a84:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4010a88:	e0bffd17 	ldw	r2,-12(fp)
 4010a8c:	1080c00c 	andi	r2,r2,768
 4010a90:	10006d26 	beq	r2,zero,4010c48 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4010a94:	e0bffd17 	ldw	r2,-12(fp)
 4010a98:	1080400c 	andi	r2,r2,256
 4010a9c:	10003526 	beq	r2,zero,4010b74 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 4010aa0:	00800074 	movhi	r2,1
 4010aa4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4010aa8:	e0bffb17 	ldw	r2,-20(fp)
 4010aac:	10800a17 	ldw	r2,40(r2)
 4010ab0:	10800044 	addi	r2,r2,1
 4010ab4:	1081ffcc 	andi	r2,r2,2047
 4010ab8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 4010abc:	e0bffb17 	ldw	r2,-20(fp)
 4010ac0:	10c00b17 	ldw	r3,44(r2)
 4010ac4:	e0bffe17 	ldw	r2,-8(fp)
 4010ac8:	18801526 	beq	r3,r2,4010b20 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4010acc:	e0bffc17 	ldw	r2,-16(fp)
 4010ad0:	10800037 	ldwio	r2,0(r2)
 4010ad4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4010ad8:	e0bff917 	ldw	r2,-28(fp)
 4010adc:	10a0000c 	andi	r2,r2,32768
 4010ae0:	10001126 	beq	r2,zero,4010b28 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4010ae4:	e0bffb17 	ldw	r2,-20(fp)
 4010ae8:	10800a17 	ldw	r2,40(r2)
 4010aec:	e0fff917 	ldw	r3,-28(fp)
 4010af0:	1809883a 	mov	r4,r3
 4010af4:	e0fffb17 	ldw	r3,-20(fp)
 4010af8:	1885883a 	add	r2,r3,r2
 4010afc:	10800e04 	addi	r2,r2,56
 4010b00:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4010b04:	e0bffb17 	ldw	r2,-20(fp)
 4010b08:	10800a17 	ldw	r2,40(r2)
 4010b0c:	10800044 	addi	r2,r2,1
 4010b10:	10c1ffcc 	andi	r3,r2,2047
 4010b14:	e0bffb17 	ldw	r2,-20(fp)
 4010b18:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 4010b1c:	003fe206 	br	4010aa8 <__alt_data_end+0xfc010aa8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 4010b20:	0001883a 	nop
 4010b24:	00000106 	br	4010b2c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 4010b28:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 4010b2c:	e0bff917 	ldw	r2,-28(fp)
 4010b30:	10bfffec 	andhi	r2,r2,65535
 4010b34:	10000f26 	beq	r2,zero,4010b74 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4010b38:	e0bffb17 	ldw	r2,-20(fp)
 4010b3c:	10c00817 	ldw	r3,32(r2)
 4010b40:	00bfff84 	movi	r2,-2
 4010b44:	1886703a 	and	r3,r3,r2
 4010b48:	e0bffb17 	ldw	r2,-20(fp)
 4010b4c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4010b50:	e0bffc17 	ldw	r2,-16(fp)
 4010b54:	10800104 	addi	r2,r2,4
 4010b58:	1007883a 	mov	r3,r2
 4010b5c:	e0bffb17 	ldw	r2,-20(fp)
 4010b60:	10800817 	ldw	r2,32(r2)
 4010b64:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4010b68:	e0bffc17 	ldw	r2,-16(fp)
 4010b6c:	10800104 	addi	r2,r2,4
 4010b70:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4010b74:	e0bffd17 	ldw	r2,-12(fp)
 4010b78:	1080800c 	andi	r2,r2,512
 4010b7c:	103fbe26 	beq	r2,zero,4010a78 <__alt_data_end+0xfc010a78>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4010b80:	e0bffd17 	ldw	r2,-12(fp)
 4010b84:	1004d43a 	srli	r2,r2,16
 4010b88:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 4010b8c:	00001406 	br	4010be0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 4010b90:	e0bffc17 	ldw	r2,-16(fp)
 4010b94:	e0fffb17 	ldw	r3,-20(fp)
 4010b98:	18c00d17 	ldw	r3,52(r3)
 4010b9c:	e13ffb17 	ldw	r4,-20(fp)
 4010ba0:	20c7883a 	add	r3,r4,r3
 4010ba4:	18c20e04 	addi	r3,r3,2104
 4010ba8:	18c00003 	ldbu	r3,0(r3)
 4010bac:	18c03fcc 	andi	r3,r3,255
 4010bb0:	18c0201c 	xori	r3,r3,128
 4010bb4:	18ffe004 	addi	r3,r3,-128
 4010bb8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4010bbc:	e0bffb17 	ldw	r2,-20(fp)
 4010bc0:	10800d17 	ldw	r2,52(r2)
 4010bc4:	10800044 	addi	r2,r2,1
 4010bc8:	10c1ffcc 	andi	r3,r2,2047
 4010bcc:	e0bffb17 	ldw	r2,-20(fp)
 4010bd0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4010bd4:	e0bffa17 	ldw	r2,-24(fp)
 4010bd8:	10bfffc4 	addi	r2,r2,-1
 4010bdc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 4010be0:	e0bffa17 	ldw	r2,-24(fp)
 4010be4:	10000526 	beq	r2,zero,4010bfc <altera_avalon_jtag_uart_irq+0x1a8>
 4010be8:	e0bffb17 	ldw	r2,-20(fp)
 4010bec:	10c00d17 	ldw	r3,52(r2)
 4010bf0:	e0bffb17 	ldw	r2,-20(fp)
 4010bf4:	10800c17 	ldw	r2,48(r2)
 4010bf8:	18bfe51e 	bne	r3,r2,4010b90 <__alt_data_end+0xfc010b90>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 4010bfc:	e0bffa17 	ldw	r2,-24(fp)
 4010c00:	103f9d26 	beq	r2,zero,4010a78 <__alt_data_end+0xfc010a78>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4010c04:	e0bffb17 	ldw	r2,-20(fp)
 4010c08:	10c00817 	ldw	r3,32(r2)
 4010c0c:	00bfff44 	movi	r2,-3
 4010c10:	1886703a 	and	r3,r3,r2
 4010c14:	e0bffb17 	ldw	r2,-20(fp)
 4010c18:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4010c1c:	e0bffb17 	ldw	r2,-20(fp)
 4010c20:	10800017 	ldw	r2,0(r2)
 4010c24:	10800104 	addi	r2,r2,4
 4010c28:	1007883a 	mov	r3,r2
 4010c2c:	e0bffb17 	ldw	r2,-20(fp)
 4010c30:	10800817 	ldw	r2,32(r2)
 4010c34:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4010c38:	e0bffc17 	ldw	r2,-16(fp)
 4010c3c:	10800104 	addi	r2,r2,4
 4010c40:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 4010c44:	003f8c06 	br	4010a78 <__alt_data_end+0xfc010a78>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 4010c48:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 4010c4c:	0001883a 	nop
 4010c50:	e037883a 	mov	sp,fp
 4010c54:	df000017 	ldw	fp,0(sp)
 4010c58:	dec00104 	addi	sp,sp,4
 4010c5c:	f800283a 	ret

04010c60 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4010c60:	defff804 	addi	sp,sp,-32
 4010c64:	df000715 	stw	fp,28(sp)
 4010c68:	df000704 	addi	fp,sp,28
 4010c6c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 4010c70:	e0bffb17 	ldw	r2,-20(fp)
 4010c74:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4010c78:	e0bff917 	ldw	r2,-28(fp)
 4010c7c:	10800017 	ldw	r2,0(r2)
 4010c80:	10800104 	addi	r2,r2,4
 4010c84:	10800037 	ldwio	r2,0(r2)
 4010c88:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 4010c8c:	e0bffa17 	ldw	r2,-24(fp)
 4010c90:	1081000c 	andi	r2,r2,1024
 4010c94:	10000b26 	beq	r2,zero,4010cc4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 4010c98:	e0bff917 	ldw	r2,-28(fp)
 4010c9c:	10800017 	ldw	r2,0(r2)
 4010ca0:	10800104 	addi	r2,r2,4
 4010ca4:	1007883a 	mov	r3,r2
 4010ca8:	e0bff917 	ldw	r2,-28(fp)
 4010cac:	10800817 	ldw	r2,32(r2)
 4010cb0:	10810014 	ori	r2,r2,1024
 4010cb4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 4010cb8:	e0bff917 	ldw	r2,-28(fp)
 4010cbc:	10000915 	stw	zero,36(r2)
 4010cc0:	00000a06 	br	4010cec <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4010cc4:	e0bff917 	ldw	r2,-28(fp)
 4010cc8:	10c00917 	ldw	r3,36(r2)
 4010ccc:	00a00034 	movhi	r2,32768
 4010cd0:	10bfff04 	addi	r2,r2,-4
 4010cd4:	10c00536 	bltu	r2,r3,4010cec <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 4010cd8:	e0bff917 	ldw	r2,-28(fp)
 4010cdc:	10800917 	ldw	r2,36(r2)
 4010ce0:	10c00044 	addi	r3,r2,1
 4010ce4:	e0bff917 	ldw	r2,-28(fp)
 4010ce8:	10c00915 	stw	r3,36(r2)
 4010cec:	d0a6ef17 	ldw	r2,-25668(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 4010cf0:	e037883a 	mov	sp,fp
 4010cf4:	df000017 	ldw	fp,0(sp)
 4010cf8:	dec00104 	addi	sp,sp,4
 4010cfc:	f800283a 	ret

04010d00 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 4010d00:	defffd04 	addi	sp,sp,-12
 4010d04:	df000215 	stw	fp,8(sp)
 4010d08:	df000204 	addi	fp,sp,8
 4010d0c:	e13ffe15 	stw	r4,-8(fp)
 4010d10:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4010d14:	00000506 	br	4010d2c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 4010d18:	e0bfff17 	ldw	r2,-4(fp)
 4010d1c:	1090000c 	andi	r2,r2,16384
 4010d20:	10000226 	beq	r2,zero,4010d2c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 4010d24:	00bffd44 	movi	r2,-11
 4010d28:	00000b06 	br	4010d58 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4010d2c:	e0bffe17 	ldw	r2,-8(fp)
 4010d30:	10c00d17 	ldw	r3,52(r2)
 4010d34:	e0bffe17 	ldw	r2,-8(fp)
 4010d38:	10800c17 	ldw	r2,48(r2)
 4010d3c:	18800526 	beq	r3,r2,4010d54 <altera_avalon_jtag_uart_close+0x54>
 4010d40:	e0bffe17 	ldw	r2,-8(fp)
 4010d44:	10c00917 	ldw	r3,36(r2)
 4010d48:	e0bffe17 	ldw	r2,-8(fp)
 4010d4c:	10800117 	ldw	r2,4(r2)
 4010d50:	18bff136 	bltu	r3,r2,4010d18 <__alt_data_end+0xfc010d18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4010d54:	0005883a 	mov	r2,zero
}
 4010d58:	e037883a 	mov	sp,fp
 4010d5c:	df000017 	ldw	fp,0(sp)
 4010d60:	dec00104 	addi	sp,sp,4
 4010d64:	f800283a 	ret

04010d68 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4010d68:	defffa04 	addi	sp,sp,-24
 4010d6c:	df000515 	stw	fp,20(sp)
 4010d70:	df000504 	addi	fp,sp,20
 4010d74:	e13ffd15 	stw	r4,-12(fp)
 4010d78:	e17ffe15 	stw	r5,-8(fp)
 4010d7c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 4010d80:	00bff9c4 	movi	r2,-25
 4010d84:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 4010d88:	e0bffe17 	ldw	r2,-8(fp)
 4010d8c:	10da8060 	cmpeqi	r3,r2,27137
 4010d90:	1800031e 	bne	r3,zero,4010da0 <altera_avalon_jtag_uart_ioctl+0x38>
 4010d94:	109a80a0 	cmpeqi	r2,r2,27138
 4010d98:	1000181e 	bne	r2,zero,4010dfc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 4010d9c:	00002906 	br	4010e44 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 4010da0:	e0bffd17 	ldw	r2,-12(fp)
 4010da4:	10c00117 	ldw	r3,4(r2)
 4010da8:	00a00034 	movhi	r2,32768
 4010dac:	10bfffc4 	addi	r2,r2,-1
 4010db0:	18802126 	beq	r3,r2,4010e38 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 4010db4:	e0bfff17 	ldw	r2,-4(fp)
 4010db8:	10800017 	ldw	r2,0(r2)
 4010dbc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4010dc0:	e0bffc17 	ldw	r2,-16(fp)
 4010dc4:	10800090 	cmplti	r2,r2,2
 4010dc8:	1000061e 	bne	r2,zero,4010de4 <altera_avalon_jtag_uart_ioctl+0x7c>
 4010dcc:	e0fffc17 	ldw	r3,-16(fp)
 4010dd0:	00a00034 	movhi	r2,32768
 4010dd4:	10bfffc4 	addi	r2,r2,-1
 4010dd8:	18800226 	beq	r3,r2,4010de4 <altera_avalon_jtag_uart_ioctl+0x7c>
 4010ddc:	e0bffc17 	ldw	r2,-16(fp)
 4010de0:	00000206 	br	4010dec <altera_avalon_jtag_uart_ioctl+0x84>
 4010de4:	00a00034 	movhi	r2,32768
 4010de8:	10bfff84 	addi	r2,r2,-2
 4010dec:	e0fffd17 	ldw	r3,-12(fp)
 4010df0:	18800115 	stw	r2,4(r3)
      rc = 0;
 4010df4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4010df8:	00000f06 	br	4010e38 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 4010dfc:	e0bffd17 	ldw	r2,-12(fp)
 4010e00:	10c00117 	ldw	r3,4(r2)
 4010e04:	00a00034 	movhi	r2,32768
 4010e08:	10bfffc4 	addi	r2,r2,-1
 4010e0c:	18800c26 	beq	r3,r2,4010e40 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 4010e10:	e0bffd17 	ldw	r2,-12(fp)
 4010e14:	10c00917 	ldw	r3,36(r2)
 4010e18:	e0bffd17 	ldw	r2,-12(fp)
 4010e1c:	10800117 	ldw	r2,4(r2)
 4010e20:	1885803a 	cmpltu	r2,r3,r2
 4010e24:	10c03fcc 	andi	r3,r2,255
 4010e28:	e0bfff17 	ldw	r2,-4(fp)
 4010e2c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 4010e30:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4010e34:	00000206 	br	4010e40 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 4010e38:	0001883a 	nop
 4010e3c:	00000106 	br	4010e44 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 4010e40:	0001883a 	nop

  default:
    break;
  }

  return rc;
 4010e44:	e0bffb17 	ldw	r2,-20(fp)
}
 4010e48:	e037883a 	mov	sp,fp
 4010e4c:	df000017 	ldw	fp,0(sp)
 4010e50:	dec00104 	addi	sp,sp,4
 4010e54:	f800283a 	ret

04010e58 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4010e58:	defff304 	addi	sp,sp,-52
 4010e5c:	dfc00c15 	stw	ra,48(sp)
 4010e60:	df000b15 	stw	fp,44(sp)
 4010e64:	df000b04 	addi	fp,sp,44
 4010e68:	e13ffc15 	stw	r4,-16(fp)
 4010e6c:	e17ffd15 	stw	r5,-12(fp)
 4010e70:	e1bffe15 	stw	r6,-8(fp)
 4010e74:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 4010e78:	e0bffd17 	ldw	r2,-12(fp)
 4010e7c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4010e80:	00004706 	br	4010fa0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 4010e84:	e0bffc17 	ldw	r2,-16(fp)
 4010e88:	10800a17 	ldw	r2,40(r2)
 4010e8c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 4010e90:	e0bffc17 	ldw	r2,-16(fp)
 4010e94:	10800b17 	ldw	r2,44(r2)
 4010e98:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 4010e9c:	e0fff717 	ldw	r3,-36(fp)
 4010ea0:	e0bff817 	ldw	r2,-32(fp)
 4010ea4:	18800536 	bltu	r3,r2,4010ebc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 4010ea8:	e0fff717 	ldw	r3,-36(fp)
 4010eac:	e0bff817 	ldw	r2,-32(fp)
 4010eb0:	1885c83a 	sub	r2,r3,r2
 4010eb4:	e0bff615 	stw	r2,-40(fp)
 4010eb8:	00000406 	br	4010ecc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4010ebc:	00c20004 	movi	r3,2048
 4010ec0:	e0bff817 	ldw	r2,-32(fp)
 4010ec4:	1885c83a 	sub	r2,r3,r2
 4010ec8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4010ecc:	e0bff617 	ldw	r2,-40(fp)
 4010ed0:	10001e26 	beq	r2,zero,4010f4c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 4010ed4:	e0fffe17 	ldw	r3,-8(fp)
 4010ed8:	e0bff617 	ldw	r2,-40(fp)
 4010edc:	1880022e 	bgeu	r3,r2,4010ee8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 4010ee0:	e0bffe17 	ldw	r2,-8(fp)
 4010ee4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4010ee8:	e0bffc17 	ldw	r2,-16(fp)
 4010eec:	10c00e04 	addi	r3,r2,56
 4010ef0:	e0bff817 	ldw	r2,-32(fp)
 4010ef4:	1885883a 	add	r2,r3,r2
 4010ef8:	e1bff617 	ldw	r6,-40(fp)
 4010efc:	100b883a 	mov	r5,r2
 4010f00:	e13ff517 	ldw	r4,-44(fp)
 4010f04:	400891c0 	call	400891c <memcpy>
      ptr   += n;
 4010f08:	e0fff517 	ldw	r3,-44(fp)
 4010f0c:	e0bff617 	ldw	r2,-40(fp)
 4010f10:	1885883a 	add	r2,r3,r2
 4010f14:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 4010f18:	e0fffe17 	ldw	r3,-8(fp)
 4010f1c:	e0bff617 	ldw	r2,-40(fp)
 4010f20:	1885c83a 	sub	r2,r3,r2
 4010f24:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4010f28:	e0fff817 	ldw	r3,-32(fp)
 4010f2c:	e0bff617 	ldw	r2,-40(fp)
 4010f30:	1885883a 	add	r2,r3,r2
 4010f34:	10c1ffcc 	andi	r3,r2,2047
 4010f38:	e0bffc17 	ldw	r2,-16(fp)
 4010f3c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 4010f40:	e0bffe17 	ldw	r2,-8(fp)
 4010f44:	00bfcf16 	blt	zero,r2,4010e84 <__alt_data_end+0xfc010e84>
 4010f48:	00000106 	br	4010f50 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 4010f4c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 4010f50:	e0fff517 	ldw	r3,-44(fp)
 4010f54:	e0bffd17 	ldw	r2,-12(fp)
 4010f58:	1880141e 	bne	r3,r2,4010fac <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4010f5c:	e0bfff17 	ldw	r2,-4(fp)
 4010f60:	1090000c 	andi	r2,r2,16384
 4010f64:	1000131e 	bne	r2,zero,4010fb4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4010f68:	0001883a 	nop
 4010f6c:	e0bffc17 	ldw	r2,-16(fp)
 4010f70:	10c00a17 	ldw	r3,40(r2)
 4010f74:	e0bff717 	ldw	r2,-36(fp)
 4010f78:	1880051e 	bne	r3,r2,4010f90 <altera_avalon_jtag_uart_read+0x138>
 4010f7c:	e0bffc17 	ldw	r2,-16(fp)
 4010f80:	10c00917 	ldw	r3,36(r2)
 4010f84:	e0bffc17 	ldw	r2,-16(fp)
 4010f88:	10800117 	ldw	r2,4(r2)
 4010f8c:	18bff736 	bltu	r3,r2,4010f6c <__alt_data_end+0xfc010f6c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4010f90:	e0bffc17 	ldw	r2,-16(fp)
 4010f94:	10c00a17 	ldw	r3,40(r2)
 4010f98:	e0bff717 	ldw	r2,-36(fp)
 4010f9c:	18800726 	beq	r3,r2,4010fbc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4010fa0:	e0bffe17 	ldw	r2,-8(fp)
 4010fa4:	00bfb716 	blt	zero,r2,4010e84 <__alt_data_end+0xfc010e84>
 4010fa8:	00000506 	br	4010fc0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 4010fac:	0001883a 	nop
 4010fb0:	00000306 	br	4010fc0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 4010fb4:	0001883a 	nop
 4010fb8:	00000106 	br	4010fc0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 4010fbc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 4010fc0:	e0fff517 	ldw	r3,-44(fp)
 4010fc4:	e0bffd17 	ldw	r2,-12(fp)
 4010fc8:	18801826 	beq	r3,r2,401102c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010fcc:	0005303a 	rdctl	r2,status
 4010fd0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010fd4:	e0fffb17 	ldw	r3,-20(fp)
 4010fd8:	00bfff84 	movi	r2,-2
 4010fdc:	1884703a 	and	r2,r3,r2
 4010fe0:	1001703a 	wrctl	status,r2
  
  return context;
 4010fe4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4010fe8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4010fec:	e0bffc17 	ldw	r2,-16(fp)
 4010ff0:	10800817 	ldw	r2,32(r2)
 4010ff4:	10c00054 	ori	r3,r2,1
 4010ff8:	e0bffc17 	ldw	r2,-16(fp)
 4010ffc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4011000:	e0bffc17 	ldw	r2,-16(fp)
 4011004:	10800017 	ldw	r2,0(r2)
 4011008:	10800104 	addi	r2,r2,4
 401100c:	1007883a 	mov	r3,r2
 4011010:	e0bffc17 	ldw	r2,-16(fp)
 4011014:	10800817 	ldw	r2,32(r2)
 4011018:	18800035 	stwio	r2,0(r3)
 401101c:	e0bffa17 	ldw	r2,-24(fp)
 4011020:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011024:	e0bff917 	ldw	r2,-28(fp)
 4011028:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 401102c:	e0fff517 	ldw	r3,-44(fp)
 4011030:	e0bffd17 	ldw	r2,-12(fp)
 4011034:	18800426 	beq	r3,r2,4011048 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 4011038:	e0fff517 	ldw	r3,-44(fp)
 401103c:	e0bffd17 	ldw	r2,-12(fp)
 4011040:	1885c83a 	sub	r2,r3,r2
 4011044:	00000606 	br	4011060 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 4011048:	e0bfff17 	ldw	r2,-4(fp)
 401104c:	1090000c 	andi	r2,r2,16384
 4011050:	10000226 	beq	r2,zero,401105c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 4011054:	00bffd44 	movi	r2,-11
 4011058:	00000106 	br	4011060 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 401105c:	00bffec4 	movi	r2,-5
}
 4011060:	e037883a 	mov	sp,fp
 4011064:	dfc00117 	ldw	ra,4(sp)
 4011068:	df000017 	ldw	fp,0(sp)
 401106c:	dec00204 	addi	sp,sp,8
 4011070:	f800283a 	ret

04011074 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4011074:	defff304 	addi	sp,sp,-52
 4011078:	dfc00c15 	stw	ra,48(sp)
 401107c:	df000b15 	stw	fp,44(sp)
 4011080:	df000b04 	addi	fp,sp,44
 4011084:	e13ffc15 	stw	r4,-16(fp)
 4011088:	e17ffd15 	stw	r5,-12(fp)
 401108c:	e1bffe15 	stw	r6,-8(fp)
 4011090:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 4011094:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4011098:	e0bffd17 	ldw	r2,-12(fp)
 401109c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 40110a0:	00003706 	br	4011180 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 40110a4:	e0bffc17 	ldw	r2,-16(fp)
 40110a8:	10800c17 	ldw	r2,48(r2)
 40110ac:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 40110b0:	e0bffc17 	ldw	r2,-16(fp)
 40110b4:	10800d17 	ldw	r2,52(r2)
 40110b8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 40110bc:	e0fff917 	ldw	r3,-28(fp)
 40110c0:	e0bff517 	ldw	r2,-44(fp)
 40110c4:	1880062e 	bgeu	r3,r2,40110e0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 40110c8:	e0fff517 	ldw	r3,-44(fp)
 40110cc:	e0bff917 	ldw	r2,-28(fp)
 40110d0:	1885c83a 	sub	r2,r3,r2
 40110d4:	10bfffc4 	addi	r2,r2,-1
 40110d8:	e0bff615 	stw	r2,-40(fp)
 40110dc:	00000b06 	br	401110c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 40110e0:	e0bff517 	ldw	r2,-44(fp)
 40110e4:	10000526 	beq	r2,zero,40110fc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 40110e8:	00c20004 	movi	r3,2048
 40110ec:	e0bff917 	ldw	r2,-28(fp)
 40110f0:	1885c83a 	sub	r2,r3,r2
 40110f4:	e0bff615 	stw	r2,-40(fp)
 40110f8:	00000406 	br	401110c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 40110fc:	00c1ffc4 	movi	r3,2047
 4011100:	e0bff917 	ldw	r2,-28(fp)
 4011104:	1885c83a 	sub	r2,r3,r2
 4011108:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 401110c:	e0bff617 	ldw	r2,-40(fp)
 4011110:	10001e26 	beq	r2,zero,401118c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 4011114:	e0fffe17 	ldw	r3,-8(fp)
 4011118:	e0bff617 	ldw	r2,-40(fp)
 401111c:	1880022e 	bgeu	r3,r2,4011128 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 4011120:	e0bffe17 	ldw	r2,-8(fp)
 4011124:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 4011128:	e0bffc17 	ldw	r2,-16(fp)
 401112c:	10c20e04 	addi	r3,r2,2104
 4011130:	e0bff917 	ldw	r2,-28(fp)
 4011134:	1885883a 	add	r2,r3,r2
 4011138:	e1bff617 	ldw	r6,-40(fp)
 401113c:	e17ffd17 	ldw	r5,-12(fp)
 4011140:	1009883a 	mov	r4,r2
 4011144:	400891c0 	call	400891c <memcpy>
      ptr   += n;
 4011148:	e0fffd17 	ldw	r3,-12(fp)
 401114c:	e0bff617 	ldw	r2,-40(fp)
 4011150:	1885883a 	add	r2,r3,r2
 4011154:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 4011158:	e0fffe17 	ldw	r3,-8(fp)
 401115c:	e0bff617 	ldw	r2,-40(fp)
 4011160:	1885c83a 	sub	r2,r3,r2
 4011164:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4011168:	e0fff917 	ldw	r3,-28(fp)
 401116c:	e0bff617 	ldw	r2,-40(fp)
 4011170:	1885883a 	add	r2,r3,r2
 4011174:	10c1ffcc 	andi	r3,r2,2047
 4011178:	e0bffc17 	ldw	r2,-16(fp)
 401117c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4011180:	e0bffe17 	ldw	r2,-8(fp)
 4011184:	00bfc716 	blt	zero,r2,40110a4 <__alt_data_end+0xfc0110a4>
 4011188:	00000106 	br	4011190 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 401118c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011190:	0005303a 	rdctl	r2,status
 4011194:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011198:	e0fffb17 	ldw	r3,-20(fp)
 401119c:	00bfff84 	movi	r2,-2
 40111a0:	1884703a 	and	r2,r3,r2
 40111a4:	1001703a 	wrctl	status,r2
  
  return context;
 40111a8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 40111ac:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 40111b0:	e0bffc17 	ldw	r2,-16(fp)
 40111b4:	10800817 	ldw	r2,32(r2)
 40111b8:	10c00094 	ori	r3,r2,2
 40111bc:	e0bffc17 	ldw	r2,-16(fp)
 40111c0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40111c4:	e0bffc17 	ldw	r2,-16(fp)
 40111c8:	10800017 	ldw	r2,0(r2)
 40111cc:	10800104 	addi	r2,r2,4
 40111d0:	1007883a 	mov	r3,r2
 40111d4:	e0bffc17 	ldw	r2,-16(fp)
 40111d8:	10800817 	ldw	r2,32(r2)
 40111dc:	18800035 	stwio	r2,0(r3)
 40111e0:	e0bffa17 	ldw	r2,-24(fp)
 40111e4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40111e8:	e0bff817 	ldw	r2,-32(fp)
 40111ec:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 40111f0:	e0bffe17 	ldw	r2,-8(fp)
 40111f4:	0080100e 	bge	zero,r2,4011238 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 40111f8:	e0bfff17 	ldw	r2,-4(fp)
 40111fc:	1090000c 	andi	r2,r2,16384
 4011200:	1000101e 	bne	r2,zero,4011244 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 4011204:	0001883a 	nop
 4011208:	e0bffc17 	ldw	r2,-16(fp)
 401120c:	10c00d17 	ldw	r3,52(r2)
 4011210:	e0bff517 	ldw	r2,-44(fp)
 4011214:	1880051e 	bne	r3,r2,401122c <altera_avalon_jtag_uart_write+0x1b8>
 4011218:	e0bffc17 	ldw	r2,-16(fp)
 401121c:	10c00917 	ldw	r3,36(r2)
 4011220:	e0bffc17 	ldw	r2,-16(fp)
 4011224:	10800117 	ldw	r2,4(r2)
 4011228:	18bff736 	bltu	r3,r2,4011208 <__alt_data_end+0xfc011208>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 401122c:	e0bffc17 	ldw	r2,-16(fp)
 4011230:	10800917 	ldw	r2,36(r2)
 4011234:	1000051e 	bne	r2,zero,401124c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 4011238:	e0bffe17 	ldw	r2,-8(fp)
 401123c:	00bfd016 	blt	zero,r2,4011180 <__alt_data_end+0xfc011180>
 4011240:	00000306 	br	4011250 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 4011244:	0001883a 	nop
 4011248:	00000106 	br	4011250 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 401124c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4011250:	e0fffd17 	ldw	r3,-12(fp)
 4011254:	e0bff717 	ldw	r2,-36(fp)
 4011258:	18800426 	beq	r3,r2,401126c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 401125c:	e0fffd17 	ldw	r3,-12(fp)
 4011260:	e0bff717 	ldw	r2,-36(fp)
 4011264:	1885c83a 	sub	r2,r3,r2
 4011268:	00000606 	br	4011284 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 401126c:	e0bfff17 	ldw	r2,-4(fp)
 4011270:	1090000c 	andi	r2,r2,16384
 4011274:	10000226 	beq	r2,zero,4011280 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 4011278:	00bffd44 	movi	r2,-11
 401127c:	00000106 	br	4011284 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 4011280:	00bffec4 	movi	r2,-5
}
 4011284:	e037883a 	mov	sp,fp
 4011288:	dfc00117 	ldw	ra,4(sp)
 401128c:	df000017 	ldw	fp,0(sp)
 4011290:	dec00204 	addi	sp,sp,8
 4011294:	f800283a 	ret

04011298 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 4011298:	defff404 	addi	sp,sp,-48
 401129c:	df000b15 	stw	fp,44(sp)
 40112a0:	df000b04 	addi	fp,sp,44
 40112a4:	e13ffc15 	stw	r4,-16(fp)
 40112a8:	e17ffd15 	stw	r5,-12(fp)
 40112ac:	e1bffe15 	stw	r6,-8(fp)
 40112b0:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 40112b4:	e0ffff17 	ldw	r3,-4(fp)
 40112b8:	e0bffe17 	ldw	r2,-8(fp)
 40112bc:	1885883a 	add	r2,r3,r2
 40112c0:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 40112c4:	e0c00217 	ldw	r3,8(fp)
 40112c8:	e0800117 	ldw	r2,4(fp)
 40112cc:	1885883a 	add	r2,r3,r2
 40112d0:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 40112d4:	e0800117 	ldw	r2,4(fp)
 40112d8:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 40112dc:	e0bffe17 	ldw	r2,-8(fp)
 40112e0:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 40112e4:	00800044 	movi	r2,1
 40112e8:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 40112ec:	e0bffc17 	ldw	r2,-16(fp)
 40112f0:	10800504 	addi	r2,r2,20
 40112f4:	1009883a 	mov	r4,r2
 40112f8:	00c00044 	movi	r3,1
 40112fc:	e0bffd17 	ldw	r2,-12(fp)
 4011300:	1884983a 	sll	r2,r3,r2
 4011304:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 4011308:	e0800317 	ldw	r2,12(fp)
 401130c:	1080008c 	andi	r2,r2,2
 4011310:	1000051e 	bne	r2,zero,4011328 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 4011314:	e0bffc17 	ldw	r2,-16(fp)
 4011318:	10800304 	addi	r2,r2,12
 401131c:	1007883a 	mov	r3,r2
 4011320:	00810004 	movi	r2,1024
 4011324:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 4011328:	e0bffc17 	ldw	r2,-16(fp)
 401132c:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 4011330:	e0bffc17 	ldw	r2,-16(fp)
 4011334:	10800204 	addi	r2,r2,8
 4011338:	10800037 	ldwio	r2,0(r2)
 401133c:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 4011340:	e0bffa17 	ldw	r2,-24(fp)
 4011344:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 4011348:	10000226 	beq	r2,zero,4011354 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 401134c:	e0bff717 	ldw	r2,-36(fp)
 4011350:	1000031e 	bne	r2,zero,4011360 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 4011354:	e0bffa17 	ldw	r2,-24(fp)
 4011358:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 401135c:	103ff426 	beq	r2,zero,4011330 <__alt_data_end+0xfc011330>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 4011360:	e0bffa17 	ldw	r2,-24(fp)
 4011364:	1080100c 	andi	r2,r2,64
 4011368:	10001e26 	beq	r2,zero,40113e4 <alt_avalon_spi_command+0x14c>
 401136c:	e0bff717 	ldw	r2,-36(fp)
 4011370:	00801c0e 	bge	zero,r2,40113e4 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 4011374:	e0bff717 	ldw	r2,-36(fp)
 4011378:	10bfffc4 	addi	r2,r2,-1
 401137c:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 4011380:	e0ffff17 	ldw	r3,-4(fp)
 4011384:	e0bff817 	ldw	r2,-32(fp)
 4011388:	18800a2e 	bgeu	r3,r2,40113b4 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 401138c:	e0bffc17 	ldw	r2,-16(fp)
 4011390:	10800104 	addi	r2,r2,4
 4011394:	1009883a 	mov	r4,r2
 4011398:	e0bfff17 	ldw	r2,-4(fp)
 401139c:	10c00044 	addi	r3,r2,1
 40113a0:	e0ffff15 	stw	r3,-4(fp)
 40113a4:	10800003 	ldbu	r2,0(r2)
 40113a8:	10803fcc 	andi	r2,r2,255
 40113ac:	20800035 	stwio	r2,0(r4)
 40113b0:	00000c06 	br	40113e4 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 40113b4:	e0bff517 	ldw	r2,-44(fp)
 40113b8:	10000826 	beq	r2,zero,40113dc <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 40113bc:	e0bff517 	ldw	r2,-44(fp)
 40113c0:	10bfffc4 	addi	r2,r2,-1
 40113c4:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 40113c8:	e0bffc17 	ldw	r2,-16(fp)
 40113cc:	10800104 	addi	r2,r2,4
 40113d0:	0007883a 	mov	r3,zero
 40113d4:	10c00035 	stwio	r3,0(r2)
 40113d8:	00000206 	br	40113e4 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 40113dc:	00bf0004 	movi	r2,-1024
 40113e0:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 40113e4:	e0bffa17 	ldw	r2,-24(fp)
 40113e8:	1080200c 	andi	r2,r2,128
 40113ec:	103fd026 	beq	r2,zero,4011330 <__alt_data_end+0xfc011330>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 40113f0:	e0bffc17 	ldw	r2,-16(fp)
 40113f4:	10800037 	ldwio	r2,0(r2)
 40113f8:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 40113fc:	e0bff617 	ldw	r2,-40(fp)
 4011400:	10000426 	beq	r2,zero,4011414 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 4011404:	e0bff617 	ldw	r2,-40(fp)
 4011408:	10bfffc4 	addi	r2,r2,-1
 401140c:	e0bff615 	stw	r2,-40(fp)
 4011410:	00000506 	br	4011428 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 4011414:	e0800217 	ldw	r2,8(fp)
 4011418:	10c00044 	addi	r3,r2,1
 401141c:	e0c00215 	stw	r3,8(fp)
 4011420:	e0fffb17 	ldw	r3,-20(fp)
 4011424:	10c00005 	stb	r3,0(r2)
      credits++;
 4011428:	e0bff717 	ldw	r2,-36(fp)
 401142c:	10800044 	addi	r2,r2,1
 4011430:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 4011434:	e0bff617 	ldw	r2,-40(fp)
 4011438:	103fbd1e 	bne	r2,zero,4011330 <__alt_data_end+0xfc011330>
 401143c:	e0c00217 	ldw	r3,8(fp)
 4011440:	e0bff917 	ldw	r2,-28(fp)
 4011444:	18bfba1e 	bne	r3,r2,4011330 <__alt_data_end+0xfc011330>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 4011448:	e0bffc17 	ldw	r2,-16(fp)
 401144c:	10800204 	addi	r2,r2,8
 4011450:	10800037 	ldwio	r2,0(r2)
 4011454:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 4011458:	e0bffa17 	ldw	r2,-24(fp)
 401145c:	1080080c 	andi	r2,r2,32
 4011460:	103ff926 	beq	r2,zero,4011448 <__alt_data_end+0xfc011448>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 4011464:	e0800317 	ldw	r2,12(fp)
 4011468:	1080004c 	andi	r2,r2,1
 401146c:	1000041e 	bne	r2,zero,4011480 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 4011470:	e0bffc17 	ldw	r2,-16(fp)
 4011474:	10800304 	addi	r2,r2,12
 4011478:	0007883a 	mov	r3,zero
 401147c:	10c00035 	stwio	r3,0(r2)

  return read_length;
 4011480:	e0800117 	ldw	r2,4(fp)
}
 4011484:	e037883a 	mov	sp,fp
 4011488:	df000017 	ldw	fp,0(sp)
 401148c:	dec00104 	addi	sp,sp,4
 4011490:	f800283a 	ret

04011494 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4011494:	defffa04 	addi	sp,sp,-24
 4011498:	dfc00515 	stw	ra,20(sp)
 401149c:	df000415 	stw	fp,16(sp)
 40114a0:	df000404 	addi	fp,sp,16
 40114a4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 40114a8:	0007883a 	mov	r3,zero
 40114ac:	e0bfff17 	ldw	r2,-4(fp)
 40114b0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 40114b4:	e0bfff17 	ldw	r2,-4(fp)
 40114b8:	10800104 	addi	r2,r2,4
 40114bc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40114c0:	0005303a 	rdctl	r2,status
 40114c4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40114c8:	e0fffd17 	ldw	r3,-12(fp)
 40114cc:	00bfff84 	movi	r2,-2
 40114d0:	1884703a 	and	r2,r3,r2
 40114d4:	1001703a 	wrctl	status,r2
  
  return context;
 40114d8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 40114dc:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 40114e0:	40104e80 	call	40104e8 <alt_tick>
 40114e4:	e0bffc17 	ldw	r2,-16(fp)
 40114e8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40114ec:	e0bffe17 	ldw	r2,-8(fp)
 40114f0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 40114f4:	0001883a 	nop
 40114f8:	e037883a 	mov	sp,fp
 40114fc:	dfc00117 	ldw	ra,4(sp)
 4011500:	df000017 	ldw	fp,0(sp)
 4011504:	dec00204 	addi	sp,sp,8
 4011508:	f800283a 	ret

0401150c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 401150c:	defff804 	addi	sp,sp,-32
 4011510:	dfc00715 	stw	ra,28(sp)
 4011514:	df000615 	stw	fp,24(sp)
 4011518:	df000604 	addi	fp,sp,24
 401151c:	e13ffc15 	stw	r4,-16(fp)
 4011520:	e17ffd15 	stw	r5,-12(fp)
 4011524:	e1bffe15 	stw	r6,-8(fp)
 4011528:	e1ffff15 	stw	r7,-4(fp)
 401152c:	e0bfff17 	ldw	r2,-4(fp)
 4011530:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4011534:	d0a6ef17 	ldw	r2,-25668(gp)
 4011538:	1000021e 	bne	r2,zero,4011544 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 401153c:	e0bffb17 	ldw	r2,-20(fp)
 4011540:	d0a6ef15 	stw	r2,-25668(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4011544:	e0bffc17 	ldw	r2,-16(fp)
 4011548:	10800104 	addi	r2,r2,4
 401154c:	00c001c4 	movi	r3,7
 4011550:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4011554:	d8000015 	stw	zero,0(sp)
 4011558:	e1fffc17 	ldw	r7,-16(fp)
 401155c:	01810074 	movhi	r6,1025
 4011560:	31852504 	addi	r6,r6,5268
 4011564:	e17ffe17 	ldw	r5,-8(fp)
 4011568:	e13ffd17 	ldw	r4,-12(fp)
 401156c:	40119ec0 	call	40119ec <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4011570:	0001883a 	nop
 4011574:	e037883a 	mov	sp,fp
 4011578:	dfc00117 	ldw	ra,4(sp)
 401157c:	df000017 	ldw	fp,0(sp)
 4011580:	dec00204 	addi	sp,sp,8
 4011584:	f800283a 	ret

04011588 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4011588:	defff504 	addi	sp,sp,-44
 401158c:	df000a15 	stw	fp,40(sp)
 4011590:	df000a04 	addi	fp,sp,40
 4011594:	e13ffc15 	stw	r4,-16(fp)
 4011598:	e17ffd15 	stw	r5,-12(fp)
 401159c:	e1bffe15 	stw	r6,-8(fp)
 40115a0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 40115a4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 40115a8:	d0a6ef17 	ldw	r2,-25668(gp)
  
  if (alt_ticks_per_second ())
 40115ac:	10003c26 	beq	r2,zero,40116a0 <alt_alarm_start+0x118>
  {
    if (alarm)
 40115b0:	e0bffc17 	ldw	r2,-16(fp)
 40115b4:	10003826 	beq	r2,zero,4011698 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 40115b8:	e0bffc17 	ldw	r2,-16(fp)
 40115bc:	e0fffe17 	ldw	r3,-8(fp)
 40115c0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 40115c4:	e0bffc17 	ldw	r2,-16(fp)
 40115c8:	e0ffff17 	ldw	r3,-4(fp)
 40115cc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40115d0:	0005303a 	rdctl	r2,status
 40115d4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40115d8:	e0fff917 	ldw	r3,-28(fp)
 40115dc:	00bfff84 	movi	r2,-2
 40115e0:	1884703a 	and	r2,r3,r2
 40115e4:	1001703a 	wrctl	status,r2
  
  return context;
 40115e8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 40115ec:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 40115f0:	d0a6f017 	ldw	r2,-25664(gp)
      
      current_nticks = alt_nticks();
 40115f4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 40115f8:	e0fffd17 	ldw	r3,-12(fp)
 40115fc:	e0bff617 	ldw	r2,-40(fp)
 4011600:	1885883a 	add	r2,r3,r2
 4011604:	10c00044 	addi	r3,r2,1
 4011608:	e0bffc17 	ldw	r2,-16(fp)
 401160c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4011610:	e0bffc17 	ldw	r2,-16(fp)
 4011614:	10c00217 	ldw	r3,8(r2)
 4011618:	e0bff617 	ldw	r2,-40(fp)
 401161c:	1880042e 	bgeu	r3,r2,4011630 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 4011620:	e0bffc17 	ldw	r2,-16(fp)
 4011624:	00c00044 	movi	r3,1
 4011628:	10c00405 	stb	r3,16(r2)
 401162c:	00000206 	br	4011638 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 4011630:	e0bffc17 	ldw	r2,-16(fp)
 4011634:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4011638:	e0bffc17 	ldw	r2,-16(fp)
 401163c:	d0e01104 	addi	r3,gp,-32700
 4011640:	e0fffa15 	stw	r3,-24(fp)
 4011644:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4011648:	e0bffb17 	ldw	r2,-20(fp)
 401164c:	e0fffa17 	ldw	r3,-24(fp)
 4011650:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4011654:	e0bffa17 	ldw	r2,-24(fp)
 4011658:	10c00017 	ldw	r3,0(r2)
 401165c:	e0bffb17 	ldw	r2,-20(fp)
 4011660:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4011664:	e0bffa17 	ldw	r2,-24(fp)
 4011668:	10800017 	ldw	r2,0(r2)
 401166c:	e0fffb17 	ldw	r3,-20(fp)
 4011670:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4011674:	e0bffa17 	ldw	r2,-24(fp)
 4011678:	e0fffb17 	ldw	r3,-20(fp)
 401167c:	10c00015 	stw	r3,0(r2)
 4011680:	e0bff817 	ldw	r2,-32(fp)
 4011684:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011688:	e0bff717 	ldw	r2,-36(fp)
 401168c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 4011690:	0005883a 	mov	r2,zero
 4011694:	00000306 	br	40116a4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 4011698:	00bffa84 	movi	r2,-22
 401169c:	00000106 	br	40116a4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 40116a0:	00bfde84 	movi	r2,-134
  }
}
 40116a4:	e037883a 	mov	sp,fp
 40116a8:	df000017 	ldw	fp,0(sp)
 40116ac:	dec00104 	addi	sp,sp,4
 40116b0:	f800283a 	ret

040116b4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 40116b4:	defffa04 	addi	sp,sp,-24
 40116b8:	dfc00515 	stw	ra,20(sp)
 40116bc:	df000415 	stw	fp,16(sp)
 40116c0:	df000404 	addi	fp,sp,16
 40116c4:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 40116c8:	00800244 	movi	r2,9
 40116cc:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 40116d0:	014003f4 	movhi	r5,15
 40116d4:	29509004 	addi	r5,r5,16960
 40116d8:	e13ffd17 	ldw	r4,-12(fp)
 40116dc:	4002ce00 	call	4002ce0 <__mulsi3>
 40116e0:	100b883a 	mov	r5,r2
 40116e4:	0100bef4 	movhi	r4,763
 40116e8:	213c2004 	addi	r4,r4,-3968
 40116ec:	4002c240 	call	4002c24 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 40116f0:	100b883a 	mov	r5,r2
 40116f4:	01200034 	movhi	r4,32768
 40116f8:	213fffc4 	addi	r4,r4,-1
 40116fc:	4002c240 	call	4002c24 <__udivsi3>
 4011700:	100b883a 	mov	r5,r2
 4011704:	e13fff17 	ldw	r4,-4(fp)
 4011708:	4002c240 	call	4002c24 <__udivsi3>
 401170c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 4011710:	e0bffe17 	ldw	r2,-8(fp)
 4011714:	10002a26 	beq	r2,zero,40117c0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 4011718:	e03ffc15 	stw	zero,-16(fp)
 401171c:	00001706 	br	401177c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 4011720:	00a00034 	movhi	r2,32768
 4011724:	10bfffc4 	addi	r2,r2,-1
 4011728:	10bfffc4 	addi	r2,r2,-1
 401172c:	103ffe1e 	bne	r2,zero,4011728 <__alt_data_end+0xfc011728>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 4011730:	014003f4 	movhi	r5,15
 4011734:	29509004 	addi	r5,r5,16960
 4011738:	e13ffd17 	ldw	r4,-12(fp)
 401173c:	4002ce00 	call	4002ce0 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4011740:	100b883a 	mov	r5,r2
 4011744:	0100bef4 	movhi	r4,763
 4011748:	213c2004 	addi	r4,r4,-3968
 401174c:	4002c240 	call	4002c24 <__udivsi3>
 4011750:	100b883a 	mov	r5,r2
 4011754:	01200034 	movhi	r4,32768
 4011758:	213fffc4 	addi	r4,r4,-1
 401175c:	4002c240 	call	4002c24 <__udivsi3>
 4011760:	1007883a 	mov	r3,r2
 4011764:	e0bfff17 	ldw	r2,-4(fp)
 4011768:	10c5c83a 	sub	r2,r2,r3
 401176c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4011770:	e0bffc17 	ldw	r2,-16(fp)
 4011774:	10800044 	addi	r2,r2,1
 4011778:	e0bffc15 	stw	r2,-16(fp)
 401177c:	e0fffc17 	ldw	r3,-16(fp)
 4011780:	e0bffe17 	ldw	r2,-8(fp)
 4011784:	18bfe616 	blt	r3,r2,4011720 <__alt_data_end+0xfc011720>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4011788:	014003f4 	movhi	r5,15
 401178c:	29509004 	addi	r5,r5,16960
 4011790:	e13ffd17 	ldw	r4,-12(fp)
 4011794:	4002ce00 	call	4002ce0 <__mulsi3>
 4011798:	100b883a 	mov	r5,r2
 401179c:	0100bef4 	movhi	r4,763
 40117a0:	213c2004 	addi	r4,r4,-3968
 40117a4:	4002c240 	call	4002c24 <__udivsi3>
 40117a8:	e17fff17 	ldw	r5,-4(fp)
 40117ac:	1009883a 	mov	r4,r2
 40117b0:	4002ce00 	call	4002ce0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 40117b4:	10bfffc4 	addi	r2,r2,-1
 40117b8:	103ffe1e 	bne	r2,zero,40117b4 <__alt_data_end+0xfc0117b4>
 40117bc:	00000d06 	br	40117f4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 40117c0:	014003f4 	movhi	r5,15
 40117c4:	29509004 	addi	r5,r5,16960
 40117c8:	e13ffd17 	ldw	r4,-12(fp)
 40117cc:	4002ce00 	call	4002ce0 <__mulsi3>
 40117d0:	100b883a 	mov	r5,r2
 40117d4:	0100bef4 	movhi	r4,763
 40117d8:	213c2004 	addi	r4,r4,-3968
 40117dc:	4002c240 	call	4002c24 <__udivsi3>
 40117e0:	e17fff17 	ldw	r5,-4(fp)
 40117e4:	1009883a 	mov	r4,r2
 40117e8:	4002ce00 	call	4002ce0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 40117ec:	10bfffc4 	addi	r2,r2,-1
 40117f0:	00bffe16 	blt	zero,r2,40117ec <__alt_data_end+0xfc0117ec>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 40117f4:	0005883a 	mov	r2,zero
}
 40117f8:	e037883a 	mov	sp,fp
 40117fc:	dfc00117 	ldw	ra,4(sp)
 4011800:	df000017 	ldw	fp,0(sp)
 4011804:	dec00204 	addi	sp,sp,8
 4011808:	f800283a 	ret

0401180c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 401180c:	deffff04 	addi	sp,sp,-4
 4011810:	df000015 	stw	fp,0(sp)
 4011814:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4011818:	0001883a 	nop
 401181c:	e037883a 	mov	sp,fp
 4011820:	df000017 	ldw	fp,0(sp)
 4011824:	dec00104 	addi	sp,sp,4
 4011828:	f800283a 	ret

0401182c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401182c:	defffe04 	addi	sp,sp,-8
 4011830:	dfc00115 	stw	ra,4(sp)
 4011834:	df000015 	stw	fp,0(sp)
 4011838:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401183c:	d0a00f17 	ldw	r2,-32708(gp)
 4011840:	10000326 	beq	r2,zero,4011850 <alt_get_errno+0x24>
 4011844:	d0a00f17 	ldw	r2,-32708(gp)
 4011848:	103ee83a 	callr	r2
 401184c:	00000106 	br	4011854 <alt_get_errno+0x28>
 4011850:	d0a6eb04 	addi	r2,gp,-25684
}
 4011854:	e037883a 	mov	sp,fp
 4011858:	dfc00117 	ldw	ra,4(sp)
 401185c:	df000017 	ldw	fp,0(sp)
 4011860:	dec00204 	addi	sp,sp,8
 4011864:	f800283a 	ret

04011868 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4011868:	defffa04 	addi	sp,sp,-24
 401186c:	dfc00515 	stw	ra,20(sp)
 4011870:	df000415 	stw	fp,16(sp)
 4011874:	df000404 	addi	fp,sp,16
 4011878:	e13ffe15 	stw	r4,-8(fp)
 401187c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4011880:	e0bffe17 	ldw	r2,-8(fp)
 4011884:	10000326 	beq	r2,zero,4011894 <alt_dev_llist_insert+0x2c>
 4011888:	e0bffe17 	ldw	r2,-8(fp)
 401188c:	10800217 	ldw	r2,8(r2)
 4011890:	1000061e 	bne	r2,zero,40118ac <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 4011894:	401182c0 	call	401182c <alt_get_errno>
 4011898:	1007883a 	mov	r3,r2
 401189c:	00800584 	movi	r2,22
 40118a0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 40118a4:	00bffa84 	movi	r2,-22
 40118a8:	00001306 	br	40118f8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 40118ac:	e0bffe17 	ldw	r2,-8(fp)
 40118b0:	e0ffff17 	ldw	r3,-4(fp)
 40118b4:	e0fffc15 	stw	r3,-16(fp)
 40118b8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 40118bc:	e0bffd17 	ldw	r2,-12(fp)
 40118c0:	e0fffc17 	ldw	r3,-16(fp)
 40118c4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 40118c8:	e0bffc17 	ldw	r2,-16(fp)
 40118cc:	10c00017 	ldw	r3,0(r2)
 40118d0:	e0bffd17 	ldw	r2,-12(fp)
 40118d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 40118d8:	e0bffc17 	ldw	r2,-16(fp)
 40118dc:	10800017 	ldw	r2,0(r2)
 40118e0:	e0fffd17 	ldw	r3,-12(fp)
 40118e4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 40118e8:	e0bffc17 	ldw	r2,-16(fp)
 40118ec:	e0fffd17 	ldw	r3,-12(fp)
 40118f0:	10c00015 	stw	r3,0(r2)

  return 0;  
 40118f4:	0005883a 	mov	r2,zero
}
 40118f8:	e037883a 	mov	sp,fp
 40118fc:	dfc00117 	ldw	ra,4(sp)
 4011900:	df000017 	ldw	fp,0(sp)
 4011904:	dec00204 	addi	sp,sp,8
 4011908:	f800283a 	ret

0401190c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 401190c:	defffd04 	addi	sp,sp,-12
 4011910:	dfc00215 	stw	ra,8(sp)
 4011914:	df000115 	stw	fp,4(sp)
 4011918:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 401191c:	00810074 	movhi	r2,1025
 4011920:	1089c704 	addi	r2,r2,10012
 4011924:	e0bfff15 	stw	r2,-4(fp)
 4011928:	00000606 	br	4011944 <_do_ctors+0x38>
        (*ctor) (); 
 401192c:	e0bfff17 	ldw	r2,-4(fp)
 4011930:	10800017 	ldw	r2,0(r2)
 4011934:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4011938:	e0bfff17 	ldw	r2,-4(fp)
 401193c:	10bfff04 	addi	r2,r2,-4
 4011940:	e0bfff15 	stw	r2,-4(fp)
 4011944:	e0ffff17 	ldw	r3,-4(fp)
 4011948:	00810074 	movhi	r2,1025
 401194c:	1089c804 	addi	r2,r2,10016
 4011950:	18bff62e 	bgeu	r3,r2,401192c <__alt_data_end+0xfc01192c>
        (*ctor) (); 
}
 4011954:	0001883a 	nop
 4011958:	e037883a 	mov	sp,fp
 401195c:	dfc00117 	ldw	ra,4(sp)
 4011960:	df000017 	ldw	fp,0(sp)
 4011964:	dec00204 	addi	sp,sp,8
 4011968:	f800283a 	ret

0401196c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 401196c:	defffd04 	addi	sp,sp,-12
 4011970:	dfc00215 	stw	ra,8(sp)
 4011974:	df000115 	stw	fp,4(sp)
 4011978:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 401197c:	00810074 	movhi	r2,1025
 4011980:	1089c704 	addi	r2,r2,10012
 4011984:	e0bfff15 	stw	r2,-4(fp)
 4011988:	00000606 	br	40119a4 <_do_dtors+0x38>
        (*dtor) (); 
 401198c:	e0bfff17 	ldw	r2,-4(fp)
 4011990:	10800017 	ldw	r2,0(r2)
 4011994:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4011998:	e0bfff17 	ldw	r2,-4(fp)
 401199c:	10bfff04 	addi	r2,r2,-4
 40119a0:	e0bfff15 	stw	r2,-4(fp)
 40119a4:	e0ffff17 	ldw	r3,-4(fp)
 40119a8:	00810074 	movhi	r2,1025
 40119ac:	1089c804 	addi	r2,r2,10016
 40119b0:	18bff62e 	bgeu	r3,r2,401198c <__alt_data_end+0xfc01198c>
        (*dtor) (); 
}
 40119b4:	0001883a 	nop
 40119b8:	e037883a 	mov	sp,fp
 40119bc:	dfc00117 	ldw	ra,4(sp)
 40119c0:	df000017 	ldw	fp,0(sp)
 40119c4:	dec00204 	addi	sp,sp,8
 40119c8:	f800283a 	ret

040119cc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 40119cc:	deffff04 	addi	sp,sp,-4
 40119d0:	df000015 	stw	fp,0(sp)
 40119d4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 40119d8:	0001883a 	nop
 40119dc:	e037883a 	mov	sp,fp
 40119e0:	df000017 	ldw	fp,0(sp)
 40119e4:	dec00104 	addi	sp,sp,4
 40119e8:	f800283a 	ret

040119ec <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 40119ec:	defff904 	addi	sp,sp,-28
 40119f0:	dfc00615 	stw	ra,24(sp)
 40119f4:	df000515 	stw	fp,20(sp)
 40119f8:	df000504 	addi	fp,sp,20
 40119fc:	e13ffc15 	stw	r4,-16(fp)
 4011a00:	e17ffd15 	stw	r5,-12(fp)
 4011a04:	e1bffe15 	stw	r6,-8(fp)
 4011a08:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4011a0c:	e0800217 	ldw	r2,8(fp)
 4011a10:	d8800015 	stw	r2,0(sp)
 4011a14:	e1ffff17 	ldw	r7,-4(fp)
 4011a18:	e1bffe17 	ldw	r6,-8(fp)
 4011a1c:	e17ffd17 	ldw	r5,-12(fp)
 4011a20:	e13ffc17 	ldw	r4,-16(fp)
 4011a24:	4011b9c0 	call	4011b9c <alt_iic_isr_register>
}  
 4011a28:	e037883a 	mov	sp,fp
 4011a2c:	dfc00117 	ldw	ra,4(sp)
 4011a30:	df000017 	ldw	fp,0(sp)
 4011a34:	dec00204 	addi	sp,sp,8
 4011a38:	f800283a 	ret

04011a3c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4011a3c:	defff904 	addi	sp,sp,-28
 4011a40:	df000615 	stw	fp,24(sp)
 4011a44:	df000604 	addi	fp,sp,24
 4011a48:	e13ffe15 	stw	r4,-8(fp)
 4011a4c:	e17fff15 	stw	r5,-4(fp)
 4011a50:	e0bfff17 	ldw	r2,-4(fp)
 4011a54:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011a58:	0005303a 	rdctl	r2,status
 4011a5c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011a60:	e0fffb17 	ldw	r3,-20(fp)
 4011a64:	00bfff84 	movi	r2,-2
 4011a68:	1884703a 	and	r2,r3,r2
 4011a6c:	1001703a 	wrctl	status,r2
  
  return context;
 4011a70:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4011a74:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 4011a78:	00c00044 	movi	r3,1
 4011a7c:	e0bffa17 	ldw	r2,-24(fp)
 4011a80:	1884983a 	sll	r2,r3,r2
 4011a84:	1007883a 	mov	r3,r2
 4011a88:	d0a6f117 	ldw	r2,-25660(gp)
 4011a8c:	1884b03a 	or	r2,r3,r2
 4011a90:	d0a6f115 	stw	r2,-25660(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4011a94:	d0a6f117 	ldw	r2,-25660(gp)
 4011a98:	100170fa 	wrctl	ienable,r2
 4011a9c:	e0bffc17 	ldw	r2,-16(fp)
 4011aa0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011aa4:	e0bffd17 	ldw	r2,-12(fp)
 4011aa8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4011aac:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 4011ab0:	0001883a 	nop
}
 4011ab4:	e037883a 	mov	sp,fp
 4011ab8:	df000017 	ldw	fp,0(sp)
 4011abc:	dec00104 	addi	sp,sp,4
 4011ac0:	f800283a 	ret

04011ac4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4011ac4:	defff904 	addi	sp,sp,-28
 4011ac8:	df000615 	stw	fp,24(sp)
 4011acc:	df000604 	addi	fp,sp,24
 4011ad0:	e13ffe15 	stw	r4,-8(fp)
 4011ad4:	e17fff15 	stw	r5,-4(fp)
 4011ad8:	e0bfff17 	ldw	r2,-4(fp)
 4011adc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011ae0:	0005303a 	rdctl	r2,status
 4011ae4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011ae8:	e0fffb17 	ldw	r3,-20(fp)
 4011aec:	00bfff84 	movi	r2,-2
 4011af0:	1884703a 	and	r2,r3,r2
 4011af4:	1001703a 	wrctl	status,r2
  
  return context;
 4011af8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4011afc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 4011b00:	00c00044 	movi	r3,1
 4011b04:	e0bffa17 	ldw	r2,-24(fp)
 4011b08:	1884983a 	sll	r2,r3,r2
 4011b0c:	0084303a 	nor	r2,zero,r2
 4011b10:	1007883a 	mov	r3,r2
 4011b14:	d0a6f117 	ldw	r2,-25660(gp)
 4011b18:	1884703a 	and	r2,r3,r2
 4011b1c:	d0a6f115 	stw	r2,-25660(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4011b20:	d0a6f117 	ldw	r2,-25660(gp)
 4011b24:	100170fa 	wrctl	ienable,r2
 4011b28:	e0bffc17 	ldw	r2,-16(fp)
 4011b2c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011b30:	e0bffd17 	ldw	r2,-12(fp)
 4011b34:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4011b38:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 4011b3c:	0001883a 	nop
}
 4011b40:	e037883a 	mov	sp,fp
 4011b44:	df000017 	ldw	fp,0(sp)
 4011b48:	dec00104 	addi	sp,sp,4
 4011b4c:	f800283a 	ret

04011b50 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4011b50:	defffc04 	addi	sp,sp,-16
 4011b54:	df000315 	stw	fp,12(sp)
 4011b58:	df000304 	addi	fp,sp,12
 4011b5c:	e13ffe15 	stw	r4,-8(fp)
 4011b60:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4011b64:	000530fa 	rdctl	r2,ienable
 4011b68:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4011b6c:	00c00044 	movi	r3,1
 4011b70:	e0bfff17 	ldw	r2,-4(fp)
 4011b74:	1884983a 	sll	r2,r3,r2
 4011b78:	1007883a 	mov	r3,r2
 4011b7c:	e0bffd17 	ldw	r2,-12(fp)
 4011b80:	1884703a 	and	r2,r3,r2
 4011b84:	1004c03a 	cmpne	r2,r2,zero
 4011b88:	10803fcc 	andi	r2,r2,255
}
 4011b8c:	e037883a 	mov	sp,fp
 4011b90:	df000017 	ldw	fp,0(sp)
 4011b94:	dec00104 	addi	sp,sp,4
 4011b98:	f800283a 	ret

04011b9c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4011b9c:	defff504 	addi	sp,sp,-44
 4011ba0:	dfc00a15 	stw	ra,40(sp)
 4011ba4:	df000915 	stw	fp,36(sp)
 4011ba8:	df000904 	addi	fp,sp,36
 4011bac:	e13ffc15 	stw	r4,-16(fp)
 4011bb0:	e17ffd15 	stw	r5,-12(fp)
 4011bb4:	e1bffe15 	stw	r6,-8(fp)
 4011bb8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 4011bbc:	00bffa84 	movi	r2,-22
 4011bc0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4011bc4:	e0bffd17 	ldw	r2,-12(fp)
 4011bc8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4011bcc:	e0bff817 	ldw	r2,-32(fp)
 4011bd0:	10800808 	cmpgei	r2,r2,32
 4011bd4:	1000271e 	bne	r2,zero,4011c74 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011bd8:	0005303a 	rdctl	r2,status
 4011bdc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011be0:	e0fffb17 	ldw	r3,-20(fp)
 4011be4:	00bfff84 	movi	r2,-2
 4011be8:	1884703a 	and	r2,r3,r2
 4011bec:	1001703a 	wrctl	status,r2
  
  return context;
 4011bf0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 4011bf4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 4011bf8:	00810074 	movhi	r2,1025
 4011bfc:	10992b04 	addi	r2,r2,25772
 4011c00:	e0fff817 	ldw	r3,-32(fp)
 4011c04:	180690fa 	slli	r3,r3,3
 4011c08:	10c5883a 	add	r2,r2,r3
 4011c0c:	e0fffe17 	ldw	r3,-8(fp)
 4011c10:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 4011c14:	00810074 	movhi	r2,1025
 4011c18:	10992b04 	addi	r2,r2,25772
 4011c1c:	e0fff817 	ldw	r3,-32(fp)
 4011c20:	180690fa 	slli	r3,r3,3
 4011c24:	10c5883a 	add	r2,r2,r3
 4011c28:	10800104 	addi	r2,r2,4
 4011c2c:	e0ffff17 	ldw	r3,-4(fp)
 4011c30:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4011c34:	e0bffe17 	ldw	r2,-8(fp)
 4011c38:	10000526 	beq	r2,zero,4011c50 <alt_iic_isr_register+0xb4>
 4011c3c:	e0bff817 	ldw	r2,-32(fp)
 4011c40:	100b883a 	mov	r5,r2
 4011c44:	e13ffc17 	ldw	r4,-16(fp)
 4011c48:	4011a3c0 	call	4011a3c <alt_ic_irq_enable>
 4011c4c:	00000406 	br	4011c60 <alt_iic_isr_register+0xc4>
 4011c50:	e0bff817 	ldw	r2,-32(fp)
 4011c54:	100b883a 	mov	r5,r2
 4011c58:	e13ffc17 	ldw	r4,-16(fp)
 4011c5c:	4011ac40 	call	4011ac4 <alt_ic_irq_disable>
 4011c60:	e0bff715 	stw	r2,-36(fp)
 4011c64:	e0bffa17 	ldw	r2,-24(fp)
 4011c68:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011c6c:	e0bff917 	ldw	r2,-28(fp)
 4011c70:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 4011c74:	e0bff717 	ldw	r2,-36(fp)
}
 4011c78:	e037883a 	mov	sp,fp
 4011c7c:	dfc00117 	ldw	ra,4(sp)
 4011c80:	df000017 	ldw	fp,0(sp)
 4011c84:	dec00204 	addi	sp,sp,8
 4011c88:	f800283a 	ret

04011c8c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4011c8c:	defff804 	addi	sp,sp,-32
 4011c90:	dfc00715 	stw	ra,28(sp)
 4011c94:	df000615 	stw	fp,24(sp)
 4011c98:	dc000515 	stw	r16,20(sp)
 4011c9c:	df000604 	addi	fp,sp,24
 4011ca0:	e13ffb15 	stw	r4,-20(fp)
 4011ca4:	e17ffc15 	stw	r5,-16(fp)
 4011ca8:	e1bffd15 	stw	r6,-12(fp)
 4011cac:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 4011cb0:	e1bffe17 	ldw	r6,-8(fp)
 4011cb4:	e17ffd17 	ldw	r5,-12(fp)
 4011cb8:	e13ffc17 	ldw	r4,-16(fp)
 4011cbc:	4011f140 	call	4011f14 <open>
 4011cc0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 4011cc4:	e0bffa17 	ldw	r2,-24(fp)
 4011cc8:	10002216 	blt	r2,zero,4011d54 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 4011ccc:	04010074 	movhi	r16,1025
 4011cd0:	840d5a04 	addi	r16,r16,13672
 4011cd4:	e0bffa17 	ldw	r2,-24(fp)
 4011cd8:	01400304 	movi	r5,12
 4011cdc:	1009883a 	mov	r4,r2
 4011ce0:	4002ce00 	call	4002ce0 <__mulsi3>
 4011ce4:	8085883a 	add	r2,r16,r2
 4011ce8:	10c00017 	ldw	r3,0(r2)
 4011cec:	e0bffb17 	ldw	r2,-20(fp)
 4011cf0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4011cf4:	04010074 	movhi	r16,1025
 4011cf8:	840d5a04 	addi	r16,r16,13672
 4011cfc:	e0bffa17 	ldw	r2,-24(fp)
 4011d00:	01400304 	movi	r5,12
 4011d04:	1009883a 	mov	r4,r2
 4011d08:	4002ce00 	call	4002ce0 <__mulsi3>
 4011d0c:	8085883a 	add	r2,r16,r2
 4011d10:	10800104 	addi	r2,r2,4
 4011d14:	10c00017 	ldw	r3,0(r2)
 4011d18:	e0bffb17 	ldw	r2,-20(fp)
 4011d1c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4011d20:	04010074 	movhi	r16,1025
 4011d24:	840d5a04 	addi	r16,r16,13672
 4011d28:	e0bffa17 	ldw	r2,-24(fp)
 4011d2c:	01400304 	movi	r5,12
 4011d30:	1009883a 	mov	r4,r2
 4011d34:	4002ce00 	call	4002ce0 <__mulsi3>
 4011d38:	8085883a 	add	r2,r16,r2
 4011d3c:	10800204 	addi	r2,r2,8
 4011d40:	10c00017 	ldw	r3,0(r2)
 4011d44:	e0bffb17 	ldw	r2,-20(fp)
 4011d48:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4011d4c:	e13ffa17 	ldw	r4,-24(fp)
 4011d50:	40103180 	call	4010318 <alt_release_fd>
  }
} 
 4011d54:	0001883a 	nop
 4011d58:	e6ffff04 	addi	sp,fp,-4
 4011d5c:	dfc00217 	ldw	ra,8(sp)
 4011d60:	df000117 	ldw	fp,4(sp)
 4011d64:	dc000017 	ldw	r16,0(sp)
 4011d68:	dec00304 	addi	sp,sp,12
 4011d6c:	f800283a 	ret

04011d70 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4011d70:	defffb04 	addi	sp,sp,-20
 4011d74:	dfc00415 	stw	ra,16(sp)
 4011d78:	df000315 	stw	fp,12(sp)
 4011d7c:	df000304 	addi	fp,sp,12
 4011d80:	e13ffd15 	stw	r4,-12(fp)
 4011d84:	e17ffe15 	stw	r5,-8(fp)
 4011d88:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4011d8c:	01c07fc4 	movi	r7,511
 4011d90:	01800044 	movi	r6,1
 4011d94:	e17ffd17 	ldw	r5,-12(fp)
 4011d98:	01010074 	movhi	r4,1025
 4011d9c:	210d5d04 	addi	r4,r4,13684
 4011da0:	4011c8c0 	call	4011c8c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4011da4:	01c07fc4 	movi	r7,511
 4011da8:	000d883a 	mov	r6,zero
 4011dac:	e17ffe17 	ldw	r5,-8(fp)
 4011db0:	01010074 	movhi	r4,1025
 4011db4:	210d5a04 	addi	r4,r4,13672
 4011db8:	4011c8c0 	call	4011c8c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4011dbc:	01c07fc4 	movi	r7,511
 4011dc0:	01800044 	movi	r6,1
 4011dc4:	e17fff17 	ldw	r5,-4(fp)
 4011dc8:	01010074 	movhi	r4,1025
 4011dcc:	210d6004 	addi	r4,r4,13696
 4011dd0:	4011c8c0 	call	4011c8c <alt_open_fd>
}  
 4011dd4:	0001883a 	nop
 4011dd8:	e037883a 	mov	sp,fp
 4011ddc:	dfc00117 	ldw	ra,4(sp)
 4011de0:	df000017 	ldw	fp,0(sp)
 4011de4:	dec00204 	addi	sp,sp,8
 4011de8:	f800283a 	ret

04011dec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4011dec:	defffe04 	addi	sp,sp,-8
 4011df0:	dfc00115 	stw	ra,4(sp)
 4011df4:	df000015 	stw	fp,0(sp)
 4011df8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4011dfc:	d0a00f17 	ldw	r2,-32708(gp)
 4011e00:	10000326 	beq	r2,zero,4011e10 <alt_get_errno+0x24>
 4011e04:	d0a00f17 	ldw	r2,-32708(gp)
 4011e08:	103ee83a 	callr	r2
 4011e0c:	00000106 	br	4011e14 <alt_get_errno+0x28>
 4011e10:	d0a6eb04 	addi	r2,gp,-25684
}
 4011e14:	e037883a 	mov	sp,fp
 4011e18:	dfc00117 	ldw	ra,4(sp)
 4011e1c:	df000017 	ldw	fp,0(sp)
 4011e20:	dec00204 	addi	sp,sp,8
 4011e24:	f800283a 	ret

04011e28 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4011e28:	defffb04 	addi	sp,sp,-20
 4011e2c:	dfc00415 	stw	ra,16(sp)
 4011e30:	df000315 	stw	fp,12(sp)
 4011e34:	dc000215 	stw	r16,8(sp)
 4011e38:	df000304 	addi	fp,sp,12
 4011e3c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4011e40:	e0bffe17 	ldw	r2,-8(fp)
 4011e44:	10800217 	ldw	r2,8(r2)
 4011e48:	10d00034 	orhi	r3,r2,16384
 4011e4c:	e0bffe17 	ldw	r2,-8(fp)
 4011e50:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4011e54:	e03ffd15 	stw	zero,-12(fp)
 4011e58:	00002306 	br	4011ee8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4011e5c:	04010074 	movhi	r16,1025
 4011e60:	840d5a04 	addi	r16,r16,13672
 4011e64:	e0bffd17 	ldw	r2,-12(fp)
 4011e68:	01400304 	movi	r5,12
 4011e6c:	1009883a 	mov	r4,r2
 4011e70:	4002ce00 	call	4002ce0 <__mulsi3>
 4011e74:	8085883a 	add	r2,r16,r2
 4011e78:	10c00017 	ldw	r3,0(r2)
 4011e7c:	e0bffe17 	ldw	r2,-8(fp)
 4011e80:	10800017 	ldw	r2,0(r2)
 4011e84:	1880151e 	bne	r3,r2,4011edc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4011e88:	04010074 	movhi	r16,1025
 4011e8c:	840d5a04 	addi	r16,r16,13672
 4011e90:	e0bffd17 	ldw	r2,-12(fp)
 4011e94:	01400304 	movi	r5,12
 4011e98:	1009883a 	mov	r4,r2
 4011e9c:	4002ce00 	call	4002ce0 <__mulsi3>
 4011ea0:	8085883a 	add	r2,r16,r2
 4011ea4:	10800204 	addi	r2,r2,8
 4011ea8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4011eac:	10000b0e 	bge	r2,zero,4011edc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 4011eb0:	01400304 	movi	r5,12
 4011eb4:	e13ffd17 	ldw	r4,-12(fp)
 4011eb8:	4002ce00 	call	4002ce0 <__mulsi3>
 4011ebc:	1007883a 	mov	r3,r2
 4011ec0:	00810074 	movhi	r2,1025
 4011ec4:	108d5a04 	addi	r2,r2,13672
 4011ec8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4011ecc:	e0bffe17 	ldw	r2,-8(fp)
 4011ed0:	18800226 	beq	r3,r2,4011edc <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4011ed4:	00bffcc4 	movi	r2,-13
 4011ed8:	00000806 	br	4011efc <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4011edc:	e0bffd17 	ldw	r2,-12(fp)
 4011ee0:	10800044 	addi	r2,r2,1
 4011ee4:	e0bffd15 	stw	r2,-12(fp)
 4011ee8:	d0a00e17 	ldw	r2,-32712(gp)
 4011eec:	1007883a 	mov	r3,r2
 4011ef0:	e0bffd17 	ldw	r2,-12(fp)
 4011ef4:	18bfd92e 	bgeu	r3,r2,4011e5c <__alt_data_end+0xfc011e5c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4011ef8:	0005883a 	mov	r2,zero
}
 4011efc:	e6ffff04 	addi	sp,fp,-4
 4011f00:	dfc00217 	ldw	ra,8(sp)
 4011f04:	df000117 	ldw	fp,4(sp)
 4011f08:	dc000017 	ldw	r16,0(sp)
 4011f0c:	dec00304 	addi	sp,sp,12
 4011f10:	f800283a 	ret

04011f14 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4011f14:	defff604 	addi	sp,sp,-40
 4011f18:	dfc00915 	stw	ra,36(sp)
 4011f1c:	df000815 	stw	fp,32(sp)
 4011f20:	df000804 	addi	fp,sp,32
 4011f24:	e13ffd15 	stw	r4,-12(fp)
 4011f28:	e17ffe15 	stw	r5,-8(fp)
 4011f2c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4011f30:	00bfffc4 	movi	r2,-1
 4011f34:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 4011f38:	00bffb44 	movi	r2,-19
 4011f3c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 4011f40:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4011f44:	d1600c04 	addi	r5,gp,-32720
 4011f48:	e13ffd17 	ldw	r4,-12(fp)
 4011f4c:	40120940 	call	4012094 <alt_find_dev>
 4011f50:	e0bff815 	stw	r2,-32(fp)
 4011f54:	e0bff817 	ldw	r2,-32(fp)
 4011f58:	1000051e 	bne	r2,zero,4011f70 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4011f5c:	e13ffd17 	ldw	r4,-12(fp)
 4011f60:	40121240 	call	4012124 <alt_find_file>
 4011f64:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 4011f68:	00800044 	movi	r2,1
 4011f6c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4011f70:	e0bff817 	ldw	r2,-32(fp)
 4011f74:	10002b26 	beq	r2,zero,4012024 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4011f78:	e13ff817 	ldw	r4,-32(fp)
 4011f7c:	401222c0 	call	401222c <alt_get_fd>
 4011f80:	e0bff915 	stw	r2,-28(fp)
 4011f84:	e0bff917 	ldw	r2,-28(fp)
 4011f88:	1000030e 	bge	r2,zero,4011f98 <open+0x84>
    {
      status = index;
 4011f8c:	e0bff917 	ldw	r2,-28(fp)
 4011f90:	e0bffa15 	stw	r2,-24(fp)
 4011f94:	00002506 	br	401202c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 4011f98:	01400304 	movi	r5,12
 4011f9c:	e13ff917 	ldw	r4,-28(fp)
 4011fa0:	4002ce00 	call	4002ce0 <__mulsi3>
 4011fa4:	1007883a 	mov	r3,r2
 4011fa8:	00810074 	movhi	r2,1025
 4011fac:	108d5a04 	addi	r2,r2,13672
 4011fb0:	1885883a 	add	r2,r3,r2
 4011fb4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4011fb8:	e0fffe17 	ldw	r3,-8(fp)
 4011fbc:	00900034 	movhi	r2,16384
 4011fc0:	10bfffc4 	addi	r2,r2,-1
 4011fc4:	1886703a 	and	r3,r3,r2
 4011fc8:	e0bffc17 	ldw	r2,-16(fp)
 4011fcc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4011fd0:	e0bffb17 	ldw	r2,-20(fp)
 4011fd4:	1000051e 	bne	r2,zero,4011fec <open+0xd8>
 4011fd8:	e13ffc17 	ldw	r4,-16(fp)
 4011fdc:	4011e280 	call	4011e28 <alt_file_locked>
 4011fe0:	e0bffa15 	stw	r2,-24(fp)
 4011fe4:	e0bffa17 	ldw	r2,-24(fp)
 4011fe8:	10001016 	blt	r2,zero,401202c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4011fec:	e0bff817 	ldw	r2,-32(fp)
 4011ff0:	10800317 	ldw	r2,12(r2)
 4011ff4:	10000826 	beq	r2,zero,4012018 <open+0x104>
 4011ff8:	e0bff817 	ldw	r2,-32(fp)
 4011ffc:	10800317 	ldw	r2,12(r2)
 4012000:	e1ffff17 	ldw	r7,-4(fp)
 4012004:	e1bffe17 	ldw	r6,-8(fp)
 4012008:	e17ffd17 	ldw	r5,-12(fp)
 401200c:	e13ffc17 	ldw	r4,-16(fp)
 4012010:	103ee83a 	callr	r2
 4012014:	00000106 	br	401201c <open+0x108>
 4012018:	0005883a 	mov	r2,zero
 401201c:	e0bffa15 	stw	r2,-24(fp)
 4012020:	00000206 	br	401202c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4012024:	00bffb44 	movi	r2,-19
 4012028:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 401202c:	e0bffa17 	ldw	r2,-24(fp)
 4012030:	1000090e 	bge	r2,zero,4012058 <open+0x144>
  {
    alt_release_fd (index);  
 4012034:	e13ff917 	ldw	r4,-28(fp)
 4012038:	40103180 	call	4010318 <alt_release_fd>
    ALT_ERRNO = -status;
 401203c:	4011dec0 	call	4011dec <alt_get_errno>
 4012040:	1007883a 	mov	r3,r2
 4012044:	e0bffa17 	ldw	r2,-24(fp)
 4012048:	0085c83a 	sub	r2,zero,r2
 401204c:	18800015 	stw	r2,0(r3)
    return -1;
 4012050:	00bfffc4 	movi	r2,-1
 4012054:	00000106 	br	401205c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 4012058:	e0bff917 	ldw	r2,-28(fp)
}
 401205c:	e037883a 	mov	sp,fp
 4012060:	dfc00117 	ldw	ra,4(sp)
 4012064:	df000017 	ldw	fp,0(sp)
 4012068:	dec00204 	addi	sp,sp,8
 401206c:	f800283a 	ret

04012070 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4012070:	deffff04 	addi	sp,sp,-4
 4012074:	df000015 	stw	fp,0(sp)
 4012078:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 401207c:	000170fa 	wrctl	ienable,zero
}
 4012080:	0001883a 	nop
 4012084:	e037883a 	mov	sp,fp
 4012088:	df000017 	ldw	fp,0(sp)
 401208c:	dec00104 	addi	sp,sp,4
 4012090:	f800283a 	ret

04012094 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4012094:	defffa04 	addi	sp,sp,-24
 4012098:	dfc00515 	stw	ra,20(sp)
 401209c:	df000415 	stw	fp,16(sp)
 40120a0:	df000404 	addi	fp,sp,16
 40120a4:	e13ffe15 	stw	r4,-8(fp)
 40120a8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 40120ac:	e0bfff17 	ldw	r2,-4(fp)
 40120b0:	10800017 	ldw	r2,0(r2)
 40120b4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 40120b8:	e13ffe17 	ldw	r4,-8(fp)
 40120bc:	4002e680 	call	4002e68 <strlen>
 40120c0:	10800044 	addi	r2,r2,1
 40120c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 40120c8:	00000d06 	br	4012100 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 40120cc:	e0bffc17 	ldw	r2,-16(fp)
 40120d0:	10800217 	ldw	r2,8(r2)
 40120d4:	e0fffd17 	ldw	r3,-12(fp)
 40120d8:	180d883a 	mov	r6,r3
 40120dc:	e17ffe17 	ldw	r5,-8(fp)
 40120e0:	1009883a 	mov	r4,r2
 40120e4:	40123d80 	call	40123d8 <memcmp>
 40120e8:	1000021e 	bne	r2,zero,40120f4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 40120ec:	e0bffc17 	ldw	r2,-16(fp)
 40120f0:	00000706 	br	4012110 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 40120f4:	e0bffc17 	ldw	r2,-16(fp)
 40120f8:	10800017 	ldw	r2,0(r2)
 40120fc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4012100:	e0fffc17 	ldw	r3,-16(fp)
 4012104:	e0bfff17 	ldw	r2,-4(fp)
 4012108:	18bff01e 	bne	r3,r2,40120cc <__alt_data_end+0xfc0120cc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 401210c:	0005883a 	mov	r2,zero
}
 4012110:	e037883a 	mov	sp,fp
 4012114:	dfc00117 	ldw	ra,4(sp)
 4012118:	df000017 	ldw	fp,0(sp)
 401211c:	dec00204 	addi	sp,sp,8
 4012120:	f800283a 	ret

04012124 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4012124:	defffb04 	addi	sp,sp,-20
 4012128:	dfc00415 	stw	ra,16(sp)
 401212c:	df000315 	stw	fp,12(sp)
 4012130:	df000304 	addi	fp,sp,12
 4012134:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4012138:	d0a00a17 	ldw	r2,-32728(gp)
 401213c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4012140:	00003106 	br	4012208 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 4012144:	e0bffd17 	ldw	r2,-12(fp)
 4012148:	10800217 	ldw	r2,8(r2)
 401214c:	1009883a 	mov	r4,r2
 4012150:	4002e680 	call	4002e68 <strlen>
 4012154:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4012158:	e0bffd17 	ldw	r2,-12(fp)
 401215c:	10c00217 	ldw	r3,8(r2)
 4012160:	e0bffe17 	ldw	r2,-8(fp)
 4012164:	10bfffc4 	addi	r2,r2,-1
 4012168:	1885883a 	add	r2,r3,r2
 401216c:	10800003 	ldbu	r2,0(r2)
 4012170:	10803fcc 	andi	r2,r2,255
 4012174:	1080201c 	xori	r2,r2,128
 4012178:	10bfe004 	addi	r2,r2,-128
 401217c:	10800bd8 	cmpnei	r2,r2,47
 4012180:	1000031e 	bne	r2,zero,4012190 <alt_find_file+0x6c>
    {
      len -= 1;
 4012184:	e0bffe17 	ldw	r2,-8(fp)
 4012188:	10bfffc4 	addi	r2,r2,-1
 401218c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4012190:	e0bffe17 	ldw	r2,-8(fp)
 4012194:	e0ffff17 	ldw	r3,-4(fp)
 4012198:	1885883a 	add	r2,r3,r2
 401219c:	10800003 	ldbu	r2,0(r2)
 40121a0:	10803fcc 	andi	r2,r2,255
 40121a4:	1080201c 	xori	r2,r2,128
 40121a8:	10bfe004 	addi	r2,r2,-128
 40121ac:	10800be0 	cmpeqi	r2,r2,47
 40121b0:	1000081e 	bne	r2,zero,40121d4 <alt_find_file+0xb0>
 40121b4:	e0bffe17 	ldw	r2,-8(fp)
 40121b8:	e0ffff17 	ldw	r3,-4(fp)
 40121bc:	1885883a 	add	r2,r3,r2
 40121c0:	10800003 	ldbu	r2,0(r2)
 40121c4:	10803fcc 	andi	r2,r2,255
 40121c8:	1080201c 	xori	r2,r2,128
 40121cc:	10bfe004 	addi	r2,r2,-128
 40121d0:	10000a1e 	bne	r2,zero,40121fc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 40121d4:	e0bffd17 	ldw	r2,-12(fp)
 40121d8:	10800217 	ldw	r2,8(r2)
 40121dc:	e0fffe17 	ldw	r3,-8(fp)
 40121e0:	180d883a 	mov	r6,r3
 40121e4:	e17fff17 	ldw	r5,-4(fp)
 40121e8:	1009883a 	mov	r4,r2
 40121ec:	40123d80 	call	40123d8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 40121f0:	1000021e 	bne	r2,zero,40121fc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 40121f4:	e0bffd17 	ldw	r2,-12(fp)
 40121f8:	00000706 	br	4012218 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 40121fc:	e0bffd17 	ldw	r2,-12(fp)
 4012200:	10800017 	ldw	r2,0(r2)
 4012204:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4012208:	e0fffd17 	ldw	r3,-12(fp)
 401220c:	d0a00a04 	addi	r2,gp,-32728
 4012210:	18bfcc1e 	bne	r3,r2,4012144 <__alt_data_end+0xfc012144>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 4012214:	0005883a 	mov	r2,zero
}
 4012218:	e037883a 	mov	sp,fp
 401221c:	dfc00117 	ldw	ra,4(sp)
 4012220:	df000017 	ldw	fp,0(sp)
 4012224:	dec00204 	addi	sp,sp,8
 4012228:	f800283a 	ret

0401222c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 401222c:	defffa04 	addi	sp,sp,-24
 4012230:	dfc00515 	stw	ra,20(sp)
 4012234:	df000415 	stw	fp,16(sp)
 4012238:	dc000315 	stw	r16,12(sp)
 401223c:	df000404 	addi	fp,sp,16
 4012240:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 4012244:	00bffa04 	movi	r2,-24
 4012248:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 401224c:	e03ffc15 	stw	zero,-16(fp)
 4012250:	00001d06 	br	40122c8 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 4012254:	04010074 	movhi	r16,1025
 4012258:	840d5a04 	addi	r16,r16,13672
 401225c:	e0bffc17 	ldw	r2,-16(fp)
 4012260:	01400304 	movi	r5,12
 4012264:	1009883a 	mov	r4,r2
 4012268:	4002ce00 	call	4002ce0 <__mulsi3>
 401226c:	8085883a 	add	r2,r16,r2
 4012270:	10800017 	ldw	r2,0(r2)
 4012274:	1000111e 	bne	r2,zero,40122bc <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 4012278:	04010074 	movhi	r16,1025
 401227c:	840d5a04 	addi	r16,r16,13672
 4012280:	e0bffc17 	ldw	r2,-16(fp)
 4012284:	01400304 	movi	r5,12
 4012288:	1009883a 	mov	r4,r2
 401228c:	4002ce00 	call	4002ce0 <__mulsi3>
 4012290:	8085883a 	add	r2,r16,r2
 4012294:	e0fffe17 	ldw	r3,-8(fp)
 4012298:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 401229c:	d0e00e17 	ldw	r3,-32712(gp)
 40122a0:	e0bffc17 	ldw	r2,-16(fp)
 40122a4:	1880020e 	bge	r3,r2,40122b0 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 40122a8:	e0bffc17 	ldw	r2,-16(fp)
 40122ac:	d0a00e15 	stw	r2,-32712(gp)
      }
      rc = i;
 40122b0:	e0bffc17 	ldw	r2,-16(fp)
 40122b4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 40122b8:	00000606 	br	40122d4 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40122bc:	e0bffc17 	ldw	r2,-16(fp)
 40122c0:	10800044 	addi	r2,r2,1
 40122c4:	e0bffc15 	stw	r2,-16(fp)
 40122c8:	e0bffc17 	ldw	r2,-16(fp)
 40122cc:	10800810 	cmplti	r2,r2,32
 40122d0:	103fe01e 	bne	r2,zero,4012254 <__alt_data_end+0xfc012254>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 40122d4:	e0bffd17 	ldw	r2,-12(fp)
}
 40122d8:	e6ffff04 	addi	sp,fp,-4
 40122dc:	dfc00217 	ldw	ra,8(sp)
 40122e0:	df000117 	ldw	fp,4(sp)
 40122e4:	dc000017 	ldw	r16,0(sp)
 40122e8:	dec00304 	addi	sp,sp,12
 40122ec:	f800283a 	ret

040122f0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 40122f0:	defffe04 	addi	sp,sp,-8
 40122f4:	df000115 	stw	fp,4(sp)
 40122f8:	df000104 	addi	fp,sp,4
 40122fc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 4012300:	e0bfff17 	ldw	r2,-4(fp)
 4012304:	10bffe84 	addi	r2,r2,-6
 4012308:	10c00428 	cmpgeui	r3,r2,16
 401230c:	18001a1e 	bne	r3,zero,4012378 <alt_exception_cause_generated_bad_addr+0x88>
 4012310:	100690ba 	slli	r3,r2,2
 4012314:	00810074 	movhi	r2,1025
 4012318:	1088ca04 	addi	r2,r2,9000
 401231c:	1885883a 	add	r2,r3,r2
 4012320:	10800017 	ldw	r2,0(r2)
 4012324:	1000683a 	jmp	r2
 4012328:	04012368 	cmpgeui	r16,zero,1165
 401232c:	04012368 	cmpgeui	r16,zero,1165
 4012330:	04012378 	rdprs	r16,zero,1165
 4012334:	04012378 	rdprs	r16,zero,1165
 4012338:	04012378 	rdprs	r16,zero,1165
 401233c:	04012368 	cmpgeui	r16,zero,1165
 4012340:	04012370 	cmpltui	r16,zero,1165
 4012344:	04012378 	rdprs	r16,zero,1165
 4012348:	04012368 	cmpgeui	r16,zero,1165
 401234c:	04012368 	cmpgeui	r16,zero,1165
 4012350:	04012378 	rdprs	r16,zero,1165
 4012354:	04012368 	cmpgeui	r16,zero,1165
 4012358:	04012370 	cmpltui	r16,zero,1165
 401235c:	04012378 	rdprs	r16,zero,1165
 4012360:	04012378 	rdprs	r16,zero,1165
 4012364:	04012368 	cmpgeui	r16,zero,1165
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4012368:	00800044 	movi	r2,1
 401236c:	00000306 	br	401237c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4012370:	0005883a 	mov	r2,zero
 4012374:	00000106 	br	401237c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 4012378:	0005883a 	mov	r2,zero
  }
}
 401237c:	e037883a 	mov	sp,fp
 4012380:	df000017 	ldw	fp,0(sp)
 4012384:	dec00104 	addi	sp,sp,4
 4012388:	f800283a 	ret

0401238c <atexit>:
 401238c:	200b883a 	mov	r5,r4
 4012390:	000f883a 	mov	r7,zero
 4012394:	000d883a 	mov	r6,zero
 4012398:	0009883a 	mov	r4,zero
 401239c:	40124541 	jmpi	4012454 <__register_exitproc>

040123a0 <exit>:
 40123a0:	defffe04 	addi	sp,sp,-8
 40123a4:	000b883a 	mov	r5,zero
 40123a8:	dc000015 	stw	r16,0(sp)
 40123ac:	dfc00115 	stw	ra,4(sp)
 40123b0:	2021883a 	mov	r16,r4
 40123b4:	401256c0 	call	401256c <__call_exitprocs>
 40123b8:	00810074 	movhi	r2,1025
 40123bc:	1091d604 	addi	r2,r2,18264
 40123c0:	11000017 	ldw	r4,0(r2)
 40123c4:	20800f17 	ldw	r2,60(r4)
 40123c8:	10000126 	beq	r2,zero,40123d0 <exit+0x30>
 40123cc:	103ee83a 	callr	r2
 40123d0:	8009883a 	mov	r4,r16
 40123d4:	40126ec0 	call	40126ec <_exit>

040123d8 <memcmp>:
 40123d8:	01c000c4 	movi	r7,3
 40123dc:	3980192e 	bgeu	r7,r6,4012444 <memcmp+0x6c>
 40123e0:	2144b03a 	or	r2,r4,r5
 40123e4:	11c4703a 	and	r2,r2,r7
 40123e8:	10000f26 	beq	r2,zero,4012428 <memcmp+0x50>
 40123ec:	20800003 	ldbu	r2,0(r4)
 40123f0:	28c00003 	ldbu	r3,0(r5)
 40123f4:	10c0151e 	bne	r2,r3,401244c <memcmp+0x74>
 40123f8:	31bfff84 	addi	r6,r6,-2
 40123fc:	01ffffc4 	movi	r7,-1
 4012400:	00000406 	br	4012414 <memcmp+0x3c>
 4012404:	20800003 	ldbu	r2,0(r4)
 4012408:	28c00003 	ldbu	r3,0(r5)
 401240c:	31bfffc4 	addi	r6,r6,-1
 4012410:	10c00e1e 	bne	r2,r3,401244c <memcmp+0x74>
 4012414:	21000044 	addi	r4,r4,1
 4012418:	29400044 	addi	r5,r5,1
 401241c:	31fff91e 	bne	r6,r7,4012404 <__alt_data_end+0xfc012404>
 4012420:	0005883a 	mov	r2,zero
 4012424:	f800283a 	ret
 4012428:	20c00017 	ldw	r3,0(r4)
 401242c:	28800017 	ldw	r2,0(r5)
 4012430:	18bfee1e 	bne	r3,r2,40123ec <__alt_data_end+0xfc0123ec>
 4012434:	31bfff04 	addi	r6,r6,-4
 4012438:	21000104 	addi	r4,r4,4
 401243c:	29400104 	addi	r5,r5,4
 4012440:	39bff936 	bltu	r7,r6,4012428 <__alt_data_end+0xfc012428>
 4012444:	303fe91e 	bne	r6,zero,40123ec <__alt_data_end+0xfc0123ec>
 4012448:	003ff506 	br	4012420 <__alt_data_end+0xfc012420>
 401244c:	10c5c83a 	sub	r2,r2,r3
 4012450:	f800283a 	ret

04012454 <__register_exitproc>:
 4012454:	defffa04 	addi	sp,sp,-24
 4012458:	dc000315 	stw	r16,12(sp)
 401245c:	04010074 	movhi	r16,1025
 4012460:	8411d604 	addi	r16,r16,18264
 4012464:	80c00017 	ldw	r3,0(r16)
 4012468:	dc400415 	stw	r17,16(sp)
 401246c:	dfc00515 	stw	ra,20(sp)
 4012470:	18805217 	ldw	r2,328(r3)
 4012474:	2023883a 	mov	r17,r4
 4012478:	10003726 	beq	r2,zero,4012558 <__register_exitproc+0x104>
 401247c:	10c00117 	ldw	r3,4(r2)
 4012480:	010007c4 	movi	r4,31
 4012484:	20c00e16 	blt	r4,r3,40124c0 <__register_exitproc+0x6c>
 4012488:	1a000044 	addi	r8,r3,1
 401248c:	8800221e 	bne	r17,zero,4012518 <__register_exitproc+0xc4>
 4012490:	18c00084 	addi	r3,r3,2
 4012494:	18c7883a 	add	r3,r3,r3
 4012498:	18c7883a 	add	r3,r3,r3
 401249c:	12000115 	stw	r8,4(r2)
 40124a0:	10c7883a 	add	r3,r2,r3
 40124a4:	19400015 	stw	r5,0(r3)
 40124a8:	0005883a 	mov	r2,zero
 40124ac:	dfc00517 	ldw	ra,20(sp)
 40124b0:	dc400417 	ldw	r17,16(sp)
 40124b4:	dc000317 	ldw	r16,12(sp)
 40124b8:	dec00604 	addi	sp,sp,24
 40124bc:	f800283a 	ret
 40124c0:	00800034 	movhi	r2,0
 40124c4:	10800004 	addi	r2,r2,0
 40124c8:	10002626 	beq	r2,zero,4012564 <__register_exitproc+0x110>
 40124cc:	01006404 	movi	r4,400
 40124d0:	d9400015 	stw	r5,0(sp)
 40124d4:	d9800115 	stw	r6,4(sp)
 40124d8:	d9c00215 	stw	r7,8(sp)
 40124dc:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 40124e0:	d9400017 	ldw	r5,0(sp)
 40124e4:	d9800117 	ldw	r6,4(sp)
 40124e8:	d9c00217 	ldw	r7,8(sp)
 40124ec:	10001d26 	beq	r2,zero,4012564 <__register_exitproc+0x110>
 40124f0:	81000017 	ldw	r4,0(r16)
 40124f4:	10000115 	stw	zero,4(r2)
 40124f8:	02000044 	movi	r8,1
 40124fc:	22405217 	ldw	r9,328(r4)
 4012500:	0007883a 	mov	r3,zero
 4012504:	12400015 	stw	r9,0(r2)
 4012508:	20805215 	stw	r2,328(r4)
 401250c:	10006215 	stw	zero,392(r2)
 4012510:	10006315 	stw	zero,396(r2)
 4012514:	883fde26 	beq	r17,zero,4012490 <__alt_data_end+0xfc012490>
 4012518:	18c9883a 	add	r4,r3,r3
 401251c:	2109883a 	add	r4,r4,r4
 4012520:	1109883a 	add	r4,r2,r4
 4012524:	21802215 	stw	r6,136(r4)
 4012528:	01800044 	movi	r6,1
 401252c:	12406217 	ldw	r9,392(r2)
 4012530:	30cc983a 	sll	r6,r6,r3
 4012534:	4992b03a 	or	r9,r9,r6
 4012538:	12406215 	stw	r9,392(r2)
 401253c:	21c04215 	stw	r7,264(r4)
 4012540:	01000084 	movi	r4,2
 4012544:	893fd21e 	bne	r17,r4,4012490 <__alt_data_end+0xfc012490>
 4012548:	11006317 	ldw	r4,396(r2)
 401254c:	218cb03a 	or	r6,r4,r6
 4012550:	11806315 	stw	r6,396(r2)
 4012554:	003fce06 	br	4012490 <__alt_data_end+0xfc012490>
 4012558:	18805304 	addi	r2,r3,332
 401255c:	18805215 	stw	r2,328(r3)
 4012560:	003fc606 	br	401247c <__alt_data_end+0xfc01247c>
 4012564:	00bfffc4 	movi	r2,-1
 4012568:	003fd006 	br	40124ac <__alt_data_end+0xfc0124ac>

0401256c <__call_exitprocs>:
 401256c:	defff504 	addi	sp,sp,-44
 4012570:	df000915 	stw	fp,36(sp)
 4012574:	dd400615 	stw	r21,24(sp)
 4012578:	dc800315 	stw	r18,12(sp)
 401257c:	dfc00a15 	stw	ra,40(sp)
 4012580:	ddc00815 	stw	r23,32(sp)
 4012584:	dd800715 	stw	r22,28(sp)
 4012588:	dd000515 	stw	r20,20(sp)
 401258c:	dcc00415 	stw	r19,16(sp)
 4012590:	dc400215 	stw	r17,8(sp)
 4012594:	dc000115 	stw	r16,4(sp)
 4012598:	d9000015 	stw	r4,0(sp)
 401259c:	2839883a 	mov	fp,r5
 40125a0:	04800044 	movi	r18,1
 40125a4:	057fffc4 	movi	r21,-1
 40125a8:	00810074 	movhi	r2,1025
 40125ac:	1091d604 	addi	r2,r2,18264
 40125b0:	12000017 	ldw	r8,0(r2)
 40125b4:	45005217 	ldw	r20,328(r8)
 40125b8:	44c05204 	addi	r19,r8,328
 40125bc:	a0001c26 	beq	r20,zero,4012630 <__call_exitprocs+0xc4>
 40125c0:	a0800117 	ldw	r2,4(r20)
 40125c4:	15ffffc4 	addi	r23,r2,-1
 40125c8:	b8000d16 	blt	r23,zero,4012600 <__call_exitprocs+0x94>
 40125cc:	14000044 	addi	r16,r2,1
 40125d0:	8421883a 	add	r16,r16,r16
 40125d4:	8421883a 	add	r16,r16,r16
 40125d8:	84402004 	addi	r17,r16,128
 40125dc:	a463883a 	add	r17,r20,r17
 40125e0:	a421883a 	add	r16,r20,r16
 40125e4:	e0001e26 	beq	fp,zero,4012660 <__call_exitprocs+0xf4>
 40125e8:	80804017 	ldw	r2,256(r16)
 40125ec:	e0801c26 	beq	fp,r2,4012660 <__call_exitprocs+0xf4>
 40125f0:	bdffffc4 	addi	r23,r23,-1
 40125f4:	843fff04 	addi	r16,r16,-4
 40125f8:	8c7fff04 	addi	r17,r17,-4
 40125fc:	bd7ff91e 	bne	r23,r21,40125e4 <__alt_data_end+0xfc0125e4>
 4012600:	00800034 	movhi	r2,0
 4012604:	10800004 	addi	r2,r2,0
 4012608:	10000926 	beq	r2,zero,4012630 <__call_exitprocs+0xc4>
 401260c:	a0800117 	ldw	r2,4(r20)
 4012610:	1000301e 	bne	r2,zero,40126d4 <__call_exitprocs+0x168>
 4012614:	a0800017 	ldw	r2,0(r20)
 4012618:	10003226 	beq	r2,zero,40126e4 <__call_exitprocs+0x178>
 401261c:	a009883a 	mov	r4,r20
 4012620:	98800015 	stw	r2,0(r19)
 4012624:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 4012628:	9d000017 	ldw	r20,0(r19)
 401262c:	a03fe41e 	bne	r20,zero,40125c0 <__alt_data_end+0xfc0125c0>
 4012630:	dfc00a17 	ldw	ra,40(sp)
 4012634:	df000917 	ldw	fp,36(sp)
 4012638:	ddc00817 	ldw	r23,32(sp)
 401263c:	dd800717 	ldw	r22,28(sp)
 4012640:	dd400617 	ldw	r21,24(sp)
 4012644:	dd000517 	ldw	r20,20(sp)
 4012648:	dcc00417 	ldw	r19,16(sp)
 401264c:	dc800317 	ldw	r18,12(sp)
 4012650:	dc400217 	ldw	r17,8(sp)
 4012654:	dc000117 	ldw	r16,4(sp)
 4012658:	dec00b04 	addi	sp,sp,44
 401265c:	f800283a 	ret
 4012660:	a0800117 	ldw	r2,4(r20)
 4012664:	80c00017 	ldw	r3,0(r16)
 4012668:	10bfffc4 	addi	r2,r2,-1
 401266c:	15c01426 	beq	r2,r23,40126c0 <__call_exitprocs+0x154>
 4012670:	80000015 	stw	zero,0(r16)
 4012674:	183fde26 	beq	r3,zero,40125f0 <__alt_data_end+0xfc0125f0>
 4012678:	95c8983a 	sll	r4,r18,r23
 401267c:	a0806217 	ldw	r2,392(r20)
 4012680:	a5800117 	ldw	r22,4(r20)
 4012684:	2084703a 	and	r2,r4,r2
 4012688:	10000b26 	beq	r2,zero,40126b8 <__call_exitprocs+0x14c>
 401268c:	a0806317 	ldw	r2,396(r20)
 4012690:	2088703a 	and	r4,r4,r2
 4012694:	20000c1e 	bne	r4,zero,40126c8 <__call_exitprocs+0x15c>
 4012698:	89400017 	ldw	r5,0(r17)
 401269c:	d9000017 	ldw	r4,0(sp)
 40126a0:	183ee83a 	callr	r3
 40126a4:	a0800117 	ldw	r2,4(r20)
 40126a8:	15bfbf1e 	bne	r2,r22,40125a8 <__alt_data_end+0xfc0125a8>
 40126ac:	98800017 	ldw	r2,0(r19)
 40126b0:	153fcf26 	beq	r2,r20,40125f0 <__alt_data_end+0xfc0125f0>
 40126b4:	003fbc06 	br	40125a8 <__alt_data_end+0xfc0125a8>
 40126b8:	183ee83a 	callr	r3
 40126bc:	003ff906 	br	40126a4 <__alt_data_end+0xfc0126a4>
 40126c0:	a5c00115 	stw	r23,4(r20)
 40126c4:	003feb06 	br	4012674 <__alt_data_end+0xfc012674>
 40126c8:	89000017 	ldw	r4,0(r17)
 40126cc:	183ee83a 	callr	r3
 40126d0:	003ff406 	br	40126a4 <__alt_data_end+0xfc0126a4>
 40126d4:	a0800017 	ldw	r2,0(r20)
 40126d8:	a027883a 	mov	r19,r20
 40126dc:	1029883a 	mov	r20,r2
 40126e0:	003fb606 	br	40125bc <__alt_data_end+0xfc0125bc>
 40126e4:	0005883a 	mov	r2,zero
 40126e8:	003ffb06 	br	40126d8 <__alt_data_end+0xfc0126d8>

040126ec <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 40126ec:	defffd04 	addi	sp,sp,-12
 40126f0:	df000215 	stw	fp,8(sp)
 40126f4:	df000204 	addi	fp,sp,8
 40126f8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 40126fc:	0001883a 	nop
 4012700:	e0bfff17 	ldw	r2,-4(fp)
 4012704:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4012708:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 401270c:	10000226 	beq	r2,zero,4012718 <_exit+0x2c>
    ALT_SIM_FAIL();
 4012710:	002af070 	cmpltui	zero,zero,43969
 4012714:	00000106 	br	401271c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 4012718:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 401271c:	003fff06 	br	401271c <__alt_data_end+0xfc01271c>
