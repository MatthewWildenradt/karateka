//Two-always example for state machine

module enemy_key (input  logic Clk,
					 output  logic [7:0] keycode,
					 );
					
	 logic [7:0] keycode,	
	
	 // Cutting clock in half repeatedely 
	 logic clkdiv0, clkdiv1, clkdiv2, clkdiv3, clkdiv4, clkdiv5, clkdiv6, clkdiv7, clkdiv8, clkdiv9, clkdiv10, clkdiv11, clkdiv12;
	 
	 always_ff @ (posedge Clk)
    begin 
        clkdiv0 <= ~ (clkdiv0);
    end
	 
	 always_ff @ (posedge clkdiv0)
    begin 
        clkdiv1 <= ~ (clkdiv1);
    end
	 
	 always_ff @ (posedge clkdiv1)
    begin 
        clkdiv2 <= ~ (clkdiv2);
    end
	 
	 always_ff @ (posedge clkdiv2)
    begin 
        clkdiv3 <= ~ (clkdiv3);
    end
	 
	 always_ff @ (posedge clkdiv3)
    begin 
        clkdiv4 <= ~ (clkdiv4);
    end
	 
	 always_ff @ (posedge clkdiv4)
    begin 
        clkdiv5 <= ~ (clkdiv5);
    end
	 
	 always_ff @ (posedge clkdiv5)
    begin 
        clkdiv6 <= ~ (clkdiv6);
    end
	 
	 always_ff @ (posedge clkdiv6)
    begin 
        clkdiv7 <= ~ (clkdiv7);
    end
	 
	 always_ff @ (posedge clkdiv7)
    begin 
        clkdiv8 <= ~ (clkdiv8);
    end
	 
	 always_ff @ (posedge clkdiv8)
    begin 
        clkdiv9 <= ~ (clkdiv9);
    end
	 
	 always_ff @ (posedge clkdiv9)
    begin 
        clkdiv10 <= ~ (clkdiv10);
    end
	 
	 always_ff @ (posedge clkdiv10)
    begin 
        clkdiv11 <= ~ (clkdiv11);
    end
	 
	 always_ff @ (posedge clkdiv11)
    begin 
        clkdiv12 <= ~ (clkdiv12);
    end

	//updates flip flop, current state is the only one
    always_ff @ (posedge clkdiv12)  
    begin
        if ( (keycode==8'h04) )
				keycode<=8'h07;			
        else 
            keycode<=8'h04;
    end

endmodule
